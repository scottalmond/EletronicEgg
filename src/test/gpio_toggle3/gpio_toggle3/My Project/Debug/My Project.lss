
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010558  2**0
                  CONTENTS
  2 .lpram        00000000  30000000  30000000  00010558  2**0
                  CONTENTS
  3 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00000800  20000020  20000020  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010580  2**0
                  CONTENTS, READONLY
  7 .debug_info   00006aca  00000000  00000000  000105d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000161f  00000000  00000000  000170a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001451  00000000  00000000  000186c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000260  00000000  00000000  00019b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000260  00000000  00000000  00019d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00018bd9  00000000  00000000  00019fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000089fa  00000000  00000000  00032bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00088208  00000000  00000000  0003b5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000003c8  00000000  00000000  000c37b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 08 00 20 25 01 00 00 21 01 00 00 21 01 00 00      .. %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	00000558 	.word	0x00000558

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	00000558 	.word	0x00000558
 10c:	00000558 	.word	0x00000558
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	000001d1 	.word	0x000001d1

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
 128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
 146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
 154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
 17c:	6853      	ldr	r3, [r2, #4]
 17e:	397f      	subs	r1, #127	; 0x7f
 180:	430b      	orrs	r3, r1
 182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
 186:	4798      	blx	r3
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	00000558 	.word	0x00000558
 194:	20000000 	.word	0x20000000
 198:	20000000 	.word	0x20000000
 19c:	20000004 	.word	0x20000004
 1a0:	20000000 	.word	0x20000000
 1a4:	20000020 	.word	0x20000020
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	00000000 	.word	0x00000000
 1b0:	41004000 	.word	0x41004000
 1b4:	000004f1 	.word	0x000004f1
 1b8:	000004e5 	.word	0x000004e5

000001bc <delay_driver_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void delay_driver_init(void)
{
 1bc:	b510      	push	{r4, lr}
	delay_init(SysTick);
 1be:	4802      	ldr	r0, [pc, #8]	; (1c8 <delay_driver_init+0xc>)
 1c0:	4b02      	ldr	r3, [pc, #8]	; (1cc <delay_driver_init+0x10>)
 1c2:	4798      	blx	r3
}
 1c4:	bd10      	pop	{r4, pc}
 1c6:	46c0      	nop			; (mov r8, r8)
 1c8:	e000e010 	.word	0xe000e010
 1cc:	00000349 	.word	0x00000349

000001d0 <system_init>:

void system_init(void)
{
 1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 1d2:	46de      	mov	lr, fp
 1d4:	4657      	mov	r7, sl
 1d6:	464e      	mov	r6, r9
 1d8:	4645      	mov	r5, r8
 1da:	b5e0      	push	{r5, r6, r7, lr}
 1dc:	b083      	sub	sp, #12
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 1de:	4b51      	ldr	r3, [pc, #324]	; (324 <system_init+0x154>)
 1e0:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 1e2:	22c0      	movs	r2, #192	; 0xc0
 1e4:	05d2      	lsls	r2, r2, #23
 1e6:	2788      	movs	r7, #136	; 0x88
 1e8:	2480      	movs	r4, #128	; 0x80
 1ea:	03e4      	lsls	r4, r4, #15
 1ec:	51d4      	str	r4, [r2, r7]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 1ee:	4b4e      	ldr	r3, [pc, #312]	; (328 <system_init+0x158>)
 1f0:	21a8      	movs	r1, #168	; 0xa8
 1f2:	2080      	movs	r0, #128	; 0x80
 1f4:	05c0      	lsls	r0, r0, #23
 1f6:	5058      	str	r0, [r3, r1]
 1f8:	4d4c      	ldr	r5, [pc, #304]	; (32c <system_init+0x15c>)
 1fa:	505d      	str	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 1fc:	2598      	movs	r5, #152	; 0x98
 1fe:	46a9      	mov	r9, r5
 200:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 202:	24d6      	movs	r4, #214	; 0xd6
 204:	46a4      	mov	ip, r4
 206:	5d1c      	ldrb	r4, [r3, r4]
 208:	3d94      	subs	r5, #148	; 0x94
 20a:	46aa      	mov	sl, r5
 20c:	43ac      	bics	r4, r5
 20e:	4665      	mov	r5, ip
 210:	555c      	strb	r4, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 212:	5d5c      	ldrb	r4, [r3, r5]
 214:	46a0      	mov	r8, r4
	tmp &= ~PORT_PINCFG_PMUXEN;
 216:	2401      	movs	r4, #1
 218:	4645      	mov	r5, r8
 21a:	43a5      	bics	r5, r4
 21c:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 21e:	4665      	mov	r5, ip
 220:	4646      	mov	r6, r8
 222:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 224:	2580      	movs	r5, #128	; 0x80
 226:	042d      	lsls	r5, r5, #16
 228:	46ac      	mov	ip, r5
 22a:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 22c:	5058      	str	r0, [r3, r1]
 22e:	4d40      	ldr	r5, [pc, #256]	; (330 <system_init+0x160>)
 230:	505d      	str	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 232:	4665      	mov	r5, ip
 234:	464e      	mov	r6, r9
 236:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 238:	25d7      	movs	r5, #215	; 0xd7
 23a:	46ac      	mov	ip, r5
 23c:	5d5d      	ldrb	r5, [r3, r5]
 23e:	4656      	mov	r6, sl
 240:	43b5      	bics	r5, r6
 242:	46a8      	mov	r8, r5
 244:	4665      	mov	r5, ip
 246:	4646      	mov	r6, r8
 248:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 24a:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 24c:	43a5      	bics	r5, r4
 24e:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 250:	4665      	mov	r5, ip
 252:	4646      	mov	r6, r8
 254:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 256:	51d0      	str	r0, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 258:	5058      	str	r0, [r3, r1]
 25a:	4d36      	ldr	r5, [pc, #216]	; (334 <system_init+0x164>)
 25c:	505d      	str	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 25e:	464d      	mov	r5, r9
 260:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 262:	3546      	adds	r5, #70	; 0x46
 264:	46ac      	mov	ip, r5
 266:	5d5d      	ldrb	r5, [r3, r5]
 268:	4656      	mov	r6, sl
 26a:	43b5      	bics	r5, r6
 26c:	46a8      	mov	r8, r5
 26e:	4665      	mov	r5, ip
 270:	4646      	mov	r6, r8
 272:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 274:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
 276:	43a5      	bics	r5, r4
 278:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 27a:	4665      	mov	r5, ip
 27c:	4646      	mov	r6, r8
 27e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 280:	2580      	movs	r5, #128	; 0x80
 282:	062d      	lsls	r5, r5, #24
 284:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 286:	5058      	str	r0, [r3, r1]
 288:	482b      	ldr	r0, [pc, #172]	; (338 <system_init+0x168>)
 28a:	5058      	str	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 28c:	4648      	mov	r0, r9
 28e:	5015      	str	r5, [r2, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 290:	21df      	movs	r1, #223	; 0xdf
 292:	5c58      	ldrb	r0, [r3, r1]
 294:	4655      	mov	r5, sl
 296:	43a8      	bics	r0, r5
 298:	5458      	strb	r0, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 29a:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 29c:	43a0      	bics	r0, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 29e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 2a0:	2080      	movs	r0, #128	; 0x80
 2a2:	01c0      	lsls	r0, r0, #7
 2a4:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 2a6:	4925      	ldr	r1, [pc, #148]	; (33c <system_init+0x16c>)
 2a8:	6299      	str	r1, [r3, #40]	; 0x28
 2aa:	21c0      	movs	r1, #192	; 0xc0
 2ac:	0609      	lsls	r1, r1, #24
 2ae:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 2b0:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
 2b2:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
 2b4:	214e      	movs	r1, #78	; 0x4e
 2b6:	5c5d      	ldrb	r5, [r3, r1]
 2b8:	2604      	movs	r6, #4
 2ba:	4335      	orrs	r5, r6
 2bc:	545d      	strb	r5, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 2be:	6190      	str	r0, [r2, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 2c0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 2c2:	43a2      	bics	r2, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 2c4:	545a      	strb	r2, [r3, r1]
		// <GPIO_PIN_FUNCTION_G"> G
		// <GPIO_PIN_FUNCTION_H"> H
		// <GPIO_PIN_FUNCTION_I"> I
		GPIO_PIN_FUNCTION_OFF);

	delay_driver_init();
 2c6:	4b1e      	ldr	r3, [pc, #120]	; (340 <system_init+0x170>)
 2c8:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2ca:	24c0      	movs	r4, #192	; 0xc0
 2cc:	05e4      	lsls	r4, r4, #23
 2ce:	2380      	movs	r3, #128	; 0x80
 2d0:	01db      	lsls	r3, r3, #7
 2d2:	9301      	str	r3, [sp, #4]
 2d4:	2694      	movs	r6, #148	; 0x94
 2d6:	2380      	movs	r3, #128	; 0x80
 2d8:	03db      	lsls	r3, r3, #15
 2da:	469b      	mov	fp, r3
 2dc:	51a3      	str	r3, [r4, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 2de:	2598      	movs	r5, #152	; 0x98
 2e0:	2380      	movs	r3, #128	; 0x80
 2e2:	041b      	lsls	r3, r3, #16
 2e4:	469a      	mov	sl, r3
 2e6:	5163      	str	r3, [r4, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 2e8:	2380      	movs	r3, #128	; 0x80
 2ea:	05db      	lsls	r3, r3, #23
 2ec:	4699      	mov	r9, r3
 2ee:	51a3      	str	r3, [r4, r6]
 2f0:	2380      	movs	r3, #128	; 0x80
 2f2:	061b      	lsls	r3, r3, #24
 2f4:	4698      	mov	r8, r3
 2f6:	51a3      	str	r3, [r4, r6]
 2f8:	9b01      	ldr	r3, [sp, #4]
 2fa:	6163      	str	r3, [r4, #20]
			gpio_set_pin_level(PB22,iter>0);
			gpio_set_pin_level(PB23,iter<1);
			gpio_set_pin_level(PB30,iter>0);
			gpio_set_pin_level(PB31,iter>0);
			gpio_set_pin_level(PA14,iter>0);
			delay_ms(2000);
 2fc:	20fa      	movs	r0, #250	; 0xfa
 2fe:	00c0      	lsls	r0, r0, #3
 300:	4f10      	ldr	r7, [pc, #64]	; (344 <system_init+0x174>)
 302:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 304:	465b      	mov	r3, fp
 306:	5163      	str	r3, [r4, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 308:	4653      	mov	r3, sl
 30a:	51a3      	str	r3, [r4, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
 30c:	464b      	mov	r3, r9
 30e:	5163      	str	r3, [r4, r5]
 310:	4643      	mov	r3, r8
 312:	5163      	str	r3, [r4, r5]
 314:	2380      	movs	r3, #128	; 0x80
 316:	01db      	lsls	r3, r3, #7
 318:	61a3      	str	r3, [r4, #24]
 31a:	20fa      	movs	r0, #250	; 0xfa
 31c:	00c0      	lsls	r0, r0, #3
 31e:	47b8      	blx	r7
 320:	e7d8      	b.n	2d4 <system_init+0x104>
 322:	46c0      	nop			; (mov r8, r8)
 324:	00000385 	.word	0x00000385
 328:	40002800 	.word	0x40002800
 32c:	c0000040 	.word	0xc0000040
 330:	c0000080 	.word	0xc0000080
 334:	c0004000 	.word	0xc0004000
 338:	c0008000 	.word	0xc0008000
 33c:	40004000 	.word	0x40004000
 340:	000001bd 	.word	0x000001bd
 344:	0000035d 	.word	0x0000035d

00000348 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 348:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 34a:	4b02      	ldr	r3, [pc, #8]	; (354 <delay_init+0xc>)
 34c:	6018      	str	r0, [r3, #0]
 34e:	4b02      	ldr	r3, [pc, #8]	; (358 <delay_init+0x10>)
 350:	4798      	blx	r3
}
 352:	bd10      	pop	{r4, pc}
 354:	2000001c 	.word	0x2000001c
 358:	0000047d 	.word	0x0000047d

0000035c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 35c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 35e:	4b04      	ldr	r3, [pc, #16]	; (370 <delay_ms+0x14>)
 360:	681c      	ldr	r4, [r3, #0]
 362:	4b04      	ldr	r3, [pc, #16]	; (374 <delay_ms+0x18>)
 364:	4798      	blx	r3
 366:	0001      	movs	r1, r0
 368:	0020      	movs	r0, r4
 36a:	4b03      	ldr	r3, [pc, #12]	; (378 <delay_ms+0x1c>)
 36c:	4798      	blx	r3
}
 36e:	bd10      	pop	{r4, pc}
 370:	2000001c 	.word	0x2000001c
 374:	0000037d 	.word	0x0000037d
 378:	00000491 	.word	0x00000491

0000037c <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
 37c:	23fa      	movs	r3, #250	; 0xfa
 37e:	011b      	lsls	r3, r3, #4
 380:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 382:	4770      	bx	lr

00000384 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 384:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 386:	4b09      	ldr	r3, [pc, #36]	; (3ac <_init_chip+0x28>)
 388:	685a      	ldr	r2, [r3, #4]
 38a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 38c:	2002      	movs	r0, #2
 38e:	4b08      	ldr	r3, [pc, #32]	; (3b0 <_init_chip+0x2c>)
 390:	4798      	blx	r3

	_osc32kctrl_init_sources();
 392:	4b08      	ldr	r3, [pc, #32]	; (3b4 <_init_chip+0x30>)
 394:	4798      	blx	r3
	_oscctrl_init_sources();
 396:	4b08      	ldr	r3, [pc, #32]	; (3b8 <_init_chip+0x34>)
 398:	4798      	blx	r3
	_mclk_init();
 39a:	4b08      	ldr	r3, [pc, #32]	; (3bc <_init_chip+0x38>)
 39c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 39e:	4b08      	ldr	r3, [pc, #32]	; (3c0 <_init_chip+0x3c>)
 3a0:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 3a2:	20ff      	movs	r0, #255	; 0xff
 3a4:	4b07      	ldr	r3, [pc, #28]	; (3c4 <_init_chip+0x40>)
 3a6:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 3a8:	bd10      	pop	{r4, pc}
 3aa:	46c0      	nop			; (mov r8, r8)
 3ac:	41004000 	.word	0x41004000
 3b0:	00000453 	.word	0x00000453
 3b4:	00000401 	.word	0x00000401
 3b8:	00000419 	.word	0x00000419
 3bc:	000003ed 	.word	0x000003ed
 3c0:	00000451 	.word	0x00000451
 3c4:	000003c9 	.word	0x000003c9

000003c8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 3c8:	07c3      	lsls	r3, r0, #31
 3ca:	d507      	bpl.n	3dc <_gclk_init_generators_by_fref+0x14>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 3cc:	4a04      	ldr	r2, [pc, #16]	; (3e0 <_gclk_init_generators_by_fref+0x18>)
 3ce:	4b05      	ldr	r3, [pc, #20]	; (3e4 <_gclk_init_generators_by_fref+0x1c>)
 3d0:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 3d2:	0019      	movs	r1, r3
 3d4:	4a04      	ldr	r2, [pc, #16]	; (3e8 <_gclk_init_generators_by_fref+0x20>)
 3d6:	684b      	ldr	r3, [r1, #4]
 3d8:	4213      	tst	r3, r2
 3da:	d1fc      	bne.n	3d6 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 3dc:	4770      	bx	lr
 3de:	46c0      	nop			; (mov r8, r8)
 3e0:	00010106 	.word	0x00010106
 3e4:	40001800 	.word	0x40001800
 3e8:	000007fd 	.word	0x000007fd

000003ec <_mclk_init>:
}

static inline void hri_mclk_write_BUPDIV_reg(const void *const hw, hri_mclk_bupdiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->BUPDIV.reg = data;
 3ec:	4b03      	ldr	r3, [pc, #12]	; (3fc <_mclk_init+0x10>)
 3ee:	2208      	movs	r2, #8
 3f0:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 3f2:	3a04      	subs	r2, #4
 3f4:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 3f6:	3a03      	subs	r2, #3
 3f8:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 3fa:	4770      	bx	lr
 3fc:	40000400 	.word	0x40000400

00000400 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 400:	4b04      	ldr	r3, [pc, #16]	; (414 <_osc32kctrl_init_sources+0x14>)
 402:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 404:	21f8      	movs	r1, #248	; 0xf8
 406:	0149      	lsls	r1, r1, #5
 408:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 40a:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 40c:	2201      	movs	r2, #1
 40e:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 410:	4770      	bx	lr
 412:	46c0      	nop			; (mov r8, r8)
 414:	40001000 	.word	0x40001000

00000418 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 418:	2282      	movs	r2, #130	; 0x82
 41a:	4b0c      	ldr	r3, [pc, #48]	; (44c <_oscctrl_init_sources+0x34>)
 41c:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 41e:	0018      	movs	r0, r3
 420:	2138      	movs	r1, #56	; 0x38
 422:	3a80      	subs	r2, #128	; 0x80
 424:	5c43      	ldrb	r3, [r0, r1]
 426:	4213      	tst	r3, r2
 428:	d1fc      	bne.n	424 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 42a:	4908      	ldr	r1, [pc, #32]	; (44c <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 42c:	2210      	movs	r2, #16
 42e:	68cb      	ldr	r3, [r1, #12]
 430:	421a      	tst	r2, r3
 432:	d0fc      	beq.n	42e <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 434:	4a05      	ldr	r2, [pc, #20]	; (44c <_oscctrl_init_sources+0x34>)
 436:	7d13      	ldrb	r3, [r2, #20]
 438:	2180      	movs	r1, #128	; 0x80
 43a:	430b      	orrs	r3, r1
 43c:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 43e:	0010      	movs	r0, r2
 440:	3948      	subs	r1, #72	; 0x48
 442:	220e      	movs	r2, #14
 444:	5c43      	ldrb	r3, [r0, r1]
 446:	4213      	tst	r3, r2
 448:	d1fc      	bne.n	444 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 44a:	4770      	bx	lr
 44c:	40000c00 	.word	0x40000c00

00000450 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 450:	4770      	bx	lr

00000452 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 452:	2380      	movs	r3, #128	; 0x80
 454:	05db      	lsls	r3, r3, #23
 456:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 458:	2203      	movs	r2, #3
 45a:	4013      	ands	r3, r2
 45c:	4298      	cmp	r0, r3
 45e:	d00c      	beq.n	47a <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 460:	2280      	movs	r2, #128	; 0x80
 462:	05d2      	lsls	r2, r2, #23
 464:	23ff      	movs	r3, #255	; 0xff
 466:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 468:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 46a:	2103      	movs	r1, #3
 46c:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 46e:	4008      	ands	r0, r1
 470:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 472:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 474:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 476:	2b00      	cmp	r3, #0
 478:	d0fc      	beq.n	474 <_set_performance_level+0x22>
			;
	}
}
 47a:	4770      	bx	lr

0000047c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 47c:	4b02      	ldr	r3, [pc, #8]	; (488 <_delay_init+0xc>)
 47e:	4a03      	ldr	r2, [pc, #12]	; (48c <_delay_init+0x10>)
 480:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 482:	2205      	movs	r2, #5
 484:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 486:	4770      	bx	lr
 488:	e000e010 	.word	0xe000e010
 48c:	00ffffff 	.word	0x00ffffff

00000490 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 490:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 492:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 494:	1e5e      	subs	r6, r3, #1
 496:	b2f6      	uxtb	r6, r6
 498:	2b00      	cmp	r3, #0
 49a:	d013      	beq.n	4c4 <_delay_cycles+0x34>
 49c:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 49e:	4a0e      	ldr	r2, [pc, #56]	; (4d8 <_delay_cycles+0x48>)
 4a0:	4d0e      	ldr	r5, [pc, #56]	; (4dc <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 4a2:	2080      	movs	r0, #128	; 0x80
 4a4:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 4a6:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 4a8:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 4aa:	6813      	ldr	r3, [r2, #0]
 4ac:	4203      	tst	r3, r0
 4ae:	d0fc      	beq.n	4aa <_delay_cycles+0x1a>
	while (n--) {
 4b0:	3c01      	subs	r4, #1
 4b2:	b2e4      	uxtb	r4, r4
 4b4:	2cff      	cmp	r4, #255	; 0xff
 4b6:	d1f6      	bne.n	4a6 <_delay_cycles+0x16>
 4b8:	0633      	lsls	r3, r6, #24
 4ba:	1af6      	subs	r6, r6, r3
 4bc:	4b08      	ldr	r3, [pc, #32]	; (4e0 <_delay_cycles+0x50>)
 4be:	469c      	mov	ip, r3
 4c0:	4461      	add	r1, ip
 4c2:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 4c4:	4b04      	ldr	r3, [pc, #16]	; (4d8 <_delay_cycles+0x48>)
 4c6:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 4c8:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 4ca:	0019      	movs	r1, r3
 4cc:	2280      	movs	r2, #128	; 0x80
 4ce:	0252      	lsls	r2, r2, #9
 4d0:	680b      	ldr	r3, [r1, #0]
 4d2:	4213      	tst	r3, r2
 4d4:	d0fc      	beq.n	4d0 <_delay_cycles+0x40>
		;
}
 4d6:	bd70      	pop	{r4, r5, r6, pc}
 4d8:	e000e010 	.word	0xe000e010
 4dc:	00ffffff 	.word	0x00ffffff
 4e0:	ff000001 	.word	0xff000001

000004e4 <main>:
#include <atmel_start.h>

int main(void)
{
 4e4:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 4e6:	4b01      	ldr	r3, [pc, #4]	; (4ec <main+0x8>)
 4e8:	4798      	blx	r3
 4ea:	e7fe      	b.n	4ea <main+0x6>
 4ec:	00000115 	.word	0x00000115

000004f0 <__libc_init_array>:
 4f0:	b570      	push	{r4, r5, r6, lr}
 4f2:	2600      	movs	r6, #0
 4f4:	4d0c      	ldr	r5, [pc, #48]	; (528 <__libc_init_array+0x38>)
 4f6:	4c0d      	ldr	r4, [pc, #52]	; (52c <__libc_init_array+0x3c>)
 4f8:	1b64      	subs	r4, r4, r5
 4fa:	10a4      	asrs	r4, r4, #2
 4fc:	42a6      	cmp	r6, r4
 4fe:	d109      	bne.n	514 <__libc_init_array+0x24>
 500:	2600      	movs	r6, #0
 502:	f000 f819 	bl	538 <_init>
 506:	4d0a      	ldr	r5, [pc, #40]	; (530 <__libc_init_array+0x40>)
 508:	4c0a      	ldr	r4, [pc, #40]	; (534 <__libc_init_array+0x44>)
 50a:	1b64      	subs	r4, r4, r5
 50c:	10a4      	asrs	r4, r4, #2
 50e:	42a6      	cmp	r6, r4
 510:	d105      	bne.n	51e <__libc_init_array+0x2e>
 512:	bd70      	pop	{r4, r5, r6, pc}
 514:	00b3      	lsls	r3, r6, #2
 516:	58eb      	ldr	r3, [r5, r3]
 518:	4798      	blx	r3
 51a:	3601      	adds	r6, #1
 51c:	e7ee      	b.n	4fc <__libc_init_array+0xc>
 51e:	00b3      	lsls	r3, r6, #2
 520:	58eb      	ldr	r3, [r5, r3]
 522:	4798      	blx	r3
 524:	3601      	adds	r6, #1
 526:	e7f2      	b.n	50e <__libc_init_array+0x1e>
 528:	00000544 	.word	0x00000544
 52c:	00000544 	.word	0x00000544
 530:	00000544 	.word	0x00000544
 534:	00000548 	.word	0x00000548

00000538 <_init>:
 538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 53a:	46c0      	nop			; (mov r8, r8)
 53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 53e:	bc08      	pop	{r3}
 540:	469e      	mov	lr, r3
 542:	4770      	bx	lr

00000544 <__init_array_start>:
 544:	000000dd 	.word	0x000000dd

00000548 <_fini>:
 548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 54a:	46c0      	nop			; (mov r8, r8)
 54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 54e:	bc08      	pop	{r3}
 550:	469e      	mov	lr, r3
 552:	4770      	bx	lr

00000554 <__fini_array_start>:
 554:	000000b5 	.word	0x000000b5
