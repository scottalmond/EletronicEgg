
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020068  2**0
                  CONTENTS
  3 .bss          0000034c  20000068  00002cb4  00020068  2**2
                  ALLOC
  4 .stack        00000804  200003b4  00003000  00020068  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017b43  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003228  00000000  00000000  00037c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00008cf6  00000000  00000000  0003ae54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006d8  00000000  00000000  00043b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000aa0  00000000  00000000  00044222  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ce76  00000000  00000000  00044cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fc2e  00000000  00000000  00061b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00091b38  00000000  00000000  00071766  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001058  00000000  00000000  001032a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 0b 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     ... -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 19 1b 00 00     )...)...).......
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002c4c 	.word	0x00002c4c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002c4c 	.word	0x00002c4c
     10c:	00002c4c 	.word	0x00002c4c
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	00000291 	.word	0x00000291
     124:	00002a11 	.word	0x00002a11

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00002c4c 	.word	0x00002c4c
     19c:	20000000 	.word	0x20000000
     1a0:	20000068 	.word	0x20000068
     1a4:	20000004 	.word	0x20000004
     1a8:	20000068 	.word	0x20000068
     1ac:	200003b4 	.word	0x200003b4
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00002b35 	.word	0x00002b35
     1c0:	00001d61 	.word	0x00001d61

000001c4 <USB_DEVICE_INSTANCE_PORT_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c6:	46c6      	mov	lr, r8
     1c8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1ca:	24c0      	movs	r4, #192	; 0xc0
     1cc:	05e4      	lsls	r4, r4, #23
     1ce:	2280      	movs	r2, #128	; 0x80
     1d0:	0452      	lsls	r2, r2, #17
     1d2:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1d4:	4b1a      	ldr	r3, [pc, #104]	; (240 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     1d6:	2780      	movs	r7, #128	; 0x80
     1d8:	05ff      	lsls	r7, r7, #23
     1da:	629f      	str	r7, [r3, #40]	; 0x28
     1dc:	4919      	ldr	r1, [pc, #100]	; (244 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     1de:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1e0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1e2:	2058      	movs	r0, #88	; 0x58
     1e4:	5c19      	ldrb	r1, [r3, r0]
     1e6:	2204      	movs	r2, #4
     1e8:	4690      	mov	r8, r2
     1ea:	4391      	bics	r1, r2
     1ec:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f0:	2601      	movs	r6, #1
     1f2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f4:	2501      	movs	r5, #1
     1f6:	4329      	orrs	r1, r5
     1f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1fc:	381c      	subs	r0, #28
     1fe:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     200:	320b      	adds	r2, #11
     202:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     204:	3a09      	subs	r2, #9
     206:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     208:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     20a:	2180      	movs	r1, #128	; 0x80
     20c:	0489      	lsls	r1, r1, #18
     20e:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     210:	629f      	str	r7, [r3, #40]	; 0x28
     212:	4f0d      	ldr	r7, [pc, #52]	; (248 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     214:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     216:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     218:	2159      	movs	r1, #89	; 0x59
     21a:	5c5c      	ldrb	r4, [r3, r1]
     21c:	4642      	mov	r2, r8
     21e:	4394      	bics	r4, r2
     220:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     222:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     224:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     226:	432a      	orrs	r2, r5
     228:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     22a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     22e:	394a      	subs	r1, #74	; 0x4a
     230:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     232:	3151      	adds	r1, #81	; 0x51
     234:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     236:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      // <GPIO_PIN_FUNCTION_I"> I
	                      PINMUX_PA25G_USB_DP);
}
     238:	bc04      	pop	{r2}
     23a:	4690      	mov	r8, r2
     23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40002800 	.word	0x40002800
     244:	c0000100 	.word	0xc0000100
     248:	c0000200 	.word	0xc0000200

0000024c <USB_DEVICE_INSTANCE_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     24c:	2140      	movs	r1, #64	; 0x40
     24e:	2390      	movs	r3, #144	; 0x90
     250:	4a06      	ldr	r2, [pc, #24]	; (26c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     252:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     256:	6919      	ldr	r1, [r3, #16]
     258:	2280      	movs	r2, #128	; 0x80
     25a:	0152      	lsls	r2, r2, #5
     25c:	430a      	orrs	r2, r1
     25e:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     260:	699a      	ldr	r2, [r3, #24]
     262:	2101      	movs	r1, #1
     264:	430a      	orrs	r2, r1
     266:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800
     270:	40000400 	.word	0x40000400

00000274 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     274:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     276:	4b03      	ldr	r3, [pc, #12]	; (284 <USB_DEVICE_INSTANCE_init+0x10>)
     278:	4798      	blx	r3
	usb_d_init();
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <USB_DEVICE_INSTANCE_init+0x14>)
     27c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     27e:	4b03      	ldr	r3, [pc, #12]	; (28c <USB_DEVICE_INSTANCE_init+0x18>)
     280:	4798      	blx	r3
}
     282:	bd10      	pop	{r4, pc}
     284:	0000024d 	.word	0x0000024d
     288:	00000551 	.word	0x00000551
     28c:	000001c5 	.word	0x000001c5

00000290 <system_init>:

void system_init(void)
{
     290:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     292:	4b02      	ldr	r3, [pc, #8]	; (29c <system_init+0xc>)
     294:	4798      	blx	r3
	init_mcu();

	USB_DEVICE_INSTANCE_init();
     296:	4b02      	ldr	r3, [pc, #8]	; (2a0 <system_init+0x10>)
     298:	4798      	blx	r3
}
     29a:	bd10      	pop	{r4, pc}
     29c:	00000939 	.word	0x00000939
     2a0:	00000275 	.word	0x00000275

000002a4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2a4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     2aa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     2ac:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2b0:	4770      	bx	lr

000002b2 <atomic_leave_critical>:
     2b2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     2b6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     2b8:	f383 8810 	msr	PRIMASK, r3
}
     2bc:	4770      	bx	lr
	...

000002c0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     2c0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <delay_ms+0x14>)
     2c4:	681c      	ldr	r4, [r3, #0]
     2c6:	4b04      	ldr	r3, [pc, #16]	; (2d8 <delay_ms+0x18>)
     2c8:	4798      	blx	r3
     2ca:	0001      	movs	r1, r0
     2cc:	0020      	movs	r0, r4
     2ce:	4b03      	ldr	r3, [pc, #12]	; (2dc <delay_ms+0x1c>)
     2d0:	4798      	blx	r3
}
     2d2:	bd10      	pop	{r4, pc}
     2d4:	20000084 	.word	0x20000084
     2d8:	00000911 	.word	0x00000911
     2dc:	00000931 	.word	0x00000931

000002e0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2e2:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2e4:	4b0e      	ldr	r3, [pc, #56]	; (320 <_usb_d_find_ep+0x40>)
     2e6:	785a      	ldrb	r2, [r3, #1]
     2e8:	4290      	cmp	r0, r2
     2ea:	d017      	beq.n	31c <_usb_d_find_ep+0x3c>
     2ec:	2300      	movs	r3, #0
     2ee:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     2f0:	4f0b      	ldr	r7, [pc, #44]	; (320 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     2f2:	260f      	movs	r6, #15
     2f4:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2f6:	003d      	movs	r5, r7
     2f8:	e008      	b.n	30c <_usb_d_find_ep+0x2c>
     2fa:	3001      	adds	r0, #1
     2fc:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     2fe:	2804      	cmp	r0, #4
     300:	d00a      	beq.n	318 <_usb_d_find_ep+0x38>
     302:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     304:	18ea      	adds	r2, r5, r3
     306:	7852      	ldrb	r2, [r2, #1]
     308:	42a2      	cmp	r2, r4
     30a:	d006      	beq.n	31a <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     30c:	5dd9      	ldrb	r1, [r3, r7]
     30e:	2900      	cmp	r1, #0
     310:	d1f3      	bne.n	2fa <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     312:	4296      	cmp	r6, r2
     314:	d1f1      	bne.n	2fa <_usb_d_find_ep+0x1a>
     316:	e000      	b.n	31a <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     318:	3805      	subs	r0, #5
}
     31a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     31c:	2000      	movs	r0, #0
     31e:	e7fc      	b.n	31a <_usb_d_find_ep+0x3a>
     320:	20000088 	.word	0x20000088

00000324 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     324:	2000      	movs	r0, #0
     326:	4770      	bx	lr

00000328 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     328:	b570      	push	{r4, r5, r6, lr}
     32a:	0004      	movs	r4, r0
     32c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     32e:	4b0a      	ldr	r3, [pc, #40]	; (358 <usb_d_cb_trans_more+0x30>)
     330:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     332:	0142      	lsls	r2, r0, #5
     334:	4b09      	ldr	r3, [pc, #36]	; (35c <usb_d_cb_trans_more+0x34>)
     336:	189b      	adds	r3, r3, r2
     338:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     33a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     33c:	2a03      	cmp	r2, #3
     33e:	d001      	beq.n	344 <usb_d_cb_trans_more+0x1c>
}
     340:	0018      	movs	r0, r3
     342:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     344:	0140      	lsls	r0, r0, #5
     346:	4b05      	ldr	r3, [pc, #20]	; (35c <usb_d_cb_trans_more+0x34>)
     348:	1818      	adds	r0, r3, r0
     34a:	6983      	ldr	r3, [r0, #24]
     34c:	0029      	movs	r1, r5
     34e:	0020      	movs	r0, r4
     350:	4798      	blx	r3
     352:	0003      	movs	r3, r0
     354:	e7f4      	b.n	340 <usb_d_cb_trans_more+0x18>
     356:	46c0      	nop			; (mov r8, r8)
     358:	000002e1 	.word	0x000002e1
     35c:	20000088 	.word	0x20000088

00000360 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
     362:	b085      	sub	sp, #20
     364:	0005      	movs	r5, r0
     366:	000f      	movs	r7, r1
     368:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     36a:	4b51      	ldr	r3, [pc, #324]	; (4b0 <_usb_d_cb_trans_done+0x150>)
     36c:	4798      	blx	r3
     36e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     370:	2f00      	cmp	r7, #0
     372:	d162      	bne.n	43a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     374:	4b4f      	ldr	r3, [pc, #316]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     376:	0142      	lsls	r2, r0, #5
     378:	1899      	adds	r1, r3, r2
     37a:	2000      	movs	r0, #0
     37c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     37e:	5cd3      	ldrb	r3, [r2, r3]
     380:	2b00      	cmp	r3, #0
     382:	d00e      	beq.n	3a2 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     384:	0162      	lsls	r2, r4, #5
     386:	4b4b      	ldr	r3, [pc, #300]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     388:	189b      	adds	r3, r3, r2
     38a:	2201      	movs	r2, #1
     38c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     38e:	0164      	lsls	r4, r4, #5
     390:	4b48      	ldr	r3, [pc, #288]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     392:	191c      	adds	r4, r3, r4
     394:	78e1      	ldrb	r1, [r4, #3]
     396:	69e3      	ldr	r3, [r4, #28]
     398:	0032      	movs	r2, r6
     39a:	0028      	movs	r0, r5
     39c:	4798      	blx	r3
}
     39e:	b005      	add	sp, #20
     3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     3a2:	788b      	ldrb	r3, [r1, #2]
     3a4:	2b03      	cmp	r3, #3
     3a6:	d00c      	beq.n	3c2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     3a8:	4b42      	ldr	r3, [pc, #264]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     3aa:	0162      	lsls	r2, r4, #5
     3ac:	320c      	adds	r2, #12
     3ae:	189a      	adds	r2, r3, r2
     3b0:	0164      	lsls	r4, r4, #5
     3b2:	191c      	adds	r4, r3, r4
     3b4:	7860      	ldrb	r0, [r4, #1]
     3b6:	2100      	movs	r1, #0
     3b8:	69e3      	ldr	r3, [r4, #28]
     3ba:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     3bc:	2302      	movs	r3, #2
     3be:	70a3      	strb	r3, [r4, #2]
     3c0:	e7ed      	b.n	39e <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     3c2:	4a3c      	ldr	r2, [pc, #240]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     3c4:	000b      	movs	r3, r1
     3c6:	250c      	movs	r5, #12
     3c8:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     3ca:	0161      	lsls	r1, r4, #5
     3cc:	310c      	adds	r1, #12
     3ce:	1852      	adds	r2, r2, r1
     3d0:	7858      	ldrb	r0, [r3, #1]
     3d2:	69db      	ldr	r3, [r3, #28]
     3d4:	2101      	movs	r1, #1
     3d6:	4798      	blx	r3
		if (err) {
     3d8:	2800      	cmp	r0, #0
     3da:	d017      	beq.n	40c <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     3dc:	0162      	lsls	r2, r4, #5
     3de:	4b35      	ldr	r3, [pc, #212]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     3e0:	189b      	adds	r3, r3, r2
     3e2:	2205      	movs	r2, #5
     3e4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     3e6:	3a03      	subs	r2, #3
     3e8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     3ea:	2d00      	cmp	r5, #0
     3ec:	db09      	blt.n	402 <_usb_d_cb_trans_done+0xa2>
     3ee:	0164      	lsls	r4, r4, #5
     3f0:	4b30      	ldr	r3, [pc, #192]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     3f2:	191c      	adds	r4, r3, r4
     3f4:	7860      	ldrb	r0, [r4, #1]
     3f6:	2380      	movs	r3, #128	; 0x80
     3f8:	4318      	orrs	r0, r3
     3fa:	2101      	movs	r1, #1
     3fc:	4b2e      	ldr	r3, [pc, #184]	; (4b8 <_usb_d_cb_trans_done+0x158>)
     3fe:	4798      	blx	r3
     400:	e7cd      	b.n	39e <_usb_d_cb_trans_done+0x3e>
     402:	0164      	lsls	r4, r4, #5
     404:	4b2b      	ldr	r3, [pc, #172]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     406:	191c      	adds	r4, r3, r4
     408:	7860      	ldrb	r0, [r4, #1]
     40a:	e7f6      	b.n	3fa <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     40c:	0164      	lsls	r4, r4, #5
     40e:	4b29      	ldr	r3, [pc, #164]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     410:	191c      	adds	r4, r3, r4
     412:	2304      	movs	r3, #4
     414:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     416:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     418:	2200      	movs	r2, #0
     41a:	9201      	str	r2, [sp, #4]
     41c:	9202      	str	r2, [sp, #8]
     41e:	2d00      	cmp	r5, #0
     420:	db08      	blt.n	434 <_usb_d_cb_trans_done+0xd4>
     422:	3280      	adds	r2, #128	; 0x80
     424:	4313      	orrs	r3, r2
     426:	a801      	add	r0, sp, #4
     428:	7203      	strb	r3, [r0, #8]
     42a:	2301      	movs	r3, #1
     42c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     42e:	4b23      	ldr	r3, [pc, #140]	; (4bc <_usb_d_cb_trans_done+0x15c>)
     430:	4798      	blx	r3
     432:	e7b4      	b.n	39e <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     434:	220f      	movs	r2, #15
     436:	4013      	ands	r3, r2
     438:	e7f5      	b.n	426 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     43a:	2f01      	cmp	r7, #1
     43c:	d00a      	beq.n	454 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     43e:	2f02      	cmp	r7, #2
     440:	d01d      	beq.n	47e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     442:	2f03      	cmp	r7, #3
     444:	d02c      	beq.n	4a0 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     446:	0142      	lsls	r2, r0, #5
     448:	4b1a      	ldr	r3, [pc, #104]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     44a:	189b      	adds	r3, r3, r2
     44c:	2206      	movs	r2, #6
     44e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     450:	70da      	strb	r2, [r3, #3]
     452:	e79c      	b.n	38e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     454:	4b17      	ldr	r3, [pc, #92]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     456:	0142      	lsls	r2, r0, #5
     458:	1899      	adds	r1, r3, r2
     45a:	2002      	movs	r0, #2
     45c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     45e:	5cd3      	ldrb	r3, [r2, r3]
     460:	2b00      	cmp	r3, #0
     462:	d005      	beq.n	470 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     464:	0162      	lsls	r2, r4, #5
     466:	4b13      	ldr	r3, [pc, #76]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     468:	189b      	adds	r3, r3, r2
     46a:	2205      	movs	r2, #5
     46c:	709a      	strb	r2, [r3, #2]
     46e:	e78e      	b.n	38e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     470:	2202      	movs	r2, #2
     472:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     474:	2100      	movs	r1, #0
     476:	0028      	movs	r0, r5
     478:	4b0f      	ldr	r3, [pc, #60]	; (4b8 <_usb_d_cb_trans_done+0x158>)
     47a:	4798      	blx	r3
     47c:	e787      	b.n	38e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     47e:	4b0d      	ldr	r3, [pc, #52]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     480:	0142      	lsls	r2, r0, #5
     482:	1899      	adds	r1, r3, r2
     484:	2004      	movs	r0, #4
     486:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     488:	5cd3      	ldrb	r3, [r2, r3]
     48a:	2b00      	cmp	r3, #0
     48c:	d005      	beq.n	49a <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     48e:	0162      	lsls	r2, r4, #5
     490:	4b08      	ldr	r3, [pc, #32]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     492:	189b      	adds	r3, r3, r2
     494:	2201      	movs	r2, #1
     496:	709a      	strb	r2, [r3, #2]
     498:	e779      	b.n	38e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     49a:	2302      	movs	r3, #2
     49c:	708b      	strb	r3, [r1, #2]
			return;
     49e:	e77e      	b.n	39e <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     4a0:	0142      	lsls	r2, r0, #5
     4a2:	4b04      	ldr	r3, [pc, #16]	; (4b4 <_usb_d_cb_trans_done+0x154>)
     4a4:	189b      	adds	r3, r3, r2
     4a6:	2200      	movs	r2, #0
     4a8:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     4aa:	3205      	adds	r2, #5
     4ac:	70da      	strb	r2, [r3, #3]
     4ae:	e76e      	b.n	38e <_usb_d_cb_trans_done+0x2e>
     4b0:	000002e1 	.word	0x000002e1
     4b4:	20000088 	.word	0x20000088
     4b8:	000016e5 	.word	0x000016e5
     4bc:	000018b1 	.word	0x000018b1

000004c0 <usb_d_cb_trans_setup>:
{
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4c2:	46c6      	mov	lr, r8
     4c4:	b500      	push	{lr}
     4c6:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     4c8:	4b1d      	ldr	r3, [pc, #116]	; (540 <usb_d_cb_trans_setup+0x80>)
     4ca:	4798      	blx	r3
     4cc:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     4ce:	0145      	lsls	r5, r0, #5
     4d0:	350c      	adds	r5, #12
     4d2:	4b1c      	ldr	r3, [pc, #112]	; (544 <usb_d_cb_trans_setup+0x84>)
     4d4:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     4d6:	0029      	movs	r1, r5
     4d8:	0020      	movs	r0, r4
     4da:	4b1b      	ldr	r3, [pc, #108]	; (548 <usb_d_cb_trans_setup+0x88>)
     4dc:	4798      	blx	r3
	if (n != 8) {
     4de:	b2c0      	uxtb	r0, r0
     4e0:	2808      	cmp	r0, #8
     4e2:	d00a      	beq.n	4fa <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     4e4:	2101      	movs	r1, #1
     4e6:	0020      	movs	r0, r4
     4e8:	4d18      	ldr	r5, [pc, #96]	; (54c <usb_d_cb_trans_setup+0x8c>)
     4ea:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     4ec:	2080      	movs	r0, #128	; 0x80
     4ee:	4320      	orrs	r0, r4
     4f0:	2101      	movs	r1, #1
     4f2:	47a8      	blx	r5
}
     4f4:	bc04      	pop	{r2}
     4f6:	4690      	mov	r8, r2
     4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     4fa:	2100      	movs	r1, #0
     4fc:	0020      	movs	r0, r4
     4fe:	4b13      	ldr	r3, [pc, #76]	; (54c <usb_d_cb_trans_setup+0x8c>)
     500:	4698      	mov	r8, r3
     502:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     504:	2780      	movs	r7, #128	; 0x80
     506:	4327      	orrs	r7, r4
     508:	2100      	movs	r1, #0
     50a:	0038      	movs	r0, r7
     50c:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     50e:	0172      	lsls	r2, r6, #5
     510:	4b0c      	ldr	r3, [pc, #48]	; (544 <usb_d_cb_trans_setup+0x84>)
     512:	189b      	adds	r3, r3, r2
     514:	2201      	movs	r2, #1
     516:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     518:	695b      	ldr	r3, [r3, #20]
     51a:	0029      	movs	r1, r5
     51c:	0020      	movs	r0, r4
     51e:	4798      	blx	r3
     520:	2800      	cmp	r0, #0
     522:	d1e7      	bne.n	4f4 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     524:	0176      	lsls	r6, r6, #5
     526:	4b07      	ldr	r3, [pc, #28]	; (544 <usb_d_cb_trans_setup+0x84>)
     528:	199e      	adds	r6, r3, r6
     52a:	2305      	movs	r3, #5
     52c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     52e:	2101      	movs	r1, #1
     530:	0020      	movs	r0, r4
     532:	4c06      	ldr	r4, [pc, #24]	; (54c <usb_d_cb_trans_setup+0x8c>)
     534:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     536:	2101      	movs	r1, #1
     538:	0038      	movs	r0, r7
     53a:	47a0      	blx	r4
     53c:	e7da      	b.n	4f4 <usb_d_cb_trans_setup+0x34>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	000002e1 	.word	0x000002e1
     544:	20000088 	.word	0x20000088
     548:	00001845 	.word	0x00001845
     54c:	000016e5 	.word	0x000016e5

00000550 <usb_d_init>:

int32_t usb_d_init(void)
{
     550:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     552:	4b10      	ldr	r3, [pc, #64]	; (594 <usb_d_init+0x44>)
     554:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     556:	2800      	cmp	r0, #0
     558:	db1b      	blt.n	592 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     55a:	4c0f      	ldr	r4, [pc, #60]	; (598 <usb_d_init+0x48>)
     55c:	2280      	movs	r2, #128	; 0x80
     55e:	2100      	movs	r1, #0
     560:	0020      	movs	r0, r4
     562:	4b0e      	ldr	r3, [pc, #56]	; (59c <usb_d_init+0x4c>)
     564:	4798      	blx	r3
     566:	0023      	movs	r3, r4
     568:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     56a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     56c:	4a0c      	ldr	r2, [pc, #48]	; (5a0 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     56e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     570:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     572:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     574:	61da      	str	r2, [r3, #28]
     576:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     578:	42a3      	cmp	r3, r4
     57a:	d1f8      	bne.n	56e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     57c:	4909      	ldr	r1, [pc, #36]	; (5a4 <usb_d_init+0x54>)
     57e:	2000      	movs	r0, #0
     580:	4c09      	ldr	r4, [pc, #36]	; (5a8 <usb_d_init+0x58>)
     582:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     584:	4909      	ldr	r1, [pc, #36]	; (5ac <usb_d_init+0x5c>)
     586:	2001      	movs	r0, #1
     588:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     58a:	4909      	ldr	r1, [pc, #36]	; (5b0 <usb_d_init+0x60>)
     58c:	2002      	movs	r0, #2
     58e:	47a0      	blx	r4
	return ERR_NONE;
     590:	2000      	movs	r0, #0
}
     592:	bd10      	pop	{r4, pc}
     594:	000010a5 	.word	0x000010a5
     598:	20000088 	.word	0x20000088
     59c:	00002b8f 	.word	0x00002b8f
     5a0:	00000325 	.word	0x00000325
     5a4:	000004c1 	.word	0x000004c1
     5a8:	00001ae9 	.word	0x00001ae9
     5ac:	00000329 	.word	0x00000329
     5b0:	00000361 	.word	0x00000361

000005b4 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     5b4:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     5b6:	4b01      	ldr	r3, [pc, #4]	; (5bc <usb_d_register_callback+0x8>)
     5b8:	4798      	blx	r3
}
     5ba:	bd10      	pop	{r4, pc}
     5bc:	00001ac5 	.word	0x00001ac5

000005c0 <usb_d_enable>:

int32_t usb_d_enable(void)
{
     5c0:	b510      	push	{r4, lr}
	return _usb_d_dev_enable();
     5c2:	4b01      	ldr	r3, [pc, #4]	; (5c8 <usb_d_enable+0x8>)
     5c4:	4798      	blx	r3
}
     5c6:	bd10      	pop	{r4, pc}
     5c8:	00001191 	.word	0x00001191

000005cc <usb_d_attach>:
{
	_usb_d_dev_disable();
}

void usb_d_attach(void)
{
     5cc:	b510      	push	{r4, lr}
	_usb_d_dev_attach();
     5ce:	4b01      	ldr	r3, [pc, #4]	; (5d4 <usb_d_attach+0x8>)
     5d0:	4798      	blx	r3
}
     5d2:	bd10      	pop	{r4, pc}
     5d4:	000011e9 	.word	0x000011e9

000005d8 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     5d8:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     5da:	4b01      	ldr	r3, [pc, #4]	; (5e0 <usb_d_set_address+0x8>)
     5dc:	4798      	blx	r3
}
     5de:	bd10      	pop	{r4, pc}
     5e0:	000011f7 	.word	0x000011f7

000005e4 <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5e6:	0005      	movs	r5, r0
     5e8:	000e      	movs	r6, r1
     5ea:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     5ec:	4b0f      	ldr	r3, [pc, #60]	; (62c <usb_d_ep_init+0x48>)
     5ee:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     5f0:	2800      	cmp	r0, #0
     5f2:	da14      	bge.n	61e <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     5f4:	20ff      	movs	r0, #255	; 0xff
     5f6:	4b0d      	ldr	r3, [pc, #52]	; (62c <usb_d_ep_init+0x48>)
     5f8:	4798      	blx	r3
     5fa:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     5fc:	db12      	blt.n	624 <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     5fe:	003a      	movs	r2, r7
     600:	0031      	movs	r1, r6
     602:	0028      	movs	r0, r5
     604:	4b0a      	ldr	r3, [pc, #40]	; (630 <usb_d_ep_init+0x4c>)
     606:	4798      	blx	r3
	if (rc < 0) {
     608:	2800      	cmp	r0, #0
     60a:	db07      	blt.n	61c <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     60c:	4a09      	ldr	r2, [pc, #36]	; (634 <usb_d_ep_init+0x50>)
     60e:	0164      	lsls	r4, r4, #5
     610:	1913      	adds	r3, r2, r4
     612:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     614:	2303      	movs	r3, #3
     616:	401e      	ands	r6, r3
     618:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     61a:	2000      	movs	r0, #0
}
     61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     61e:	2014      	movs	r0, #20
     620:	4240      	negs	r0, r0
     622:	e7fb      	b.n	61c <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     624:	2015      	movs	r0, #21
     626:	4240      	negs	r0, r0
     628:	e7f8      	b.n	61c <usb_d_ep_init+0x38>
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	000002e1 	.word	0x000002e1
     630:	00001205 	.word	0x00001205
     634:	20000088 	.word	0x20000088

00000638 <usb_d_ep0_init>:
{
     638:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     63a:	b282      	uxth	r2, r0
     63c:	2100      	movs	r1, #0
     63e:	2000      	movs	r0, #0
     640:	4b01      	ldr	r3, [pc, #4]	; (648 <usb_d_ep0_init+0x10>)
     642:	4798      	blx	r3
}
     644:	bd10      	pop	{r4, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	000005e5 	.word	0x000005e5

0000064c <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     64c:	b570      	push	{r4, r5, r6, lr}
     64e:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     650:	4b06      	ldr	r3, [pc, #24]	; (66c <usb_d_ep_deinit+0x20>)
     652:	4798      	blx	r3
     654:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     656:	db07      	blt.n	668 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     658:	0028      	movs	r0, r5
     65a:	4b05      	ldr	r3, [pc, #20]	; (670 <usb_d_ep_deinit+0x24>)
     65c:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     65e:	0164      	lsls	r4, r4, #5
     660:	4b04      	ldr	r3, [pc, #16]	; (674 <usb_d_ep_deinit+0x28>)
     662:	191c      	adds	r4, r3, r4
     664:	23ff      	movs	r3, #255	; 0xff
     666:	7063      	strb	r3, [r4, #1]
}
     668:	bd70      	pop	{r4, r5, r6, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	000002e1 	.word	0x000002e1
     670:	00001331 	.word	0x00001331
     674:	20000088 	.word	0x20000088

00000678 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     678:	b570      	push	{r4, r5, r6, lr}
     67a:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     67c:	4b0e      	ldr	r3, [pc, #56]	; (6b8 <usb_d_ep_enable+0x40>)
     67e:	4798      	blx	r3
     680:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     682:	db15      	blt.n	6b0 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     684:	0143      	lsls	r3, r0, #5
     686:	4a0d      	ldr	r2, [pc, #52]	; (6bc <usb_d_ep_enable+0x44>)
     688:	5c9b      	ldrb	r3, [r3, r2]
     68a:	425a      	negs	r2, r3
     68c:	4153      	adcs	r3, r2
     68e:	3301      	adds	r3, #1
     690:	0141      	lsls	r1, r0, #5
     692:	4a0a      	ldr	r2, [pc, #40]	; (6bc <usb_d_ep_enable+0x44>)
     694:	1852      	adds	r2, r2, r1
     696:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     698:	0020      	movs	r0, r4
     69a:	4b09      	ldr	r3, [pc, #36]	; (6c0 <usb_d_ep_enable+0x48>)
     69c:	4798      	blx	r3
	if (rc < 0) {
     69e:	2800      	cmp	r0, #0
     6a0:	db00      	blt.n	6a4 <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     6a2:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     6a4:	016d      	lsls	r5, r5, #5
     6a6:	4b05      	ldr	r3, [pc, #20]	; (6bc <usb_d_ep_enable+0x44>)
     6a8:	195d      	adds	r5, r3, r5
     6aa:	2300      	movs	r3, #0
     6ac:	70ab      	strb	r3, [r5, #2]
     6ae:	e7f8      	b.n	6a2 <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     6b0:	2012      	movs	r0, #18
     6b2:	4240      	negs	r0, r0
     6b4:	e7f5      	b.n	6a2 <usb_d_ep_enable+0x2a>
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	000002e1 	.word	0x000002e1
     6bc:	20000088 	.word	0x20000088
     6c0:	00001401 	.word	0x00001401

000006c4 <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c6:	46d6      	mov	lr, sl
     6c8:	464f      	mov	r7, r9
     6ca:	4646      	mov	r6, r8
     6cc:	b5c0      	push	{r6, r7, lr}
     6ce:	b086      	sub	sp, #24
     6d0:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     6d2:	7a07      	ldrb	r7, [r0, #8]
     6d4:	0038      	movs	r0, r7
     6d6:	4b40      	ldr	r3, [pc, #256]	; (7d8 <usb_d_ep_transfer+0x114>)
     6d8:	4798      	blx	r3
     6da:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     6dc:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     6de:	6863      	ldr	r3, [r4, #4]
     6e0:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     6e2:	2800      	cmp	r0, #0
     6e4:	da00      	bge.n	6e8 <usb_d_ep_transfer+0x24>
     6e6:	e071      	b.n	7cc <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     6e8:	a804      	add	r0, sp, #16
     6ea:	4b3c      	ldr	r3, [pc, #240]	; (7dc <usb_d_ep_transfer+0x118>)
     6ec:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     6ee:	016a      	lsls	r2, r5, #5
     6f0:	4b3b      	ldr	r3, [pc, #236]	; (7e0 <usb_d_ep_transfer+0x11c>)
     6f2:	189b      	adds	r3, r3, r2
     6f4:	789a      	ldrb	r2, [r3, #2]
     6f6:	2317      	movs	r3, #23
     6f8:	446b      	add	r3, sp
     6fa:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	2b01      	cmp	r3, #1
     700:	d010      	beq.n	724 <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     702:	a804      	add	r0, sp, #16
     704:	4b37      	ldr	r3, [pc, #220]	; (7e4 <usb_d_ep_transfer+0x120>)
     706:	4798      	blx	r3
		switch (state) {
     708:	2317      	movs	r3, #23
     70a:	446b      	add	r3, sp
     70c:	781b      	ldrb	r3, [r3, #0]
     70e:	b2db      	uxtb	r3, r3
     710:	2b05      	cmp	r3, #5
     712:	d05e      	beq.n	7d2 <usb_d_ep_transfer+0x10e>
     714:	2b06      	cmp	r3, #6
     716:	d023      	beq.n	760 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     718:	2001      	movs	r0, #1
		switch (state) {
     71a:	2b00      	cmp	r3, #0
     71c:	d13c      	bne.n	798 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     71e:	2013      	movs	r0, #19
     720:	4240      	negs	r0, r0
     722:	e039      	b.n	798 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     724:	4b2e      	ldr	r3, [pc, #184]	; (7e0 <usb_d_ep_transfer+0x11c>)
     726:	4699      	mov	r9, r3
     728:	016b      	lsls	r3, r5, #5
     72a:	469a      	mov	sl, r3
     72c:	464b      	mov	r3, r9
     72e:	4453      	add	r3, sl
     730:	2203      	movs	r2, #3
     732:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     734:	a804      	add	r0, sp, #16
     736:	4b2b      	ldr	r3, [pc, #172]	; (7e4 <usb_d_ep_transfer+0x120>)
     738:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     73a:	464b      	mov	r3, r9
     73c:	4652      	mov	r2, sl
     73e:	5cd3      	ldrb	r3, [r2, r3]
     740:	2b00      	cmp	r3, #0
     742:	d010      	beq.n	766 <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     744:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     746:	1e72      	subs	r2, r6, #1
     748:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     74a:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     74c:	6822      	ldr	r2, [r4, #0]
     74e:	9201      	str	r2, [sp, #4]
     750:	4642      	mov	r2, r8
     752:	9202      	str	r2, [sp, #8]
     754:	b27f      	sxtb	r7, r7
     756:	2f00      	cmp	r7, #0
     758:	db17      	blt.n	78a <usb_d_ep_transfer+0xc6>
     75a:	220f      	movs	r2, #15
     75c:	4013      	ands	r3, r2
     75e:	e016      	b.n	78e <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     760:	2010      	movs	r0, #16
     762:	4240      	negs	r0, r0
     764:	e018      	b.n	798 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     766:	016b      	lsls	r3, r5, #5
     768:	4a1d      	ldr	r2, [pc, #116]	; (7e0 <usb_d_ep_transfer+0x11c>)
     76a:	18d2      	adds	r2, r2, r3
     76c:	7cd1      	ldrb	r1, [r2, #19]
     76e:	0209      	lsls	r1, r1, #8
     770:	7c93      	ldrb	r3, [r2, #18]
     772:	185b      	adds	r3, r3, r1
     774:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     776:	2b00      	cmp	r3, #0
     778:	d114      	bne.n	7a4 <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     77a:	2304      	movs	r3, #4
     77c:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     77e:	2200      	movs	r2, #0
			zlp                 = true;
     780:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     782:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     784:	6821      	ldr	r1, [r4, #0]
     786:	9101      	str	r1, [sp, #4]
     788:	9202      	str	r2, [sp, #8]
     78a:	2280      	movs	r2, #128	; 0x80
     78c:	4313      	orrs	r3, r2
     78e:	a801      	add	r0, sp, #4
     790:	7203      	strb	r3, [r0, #8]
     792:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     794:	4b14      	ldr	r3, [pc, #80]	; (7e8 <usb_d_ep_transfer+0x124>)
     796:	4798      	blx	r3
	return rc;
}
     798:	b006      	add	sp, #24
     79a:	bc1c      	pop	{r2, r3, r4}
     79c:	4690      	mov	r8, r2
     79e:	4699      	mov	r9, r3
     7a0:	46a2      	mov	sl, r4
     7a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7a4:	4642      	mov	r2, r8
     7a6:	429a      	cmp	r2, r3
     7a8:	d900      	bls.n	7ac <usb_d_ep_transfer+0xe8>
     7aa:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     7ac:	016d      	lsls	r5, r5, #5
     7ae:	490c      	ldr	r1, [pc, #48]	; (7e0 <usb_d_ep_transfer+0x11c>)
     7b0:	194d      	adds	r5, r1, r5
			if (dir) {
     7b2:	7b29      	ldrb	r1, [r5, #12]
     7b4:	297f      	cmp	r1, #127	; 0x7f
     7b6:	d805      	bhi.n	7c4 <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7b8:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     7ba:	6821      	ldr	r1, [r4, #0]
     7bc:	9101      	str	r1, [sp, #4]
     7be:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     7c0:	2600      	movs	r6, #0
     7c2:	e7ca      	b.n	75a <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     7c4:	429a      	cmp	r2, r3
     7c6:	41b6      	sbcs	r6, r6
     7c8:	4276      	negs	r6, r6
     7ca:	e7da      	b.n	782 <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     7cc:	2012      	movs	r0, #18
     7ce:	4240      	negs	r0, r0
     7d0:	e7e2      	b.n	798 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     7d2:	2002      	movs	r0, #2
     7d4:	e7e0      	b.n	798 <usb_d_ep_transfer+0xd4>
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	000002e1 	.word	0x000002e1
     7dc:	000002a5 	.word	0x000002a5
     7e0:	20000088 	.word	0x20000088
     7e4:	000002b3 	.word	0x000002b3
     7e8:	000018b1 	.word	0x000018b1

000007ec <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     7ec:	b570      	push	{r4, r5, r6, lr}
     7ee:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     7f0:	2900      	cmp	r1, #0
     7f2:	d005      	beq.n	800 <STACK_SIZE>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     7f4:	2901      	cmp	r1, #1
     7f6:	d021      	beq.n	83c <STACK_SIZE+0x3c>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     7f8:	2102      	movs	r1, #2
     7fa:	4b13      	ldr	r3, [pc, #76]	; (848 <STACK_SIZE+0x48>)
     7fc:	4798      	blx	r3
	}
}
     7fe:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     800:	4b12      	ldr	r3, [pc, #72]	; (84c <STACK_SIZE+0x4c>)
     802:	4798      	blx	r3
     804:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     806:	db1c      	blt.n	842 <STACK_SIZE+0x42>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     808:	2102      	movs	r1, #2
     80a:	0020      	movs	r0, r4
     80c:	4b0e      	ldr	r3, [pc, #56]	; (848 <STACK_SIZE+0x48>)
     80e:	4798      	blx	r3
     810:	2800      	cmp	r0, #0
     812:	d0f4      	beq.n	7fe <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     814:	2100      	movs	r1, #0
     816:	0020      	movs	r0, r4
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <STACK_SIZE+0x48>)
     81a:	4798      	blx	r3
		if (rc < 0) {
     81c:	2800      	cmp	r0, #0
     81e:	dbee      	blt.n	7fe <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     820:	016d      	lsls	r5, r5, #5
     822:	4b0b      	ldr	r3, [pc, #44]	; (850 <STACK_SIZE+0x50>)
     824:	195d      	adds	r5, r3, r5
     826:	2301      	movs	r3, #1
     828:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     82a:	3302      	adds	r3, #2
     82c:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     82e:	69eb      	ldr	r3, [r5, #28]
     830:	2200      	movs	r2, #0
     832:	2103      	movs	r1, #3
     834:	0020      	movs	r0, r4
     836:	4798      	blx	r3
	return ERR_NONE;
     838:	2000      	movs	r0, #0
     83a:	e7e0      	b.n	7fe <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     83c:	4b02      	ldr	r3, [pc, #8]	; (848 <STACK_SIZE+0x48>)
     83e:	4798      	blx	r3
     840:	e7dd      	b.n	7fe <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     842:	2012      	movs	r0, #18
     844:	4240      	negs	r0, r0
     846:	e7da      	b.n	7fe <usb_d_ep_halt+0x12>
     848:	000016e5 	.word	0x000016e5
     84c:	000002e1 	.word	0x000002e1
     850:	20000088 	.word	0x20000088

00000854 <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     854:	b570      	push	{r4, r5, r6, lr}
     856:	000d      	movs	r5, r1
     858:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     85a:	4b0f      	ldr	r3, [pc, #60]	; (898 <usb_d_ep_register_callback+0x44>)
     85c:	4798      	blx	r3
     85e:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     860:	1e22      	subs	r2, r4, #0
     862:	d008      	beq.n	876 <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     864:	2b00      	cmp	r3, #0
     866:	db05      	blt.n	874 <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     868:	2d01      	cmp	r5, #1
     86a:	d00b      	beq.n	884 <usb_d_ep_register_callback+0x30>
     86c:	2d00      	cmp	r5, #0
     86e:	d004      	beq.n	87a <usb_d_ep_register_callback+0x26>
     870:	2d02      	cmp	r5, #2
     872:	d00c      	beq.n	88e <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     874:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     876:	4a09      	ldr	r2, [pc, #36]	; (89c <usb_d_ep_register_callback+0x48>)
     878:	e7f4      	b.n	864 <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     87a:	0140      	lsls	r0, r0, #5
     87c:	4b08      	ldr	r3, [pc, #32]	; (8a0 <usb_d_ep_register_callback+0x4c>)
     87e:	1818      	adds	r0, r3, r0
     880:	6142      	str	r2, [r0, #20]
		break;
     882:	e7f7      	b.n	874 <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     884:	0140      	lsls	r0, r0, #5
     886:	4b06      	ldr	r3, [pc, #24]	; (8a0 <usb_d_ep_register_callback+0x4c>)
     888:	1818      	adds	r0, r3, r0
     88a:	6182      	str	r2, [r0, #24]
		break;
     88c:	e7f2      	b.n	874 <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     88e:	0140      	lsls	r0, r0, #5
     890:	4b03      	ldr	r3, [pc, #12]	; (8a0 <usb_d_ep_register_callback+0x4c>)
     892:	1818      	adds	r0, r3, r0
     894:	61c2      	str	r2, [r0, #28]
		break;
     896:	e7ed      	b.n	874 <usb_d_ep_register_callback+0x20>
     898:	000002e1 	.word	0x000002e1
     89c:	00000325 	.word	0x00000325
     8a0:	20000088 	.word	0x20000088

000008a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     8a4:	2800      	cmp	r0, #0
     8a6:	d100      	bne.n	8aa <assert+0x6>
		__asm("BKPT #0");
     8a8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     8aa:	4770      	bx	lr

000008ac <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     8ac:	6803      	ldr	r3, [r0, #0]
     8ae:	2b00      	cmp	r3, #0
     8b0:	d00a      	beq.n	8c8 <is_list_element+0x1c>
		if (it == element) {
     8b2:	428b      	cmp	r3, r1
     8b4:	d00a      	beq.n	8cc <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	2b00      	cmp	r3, #0
     8ba:	d003      	beq.n	8c4 <is_list_element+0x18>
		if (it == element) {
     8bc:	4299      	cmp	r1, r3
     8be:	d1fa      	bne.n	8b6 <is_list_element+0xa>
			return true;
     8c0:	2001      	movs	r0, #1
     8c2:	e000      	b.n	8c6 <is_list_element+0x1a>
		}
	}

	return false;
     8c4:	2000      	movs	r0, #0
}
     8c6:	4770      	bx	lr
	return false;
     8c8:	2000      	movs	r0, #0
     8ca:	e7fc      	b.n	8c6 <is_list_element+0x1a>
			return true;
     8cc:	2001      	movs	r0, #1
     8ce:	e7fa      	b.n	8c6 <is_list_element+0x1a>

000008d0 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     8d0:	b570      	push	{r4, r5, r6, lr}
     8d2:	0005      	movs	r5, r0
     8d4:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     8d6:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     8d8:	4b0a      	ldr	r3, [pc, #40]	; (904 <list_insert_at_end+0x34>)
     8da:	4798      	blx	r3
     8dc:	2301      	movs	r3, #1
     8de:	4058      	eors	r0, r3
     8e0:	b2c0      	uxtb	r0, r0
     8e2:	224f      	movs	r2, #79	; 0x4f
     8e4:	4908      	ldr	r1, [pc, #32]	; (908 <list_insert_at_end+0x38>)
     8e6:	4b09      	ldr	r3, [pc, #36]	; (90c <list_insert_at_end+0x3c>)
     8e8:	4798      	blx	r3

	if (!list->head) {
     8ea:	682b      	ldr	r3, [r5, #0]
     8ec:	2b00      	cmp	r3, #0
     8ee:	d103      	bne.n	8f8 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     8f0:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     8f2:	6033      	str	r3, [r6, #0]
		return;
     8f4:	e005      	b.n	902 <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     8f6:	001c      	movs	r4, r3
	while (it->next) {
     8f8:	6823      	ldr	r3, [r4, #0]
     8fa:	2b00      	cmp	r3, #0
     8fc:	d1fb      	bne.n	8f6 <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     8fe:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     900:	6033      	str	r3, [r6, #0]
}
     902:	bd70      	pop	{r4, r5, r6, pc}
     904:	000008ad 	.word	0x000008ad
     908:	00002ba0 	.word	0x00002ba0
     90c:	000008a5 	.word	0x000008a5

00000910 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     910:	b510      	push	{r4, lr}
     912:	0003      	movs	r3, r0
		return (ms * (freq / 10000) + 2) / 3 * 10;
     914:	20c8      	movs	r0, #200	; 0xc8
     916:	0040      	lsls	r0, r0, #1
     918:	4358      	muls	r0, r3
     91a:	3002      	adds	r0, #2
     91c:	2103      	movs	r1, #3
     91e:	4b03      	ldr	r3, [pc, #12]	; (92c <_get_cycles_for_ms+0x1c>)
     920:	4798      	blx	r3
     922:	0003      	movs	r3, r0
     924:	0080      	lsls	r0, r0, #2
     926:	18c0      	adds	r0, r0, r3
     928:	0040      	lsls	r0, r0, #1
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     92a:	bd10      	pop	{r4, pc}
     92c:	00002a1d 	.word	0x00002a1d

00000930 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     930:	3901      	subs	r1, #1
     932:	d8fd      	bhi.n	930 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     934:	4770      	bx	lr
	...

00000938 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     938:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     93a:	4b09      	ldr	r3, [pc, #36]	; (960 <_init_chip+0x28>)
     93c:	685a      	ldr	r2, [r3, #4]
     93e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     940:	2002      	movs	r0, #2
     942:	4b08      	ldr	r3, [pc, #32]	; (964 <_init_chip+0x2c>)
     944:	4798      	blx	r3

	_osc32kctrl_init_sources();
     946:	4b08      	ldr	r3, [pc, #32]	; (968 <_init_chip+0x30>)
     948:	4798      	blx	r3
	_oscctrl_init_sources();
     94a:	4b08      	ldr	r3, [pc, #32]	; (96c <_init_chip+0x34>)
     94c:	4798      	blx	r3
	_mclk_init();
     94e:	4b08      	ldr	r3, [pc, #32]	; (970 <_init_chip+0x38>)
     950:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     952:	4b08      	ldr	r3, [pc, #32]	; (974 <_init_chip+0x3c>)
     954:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     956:	20ff      	movs	r0, #255	; 0xff
     958:	4b07      	ldr	r3, [pc, #28]	; (978 <_init_chip+0x40>)
     95a:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     95c:	bd10      	pop	{r4, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	41004000 	.word	0x41004000
     964:	00000a07 	.word	0x00000a07
     968:	000009b5 	.word	0x000009b5
     96c:	000009cd 	.word	0x000009cd
     970:	000009a1 	.word	0x000009a1
     974:	00000a05 	.word	0x00000a05
     978:	0000097d 	.word	0x0000097d

0000097c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     97c:	07c3      	lsls	r3, r0, #31
     97e:	d507      	bpl.n	990 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     980:	4a04      	ldr	r2, [pc, #16]	; (994 <_gclk_init_generators_by_fref+0x18>)
     982:	4b05      	ldr	r3, [pc, #20]	; (998 <_gclk_init_generators_by_fref+0x1c>)
     984:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     986:	0019      	movs	r1, r3
     988:	4a04      	ldr	r2, [pc, #16]	; (99c <_gclk_init_generators_by_fref+0x20>)
     98a:	684b      	ldr	r3, [r1, #4]
     98c:	4213      	tst	r3, r2
     98e:	d1fc      	bne.n	98a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     990:	4770      	bx	lr
     992:	46c0      	nop			; (mov r8, r8)
     994:	00010106 	.word	0x00010106
     998:	40001800 	.word	0x40001800
     99c:	000007fd 	.word	0x000007fd

000009a0 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     9a0:	4b03      	ldr	r3, [pc, #12]	; (9b0 <_mclk_init+0x10>)
     9a2:	2208      	movs	r2, #8
     9a4:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     9a6:	3a04      	subs	r2, #4
     9a8:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     9aa:	3a03      	subs	r2, #3
     9ac:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     9ae:	4770      	bx	lr
     9b0:	40000400 	.word	0x40000400

000009b4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     9b4:	4b04      	ldr	r3, [pc, #16]	; (9c8 <_osc32kctrl_init_sources+0x14>)
     9b6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     9b8:	21f8      	movs	r1, #248	; 0xf8
     9ba:	0149      	lsls	r1, r1, #5
     9bc:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     9be:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     9c0:	2201      	movs	r2, #1
     9c2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     9c4:	4770      	bx	lr
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	40001000 	.word	0x40001000

000009cc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     9cc:	2282      	movs	r2, #130	; 0x82
     9ce:	4b0c      	ldr	r3, [pc, #48]	; (a00 <_oscctrl_init_sources+0x34>)
     9d0:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9d2:	0018      	movs	r0, r3
     9d4:	2138      	movs	r1, #56	; 0x38
     9d6:	3a80      	subs	r2, #128	; 0x80
     9d8:	5c43      	ldrb	r3, [r0, r1]
     9da:	4213      	tst	r3, r2
     9dc:	d1fc      	bne.n	9d8 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     9de:	4908      	ldr	r1, [pc, #32]	; (a00 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     9e0:	2210      	movs	r2, #16
     9e2:	68cb      	ldr	r3, [r1, #12]
     9e4:	421a      	tst	r2, r3
     9e6:	d0fc      	beq.n	9e2 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     9e8:	4a05      	ldr	r2, [pc, #20]	; (a00 <_oscctrl_init_sources+0x34>)
     9ea:	7d13      	ldrb	r3, [r2, #20]
     9ec:	2180      	movs	r1, #128	; 0x80
     9ee:	430b      	orrs	r3, r1
     9f0:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     9f2:	0010      	movs	r0, r2
     9f4:	3948      	subs	r1, #72	; 0x48
     9f6:	220e      	movs	r2, #14
     9f8:	5c43      	ldrb	r3, [r0, r1]
     9fa:	4213      	tst	r3, r2
     9fc:	d1fc      	bne.n	9f8 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     9fe:	4770      	bx	lr
     a00:	40000c00 	.word	0x40000c00

00000a04 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     a04:	4770      	bx	lr

00000a06 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     a06:	2380      	movs	r3, #128	; 0x80
     a08:	05db      	lsls	r3, r3, #23
     a0a:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     a0c:	2203      	movs	r2, #3
     a0e:	4013      	ands	r3, r2
     a10:	4298      	cmp	r0, r3
     a12:	d00c      	beq.n	a2e <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     a14:	2280      	movs	r2, #128	; 0x80
     a16:	05d2      	lsls	r2, r2, #23
     a18:	23ff      	movs	r3, #255	; 0xff
     a1a:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     a1c:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     a1e:	2103      	movs	r1, #3
     a20:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     a22:	4008      	ands	r0, r1
     a24:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     a26:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     a28:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     a2a:	2b00      	cmp	r3, #0
     a2c:	d0fc      	beq.n	a28 <_set_performance_level+0x22>
			;
	}
}
     a2e:	4770      	bx	lr

00000a30 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     a30:	2000      	movs	r0, #0
     a32:	4770      	bx	lr

00000a34 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     a34:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     a36:	7c83      	ldrb	r3, [r0, #18]
     a38:	220f      	movs	r2, #15
     a3a:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     a3c:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     a3e:	3a08      	subs	r2, #8
     a40:	400a      	ands	r2, r1
     a42:	2a01      	cmp	r2, #1
     a44:	d00b      	beq.n	a5e <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     a46:	015a      	lsls	r2, r3, #5
     a48:	491a      	ldr	r1, [pc, #104]	; (ab4 <_usb_d_dev_handle_setup+0x80>)
     a4a:	468c      	mov	ip, r1
     a4c:	4462      	add	r2, ip
     a4e:	2110      	movs	r1, #16
     a50:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     a52:	015b      	lsls	r3, r3, #5
     a54:	4a18      	ldr	r2, [pc, #96]	; (ab8 <_usb_d_dev_handle_setup+0x84>)
     a56:	4694      	mov	ip, r2
     a58:	4463      	add	r3, ip
     a5a:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     a5c:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     a5e:	064a      	lsls	r2, r1, #25
     a60:	d50f      	bpl.n	a82 <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
     a62:	7cc2      	ldrb	r2, [r0, #19]
     a64:	2140      	movs	r1, #64	; 0x40
     a66:	438a      	bics	r2, r1
     a68:	74c2      	strb	r2, [r0, #19]
     a6a:	015a      	lsls	r2, r3, #5
     a6c:	2482      	movs	r4, #130	; 0x82
     a6e:	05e4      	lsls	r4, r4, #23
     a70:	46a4      	mov	ip, r4
     a72:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     a74:	2580      	movs	r5, #128	; 0x80
     a76:	2482      	movs	r4, #130	; 0x82
     a78:	0064      	lsls	r4, r4, #1
     a7a:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     a7c:	2406      	movs	r4, #6
     a7e:	34ff      	adds	r4, #255	; 0xff
     a80:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     a82:	7cc2      	ldrb	r2, [r0, #19]
     a84:	2108      	movs	r1, #8
     a86:	438a      	bics	r2, r1
     a88:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     a8a:	490c      	ldr	r1, [pc, #48]	; (abc <_usb_d_dev_handle_setup+0x88>)
     a8c:	015a      	lsls	r2, r3, #5
     a8e:	188c      	adds	r4, r1, r2
     a90:	2500      	movs	r5, #0
     a92:	72a5      	strb	r5, [r4, #10]
     a94:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     a96:	0013      	movs	r3, r2
     a98:	4c06      	ldr	r4, [pc, #24]	; (ab4 <_usb_d_dev_handle_setup+0x80>)
     a9a:	46a4      	mov	ip, r4
     a9c:	4463      	add	r3, ip
     a9e:	246f      	movs	r4, #111	; 0x6f
     aa0:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <_usb_d_dev_handle_setup+0x84>)
     aa4:	469c      	mov	ip, r3
     aa6:	4462      	add	r2, ip
     aa8:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     aaa:	7c80      	ldrb	r0, [r0, #18]
     aac:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     aae:	4798      	blx	r3
     ab0:	e7d4      	b.n	a5c <_usb_d_dev_handle_setup+0x28>
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	41000100 	.word	0x41000100
     ab8:	41000108 	.word	0x41000108
     abc:	20000108 	.word	0x20000108

00000ac0 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     ac0:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     ac2:	2220      	movs	r2, #32
     ac4:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     ac6:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ac8:	7c81      	ldrb	r1, [r0, #18]
     aca:	230f      	movs	r3, #15
     acc:	400b      	ands	r3, r1
     ace:	015b      	lsls	r3, r3, #5
     ad0:	4905      	ldr	r1, [pc, #20]	; (ae8 <_usb_d_dev_handle_stall+0x28>)
     ad2:	468c      	mov	ip, r1
     ad4:	4463      	add	r3, ip
     ad6:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     ad8:	6882      	ldr	r2, [r0, #8]
     ada:	7c80      	ldrb	r0, [r0, #18]
     adc:	4b03      	ldr	r3, [pc, #12]	; (aec <_usb_d_dev_handle_stall+0x2c>)
     ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     ae0:	2101      	movs	r1, #1
     ae2:	4798      	blx	r3
}
     ae4:	bd10      	pop	{r4, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	41000108 	.word	0x41000108
     aec:	20000108 	.word	0x20000108

00000af0 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     af0:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     af2:	7c83      	ldrb	r3, [r0, #18]
     af4:	2bff      	cmp	r3, #255	; 0xff
     af6:	d002      	beq.n	afe <_usb_d_dev_trans_done+0xe>
     af8:	7cc2      	ldrb	r2, [r0, #19]
     afa:	0652      	lsls	r2, r2, #25
     afc:	d400      	bmi.n	b00 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     afe:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     b00:	7cc2      	ldrb	r2, [r0, #19]
     b02:	2440      	movs	r4, #64	; 0x40
     b04:	43a2      	bics	r2, r4
     b06:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     b08:	6882      	ldr	r2, [r0, #8]
     b0a:	4802      	ldr	r0, [pc, #8]	; (b14 <_usb_d_dev_trans_done+0x24>)
     b0c:	6f04      	ldr	r4, [r0, #112]	; 0x70
     b0e:	0018      	movs	r0, r3
     b10:	47a0      	blx	r4
     b12:	e7f4      	b.n	afe <_usb_d_dev_trans_done+0xe>
     b14:	20000108 	.word	0x20000108

00000b18 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     b18:	b530      	push	{r4, r5, lr}
     b1a:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     b1c:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     b1e:	ac01      	add	r4, sp, #4
     b20:	2525      	movs	r5, #37	; 0x25
     b22:	7025      	strb	r5, [r4, #0]
     b24:	3525      	adds	r5, #37	; 0x25
     b26:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     b28:	2bff      	cmp	r3, #255	; 0xff
     b2a:	d01b      	beq.n	b64 <_usb_d_dev_trans_stop+0x4c>
     b2c:	7cc4      	ldrb	r4, [r0, #19]
     b2e:	0664      	lsls	r4, r4, #25
     b30:	d518      	bpl.n	b64 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     b32:	240f      	movs	r4, #15
     b34:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
     b36:	2900      	cmp	r1, #0
     b38:	d016      	beq.n	b68 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     b3a:	015c      	lsls	r4, r3, #5
     b3c:	4d0e      	ldr	r5, [pc, #56]	; (b78 <_usb_d_dev_trans_stop+0x60>)
     b3e:	46ac      	mov	ip, r5
     b40:	4464      	add	r4, ip
     b42:	2580      	movs	r5, #128	; 0x80
     b44:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     b46:	ac01      	add	r4, sp, #4
     b48:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     b4a:	0159      	lsls	r1, r3, #5
     b4c:	4d0a      	ldr	r5, [pc, #40]	; (b78 <_usb_d_dev_trans_stop+0x60>)
     b4e:	46ac      	mov	ip, r5
     b50:	4461      	add	r1, ip
     b52:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     b54:	015b      	lsls	r3, r3, #5
     b56:	4909      	ldr	r1, [pc, #36]	; (b7c <_usb_d_dev_trans_stop+0x64>)
     b58:	468c      	mov	ip, r1
     b5a:	4463      	add	r3, ip
     b5c:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     b5e:	0011      	movs	r1, r2
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <_usb_d_dev_trans_stop+0x68>)
     b62:	4798      	blx	r3
}
     b64:	b003      	add	sp, #12
     b66:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     b68:	015c      	lsls	r4, r3, #5
     b6a:	4d03      	ldr	r5, [pc, #12]	; (b78 <_usb_d_dev_trans_stop+0x60>)
     b6c:	46ac      	mov	ip, r5
     b6e:	4464      	add	r4, ip
     b70:	2540      	movs	r5, #64	; 0x40
     b72:	7165      	strb	r5, [r4, #5]
     b74:	e7e7      	b.n	b46 <_usb_d_dev_trans_stop+0x2e>
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	41000100 	.word	0x41000100
     b7c:	41000108 	.word	0x41000108
     b80:	00000af1 	.word	0x00000af1

00000b84 <_usb_d_dev_handle_trfail>:
{
     b84:	b570      	push	{r4, r5, r6, lr}
     b86:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     b88:	7c83      	ldrb	r3, [r0, #18]
     b8a:	220f      	movs	r2, #15
     b8c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     b8e:	aa01      	add	r2, sp, #4
     b90:	2404      	movs	r4, #4
     b92:	7014      	strb	r4, [r2, #0]
     b94:	3404      	adds	r4, #4
     b96:	7054      	strb	r4, [r2, #1]
     b98:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
     b9a:	2900      	cmp	r1, #0
     b9c:	d032      	beq.n	c04 <_usb_d_dev_handle_trfail+0x80>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     b9e:	001a      	movs	r2, r3
     ba0:	3208      	adds	r2, #8
     ba2:	0152      	lsls	r2, r2, #5
     ba4:	2482      	movs	r4, #130	; 0x82
     ba6:	05e4      	lsls	r4, r4, #23
     ba8:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     baa:	0664      	lsls	r4, r4, #25
     bac:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
     bae:	010a      	lsls	r2, r1, #4
     bb0:	1952      	adds	r2, r2, r5
     bb2:	4d30      	ldr	r5, [pc, #192]	; (c74 <_usb_d_dev_handle_trfail+0xf0>)
     bb4:	18aa      	adds	r2, r5, r2
     bb6:	7a95      	ldrb	r5, [r2, #10]
     bb8:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     bba:	2c02      	cmp	r4, #2
     bbc:	d02b      	beq.n	c16 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
     bbe:	07ac      	lsls	r4, r5, #30
     bc0:	d542      	bpl.n	c48 <_usb_d_dev_handle_trfail+0xc4>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     bc2:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     bc4:	7a94      	ldrb	r4, [r2, #10]
     bc6:	2602      	movs	r6, #2
     bc8:	43b4      	bics	r4, r6
     bca:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     bcc:	aa01      	add	r2, sp, #4
     bce:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     bd0:	015a      	lsls	r2, r3, #5
     bd2:	4e29      	ldr	r6, [pc, #164]	; (c78 <_usb_d_dev_handle_trfail+0xf4>)
     bd4:	46b4      	mov	ip, r6
     bd6:	4462      	add	r2, ip
     bd8:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     bda:	015b      	lsls	r3, r3, #5
     bdc:	4a27      	ldr	r2, [pc, #156]	; (c7c <_usb_d_dev_handle_trfail+0xf8>)
     bde:	4694      	mov	ip, r2
     be0:	4463      	add	r3, ip
     be2:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     be4:	2307      	movs	r3, #7
     be6:	402b      	ands	r3, r5
     be8:	2b01      	cmp	r3, #1
     bea:	d140      	bne.n	c6e <_usb_d_dev_handle_trfail+0xea>
     bec:	7cc3      	ldrb	r3, [r0, #19]
     bee:	065b      	lsls	r3, r3, #25
     bf0:	d53d      	bpl.n	c6e <_usb_d_dev_handle_trfail+0xea>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     bf2:	7cc3      	ldrb	r3, [r0, #19]
     bf4:	09db      	lsrs	r3, r3, #7
     bf6:	4299      	cmp	r1, r3
     bf8:	d039      	beq.n	c6e <_usb_d_dev_handle_trfail+0xea>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     bfa:	2200      	movs	r2, #0
     bfc:	0019      	movs	r1, r3
     bfe:	4b20      	ldr	r3, [pc, #128]	; (c80 <_usb_d_dev_handle_trfail+0xfc>)
     c00:	4798      	blx	r3
     c02:	e034      	b.n	c6e <_usb_d_dev_handle_trfail+0xea>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     c04:	001a      	movs	r2, r3
     c06:	3208      	adds	r2, #8
     c08:	0152      	lsls	r2, r2, #5
     c0a:	2482      	movs	r4, #130	; 0x82
     c0c:	05e4      	lsls	r4, r4, #23
     c0e:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     c10:	2207      	movs	r2, #7
     c12:	4014      	ands	r4, r2
     c14:	e7cb      	b.n	bae <_usb_d_dev_handle_trfail+0x2a>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     c16:	07ec      	lsls	r4, r5, #31
     c18:	d5d1      	bpl.n	bbe <_usb_d_dev_handle_trfail+0x3a>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     c1a:	7a94      	ldrb	r4, [r2, #10]
     c1c:	2501      	movs	r5, #1
     c1e:	43ac      	bics	r4, r5
     c20:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     c22:	aa01      	add	r2, sp, #4
     c24:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c26:	015a      	lsls	r2, r3, #5
     c28:	4d13      	ldr	r5, [pc, #76]	; (c78 <_usb_d_dev_handle_trfail+0xf4>)
     c2a:	46ac      	mov	ip, r5
     c2c:	4462      	add	r2, ip
     c2e:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c30:	015b      	lsls	r3, r3, #5
     c32:	4a12      	ldr	r2, [pc, #72]	; (c7c <_usb_d_dev_handle_trfail+0xf8>)
     c34:	4694      	mov	ip, r2
     c36:	4463      	add	r3, ip
     c38:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     c3a:	1e4b      	subs	r3, r1, #1
     c3c:	4199      	sbcs	r1, r3
     c3e:	b2c9      	uxtb	r1, r1
     c40:	2204      	movs	r2, #4
     c42:	4b0f      	ldr	r3, [pc, #60]	; (c80 <_usb_d_dev_handle_trfail+0xfc>)
     c44:	4798      	blx	r3
     c46:	e012      	b.n	c6e <_usb_d_dev_handle_trfail+0xea>
	bank->STATUS_BK.reg     = 0;
     c48:	005a      	lsls	r2, r3, #1
     c4a:	1852      	adds	r2, r2, r1
     c4c:	0112      	lsls	r2, r2, #4
     c4e:	4809      	ldr	r0, [pc, #36]	; (c74 <_usb_d_dev_handle_trfail+0xf0>)
     c50:	1882      	adds	r2, r0, r2
     c52:	2000      	movs	r0, #0
     c54:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     c56:	aa01      	add	r2, sp, #4
     c58:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     c5a:	015a      	lsls	r2, r3, #5
     c5c:	4806      	ldr	r0, [pc, #24]	; (c78 <_usb_d_dev_handle_trfail+0xf4>)
     c5e:	4684      	mov	ip, r0
     c60:	4462      	add	r2, ip
     c62:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c64:	015b      	lsls	r3, r3, #5
     c66:	4a05      	ldr	r2, [pc, #20]	; (c7c <_usb_d_dev_handle_trfail+0xf8>)
     c68:	4694      	mov	ip, r2
     c6a:	4463      	add	r3, ip
     c6c:	7019      	strb	r1, [r3, #0]
}
     c6e:	b002      	add	sp, #8
     c70:	bd70      	pop	{r4, r5, r6, pc}
     c72:	46c0      	nop			; (mov r8, r8)
     c74:	20000108 	.word	0x20000108
     c78:	41000100 	.word	0x41000100
     c7c:	41000108 	.word	0x41000108
     c80:	00000b19 	.word	0x00000b19

00000c84 <_usb_d_dev_reset_epts>:
{
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	46c6      	mov	lr, r8
     c88:	b500      	push	{lr}
     c8a:	4d0c      	ldr	r5, [pc, #48]	; (cbc <_usb_d_dev_reset_epts+0x38>)
     c8c:	002c      	movs	r4, r5
     c8e:	3474      	adds	r4, #116	; 0x74
     c90:	3529      	adds	r5, #41	; 0x29
     c92:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     c94:	4b0a      	ldr	r3, [pc, #40]	; (cc0 <_usb_d_dev_reset_epts+0x3c>)
     c96:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
     c98:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
     c9a:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     c9c:	2103      	movs	r1, #3
     c9e:	0020      	movs	r0, r4
     ca0:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
     ca2:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
     ca4:	74e6      	strb	r6, [r4, #19]
     ca6:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     ca8:	42ac      	cmp	r4, r5
     caa:	d1f7      	bne.n	c9c <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     cac:	2260      	movs	r2, #96	; 0x60
     cae:	2100      	movs	r1, #0
     cb0:	4802      	ldr	r0, [pc, #8]	; (cbc <_usb_d_dev_reset_epts+0x38>)
     cb2:	4b04      	ldr	r3, [pc, #16]	; (cc4 <_usb_d_dev_reset_epts+0x40>)
     cb4:	4798      	blx	r3
}
     cb6:	bc04      	pop	{r2}
     cb8:	4690      	mov	r8, r2
     cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cbc:	20000108 	.word	0x20000108
     cc0:	00000af1 	.word	0x00000af1
     cc4:	00002b8f 	.word	0x00002b8f

00000cc8 <_usb_d_dev_in_next>:
{
     cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     cca:	46c6      	mov	lr, r8
     ccc:	b500      	push	{lr}
     cce:	0004      	movs	r4, r0
     cd0:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     cd2:	7c83      	ldrb	r3, [r0, #18]
     cd4:	250f      	movs	r5, #15
     cd6:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     cd8:	2900      	cmp	r1, #0
     cda:	d100      	bne.n	cde <_usb_d_dev_in_next+0x16>
     cdc:	e0aa      	b.n	e34 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     cde:	016a      	lsls	r2, r5, #5
     ce0:	4b5a      	ldr	r3, [pc, #360]	; (e4c <_usb_d_dev_in_next+0x184>)
     ce2:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     ce4:	6958      	ldr	r0, [r3, #20]
     ce6:	0480      	lsls	r0, r0, #18
     ce8:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     cea:	8a23      	ldrh	r3, [r4, #16]
     cec:	4a58      	ldr	r2, [pc, #352]	; (e50 <_usb_d_dev_in_next+0x188>)
     cee:	4293      	cmp	r3, r2
     cf0:	d100      	bne.n	cf4 <_usb_d_dev_in_next+0x2c>
     cf2:	e09a      	b.n	e2a <_usb_d_dev_in_next+0x162>
     cf4:	3b01      	subs	r3, #1
     cf6:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     cf8:	7ce3      	ldrb	r3, [r4, #19]
     cfa:	2707      	movs	r7, #7
     cfc:	401f      	ands	r7, r3
	if (isr) {
     cfe:	2e00      	cmp	r6, #0
     d00:	d005      	beq.n	d0e <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     d02:	016b      	lsls	r3, r5, #5
     d04:	4953      	ldr	r1, [pc, #332]	; (e54 <_usb_d_dev_in_next+0x18c>)
     d06:	468c      	mov	ip, r1
     d08:	4463      	add	r3, ip
     d0a:	2102      	movs	r1, #2
     d0c:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
     d0e:	68a3      	ldr	r3, [r4, #8]
     d10:	18c1      	adds	r1, r0, r3
     d12:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
     d14:	6863      	ldr	r3, [r4, #4]
     d16:	4299      	cmp	r1, r3
     d18:	d24a      	bcs.n	db0 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
     d1a:	1a5b      	subs	r3, r3, r1
     d1c:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
     d1e:	7ce2      	ldrb	r2, [r4, #19]
     d20:	0692      	lsls	r2, r2, #26
     d22:	d535      	bpl.n	d90 <_usb_d_dev_in_next+0xc8>
     d24:	8a22      	ldrh	r2, [r4, #16]
     d26:	1c10      	adds	r0, r2, #0
     d28:	b292      	uxth	r2, r2
     d2a:	429a      	cmp	r2, r3
     d2c:	d900      	bls.n	d30 <_usb_d_dev_in_next+0x68>
     d2e:	1c18      	adds	r0, r3, #0
     d30:	b283      	uxth	r3, r0
     d32:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     d34:	6823      	ldr	r3, [r4, #0]
     d36:	469c      	mov	ip, r3
     d38:	4461      	add	r1, ip
     d3a:	4642      	mov	r2, r8
     d3c:	68e0      	ldr	r0, [r4, #12]
     d3e:	4b46      	ldr	r3, [pc, #280]	; (e58 <_usb_d_dev_in_next+0x190>)
     d40:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     d42:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
     d44:	016a      	lsls	r2, r5, #5
     d46:	4b41      	ldr	r3, [pc, #260]	; (e4c <_usb_d_dev_in_next+0x184>)
     d48:	189b      	adds	r3, r3, r2
     d4a:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     d4c:	016a      	lsls	r2, r5, #5
     d4e:	4b3f      	ldr	r3, [pc, #252]	; (e4c <_usb_d_dev_in_next+0x184>)
     d50:	189b      	adds	r3, r3, r2
     d52:	695a      	ldr	r2, [r3, #20]
     d54:	4641      	mov	r1, r8
     d56:	0489      	lsls	r1, r1, #18
     d58:	0c89      	lsrs	r1, r1, #18
     d5a:	0b92      	lsrs	r2, r2, #14
     d5c:	0392      	lsls	r2, r2, #14
     d5e:	430a      	orrs	r2, r1
     d60:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     d62:	695a      	ldr	r2, [r3, #20]
     d64:	493d      	ldr	r1, [pc, #244]	; (e5c <_usb_d_dev_in_next+0x194>)
     d66:	400a      	ands	r2, r1
     d68:	615a      	str	r2, [r3, #20]
	if (!isr) {
     d6a:	2e00      	cmp	r6, #0
     d6c:	d107      	bne.n	d7e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
     d6e:	2f01      	cmp	r7, #1
     d70:	d059      	beq.n	e26 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
     d72:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     d74:	016b      	lsls	r3, r5, #5
     d76:	493a      	ldr	r1, [pc, #232]	; (e60 <_usb_d_dev_in_next+0x198>)
     d78:	468c      	mov	ip, r1
     d7a:	4463      	add	r3, ip
     d7c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     d7e:	016d      	lsls	r5, r5, #5
     d80:	4b34      	ldr	r3, [pc, #208]	; (e54 <_usb_d_dev_in_next+0x18c>)
     d82:	469c      	mov	ip, r3
     d84:	4465      	add	r5, ip
     d86:	2380      	movs	r3, #128	; 0x80
     d88:	716b      	strb	r3, [r5, #5]
}
     d8a:	bc04      	pop	{r2}
     d8c:	4690      	mov	r8, r2
     d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d90:	1c1a      	adds	r2, r3, #0
     d92:	2080      	movs	r0, #128	; 0x80
     d94:	0180      	lsls	r0, r0, #6
     d96:	4283      	cmp	r3, r0
     d98:	d901      	bls.n	d9e <_usb_d_dev_in_next+0xd6>
     d9a:	4b32      	ldr	r3, [pc, #200]	; (e64 <_usb_d_dev_in_next+0x19c>)
     d9c:	881a      	ldrh	r2, [r3, #0]
     d9e:	b293      	uxth	r3, r2
     da0:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     da2:	6823      	ldr	r3, [r4, #0]
     da4:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
     da6:	016a      	lsls	r2, r5, #5
     da8:	4b28      	ldr	r3, [pc, #160]	; (e4c <_usb_d_dev_in_next+0x184>)
     daa:	189b      	adds	r3, r3, r2
     dac:	6119      	str	r1, [r3, #16]
     dae:	e7cd      	b.n	d4c <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
     db0:	7ce3      	ldrb	r3, [r4, #19]
     db2:	06db      	lsls	r3, r3, #27
     db4:	d50f      	bpl.n	dd6 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
     db6:	7ce3      	ldrb	r3, [r4, #19]
     db8:	2210      	movs	r2, #16
     dba:	4393      	bics	r3, r2
     dbc:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     dbe:	016a      	lsls	r2, r5, #5
     dc0:	4b22      	ldr	r3, [pc, #136]	; (e4c <_usb_d_dev_in_next+0x184>)
     dc2:	189b      	adds	r3, r3, r2
     dc4:	695a      	ldr	r2, [r3, #20]
     dc6:	0b92      	lsrs	r2, r2, #14
     dc8:	0392      	lsls	r2, r2, #14
     dca:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     dcc:	695a      	ldr	r2, [r3, #20]
     dce:	4923      	ldr	r1, [pc, #140]	; (e5c <_usb_d_dev_in_next+0x194>)
     dd0:	400a      	ands	r2, r1
     dd2:	615a      	str	r2, [r3, #20]
     dd4:	e7c9      	b.n	d6a <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
     dd6:	2f01      	cmp	r7, #1
     dd8:	d00e      	beq.n	df8 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     dda:	016d      	lsls	r5, r5, #5
     ddc:	4b22      	ldr	r3, [pc, #136]	; (e68 <_usb_d_dev_in_next+0x1a0>)
     dde:	469c      	mov	ip, r3
     de0:	4465      	add	r5, ip
     de2:	234a      	movs	r3, #74	; 0x4a
     de4:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
     de6:	8a21      	ldrh	r1, [r4, #16]
     de8:	4002      	ands	r2, r0
     dea:	4291      	cmp	r1, r2
     dec:	d00b      	beq.n	e06 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     dee:	2100      	movs	r1, #0
     df0:	0020      	movs	r0, r4
     df2:	4b1e      	ldr	r3, [pc, #120]	; (e6c <_usb_d_dev_in_next+0x1a4>)
     df4:	4798      	blx	r3
	return;
     df6:	e7c8      	b.n	d8a <_usb_d_dev_in_next+0xc2>
     df8:	016d      	lsls	r5, r5, #5
     dfa:	4b1b      	ldr	r3, [pc, #108]	; (e68 <_usb_d_dev_in_next+0x1a0>)
     dfc:	469c      	mov	ip, r3
     dfe:	4465      	add	r5, ip
     e00:	234b      	movs	r3, #75	; 0x4b
     e02:	702b      	strb	r3, [r5, #0]
     e04:	e7ef      	b.n	de6 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
     e06:	7ce3      	ldrb	r3, [r4, #19]
     e08:	2240      	movs	r2, #64	; 0x40
     e0a:	4393      	bics	r3, r2
     e0c:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     e0e:	7ca0      	ldrb	r0, [r4, #18]
     e10:	4b0e      	ldr	r3, [pc, #56]	; (e4c <_usb_d_dev_in_next+0x184>)
     e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     e14:	68a1      	ldr	r1, [r4, #8]
     e16:	4798      	blx	r3
     e18:	2800      	cmp	r0, #0
     e1a:	d1b6      	bne.n	d8a <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
     e1c:	7ce3      	ldrb	r3, [r4, #19]
     e1e:	2240      	movs	r2, #64	; 0x40
     e20:	4313      	orrs	r3, r2
     e22:	74e3      	strb	r3, [r4, #19]
     e24:	e7e3      	b.n	dee <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
     e26:	224e      	movs	r2, #78	; 0x4e
     e28:	e7a4      	b.n	d74 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     e2a:	7ce7      	ldrb	r7, [r4, #19]
     e2c:	2307      	movs	r3, #7
     e2e:	401f      	ands	r7, r3
     e30:	4a07      	ldr	r2, [pc, #28]	; (e50 <_usb_d_dev_in_next+0x188>)
     e32:	e766      	b.n	d02 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     e34:	8a03      	ldrh	r3, [r0, #16]
     e36:	4a06      	ldr	r2, [pc, #24]	; (e50 <_usb_d_dev_in_next+0x188>)
     e38:	2000      	movs	r0, #0
     e3a:	4293      	cmp	r3, r2
     e3c:	d000      	beq.n	e40 <_usb_d_dev_in_next+0x178>
     e3e:	e759      	b.n	cf4 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     e40:	7ce3      	ldrb	r3, [r4, #19]
     e42:	2707      	movs	r7, #7
     e44:	401f      	ands	r7, r3
     e46:	2000      	movs	r0, #0
     e48:	4a01      	ldr	r2, [pc, #4]	; (e50 <_usb_d_dev_in_next+0x188>)
     e4a:	e760      	b.n	d0e <_usb_d_dev_in_next+0x46>
     e4c:	20000108 	.word	0x20000108
     e50:	000003ff 	.word	0x000003ff
     e54:	41000100 	.word	0x41000100
     e58:	00002b7d 	.word	0x00002b7d
     e5c:	f0003fff 	.word	0xf0003fff
     e60:	41000109 	.word	0x41000109
     e64:	00002bbe 	.word	0x00002bbe
     e68:	41000108 	.word	0x41000108
     e6c:	00000af1 	.word	0x00000af1

00000e70 <_usb_d_dev_out_next>:
{
     e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e72:	46de      	mov	lr, fp
     e74:	4657      	mov	r7, sl
     e76:	464e      	mov	r6, r9
     e78:	4645      	mov	r5, r8
     e7a:	b5e0      	push	{r5, r6, r7, lr}
     e7c:	0004      	movs	r4, r0
     e7e:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     e80:	7c83      	ldrb	r3, [r0, #18]
     e82:	250f      	movs	r5, #15
     e84:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     e86:	2900      	cmp	r1, #0
     e88:	d057      	beq.n	f3a <_usb_d_dev_out_next+0xca>
     e8a:	016a      	lsls	r2, r5, #5
     e8c:	4b7d      	ldr	r3, [pc, #500]	; (1084 <_usb_d_dev_out_next+0x214>)
     e8e:	189b      	adds	r3, r3, r2
     e90:	685a      	ldr	r2, [r3, #4]
     e92:	0112      	lsls	r2, r2, #4
     e94:	0c92      	lsrs	r2, r2, #18
     e96:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     e98:	685f      	ldr	r7, [r3, #4]
     e9a:	04bf      	lsls	r7, r7, #18
     e9c:	0cbf      	lsrs	r7, r7, #18
     e9e:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     ea0:	8a06      	ldrh	r6, [r0, #16]
     ea2:	4b79      	ldr	r3, [pc, #484]	; (1088 <_usb_d_dev_out_next+0x218>)
     ea4:	429e      	cmp	r6, r3
     ea6:	d100      	bne.n	eaa <_usb_d_dev_out_next+0x3a>
     ea8:	e0cd      	b.n	1046 <_usb_d_dev_out_next+0x1d6>
     eaa:	3e01      	subs	r6, #1
     eac:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
     eae:	465f      	mov	r7, fp
     eb0:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     eb2:	7ce3      	ldrb	r3, [r4, #19]
     eb4:	2207      	movs	r2, #7
     eb6:	401a      	ands	r2, r3
     eb8:	4691      	mov	r9, r2
	if (isr) {
     eba:	4643      	mov	r3, r8
     ebc:	2b00      	cmp	r3, #0
     ebe:	d005      	beq.n	ecc <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ec0:	016b      	lsls	r3, r5, #5
     ec2:	4a72      	ldr	r2, [pc, #456]	; (108c <_usb_d_dev_out_next+0x21c>)
     ec4:	4694      	mov	ip, r2
     ec6:	4463      	add	r3, ip
     ec8:	2201      	movs	r2, #1
     eca:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
     ecc:	7ce3      	ldrb	r3, [r4, #19]
     ece:	069b      	lsls	r3, r3, #26
     ed0:	d50f      	bpl.n	ef2 <_usb_d_dev_out_next+0x82>
     ed2:	6863      	ldr	r3, [r4, #4]
     ed4:	2b00      	cmp	r3, #0
     ed6:	d039      	beq.n	f4c <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
     ed8:	68a0      	ldr	r0, [r4, #8]
     eda:	1a1b      	subs	r3, r3, r0
     edc:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
     ede:	6822      	ldr	r2, [r4, #0]
     ee0:	4694      	mov	ip, r2
     ee2:	4460      	add	r0, ip
     ee4:	68e1      	ldr	r1, [r4, #12]
     ee6:	001a      	movs	r2, r3
     ee8:	42bb      	cmp	r3, r7
     eea:	d900      	bls.n	eee <_usb_d_dev_out_next+0x7e>
     eec:	003a      	movs	r2, r7
     eee:	4b68      	ldr	r3, [pc, #416]	; (1090 <_usb_d_dev_out_next+0x220>)
     ef0:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     ef2:	6863      	ldr	r3, [r4, #4]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d029      	beq.n	f4c <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
     ef8:	4642      	mov	r2, r8
     efa:	2a00      	cmp	r2, #0
     efc:	d042      	beq.n	f84 <_usb_d_dev_out_next+0x114>
     efe:	8a22      	ldrh	r2, [r4, #16]
     f00:	42ba      	cmp	r2, r7
     f02:	d93f      	bls.n	f84 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
     f04:	7ce3      	ldrb	r3, [r4, #19]
     f06:	2210      	movs	r2, #16
     f08:	4393      	bics	r3, r2
     f0a:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
     f0c:	68a3      	ldr	r3, [r4, #8]
     f0e:	445b      	add	r3, fp
     f10:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
     f12:	464b      	mov	r3, r9
     f14:	2b01      	cmp	r3, #1
     f16:	d100      	bne.n	f1a <_usb_d_dev_out_next+0xaa>
     f18:	e087      	b.n	102a <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     f1a:	016b      	lsls	r3, r5, #5
     f1c:	4a5d      	ldr	r2, [pc, #372]	; (1094 <_usb_d_dev_out_next+0x224>)
     f1e:	4694      	mov	ip, r2
     f20:	4463      	add	r3, ip
     f22:	2225      	movs	r2, #37	; 0x25
     f24:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
     f26:	2d00      	cmp	r5, #0
     f28:	d102      	bne.n	f30 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
     f2a:	4b56      	ldr	r3, [pc, #344]	; (1084 <_usb_d_dev_out_next+0x214>)
     f2c:	68e2      	ldr	r2, [r4, #12]
     f2e:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     f30:	2100      	movs	r1, #0
     f32:	0020      	movs	r0, r4
     f34:	4b58      	ldr	r3, [pc, #352]	; (1098 <_usb_d_dev_out_next+0x228>)
     f36:	4798      	blx	r3
	return;
     f38:	e059      	b.n	fee <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     f3a:	8a06      	ldrh	r6, [r0, #16]
     f3c:	4b52      	ldr	r3, [pc, #328]	; (1088 <_usb_d_dev_out_next+0x218>)
     f3e:	429e      	cmp	r6, r3
     f40:	d100      	bne.n	f44 <_usb_d_dev_out_next+0xd4>
     f42:	e08e      	b.n	1062 <_usb_d_dev_out_next+0x1f2>
     f44:	2300      	movs	r3, #0
     f46:	469b      	mov	fp, r3
     f48:	469a      	mov	sl, r3
     f4a:	e7ae      	b.n	eaa <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     f4c:	7ce3      	ldrb	r3, [r4, #19]
     f4e:	06db      	lsls	r3, r3, #27
     f50:	d400      	bmi.n	f54 <_usb_d_dev_out_next+0xe4>
     f52:	e07f      	b.n	1054 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
     f54:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
     f56:	2210      	movs	r2, #16
     f58:	4393      	bics	r3, r2
     f5a:	2220      	movs	r2, #32
     f5c:	4313      	orrs	r3, r2
     f5e:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
     f60:	4a48      	ldr	r2, [pc, #288]	; (1084 <_usb_d_dev_out_next+0x214>)
     f62:	016b      	lsls	r3, r5, #5
     f64:	68e1      	ldr	r1, [r4, #12]
     f66:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     f68:	8a21      	ldrh	r1, [r4, #16]
     f6a:	18d3      	adds	r3, r2, r3
     f6c:	685a      	ldr	r2, [r3, #4]
     f6e:	0489      	lsls	r1, r1, #18
     f70:	0909      	lsrs	r1, r1, #4
     f72:	484a      	ldr	r0, [pc, #296]	; (109c <_usb_d_dev_out_next+0x22c>)
     f74:	4002      	ands	r2, r0
     f76:	430a      	orrs	r2, r1
     f78:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     f7a:	685a      	ldr	r2, [r3, #4]
     f7c:	0b92      	lsrs	r2, r2, #14
     f7e:	0392      	lsls	r2, r2, #14
     f80:	605a      	str	r2, [r3, #4]
     f82:	e022      	b.n	fca <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
     f84:	68a2      	ldr	r2, [r4, #8]
     f86:	4452      	add	r2, sl
     f88:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
     f8a:	4293      	cmp	r3, r2
     f8c:	d9c1      	bls.n	f12 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
     f8e:	1a9b      	subs	r3, r3, r2
     f90:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
     f92:	7ce1      	ldrb	r1, [r4, #19]
     f94:	0689      	lsls	r1, r1, #26
     f96:	d530      	bpl.n	ffa <_usb_d_dev_out_next+0x18a>
     f98:	8a22      	ldrh	r2, [r4, #16]
     f9a:	1c11      	adds	r1, r2, #0
     f9c:	b292      	uxth	r2, r2
     f9e:	429a      	cmp	r2, r3
     fa0:	d900      	bls.n	fa4 <_usb_d_dev_out_next+0x134>
     fa2:	1c19      	adds	r1, r3, #0
     fa4:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
     fa6:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
     fa8:	016a      	lsls	r2, r5, #5
     faa:	4936      	ldr	r1, [pc, #216]	; (1084 <_usb_d_dev_out_next+0x214>)
     fac:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     fae:	016a      	lsls	r2, r5, #5
     fb0:	4934      	ldr	r1, [pc, #208]	; (1084 <_usb_d_dev_out_next+0x214>)
     fb2:	1889      	adds	r1, r1, r2
     fb4:	684a      	ldr	r2, [r1, #4]
     fb6:	049b      	lsls	r3, r3, #18
     fb8:	091b      	lsrs	r3, r3, #4
     fba:	4838      	ldr	r0, [pc, #224]	; (109c <_usb_d_dev_out_next+0x22c>)
     fbc:	4002      	ands	r2, r0
     fbe:	4313      	orrs	r3, r2
     fc0:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     fc2:	684b      	ldr	r3, [r1, #4]
     fc4:	0b9b      	lsrs	r3, r3, #14
     fc6:	039b      	lsls	r3, r3, #14
     fc8:	604b      	str	r3, [r1, #4]
	if (!isr) {
     fca:	4643      	mov	r3, r8
     fcc:	2b00      	cmp	r3, #0
     fce:	d108      	bne.n	fe2 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
     fd0:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
     fd2:	464b      	mov	r3, r9
     fd4:	2b01      	cmp	r3, #1
     fd6:	d02f      	beq.n	1038 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     fd8:	016b      	lsls	r3, r5, #5
     fda:	4931      	ldr	r1, [pc, #196]	; (10a0 <_usb_d_dev_out_next+0x230>)
     fdc:	468c      	mov	ip, r1
     fde:	4463      	add	r3, ip
     fe0:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     fe2:	016d      	lsls	r5, r5, #5
     fe4:	4b29      	ldr	r3, [pc, #164]	; (108c <_usb_d_dev_out_next+0x21c>)
     fe6:	469c      	mov	ip, r3
     fe8:	4465      	add	r5, ip
     fea:	2340      	movs	r3, #64	; 0x40
     fec:	712b      	strb	r3, [r5, #4]
}
     fee:	bc3c      	pop	{r2, r3, r4, r5}
     ff0:	4690      	mov	r8, r2
     ff2:	4699      	mov	r9, r3
     ff4:	46a2      	mov	sl, r4
     ff6:	46ab      	mov	fp, r5
     ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
     ffa:	8a21      	ldrh	r1, [r4, #16]
     ffc:	428b      	cmp	r3, r1
     ffe:	d90a      	bls.n	1016 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
    1000:	2180      	movs	r1, #128	; 0x80
    1002:	0189      	lsls	r1, r1, #6
    1004:	428b      	cmp	r3, r1
    1006:	d80d      	bhi.n	1024 <_usb_d_dev_out_next+0x1b4>
    1008:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
    100a:	6821      	ldr	r1, [r4, #0]
    100c:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
    100e:	0169      	lsls	r1, r5, #5
    1010:	481c      	ldr	r0, [pc, #112]	; (1084 <_usb_d_dev_out_next+0x214>)
    1012:	500a      	str	r2, [r1, r0]
    1014:	e7cb      	b.n	fae <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
    1016:	428b      	cmp	r3, r1
    1018:	d2f7      	bcs.n	100a <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
    101a:	7ce1      	ldrb	r1, [r4, #19]
    101c:	2020      	movs	r0, #32
    101e:	4301      	orrs	r1, r0
    1020:	74e1      	strb	r1, [r4, #19]
    1022:	e7f2      	b.n	100a <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
    1024:	2380      	movs	r3, #128	; 0x80
    1026:	019b      	lsls	r3, r3, #6
    1028:	e7ef      	b.n	100a <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    102a:	016b      	lsls	r3, r5, #5
    102c:	4a19      	ldr	r2, [pc, #100]	; (1094 <_usb_d_dev_out_next+0x224>)
    102e:	4694      	mov	ip, r2
    1030:	4463      	add	r3, ip
    1032:	222d      	movs	r2, #45	; 0x2d
    1034:	701a      	strb	r2, [r3, #0]
    1036:	e776      	b.n	f26 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
    1038:	016a      	lsls	r2, r5, #5
    103a:	4b12      	ldr	r3, [pc, #72]	; (1084 <_usb_d_dev_out_next+0x214>)
    103c:	189b      	adds	r3, r3, r2
    103e:	2200      	movs	r2, #0
    1040:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
    1042:	322d      	adds	r2, #45	; 0x2d
    1044:	e7c8      	b.n	fd8 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
    1046:	05bf      	lsls	r7, r7, #22
    1048:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    104a:	7cc3      	ldrb	r3, [r0, #19]
    104c:	2207      	movs	r2, #7
    104e:	401a      	ands	r2, r3
    1050:	4691      	mov	r9, r2
    1052:	e735      	b.n	ec0 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
    1054:	4643      	mov	r3, r8
    1056:	2b00      	cmp	r3, #0
    1058:	d10c      	bne.n	1074 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
    105a:	68a3      	ldr	r3, [r4, #8]
    105c:	4453      	add	r3, sl
    105e:	60a3      	str	r3, [r4, #8]
    1060:	e757      	b.n	f12 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1062:	7cc3      	ldrb	r3, [r0, #19]
    1064:	2207      	movs	r2, #7
    1066:	401a      	ands	r2, r3
    1068:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    106a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    106c:	2300      	movs	r3, #0
    106e:	469b      	mov	fp, r3
    1070:	469a      	mov	sl, r3
    1072:	e72b      	b.n	ecc <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1074:	8a23      	ldrh	r3, [r4, #16]
    1076:	42bb      	cmp	r3, r7
    1078:	d900      	bls.n	107c <_usb_d_dev_out_next+0x20c>
    107a:	e743      	b.n	f04 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    107c:	68a3      	ldr	r3, [r4, #8]
    107e:	4453      	add	r3, sl
    1080:	60a3      	str	r3, [r4, #8]
    1082:	e746      	b.n	f12 <_usb_d_dev_out_next+0xa2>
    1084:	20000108 	.word	0x20000108
    1088:	000003ff 	.word	0x000003ff
    108c:	41000100 	.word	0x41000100
    1090:	00002b7d 	.word	0x00002b7d
    1094:	41000108 	.word	0x41000108
    1098:	00000af1 	.word	0x00000af1
    109c:	f0003fff 	.word	0xf0003fff
    10a0:	41000109 	.word	0x41000109

000010a4 <_usb_d_dev_init>:
{
    10a4:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    10a6:	2382      	movs	r3, #130	; 0x82
    10a8:	05db      	lsls	r3, r3, #23
    10aa:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    10ac:	07db      	lsls	r3, r3, #31
    10ae:	d424      	bmi.n	10fa <_usb_d_dev_init+0x56>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    10b0:	2182      	movs	r1, #130	; 0x82
    10b2:	05c9      	lsls	r1, r1, #23
    10b4:	2203      	movs	r2, #3
    10b6:	788b      	ldrb	r3, [r1, #2]
    10b8:	4213      	tst	r3, r2
    10ba:	d1fc      	bne.n	10b6 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    10bc:	2382      	movs	r3, #130	; 0x82
    10be:	05db      	lsls	r3, r3, #23
    10c0:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    10c2:	079b      	lsls	r3, r3, #30
    10c4:	d510      	bpl.n	10e8 <_usb_d_dev_init+0x44>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    10c6:	2282      	movs	r2, #130	; 0x82
    10c8:	05d2      	lsls	r2, r2, #23
    10ca:	7813      	ldrb	r3, [r2, #0]
    10cc:	2102      	movs	r1, #2
    10ce:	438b      	bics	r3, r1
    10d0:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    10d2:	0011      	movs	r1, r2
    10d4:	2203      	movs	r2, #3
    10d6:	788b      	ldrb	r3, [r1, #2]
    10d8:	4213      	tst	r3, r2
    10da:	d1fc      	bne.n	10d6 <_usb_d_dev_init+0x32>
    10dc:	2182      	movs	r1, #130	; 0x82
    10de:	05c9      	lsls	r1, r1, #23
    10e0:	2202      	movs	r2, #2
    10e2:	788b      	ldrb	r3, [r1, #2]
    10e4:	4213      	tst	r3, r2
    10e6:	d1fc      	bne.n	10e2 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    10e8:	2201      	movs	r2, #1
    10ea:	2382      	movs	r3, #130	; 0x82
    10ec:	05db      	lsls	r3, r3, #23
    10ee:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    10f0:	0019      	movs	r1, r3
    10f2:	3202      	adds	r2, #2
    10f4:	788b      	ldrb	r3, [r1, #2]
    10f6:	4213      	tst	r3, r2
    10f8:	d1fc      	bne.n	10f4 <_usb_d_dev_init+0x50>
    10fa:	2182      	movs	r1, #130	; 0x82
    10fc:	05c9      	lsls	r1, r1, #23
    10fe:	2201      	movs	r2, #1
    1100:	788b      	ldrb	r3, [r1, #2]
    1102:	4213      	tst	r3, r2
    1104:	d1fc      	bne.n	1100 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    1106:	4b1e      	ldr	r3, [pc, #120]	; (1180 <_usb_d_dev_init+0xdc>)
    1108:	4a1e      	ldr	r2, [pc, #120]	; (1184 <_usb_d_dev_init+0xe0>)
    110a:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    110c:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    110e:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    1110:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    1112:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    1114:	4b1c      	ldr	r3, [pc, #112]	; (1188 <_usb_d_dev_init+0xe4>)
    1116:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    1118:	4b1c      	ldr	r3, [pc, #112]	; (118c <_usb_d_dev_init+0xe8>)
    111a:	681b      	ldr	r3, [r3, #0]
    111c:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    111e:	211f      	movs	r1, #31
    1120:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    1122:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    1124:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    1126:	019b      	lsls	r3, r3, #6
    1128:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    112a:	2a1f      	cmp	r2, #31
    112c:	d021      	beq.n	1172 <_usb_d_dev_init+0xce>
	if (pad_transp == 0x1F) {
    112e:	291f      	cmp	r1, #31
    1130:	d021      	beq.n	1176 <_usb_d_dev_init+0xd2>
	if (pad_trim == 0x7) {
    1132:	2b07      	cmp	r3, #7
    1134:	d021      	beq.n	117a <_usb_d_dev_init+0xd6>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    1136:	0192      	lsls	r2, r2, #6
    1138:	430a      	orrs	r2, r1
    113a:	031b      	lsls	r3, r3, #12
    113c:	4313      	orrs	r3, r2
    113e:	2282      	movs	r2, #130	; 0x82
    1140:	05d2      	lsls	r2, r2, #23
    1142:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    1144:	78d3      	ldrb	r3, [r2, #3]
    1146:	2103      	movs	r1, #3
    1148:	430b      	orrs	r3, r1
    114a:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    114c:	78d3      	ldrb	r3, [r2, #3]
    114e:	210c      	movs	r1, #12
    1150:	430b      	orrs	r3, r1
    1152:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1154:	2304      	movs	r3, #4
    1156:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1158:	0011      	movs	r1, r2
    115a:	2203      	movs	r2, #3
    115c:	788b      	ldrb	r3, [r1, #2]
    115e:	4213      	tst	r3, r2
    1160:	d1fc      	bne.n	115c <_usb_d_dev_init+0xb8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1162:	2382      	movs	r3, #130	; 0x82
    1164:	05db      	lsls	r3, r3, #23
    1166:	4a06      	ldr	r2, [pc, #24]	; (1180 <_usb_d_dev_init+0xdc>)
    1168:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    116a:	2201      	movs	r2, #1
    116c:	811a      	strh	r2, [r3, #8]
}
    116e:	2000      	movs	r0, #0
    1170:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1172:	3a1a      	subs	r2, #26
    1174:	e7db      	b.n	112e <_usb_d_dev_init+0x8a>
		pad_transp = 29;
    1176:	3902      	subs	r1, #2
    1178:	e7db      	b.n	1132 <_usb_d_dev_init+0x8e>
		pad_trim = 5;
    117a:	3b02      	subs	r3, #2
    117c:	e7db      	b.n	1136 <_usb_d_dev_init+0x92>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	20000108 	.word	0x20000108
    1184:	00000a31 	.word	0x00000a31
    1188:	00000c85 	.word	0x00000c85
    118c:	0080601c 	.word	0x0080601c

00001190 <_usb_d_dev_enable>:
	tmp = ((Usb *)hw)->HOST.SYNCBUSY.reg;
    1190:	2382      	movs	r3, #130	; 0x82
    1192:	05db      	lsls	r3, r3, #23
    1194:	789b      	ldrb	r3, [r3, #2]
	if (hri_usbdevice_get_SYNCBUSY_reg(hw, (USB_SYNCBUSY_ENABLE | USB_SYNCBUSY_SWRST))) {
    1196:	079b      	lsls	r3, r3, #30
    1198:	d11e      	bne.n	11d8 <_usb_d_dev_enable+0x48>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    119a:	2182      	movs	r1, #130	; 0x82
    119c:	05c9      	lsls	r1, r1, #23
    119e:	2203      	movs	r2, #3
    11a0:	788b      	ldrb	r3, [r1, #2]
    11a2:	4213      	tst	r3, r2
    11a4:	d1fc      	bne.n	11a0 <_usb_d_dev_enable+0x10>
	return ((Usb *)hw)->HOST.CTRLA.reg;
    11a6:	2382      	movs	r3, #130	; 0x82
    11a8:	05db      	lsls	r3, r3, #23
    11aa:	781b      	ldrb	r3, [r3, #0]
    11ac:	b2db      	uxtb	r3, r3
	if ((ctrla & USB_CTRLA_ENABLE) == 0) {
    11ae:	079a      	lsls	r2, r3, #30
    11b0:	d409      	bmi.n	11c6 <_usb_d_dev_enable+0x36>
		hri_usbdevice_write_CTRLA_reg(hw, ctrla | USB_CTRLA_ENABLE);
    11b2:	2202      	movs	r2, #2
    11b4:	4313      	orrs	r3, r2
	((Usb *)hw)->HOST.CTRLA.reg = data;
    11b6:	2282      	movs	r2, #130	; 0x82
    11b8:	05d2      	lsls	r2, r2, #23
    11ba:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    11bc:	0011      	movs	r1, r2
    11be:	2203      	movs	r2, #3
    11c0:	788b      	ldrb	r3, [r1, #2]
    11c2:	4213      	tst	r3, r2
    11c4:	d1fc      	bne.n	11c0 <_usb_d_dev_enable+0x30>
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    11c6:	2240      	movs	r2, #64	; 0x40
    11c8:	4b05      	ldr	r3, [pc, #20]	; (11e0 <_usb_d_dev_enable+0x50>)
    11ca:	601a      	str	r2, [r3, #0]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    11cc:	4a05      	ldr	r2, [pc, #20]	; (11e4 <_usb_d_dev_enable+0x54>)
    11ce:	2382      	movs	r3, #130	; 0x82
    11d0:	05db      	lsls	r3, r3, #23
    11d2:	831a      	strh	r2, [r3, #24]
	return ERR_NONE;
    11d4:	2000      	movs	r0, #0
}
    11d6:	4770      	bx	lr
		return -USB_ERR_DENIED;
    11d8:	2011      	movs	r0, #17
    11da:	4240      	negs	r0, r0
    11dc:	e7fb      	b.n	11d6 <_usb_d_dev_enable+0x46>
    11de:	46c0      	nop			; (mov r8, r8)
    11e0:	e000e100 	.word	0xe000e100
    11e4:	0000028d 	.word	0x0000028d

000011e8 <_usb_d_dev_attach>:
	((Usb *)hw)->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    11e8:	2282      	movs	r2, #130	; 0x82
    11ea:	05d2      	lsls	r2, r2, #23
    11ec:	8913      	ldrh	r3, [r2, #8]
    11ee:	2101      	movs	r1, #1
    11f0:	438b      	bics	r3, r1
    11f2:	8113      	strh	r3, [r2, #8]
}
    11f4:	4770      	bx	lr

000011f6 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    11f6:	2380      	movs	r3, #128	; 0x80
    11f8:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    11fa:	2382      	movs	r3, #130	; 0x82
    11fc:	05db      	lsls	r3, r3, #23
    11fe:	7298      	strb	r0, [r3, #10]
}
    1200:	4770      	bx	lr
	...

00001204 <_usb_d_dev_ep_init>:
{
    1204:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    1206:	240f      	movs	r4, #15
    1208:	4004      	ands	r4, r0
    120a:	b243      	sxtb	r3, r0
    120c:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    120e:	2c00      	cmp	r4, #0
    1210:	d054      	beq.n	12bc <_usb_d_dev_ep_init+0xb8>
    1212:	0025      	movs	r5, r4
    1214:	2b00      	cmp	r3, #0
    1216:	db07      	blt.n	1228 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1218:	2303      	movs	r3, #3
    121a:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    121c:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    121e:	2c02      	cmp	r4, #2
    1220:	d950      	bls.n	12c4 <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    1222:	2012      	movs	r0, #18
    1224:	4240      	negs	r0, r0
    1226:	e025      	b.n	1274 <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1228:	1ca5      	adds	r5, r4, #2
    122a:	e7f5      	b.n	1218 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    122c:	4663      	mov	r3, ip
    122e:	2b00      	cmp	r3, #0
    1230:	db21      	blt.n	1276 <_usb_d_dev_ep_init+0x72>
    1232:	007b      	lsls	r3, r7, #1
    1234:	19db      	adds	r3, r3, r7
    1236:	009b      	lsls	r3, r3, #2
    1238:	4c3b      	ldr	r4, [pc, #236]	; (1328 <_usb_d_dev_ep_init+0x124>)
    123a:	591b      	ldr	r3, [r3, r4]
    123c:	2b00      	cmp	r3, #0
    123e:	d166      	bne.n	130e <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1240:	007b      	lsls	r3, r7, #1
    1242:	19df      	adds	r7, r3, r7
    1244:	00bf      	lsls	r7, r7, #2
    1246:	4b38      	ldr	r3, [pc, #224]	; (1328 <_usb_d_dev_ep_init+0x124>)
    1248:	58ff      	ldr	r7, [r7, r3]
    124a:	4b38      	ldr	r3, [pc, #224]	; (132c <_usb_d_dev_ep_init+0x128>)
    124c:	00ae      	lsls	r6, r5, #2
    124e:	1974      	adds	r4, r6, r5
    1250:	00a4      	lsls	r4, r4, #2
    1252:	191c      	adds	r4, r3, r4
    1254:	3480      	adds	r4, #128	; 0x80
    1256:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    1258:	3360      	adds	r3, #96	; 0x60
    125a:	1974      	adds	r4, r6, r5
    125c:	00a4      	lsls	r4, r4, #2
    125e:	191c      	adds	r4, r3, r4
    1260:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    1262:	3427      	adds	r4, #39	; 0x27
    1264:	3101      	adds	r1, #1
    1266:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    1268:	1975      	adds	r5, r6, r5
    126a:	00ad      	lsls	r5, r5, #2
    126c:	195b      	adds	r3, r3, r5
    126e:	3326      	adds	r3, #38	; 0x26
    1270:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    1272:	2000      	movs	r0, #0
}
    1274:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1276:	007b      	lsls	r3, r7, #1
    1278:	19db      	adds	r3, r3, r7
    127a:	009b      	lsls	r3, r3, #2
    127c:	4c2a      	ldr	r4, [pc, #168]	; (1328 <_usb_d_dev_ep_init+0x124>)
    127e:	18e3      	adds	r3, r4, r3
    1280:	685b      	ldr	r3, [r3, #4]
    1282:	2b00      	cmp	r3, #0
    1284:	d106      	bne.n	1294 <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1286:	007b      	lsls	r3, r7, #1
    1288:	19df      	adds	r7, r3, r7
    128a:	00bf      	lsls	r7, r7, #2
    128c:	4b26      	ldr	r3, [pc, #152]	; (1328 <_usb_d_dev_ep_init+0x124>)
    128e:	19df      	adds	r7, r3, r7
    1290:	687f      	ldr	r7, [r7, #4]
    1292:	e7da      	b.n	124a <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1294:	007b      	lsls	r3, r7, #1
    1296:	19db      	adds	r3, r3, r7
    1298:	009b      	lsls	r3, r3, #2
    129a:	4c23      	ldr	r4, [pc, #140]	; (1328 <_usb_d_dev_ep_init+0x124>)
    129c:	18e3      	adds	r3, r4, r3
    129e:	895b      	ldrh	r3, [r3, #10]
    12a0:	4293      	cmp	r3, r2
    12a2:	daf0      	bge.n	1286 <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    12a4:	2013      	movs	r0, #19
    12a6:	4240      	negs	r0, r0
    12a8:	e7e4      	b.n	1274 <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    12aa:	2014      	movs	r0, #20
    12ac:	4240      	negs	r0, r0
    12ae:	e7e1      	b.n	1274 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    12b0:	2014      	movs	r0, #20
    12b2:	4240      	negs	r0, r0
    12b4:	e7de      	b.n	1274 <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    12b6:	2013      	movs	r0, #19
    12b8:	4240      	negs	r0, r0
    12ba:	e7db      	b.n	1274 <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    12bc:	2303      	movs	r3, #3
    12be:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    12c0:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    12c2:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    12c4:	00ab      	lsls	r3, r5, #2
    12c6:	195b      	adds	r3, r3, r5
    12c8:	009e      	lsls	r6, r3, #2
    12ca:	4b18      	ldr	r3, [pc, #96]	; (132c <_usb_d_dev_ep_init+0x128>)
    12cc:	199b      	adds	r3, r3, r6
    12ce:	3386      	adds	r3, #134	; 0x86
    12d0:	781b      	ldrb	r3, [r3, #0]
    12d2:	2bff      	cmp	r3, #255	; 0xff
    12d4:	d1e9      	bne.n	12aa <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    12d6:	2900      	cmp	r1, #0
    12d8:	d1a8      	bne.n	122c <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    12da:	2c00      	cmp	r4, #0
    12dc:	d004      	beq.n	12e8 <_usb_d_dev_ep_init+0xe4>
    12de:	4663      	mov	r3, ip
    12e0:	2b00      	cmp	r3, #0
    12e2:	db01      	blt.n	12e8 <_usb_d_dev_ep_init+0xe4>
    12e4:	3402      	adds	r4, #2
    12e6:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    12e8:	00a3      	lsls	r3, r4, #2
    12ea:	191b      	adds	r3, r3, r4
    12ec:	009b      	lsls	r3, r3, #2
    12ee:	4c0f      	ldr	r4, [pc, #60]	; (132c <_usb_d_dev_ep_init+0x128>)
    12f0:	18e4      	adds	r4, r4, r3
    12f2:	3486      	adds	r4, #134	; 0x86
    12f4:	7823      	ldrb	r3, [r4, #0]
    12f6:	2bff      	cmp	r3, #255	; 0xff
    12f8:	d1da      	bne.n	12b0 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    12fa:	007b      	lsls	r3, r7, #1
    12fc:	19db      	adds	r3, r3, r7
    12fe:	009b      	lsls	r3, r3, #2
    1300:	4c09      	ldr	r4, [pc, #36]	; (1328 <_usb_d_dev_ep_init+0x124>)
    1302:	591b      	ldr	r3, [r3, r4]
    1304:	2b00      	cmp	r3, #0
    1306:	d0d6      	beq.n	12b6 <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1308:	4663      	mov	r3, ip
    130a:	2b00      	cmp	r3, #0
    130c:	dbb3      	blt.n	1276 <_usb_d_dev_ep_init+0x72>
    130e:	007b      	lsls	r3, r7, #1
    1310:	19db      	adds	r3, r3, r7
    1312:	009b      	lsls	r3, r3, #2
    1314:	4c04      	ldr	r4, [pc, #16]	; (1328 <_usb_d_dev_ep_init+0x124>)
    1316:	18e3      	adds	r3, r4, r3
    1318:	891b      	ldrh	r3, [r3, #8]
    131a:	4293      	cmp	r3, r2
    131c:	db00      	blt.n	1320 <_usb_d_dev_ep_init+0x11c>
    131e:	e78f      	b.n	1240 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1320:	2013      	movs	r0, #19
    1322:	4240      	negs	r0, r0
    1324:	e7a6      	b.n	1274 <_usb_d_dev_ep_init+0x70>
    1326:	46c0      	nop			; (mov r8, r8)
    1328:	00002bc0 	.word	0x00002bc0
    132c:	20000108 	.word	0x20000108

00001330 <_usb_d_dev_ep_deinit>:
{
    1330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1332:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    1334:	240f      	movs	r4, #15
    1336:	4004      	ands	r4, r0
    1338:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    133a:	2c00      	cmp	r4, #0
    133c:	d010      	beq.n	1360 <_usb_d_dev_ep_deinit+0x30>
    133e:	0020      	movs	r0, r4
    1340:	2f00      	cmp	r7, #0
    1342:	db02      	blt.n	134a <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1344:	2c02      	cmp	r4, #2
    1346:	d902      	bls.n	134e <_usb_d_dev_ep_deinit+0x1e>
}
    1348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    134a:	1ca0      	adds	r0, r4, #2
    134c:	e7fa      	b.n	1344 <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    134e:	0006      	movs	r6, r0
    1350:	3001      	adds	r0, #1
    1352:	0083      	lsls	r3, r0, #2
    1354:	1818      	adds	r0, r3, r0
    1356:	0080      	lsls	r0, r0, #2
    1358:	4b27      	ldr	r3, [pc, #156]	; (13f8 <_usb_d_dev_ep_deinit+0xc8>)
    135a:	3360      	adds	r3, #96	; 0x60
    135c:	1818      	adds	r0, r3, r0
    135e:	e002      	b.n	1366 <_usb_d_dev_ep_deinit+0x36>
    1360:	4825      	ldr	r0, [pc, #148]	; (13f8 <_usb_d_dev_ep_deinit+0xc8>)
    1362:	3074      	adds	r0, #116	; 0x74
    1364:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1366:	00b3      	lsls	r3, r6, #2
    1368:	199b      	adds	r3, r3, r6
    136a:	009a      	lsls	r2, r3, #2
    136c:	4b22      	ldr	r3, [pc, #136]	; (13f8 <_usb_d_dev_ep_deinit+0xc8>)
    136e:	189b      	adds	r3, r3, r2
    1370:	3386      	adds	r3, #134	; 0x86
    1372:	781b      	ldrb	r3, [r3, #0]
    1374:	2bff      	cmp	r3, #255	; 0xff
    1376:	d0e7      	beq.n	1348 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    1378:	0ff9      	lsrs	r1, r7, #31
    137a:	2203      	movs	r2, #3
    137c:	4b1f      	ldr	r3, [pc, #124]	; (13fc <_usb_d_dev_ep_deinit+0xcc>)
    137e:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1380:	00b3      	lsls	r3, r6, #2
    1382:	199b      	adds	r3, r3, r6
    1384:	009a      	lsls	r2, r3, #2
    1386:	4b1c      	ldr	r3, [pc, #112]	; (13f8 <_usb_d_dev_ep_deinit+0xc8>)
    1388:	189b      	adds	r3, r3, r2
    138a:	3380      	adds	r3, #128	; 0x80
    138c:	79da      	ldrb	r2, [r3, #7]
    138e:	2307      	movs	r3, #7
    1390:	4013      	ands	r3, r2
    1392:	2b01      	cmp	r3, #1
    1394:	d01c      	beq.n	13d0 <_usb_d_dev_ep_deinit+0xa0>
	} else if (USB_EP_GET_DIR(ep)) {
    1396:	2f00      	cmp	r7, #0
    1398:	db21      	blt.n	13de <_usb_d_dev_ep_deinit+0xae>
    139a:	016d      	lsls	r5, r5, #5
    139c:	2382      	movs	r3, #130	; 0x82
    139e:	05db      	lsls	r3, r3, #23
    13a0:	469c      	mov	ip, r3
    13a2:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    13a4:	2280      	movs	r2, #128	; 0x80
    13a6:	0052      	lsls	r2, r2, #1
    13a8:	5cab      	ldrb	r3, [r5, r2]
    13aa:	2107      	movs	r1, #7
    13ac:	438b      	bics	r3, r1
    13ae:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    13b0:	4b11      	ldr	r3, [pc, #68]	; (13f8 <_usb_d_dev_ep_deinit+0xc8>)
    13b2:	3360      	adds	r3, #96	; 0x60
    13b4:	00b1      	lsls	r1, r6, #2
    13b6:	198a      	adds	r2, r1, r6
    13b8:	0092      	lsls	r2, r2, #2
    13ba:	189a      	adds	r2, r3, r2
    13bc:	3227      	adds	r2, #39	; 0x27
    13be:	2000      	movs	r0, #0
    13c0:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    13c2:	198e      	adds	r6, r1, r6
    13c4:	00b6      	lsls	r6, r6, #2
    13c6:	199b      	adds	r3, r3, r6
    13c8:	3326      	adds	r3, #38	; 0x26
    13ca:	22ff      	movs	r2, #255	; 0xff
    13cc:	701a      	strb	r2, [r3, #0]
    13ce:	e7bb      	b.n	1348 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    13d0:	3508      	adds	r5, #8
    13d2:	016d      	lsls	r5, r5, #5
    13d4:	2200      	movs	r2, #0
    13d6:	2382      	movs	r3, #130	; 0x82
    13d8:	05db      	lsls	r3, r3, #23
    13da:	54ea      	strb	r2, [r5, r3]
    13dc:	e7e8      	b.n	13b0 <_usb_d_dev_ep_deinit+0x80>
    13de:	0164      	lsls	r4, r4, #5
    13e0:	2382      	movs	r3, #130	; 0x82
    13e2:	05db      	lsls	r3, r3, #23
    13e4:	469c      	mov	ip, r3
    13e6:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    13e8:	2280      	movs	r2, #128	; 0x80
    13ea:	0052      	lsls	r2, r2, #1
    13ec:	5ca3      	ldrb	r3, [r4, r2]
    13ee:	2170      	movs	r1, #112	; 0x70
    13f0:	438b      	bics	r3, r1
    13f2:	54a3      	strb	r3, [r4, r2]
    13f4:	e7dc      	b.n	13b0 <_usb_d_dev_ep_deinit+0x80>
    13f6:	46c0      	nop			; (mov r8, r8)
    13f8:	20000108 	.word	0x20000108
    13fc:	00000b19 	.word	0x00000b19

00001400 <_usb_d_dev_ep_enable>:
{
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	46c6      	mov	lr, r8
    1404:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    1406:	220f      	movs	r2, #15
    1408:	4002      	ands	r2, r0
    140a:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    140c:	2a00      	cmp	r2, #0
    140e:	d100      	bne.n	1412 <_usb_d_dev_ep_enable+0x12>
    1410:	e095      	b.n	153e <_usb_d_dev_ep_enable+0x13e>
    1412:	0013      	movs	r3, r2
    1414:	2800      	cmp	r0, #0
    1416:	db0c      	blt.n	1432 <_usb_d_dev_ep_enable+0x32>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1418:	0011      	movs	r1, r2
    141a:	3208      	adds	r2, #8
    141c:	0152      	lsls	r2, r2, #5
    141e:	2482      	movs	r4, #130	; 0x82
    1420:	05e4      	lsls	r4, r4, #23
    1422:	5d15      	ldrb	r5, [r2, r4]
    1424:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1426:	2902      	cmp	r1, #2
    1428:	d800      	bhi.n	142c <_usb_d_dev_ep_enable+0x2c>
    142a:	e090      	b.n	154e <_usb_d_dev_ep_enable+0x14e>
		return -USB_ERR_PARAM;
    142c:	2012      	movs	r0, #18
    142e:	4240      	negs	r0, r0
    1430:	e0e9      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1432:	1c93      	adds	r3, r2, #2
    1434:	e7f0      	b.n	1418 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    1436:	3276      	adds	r2, #118	; 0x76
    1438:	422a      	tst	r2, r5
    143a:	d177      	bne.n	152c <_usb_d_dev_ep_enable+0x12c>
    143c:	2282      	movs	r2, #130	; 0x82
    143e:	05d2      	lsls	r2, r2, #23
    1440:	4690      	mov	r8, r2
    1442:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1444:	2011      	movs	r0, #17
    1446:	2280      	movs	r2, #128	; 0x80
    1448:	0052      	lsls	r2, r2, #1
    144a:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    144c:	009a      	lsls	r2, r3, #2
    144e:	18d2      	adds	r2, r2, r3
    1450:	0095      	lsls	r5, r2, #2
    1452:	4aa0      	ldr	r2, [pc, #640]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    1454:	3260      	adds	r2, #96	; 0x60
    1456:	1952      	adds	r2, r2, r5
    1458:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    145a:	0395      	lsls	r5, r2, #14
    145c:	489e      	ldr	r0, [pc, #632]	; (16d8 <_usb_d_dev_ep_enable+0x2d8>)
    145e:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1460:	2080      	movs	r0, #128	; 0x80
    1462:	0080      	lsls	r0, r0, #2
    1464:	4282      	cmp	r2, r0
    1466:	d900      	bls.n	146a <_usb_d_dev_ep_enable+0x6a>
    1468:	e0d0      	b.n	160c <_usb_d_dev_ep_enable+0x20c>
    146a:	3801      	subs	r0, #1
    146c:	38ff      	subs	r0, #255	; 0xff
    146e:	4282      	cmp	r2, r0
    1470:	d900      	bls.n	1474 <_usb_d_dev_ep_enable+0x74>
    1472:	e117      	b.n	16a4 <_usb_d_dev_ep_enable+0x2a4>
    1474:	2a80      	cmp	r2, #128	; 0x80
    1476:	d900      	bls.n	147a <_usb_d_dev_ep_enable+0x7a>
    1478:	e104      	b.n	1684 <_usb_d_dev_ep_enable+0x284>
    147a:	2a40      	cmp	r2, #64	; 0x40
    147c:	d900      	bls.n	1480 <_usb_d_dev_ep_enable+0x80>
    147e:	e119      	b.n	16b4 <_usb_d_dev_ep_enable+0x2b4>
    1480:	2a20      	cmp	r2, #32
    1482:	d900      	bls.n	1486 <_usb_d_dev_ep_enable+0x86>
    1484:	e106      	b.n	1694 <_usb_d_dev_ep_enable+0x294>
    1486:	2a10      	cmp	r2, #16
    1488:	d900      	bls.n	148c <_usb_d_dev_ep_enable+0x8c>
    148a:	e11b      	b.n	16c4 <_usb_d_dev_ep_enable+0x2c4>
    148c:	38f8      	subs	r0, #248	; 0xf8
    148e:	4290      	cmp	r0, r2
    1490:	4180      	sbcs	r0, r0
    1492:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1494:	0706      	lsls	r6, r0, #28
    1496:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1498:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    149a:	0495      	lsls	r5, r2, #18
    149c:	0cad      	lsrs	r5, r5, #18
    149e:	e0bc      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    14a0:	2270      	movs	r2, #112	; 0x70
    14a2:	422a      	tst	r2, r5
    14a4:	d145      	bne.n	1532 <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    14a6:	488b      	ldr	r0, [pc, #556]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    14a8:	009e      	lsls	r6, r3, #2
    14aa:	18f2      	adds	r2, r6, r3
    14ac:	0092      	lsls	r2, r2, #2
    14ae:	1882      	adds	r2, r0, r2
    14b0:	3280      	adds	r2, #128	; 0x80
    14b2:	79d2      	ldrb	r2, [r2, #7]
    14b4:	0752      	lsls	r2, r2, #29
    14b6:	0e52      	lsrs	r2, r2, #25
    14b8:	4315      	orrs	r5, r2
    14ba:	2282      	movs	r2, #130	; 0x82
    14bc:	05d2      	lsls	r2, r2, #23
    14be:	4694      	mov	ip, r2
    14c0:	4464      	add	r4, ip
    14c2:	2280      	movs	r2, #128	; 0x80
    14c4:	0052      	lsls	r2, r2, #1
    14c6:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    14c8:	3060      	adds	r0, #96	; 0x60
    14ca:	18f6      	adds	r6, r6, r3
    14cc:	00b6      	lsls	r6, r6, #2
    14ce:	1980      	adds	r0, r0, r6
    14d0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    14d2:	0485      	lsls	r5, r0, #18
    14d4:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    14d6:	3201      	adds	r2, #1
    14d8:	32ff      	adds	r2, #255	; 0xff
    14da:	2307      	movs	r3, #7
    14dc:	4290      	cmp	r0, r2
    14de:	d814      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    14e0:	3a01      	subs	r2, #1
    14e2:	3aff      	subs	r2, #255	; 0xff
    14e4:	3b01      	subs	r3, #1
    14e6:	4290      	cmp	r0, r2
    14e8:	d80f      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    14ea:	3b01      	subs	r3, #1
    14ec:	2880      	cmp	r0, #128	; 0x80
    14ee:	d80c      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    14f0:	3b01      	subs	r3, #1
    14f2:	2840      	cmp	r0, #64	; 0x40
    14f4:	d809      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    14f6:	3b01      	subs	r3, #1
    14f8:	2820      	cmp	r0, #32
    14fa:	d806      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    14fc:	3b01      	subs	r3, #1
    14fe:	2810      	cmp	r0, #16
    1500:	d803      	bhi.n	150a <_usb_d_dev_ep_enable+0x10a>
    1502:	3af8      	subs	r2, #248	; 0xf8
    1504:	4282      	cmp	r2, r0
    1506:	4192      	sbcs	r2, r2
    1508:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    150a:	071b      	lsls	r3, r3, #28
    150c:	432b      	orrs	r3, r5
    150e:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1510:	2280      	movs	r2, #128	; 0x80
    1512:	2382      	movs	r3, #130	; 0x82
    1514:	005b      	lsls	r3, r3, #1
    1516:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    1518:	0149      	lsls	r1, r1, #5
    151a:	4b6e      	ldr	r3, [pc, #440]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    151c:	1859      	adds	r1, r3, r1
    151e:	2300      	movs	r3, #0
    1520:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    1522:	2000      	movs	r0, #0
    1524:	e06f      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
		return -USB_ERR_PARAM;
    1526:	2012      	movs	r0, #18
    1528:	4240      	negs	r0, r0
    152a:	e06c      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    152c:	2014      	movs	r0, #20
    152e:	4240      	negs	r0, r0
    1530:	e069      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    1532:	2014      	movs	r0, #20
    1534:	4240      	negs	r0, r0
    1536:	e066      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    1538:	2014      	movs	r0, #20
    153a:	4240      	negs	r0, r0
    153c:	e063      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    153e:	2380      	movs	r3, #128	; 0x80
    1540:	005b      	lsls	r3, r3, #1
    1542:	2282      	movs	r2, #130	; 0x82
    1544:	05d2      	lsls	r2, r2, #23
    1546:	5cd5      	ldrb	r5, [r2, r3]
    1548:	b2ed      	uxtb	r5, r5
    154a:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    154c:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    154e:	009a      	lsls	r2, r3, #2
    1550:	18d2      	adds	r2, r2, r3
    1552:	0094      	lsls	r4, r2, #2
    1554:	4a5f      	ldr	r2, [pc, #380]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    1556:	1912      	adds	r2, r2, r4
    1558:	3286      	adds	r2, #134	; 0x86
    155a:	7812      	ldrb	r2, [r2, #0]
    155c:	4694      	mov	ip, r2
    155e:	2aff      	cmp	r2, #255	; 0xff
    1560:	d0e1      	beq.n	1526 <_usb_d_dev_ep_enable+0x126>
    1562:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    1564:	4a5b      	ldr	r2, [pc, #364]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    1566:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    1568:	009e      	lsls	r6, r3, #2
    156a:	18f6      	adds	r6, r6, r3
    156c:	00b6      	lsls	r6, r6, #2
    156e:	1992      	adds	r2, r2, r6
    1570:	3280      	adds	r2, #128	; 0x80
    1572:	79d6      	ldrb	r6, [r2, #7]
    1574:	2207      	movs	r2, #7
    1576:	4032      	ands	r2, r6
    1578:	2a01      	cmp	r2, #1
    157a:	d100      	bne.n	157e <_usb_d_dev_ep_enable+0x17e>
    157c:	e75b      	b.n	1436 <_usb_d_dev_ep_enable+0x36>
	} else if (dir) {
    157e:	2800      	cmp	r0, #0
    1580:	db8e      	blt.n	14a0 <_usb_d_dev_ep_enable+0xa0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    1582:	076a      	lsls	r2, r5, #29
    1584:	d1d8      	bne.n	1538 <_usb_d_dev_ep_enable+0x138>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    1586:	4853      	ldr	r0, [pc, #332]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    1588:	009e      	lsls	r6, r3, #2
    158a:	18f2      	adds	r2, r6, r3
    158c:	0092      	lsls	r2, r2, #2
    158e:	1882      	adds	r2, r0, r2
    1590:	3280      	adds	r2, #128	; 0x80
    1592:	79d2      	ldrb	r2, [r2, #7]
    1594:	0752      	lsls	r2, r2, #29
    1596:	0f52      	lsrs	r2, r2, #29
    1598:	4315      	orrs	r5, r2
    159a:	2282      	movs	r2, #130	; 0x82
    159c:	05d2      	lsls	r2, r2, #23
    159e:	4694      	mov	ip, r2
    15a0:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    15a2:	2280      	movs	r2, #128	; 0x80
    15a4:	0052      	lsls	r2, r2, #1
    15a6:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15a8:	3060      	adds	r0, #96	; 0x60
    15aa:	18f6      	adds	r6, r6, r3
    15ac:	00b6      	lsls	r6, r6, #2
    15ae:	1980      	adds	r0, r0, r6
    15b0:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    15b2:	03ab      	lsls	r3, r5, #14
    15b4:	4848      	ldr	r0, [pc, #288]	; (16d8 <_usb_d_dev_ep_enable+0x2d8>)
    15b6:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    15b8:	3201      	adds	r2, #1
    15ba:	32ff      	adds	r2, #255	; 0xff
    15bc:	2307      	movs	r3, #7
    15be:	4295      	cmp	r5, r2
    15c0:	d814      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15c2:	3a01      	subs	r2, #1
    15c4:	3aff      	subs	r2, #255	; 0xff
    15c6:	3b01      	subs	r3, #1
    15c8:	4295      	cmp	r5, r2
    15ca:	d80f      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15cc:	3b01      	subs	r3, #1
    15ce:	2d80      	cmp	r5, #128	; 0x80
    15d0:	d80c      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15d2:	3b01      	subs	r3, #1
    15d4:	2d40      	cmp	r5, #64	; 0x40
    15d6:	d809      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15d8:	3b01      	subs	r3, #1
    15da:	2d20      	cmp	r5, #32
    15dc:	d806      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15de:	3b01      	subs	r3, #1
    15e0:	2d10      	cmp	r5, #16
    15e2:	d803      	bhi.n	15ec <_usb_d_dev_ep_enable+0x1ec>
    15e4:	3af8      	subs	r2, #248	; 0xf8
    15e6:	42aa      	cmp	r2, r5
    15e8:	4192      	sbcs	r2, r2
    15ea:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15ec:	071b      	lsls	r3, r3, #28
    15ee:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15f0:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    15f2:	2240      	movs	r2, #64	; 0x40
    15f4:	2306      	movs	r3, #6
    15f6:	33ff      	adds	r3, #255	; 0xff
    15f8:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    15fa:	0149      	lsls	r1, r1, #5
    15fc:	4b35      	ldr	r3, [pc, #212]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    15fe:	1859      	adds	r1, r3, r1
    1600:	2300      	movs	r3, #0
    1602:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    1604:	2000      	movs	r0, #0
}
    1606:	bc04      	pop	{r2}
    1608:	4690      	mov	r8, r2
    160a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    160c:	20e0      	movs	r0, #224	; 0xe0
    160e:	05c0      	lsls	r0, r0, #23
    1610:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1612:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1614:	0495      	lsls	r5, r2, #18
    1616:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1618:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    161a:	0700      	lsls	r0, r0, #28
    161c:	4328      	orrs	r0, r5
    161e:	6178      	str	r0, [r7, #20]
    1620:	2506      	movs	r5, #6
    1622:	35ff      	adds	r5, #255	; 0xff
    1624:	2640      	movs	r6, #64	; 0x40
    1626:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1628:	2782      	movs	r7, #130	; 0x82
    162a:	007f      	lsls	r7, r7, #1
    162c:	2080      	movs	r0, #128	; 0x80
    162e:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    1630:	4828      	ldr	r0, [pc, #160]	; (16d4 <_usb_d_dev_ep_enable+0x2d4>)
    1632:	0149      	lsls	r1, r1, #5
    1634:	1841      	adds	r1, r0, r1
    1636:	2400      	movs	r4, #0
    1638:	728c      	strb	r4, [r1, #10]
    163a:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    163c:	340f      	adds	r4, #15
    163e:	4661      	mov	r1, ip
    1640:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    1642:	0099      	lsls	r1, r3, #2
    1644:	18c9      	adds	r1, r1, r3
    1646:	0089      	lsls	r1, r1, #2
    1648:	1841      	adds	r1, r0, r1
    164a:	3180      	adds	r1, #128	; 0x80
    164c:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    164e:	0163      	lsls	r3, r4, #5
    1650:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    1652:	18c0      	adds	r0, r0, r3
    1654:	6841      	ldr	r1, [r0, #4]
    1656:	0492      	lsls	r2, r2, #18
    1658:	0914      	lsrs	r4, r2, #4
    165a:	4a20      	ldr	r2, [pc, #128]	; (16dc <_usb_d_dev_ep_enable+0x2dc>)
    165c:	400a      	ands	r2, r1
    165e:	4322      	orrs	r2, r4
    1660:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    1662:	6842      	ldr	r2, [r0, #4]
    1664:	0b92      	lsrs	r2, r2, #14
    1666:	0392      	lsls	r2, r2, #14
    1668:	6042      	str	r2, [r0, #4]
    166a:	2282      	movs	r2, #130	; 0x82
    166c:	05d2      	lsls	r2, r2, #23
    166e:	189a      	adds	r2, r3, r2
    1670:	21b0      	movs	r1, #176	; 0xb0
    1672:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1674:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1676:	4a1a      	ldr	r2, [pc, #104]	; (16e0 <_usb_d_dev_ep_enable+0x2e0>)
    1678:	4694      	mov	ip, r2
    167a:	4463      	add	r3, ip
    167c:	2210      	movs	r2, #16
    167e:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    1680:	2000      	movs	r0, #0
    1682:	e7c0      	b.n	1606 <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1684:	20a0      	movs	r0, #160	; 0xa0
    1686:	05c0      	lsls	r0, r0, #23
    1688:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    168a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    168c:	0495      	lsls	r5, r2, #18
    168e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1690:	2005      	movs	r0, #5
    1692:	e7c2      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1694:	20c0      	movs	r0, #192	; 0xc0
    1696:	0580      	lsls	r0, r0, #22
    1698:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    169a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    169c:	0495      	lsls	r5, r2, #18
    169e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16a0:	2003      	movs	r0, #3
    16a2:	e7ba      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16a4:	20c0      	movs	r0, #192	; 0xc0
    16a6:	05c0      	lsls	r0, r0, #23
    16a8:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    16aa:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16ac:	0495      	lsls	r5, r2, #18
    16ae:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16b0:	2006      	movs	r0, #6
    16b2:	e7b2      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16b4:	2080      	movs	r0, #128	; 0x80
    16b6:	05c0      	lsls	r0, r0, #23
    16b8:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    16ba:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16bc:	0495      	lsls	r5, r2, #18
    16be:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16c0:	2004      	movs	r0, #4
    16c2:	e7aa      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16c4:	2080      	movs	r0, #128	; 0x80
    16c6:	0580      	lsls	r0, r0, #22
    16c8:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    16ca:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    16cc:	0495      	lsls	r5, r2, #18
    16ce:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    16d0:	2002      	movs	r0, #2
    16d2:	e7a2      	b.n	161a <_usb_d_dev_ep_enable+0x21a>
    16d4:	20000108 	.word	0x20000108
    16d8:	0fffc000 	.word	0x0fffc000
    16dc:	f0003fff 	.word	0xf0003fff
    16e0:	41000109 	.word	0x41000109

000016e4 <_usb_d_dev_ep_stall>:
{
    16e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    16e6:	230f      	movs	r3, #15
    16e8:	4003      	ands	r3, r0
    16ea:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    16ec:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    16ee:	2b00      	cmp	r3, #0
    16f0:	d009      	beq.n	1706 <_usb_d_dev_ep_stall+0x22>
    16f2:	001a      	movs	r2, r3
    16f4:	2800      	cmp	r0, #0
    16f6:	db04      	blt.n	1702 <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    16f8:	2b02      	cmp	r3, #2
    16fa:	d905      	bls.n	1708 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    16fc:	2012      	movs	r0, #18
    16fe:	4240      	negs	r0, r0
    1700:	e019      	b.n	1736 <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1702:	1c9a      	adds	r2, r3, #2
    1704:	e7f8      	b.n	16f8 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    1706:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1708:	2901      	cmp	r1, #1
    170a:	d015      	beq.n	1738 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    170c:	2900      	cmp	r1, #0
    170e:	d036      	beq.n	177e <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1710:	0093      	lsls	r3, r2, #2
    1712:	189b      	adds	r3, r3, r2
    1714:	009b      	lsls	r3, r3, #2
    1716:	4a47      	ldr	r2, [pc, #284]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    1718:	18d2      	adds	r2, r2, r3
    171a:	3286      	adds	r2, #134	; 0x86
    171c:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    171e:	230f      	movs	r3, #15
    1720:	4013      	ands	r3, r2
    1722:	015b      	lsls	r3, r3, #5
    1724:	4a44      	ldr	r2, [pc, #272]	; (1838 <_usb_d_dev_ep_stall+0x154>)
    1726:	4694      	mov	ip, r2
    1728:	4463      	add	r3, ip
    172a:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    172c:	2310      	movs	r3, #16
    172e:	40a3      	lsls	r3, r4
    1730:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    1732:	1e43      	subs	r3, r0, #1
    1734:	4198      	sbcs	r0, r3
}
    1736:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1738:	2510      	movs	r5, #16
    173a:	40a5      	lsls	r5, r4
    173c:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    173e:	493d      	ldr	r1, [pc, #244]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    1740:	0090      	lsls	r0, r2, #2
    1742:	1883      	adds	r3, r0, r2
    1744:	009b      	lsls	r3, r3, #2
    1746:	18cb      	adds	r3, r1, r3
    1748:	3386      	adds	r3, #134	; 0x86
    174a:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    174c:	230f      	movs	r3, #15
    174e:	4033      	ands	r3, r6
    1750:	015e      	lsls	r6, r3, #5
    1752:	4f39      	ldr	r7, [pc, #228]	; (1838 <_usb_d_dev_ep_stall+0x154>)
    1754:	46bc      	mov	ip, r7
    1756:	4466      	add	r6, ip
    1758:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    175a:	2520      	movs	r5, #32
    175c:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    175e:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1760:	015b      	lsls	r3, r3, #5
    1762:	4d36      	ldr	r5, [pc, #216]	; (183c <_usb_d_dev_ep_stall+0x158>)
    1764:	46ac      	mov	ip, r5
    1766:	4463      	add	r3, ip
    1768:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    176a:	1882      	adds	r2, r0, r2
    176c:	0092      	lsls	r2, r2, #2
    176e:	188a      	adds	r2, r1, r2
    1770:	3280      	adds	r2, #128	; 0x80
    1772:	79d3      	ldrb	r3, [r2, #7]
    1774:	2108      	movs	r1, #8
    1776:	430b      	orrs	r3, r1
    1778:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    177a:	2000      	movs	r0, #0
    177c:	e7db      	b.n	1736 <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    177e:	0093      	lsls	r3, r2, #2
    1780:	189b      	adds	r3, r3, r2
    1782:	0099      	lsls	r1, r3, #2
    1784:	4b2b      	ldr	r3, [pc, #172]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    1786:	185b      	adds	r3, r3, r1
    1788:	3386      	adds	r3, #134	; 0x86
    178a:	781b      	ldrb	r3, [r3, #0]
    178c:	210f      	movs	r1, #15
    178e:	400b      	ands	r3, r1
    1790:	015d      	lsls	r5, r3, #5
    1792:	2182      	movs	r1, #130	; 0x82
    1794:	05c9      	lsls	r1, r1, #23
    1796:	468c      	mov	ip, r1
    1798:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    179a:	2183      	movs	r1, #131	; 0x83
    179c:	0049      	lsls	r1, r1, #1
    179e:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    17a0:	39f6      	subs	r1, #246	; 0xf6
    17a2:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    17a4:	2000      	movs	r0, #0
	if (!is_stalled) {
    17a6:	420e      	tst	r6, r1
    17a8:	d0c5      	beq.n	1736 <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    17aa:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17ac:	3005      	adds	r0, #5
    17ae:	30ff      	adds	r0, #255	; 0xff
    17b0:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    17b2:	2120      	movs	r1, #32
    17b4:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    17b6:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    17b8:	015b      	lsls	r3, r3, #5
    17ba:	4e21      	ldr	r6, [pc, #132]	; (1840 <_usb_d_dev_ep_stall+0x15c>)
    17bc:	46b4      	mov	ip, r6
    17be:	4463      	add	r3, ip
    17c0:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    17c2:	2308      	movs	r3, #8
    17c4:	33ff      	adds	r3, #255	; 0xff
    17c6:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    17c8:	420b      	tst	r3, r1
    17ca:	d009      	beq.n	17e0 <_usb_d_dev_ep_stall+0xfc>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17cc:	2308      	movs	r3, #8
    17ce:	33ff      	adds	r3, #255	; 0xff
    17d0:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    17d2:	3b07      	subs	r3, #7
    17d4:	3bff      	subs	r3, #255	; 0xff
    17d6:	40a3      	lsls	r3, r4
    17d8:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    17da:	2182      	movs	r1, #130	; 0x82
    17dc:	0049      	lsls	r1, r1, #1
    17de:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    17e0:	0093      	lsls	r3, r2, #2
    17e2:	189b      	adds	r3, r3, r2
    17e4:	0099      	lsls	r1, r3, #2
    17e6:	4b13      	ldr	r3, [pc, #76]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    17e8:	185b      	adds	r3, r3, r1
    17ea:	3380      	adds	r3, #128	; 0x80
    17ec:	79d9      	ldrb	r1, [r3, #7]
    17ee:	2307      	movs	r3, #7
    17f0:	400b      	ands	r3, r1
    17f2:	2b01      	cmp	r3, #1
    17f4:	d00b      	beq.n	180e <_usb_d_dev_ep_stall+0x12a>
		ept->flags.bits.is_stalled = 0;
    17f6:	0093      	lsls	r3, r2, #2
    17f8:	189a      	adds	r2, r3, r2
    17fa:	0092      	lsls	r2, r2, #2
    17fc:	4b0d      	ldr	r3, [pc, #52]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    17fe:	189b      	adds	r3, r3, r2
    1800:	3380      	adds	r3, #128	; 0x80
    1802:	79da      	ldrb	r2, [r3, #7]
    1804:	2108      	movs	r1, #8
    1806:	438a      	bics	r2, r1
    1808:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    180a:	2000      	movs	r0, #0
    180c:	e793      	b.n	1736 <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    180e:	3306      	adds	r3, #6
    1810:	33ff      	adds	r3, #255	; 0xff
    1812:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1814:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1816:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1818:	4219      	tst	r1, r3
    181a:	d000      	beq.n	181e <_usb_d_dev_ep_stall+0x13a>
    181c:	e78b      	b.n	1736 <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    181e:	0093      	lsls	r3, r2, #2
    1820:	189a      	adds	r2, r3, r2
    1822:	0092      	lsls	r2, r2, #2
    1824:	4b03      	ldr	r3, [pc, #12]	; (1834 <_usb_d_dev_ep_stall+0x150>)
    1826:	189b      	adds	r3, r3, r2
    1828:	3380      	adds	r3, #128	; 0x80
    182a:	79da      	ldrb	r2, [r3, #7]
    182c:	2108      	movs	r1, #8
    182e:	438a      	bics	r2, r1
    1830:	71da      	strb	r2, [r3, #7]
    1832:	e780      	b.n	1736 <_usb_d_dev_ep_stall+0x52>
    1834:	20000108 	.word	0x20000108
    1838:	41000100 	.word	0x41000100
    183c:	41000109 	.word	0x41000109
    1840:	41000108 	.word	0x41000108

00001844 <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    1844:	b570      	push	{r4, r5, r6, lr}
    1846:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1848:	230f      	movs	r3, #15
    184a:	4018      	ands	r0, r3
    184c:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    184e:	4b16      	ldr	r3, [pc, #88]	; (18a8 <_usb_d_dev_ep_read_req+0x64>)
    1850:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    1852:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    1854:	685b      	ldr	r3, [r3, #4]
    1856:	049b      	lsls	r3, r3, #18
    1858:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    185a:	2802      	cmp	r0, #2
    185c:	d81b      	bhi.n	1896 <_usb_d_dev_ep_read_req+0x52>
    185e:	2d00      	cmp	r5, #0
    1860:	d01c      	beq.n	189c <_usb_d_dev_ep_read_req+0x58>
    1862:	2382      	movs	r3, #130	; 0x82
    1864:	05db      	lsls	r3, r3, #23
    1866:	469c      	mov	ip, r3
    1868:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    186a:	2380      	movs	r3, #128	; 0x80
    186c:	005b      	lsls	r3, r3, #1
    186e:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    1870:	2b11      	cmp	r3, #17
    1872:	d116      	bne.n	18a2 <_usb_d_dev_ep_read_req+0x5e>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    1874:	2308      	movs	r3, #8
    1876:	33ff      	adds	r3, #255	; 0xff
    1878:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    187a:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    187c:	06db      	lsls	r3, r3, #27
    187e:	d400      	bmi.n	1882 <_usb_d_dev_ep_read_req+0x3e>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    1880:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    1882:	2208      	movs	r2, #8
    1884:	0028      	movs	r0, r5
    1886:	4b09      	ldr	r3, [pc, #36]	; (18ac <_usb_d_dev_ep_read_req+0x68>)
    1888:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    188a:	2210      	movs	r2, #16
    188c:	2308      	movs	r3, #8
    188e:	33ff      	adds	r3, #255	; 0xff
    1890:	54e2      	strb	r2, [r4, r3]
	return bytes;
    1892:	0030      	movs	r0, r6
    1894:	e7f4      	b.n	1880 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_PARAM;
    1896:	2012      	movs	r0, #18
    1898:	4240      	negs	r0, r0
    189a:	e7f1      	b.n	1880 <_usb_d_dev_ep_read_req+0x3c>
    189c:	2012      	movs	r0, #18
    189e:	4240      	negs	r0, r0
    18a0:	e7ee      	b.n	1880 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_FUNC;
    18a2:	2013      	movs	r0, #19
    18a4:	4240      	negs	r0, r0
    18a6:	e7eb      	b.n	1880 <_usb_d_dev_ep_read_req+0x3c>
    18a8:	20000108 	.word	0x20000108
    18ac:	00002b7d 	.word	0x00002b7d

000018b0 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    18b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18b2:	46de      	mov	lr, fp
    18b4:	4657      	mov	r7, sl
    18b6:	464e      	mov	r6, r9
    18b8:	4645      	mov	r5, r8
    18ba:	b5e0      	push	{r5, r6, r7, lr}
    18bc:	b085      	sub	sp, #20
    18be:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    18c0:	7a06      	ldrb	r6, [r0, #8]
    18c2:	230f      	movs	r3, #15
    18c4:	4033      	ands	r3, r6
    18c6:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    18c8:	2b00      	cmp	r3, #0
    18ca:	d100      	bne.n	18ce <_usb_d_dev_ep_trans+0x1e>
    18cc:	e0d3      	b.n	1a76 <_usb_d_dev_ep_trans+0x1c6>
    18ce:	0018      	movs	r0, r3
    18d0:	2e00      	cmp	r6, #0
    18d2:	db39      	blt.n	1948 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    18d4:	0004      	movs	r4, r0
    18d6:	4a73      	ldr	r2, [pc, #460]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    18d8:	3260      	adds	r2, #96	; 0x60
    18da:	1c41      	adds	r1, r0, #1
    18dc:	008d      	lsls	r5, r1, #2
    18de:	186d      	adds	r5, r5, r1
    18e0:	00ad      	lsls	r5, r5, #2
    18e2:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    18e4:	0081      	lsls	r1, r0, #2
    18e6:	1809      	adds	r1, r1, r0
    18e8:	0089      	lsls	r1, r1, #2
    18ea:	1852      	adds	r2, r2, r1
    18ec:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    18ee:	4a6e      	ldr	r2, [pc, #440]	; (1aa8 <_usb_d_dev_ep_trans+0x1f8>)
    18f0:	4291      	cmp	r1, r2
    18f2:	d02b      	beq.n	194c <_usb_d_dev_ep_trans+0x9c>
    18f4:	1e4f      	subs	r7, r1, #1
    18f6:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    18f8:	4642      	mov	r2, r8
    18fa:	6852      	ldr	r2, [r2, #4]
    18fc:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    18fe:	2b02      	cmp	r3, #2
    1900:	d900      	bls.n	1904 <_usb_d_dev_ep_trans+0x54>
    1902:	e0a4      	b.n	1a4e <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    1904:	4643      	mov	r3, r8
    1906:	681b      	ldr	r3, [r3, #0]
    1908:	4868      	ldr	r0, [pc, #416]	; (1aac <_usb_d_dev_ep_trans+0x1fc>)
    190a:	4283      	cmp	r3, r0
    190c:	d920      	bls.n	1950 <_usb_d_dev_ep_trans+0xa0>
    190e:	1898      	adds	r0, r3, r2
    1910:	9001      	str	r0, [sp, #4]
    1912:	4867      	ldr	r0, [pc, #412]	; (1ab0 <_usb_d_dev_ep_trans+0x200>)
    1914:	4684      	mov	ip, r0
    1916:	9801      	ldr	r0, [sp, #4]
    1918:	4560      	cmp	r0, ip
    191a:	d819      	bhi.n	1950 <_usb_d_dev_ep_trans+0xa0>
    191c:	079b      	lsls	r3, r3, #30
    191e:	d117      	bne.n	1950 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1920:	2e00      	cmp	r6, #0
    1922:	db32      	blt.n	198a <_usb_d_dev_ep_trans+0xda>
    1924:	4291      	cmp	r1, r2
    1926:	d900      	bls.n	192a <_usb_d_dev_ep_trans+0x7a>
    1928:	e0af      	b.n	1a8a <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    192a:	2f00      	cmp	r7, #0
    192c:	d030      	beq.n	1990 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    192e:	00a3      	lsls	r3, r4, #2
    1930:	191b      	adds	r3, r3, r4
    1932:	009a      	lsls	r2, r3, #2
    1934:	4b5b      	ldr	r3, [pc, #364]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1936:	189b      	adds	r3, r3, r2
    1938:	3380      	adds	r3, #128	; 0x80
    193a:	681b      	ldr	r3, [r3, #0]
    193c:	2b00      	cmp	r3, #0
    193e:	d100      	bne.n	1942 <_usb_d_dev_ep_trans+0x92>
    1940:	e08b      	b.n	1a5a <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    1942:	2300      	movs	r3, #0
    1944:	4699      	mov	r9, r3
    1946:	e00f      	b.n	1968 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1948:	1c98      	adds	r0, r3, #2
    194a:	e7c3      	b.n	18d4 <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    194c:	000f      	movs	r7, r1
    194e:	e7d3      	b.n	18f8 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1950:	00a3      	lsls	r3, r4, #2
    1952:	191b      	adds	r3, r3, r4
    1954:	009a      	lsls	r2, r3, #2
    1956:	4b53      	ldr	r3, [pc, #332]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1958:	189b      	adds	r3, r3, r2
    195a:	3380      	adds	r3, #128	; 0x80
    195c:	681b      	ldr	r3, [r3, #0]
    195e:	2b00      	cmp	r3, #0
    1960:	d100      	bne.n	1964 <_usb_d_dev_ep_trans+0xb4>
    1962:	e077      	b.n	1a54 <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    1964:	2301      	movs	r3, #1
    1966:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    1968:	00a3      	lsls	r3, r4, #2
    196a:	191b      	adds	r3, r3, r4
    196c:	009a      	lsls	r2, r3, #2
    196e:	4b4d      	ldr	r3, [pc, #308]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1970:	189b      	adds	r3, r3, r2
    1972:	3380      	adds	r3, #128	; 0x80
    1974:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    1976:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    1978:	071b      	lsls	r3, r3, #28
    197a:	d50c      	bpl.n	1996 <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    197c:	b005      	add	sp, #20
    197e:	bc3c      	pop	{r2, r3, r4, r5}
    1980:	4690      	mov	r8, r2
    1982:	4699      	mov	r9, r3
    1984:	46a2      	mov	sl, r4
    1986:	46ab      	mov	fp, r5
    1988:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    198a:	2300      	movs	r3, #0
    198c:	4699      	mov	r9, r3
    198e:	e7eb      	b.n	1968 <_usb_d_dev_ep_trans+0xb8>
    1990:	2300      	movs	r3, #0
    1992:	4699      	mov	r9, r3
    1994:	e7e8      	b.n	1968 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    1996:	a803      	add	r0, sp, #12
    1998:	4b46      	ldr	r3, [pc, #280]	; (1ab4 <_usb_d_dev_ep_trans+0x204>)
    199a:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    199c:	00a3      	lsls	r3, r4, #2
    199e:	191b      	adds	r3, r3, r4
    19a0:	009a      	lsls	r2, r3, #2
    19a2:	4b40      	ldr	r3, [pc, #256]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    19a4:	189b      	adds	r3, r3, r2
    19a6:	3380      	adds	r3, #128	; 0x80
    19a8:	79db      	ldrb	r3, [r3, #7]
    19aa:	065b      	lsls	r3, r3, #25
    19ac:	d444      	bmi.n	1a38 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    19ae:	00a3      	lsls	r3, r4, #2
    19b0:	191b      	adds	r3, r3, r4
    19b2:	009b      	lsls	r3, r3, #2
    19b4:	4a3b      	ldr	r2, [pc, #236]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    19b6:	4693      	mov	fp, r2
    19b8:	449b      	add	fp, r3
    19ba:	2380      	movs	r3, #128	; 0x80
    19bc:	445b      	add	r3, fp
    19be:	469a      	mov	sl, r3
    19c0:	79db      	ldrb	r3, [r3, #7]
    19c2:	2240      	movs	r2, #64	; 0x40
    19c4:	4313      	orrs	r3, r2
    19c6:	4652      	mov	r2, sl
    19c8:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    19ca:	a803      	add	r0, sp, #12
    19cc:	4b3a      	ldr	r3, [pc, #232]	; (1ab8 <_usb_d_dev_ep_trans+0x208>)
    19ce:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    19d0:	465b      	mov	r3, fp
    19d2:	4642      	mov	r2, r8
    19d4:	6812      	ldr	r2, [r2, #0]
    19d6:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    19d8:	4642      	mov	r2, r8
    19da:	6852      	ldr	r2, [r2, #4]
    19dc:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    19de:	2300      	movs	r3, #0
    19e0:	465a      	mov	r2, fp
    19e2:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    19e4:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    19e6:	01d2      	lsls	r2, r2, #7
    19e8:	4653      	mov	r3, sl
    19ea:	79d9      	ldrb	r1, [r3, #7]
    19ec:	237f      	movs	r3, #127	; 0x7f
    19ee:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    19f0:	4649      	mov	r1, r9
    19f2:	0149      	lsls	r1, r1, #5
    19f4:	4313      	orrs	r3, r2
    19f6:	2220      	movs	r2, #32
    19f8:	4393      	bics	r3, r2
    19fa:	430b      	orrs	r3, r1
    19fc:	4652      	mov	r2, sl
    19fe:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1a00:	4643      	mov	r3, r8
    1a02:	7a5b      	ldrb	r3, [r3, #9]
    1a04:	2200      	movs	r2, #0
    1a06:	2b00      	cmp	r3, #0
    1a08:	d002      	beq.n	1a10 <_usb_d_dev_ep_trans+0x160>
    1a0a:	427a      	negs	r2, r7
    1a0c:	417a      	adcs	r2, r7
    1a0e:	b2d2      	uxtb	r2, r2
    1a10:	00a3      	lsls	r3, r4, #2
    1a12:	191c      	adds	r4, r3, r4
    1a14:	00a4      	lsls	r4, r4, #2
    1a16:	4b23      	ldr	r3, [pc, #140]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1a18:	191b      	adds	r3, r3, r4
    1a1a:	3380      	adds	r3, #128	; 0x80
    1a1c:	0112      	lsls	r2, r2, #4
    1a1e:	79df      	ldrb	r7, [r3, #7]
    1a20:	2110      	movs	r1, #16
    1a22:	438f      	bics	r7, r1
    1a24:	4317      	orrs	r7, r2
    1a26:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1a28:	2e00      	cmp	r6, #0
    1a2a:	db0a      	blt.n	1a42 <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1a2c:	2100      	movs	r1, #0
    1a2e:	0028      	movs	r0, r5
    1a30:	4b22      	ldr	r3, [pc, #136]	; (1abc <_usb_d_dev_ep_trans+0x20c>)
    1a32:	4798      	blx	r3
	return ERR_NONE;
    1a34:	2000      	movs	r0, #0
    1a36:	e7a1      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1a38:	a803      	add	r0, sp, #12
    1a3a:	4b1f      	ldr	r3, [pc, #124]	; (1ab8 <_usb_d_dev_ep_trans+0x208>)
    1a3c:	4798      	blx	r3
		return USB_BUSY;
    1a3e:	2001      	movs	r0, #1
    1a40:	e79c      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    1a42:	2100      	movs	r1, #0
    1a44:	0028      	movs	r0, r5
    1a46:	4b1e      	ldr	r3, [pc, #120]	; (1ac0 <_usb_d_dev_ep_trans+0x210>)
    1a48:	4798      	blx	r3
	return ERR_NONE;
    1a4a:	2000      	movs	r0, #0
    1a4c:	e796      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1a4e:	2012      	movs	r0, #18
    1a50:	4240      	negs	r0, r0
    1a52:	e793      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1a54:	2013      	movs	r0, #19
    1a56:	4240      	negs	r0, r0
    1a58:	e790      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1a5a:	2012      	movs	r0, #18
    1a5c:	4240      	negs	r0, r0
    1a5e:	e78d      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1a60:	2013      	movs	r0, #19
    1a62:	4240      	negs	r0, r0
    1a64:	e78a      	b.n	197c <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    1a66:	4643      	mov	r3, r8
    1a68:	685a      	ldr	r2, [r3, #4]
    1a6a:	0597      	lsls	r7, r2, #22
    1a6c:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    1a6e:	4d0d      	ldr	r5, [pc, #52]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1a70:	3574      	adds	r5, #116	; 0x74
    1a72:	2400      	movs	r4, #0
    1a74:	e746      	b.n	1904 <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1a76:	4a0b      	ldr	r2, [pc, #44]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1a78:	3260      	adds	r2, #96	; 0x60
    1a7a:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1a7c:	4a0a      	ldr	r2, [pc, #40]	; (1aa8 <_usb_d_dev_ep_trans+0x1f8>)
    1a7e:	4291      	cmp	r1, r2
    1a80:	d0f1      	beq.n	1a66 <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    1a82:	4d08      	ldr	r5, [pc, #32]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1a84:	3574      	adds	r5, #116	; 0x74
    1a86:	2400      	movs	r4, #0
    1a88:	e734      	b.n	18f4 <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    1a8a:	00a3      	lsls	r3, r4, #2
    1a8c:	191b      	adds	r3, r3, r4
    1a8e:	009a      	lsls	r2, r3, #2
    1a90:	4b04      	ldr	r3, [pc, #16]	; (1aa4 <_usb_d_dev_ep_trans+0x1f4>)
    1a92:	189b      	adds	r3, r3, r2
    1a94:	3380      	adds	r3, #128	; 0x80
    1a96:	681b      	ldr	r3, [r3, #0]
    1a98:	2b00      	cmp	r3, #0
    1a9a:	d0e1      	beq.n	1a60 <_usb_d_dev_ep_trans+0x1b0>
    1a9c:	2301      	movs	r3, #1
    1a9e:	4699      	mov	r9, r3
    1aa0:	e762      	b.n	1968 <_usb_d_dev_ep_trans+0xb8>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	20000108 	.word	0x20000108
    1aa8:	000003ff 	.word	0x000003ff
    1aac:	1fffffff 	.word	0x1fffffff
    1ab0:	20002fff 	.word	0x20002fff
    1ab4:	000002a5 	.word	0x000002a5
    1ab8:	000002b3 	.word	0x000002b3
    1abc:	00000e71 	.word	0x00000e71
    1ac0:	00000cc9 	.word	0x00000cc9

00001ac4 <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ac4:	1e0b      	subs	r3, r1, #0
    1ac6:	d006      	beq.n	1ad6 <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1ac8:	2801      	cmp	r0, #1
    1aca:	d006      	beq.n	1ada <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1acc:	2800      	cmp	r0, #0
    1ace:	d101      	bne.n	1ad4 <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1ad0:	4a03      	ldr	r2, [pc, #12]	; (1ae0 <_usb_d_dev_register_callback+0x1c>)
    1ad2:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    1ad4:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ad6:	4b03      	ldr	r3, [pc, #12]	; (1ae4 <_usb_d_dev_register_callback+0x20>)
    1ad8:	e7f6      	b.n	1ac8 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1ada:	4a01      	ldr	r2, [pc, #4]	; (1ae0 <_usb_d_dev_register_callback+0x1c>)
    1adc:	6653      	str	r3, [r2, #100]	; 0x64
    1ade:	e7f9      	b.n	1ad4 <_usb_d_dev_register_callback+0x10>
    1ae0:	20000108 	.word	0x20000108
    1ae4:	00000a31 	.word	0x00000a31

00001ae8 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1ae8:	1e0b      	subs	r3, r1, #0
    1aea:	d008      	beq.n	1afe <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1aec:	2800      	cmp	r0, #0
    1aee:	d008      	beq.n	1b02 <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1af0:	2801      	cmp	r0, #1
    1af2:	d009      	beq.n	1b08 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1af4:	2802      	cmp	r0, #2
    1af6:	d106      	bne.n	1b06 <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1af8:	4a05      	ldr	r2, [pc, #20]	; (1b10 <_usb_d_dev_register_ep_callback+0x28>)
    1afa:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1afc:	e003      	b.n	1b06 <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1afe:	4b05      	ldr	r3, [pc, #20]	; (1b14 <_usb_d_dev_register_ep_callback+0x2c>)
    1b00:	e7f4      	b.n	1aec <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1b02:	4a03      	ldr	r2, [pc, #12]	; (1b10 <_usb_d_dev_register_ep_callback+0x28>)
    1b04:	6693      	str	r3, [r2, #104]	; 0x68
}
    1b06:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1b08:	4a01      	ldr	r2, [pc, #4]	; (1b10 <_usb_d_dev_register_ep_callback+0x28>)
    1b0a:	66d3      	str	r3, [r2, #108]	; 0x6c
    1b0c:	e7fb      	b.n	1b06 <_usb_d_dev_register_ep_callback+0x1e>
    1b0e:	46c0      	nop			; (mov r8, r8)
    1b10:	20000108 	.word	0x20000108
    1b14:	00000a31 	.word	0x00000a31

00001b18 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1b1a:	2382      	movs	r3, #130	; 0x82
    1b1c:	05db      	lsls	r3, r3, #23
    1b1e:	8c1e      	ldrh	r6, [r3, #32]
    1b20:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1b22:	2e00      	cmp	r6, #0
    1b24:	d003      	beq.n	1b2e <USB_Handler+0x16>
    1b26:	4c83      	ldr	r4, [pc, #524]	; (1d34 <USB_Handler+0x21c>)
    1b28:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1b2a:	2500      	movs	r5, #0
    1b2c:	e0c0      	b.n	1cb0 <USB_Handler+0x198>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1b2e:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1b30:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1b32:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1b34:	075a      	lsls	r2, r3, #29
    1b36:	d418      	bmi.n	1b6a <USB_Handler+0x52>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1b38:	059a      	lsls	r2, r3, #22
    1b3a:	d41e      	bmi.n	1b7a <USB_Handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1b3c:	061a      	lsls	r2, r3, #24
    1b3e:	d441      	bmi.n	1bc4 <USB_Handler+0xac>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1b40:	2270      	movs	r2, #112	; 0x70
    1b42:	421a      	tst	r2, r3
    1b44:	d148      	bne.n	1bd8 <USB_Handler+0xc0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1b46:	071a      	lsls	r2, r3, #28
    1b48:	d464      	bmi.n	1c14 <USB_Handler+0xfc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1b4a:	07db      	lsls	r3, r3, #31
    1b4c:	d5eb      	bpl.n	1b26 <USB_Handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b4e:	2382      	movs	r3, #130	; 0x82
    1b50:	05db      	lsls	r3, r3, #23
    1b52:	4a79      	ldr	r2, [pc, #484]	; (1d38 <USB_Handler+0x220>)
    1b54:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b56:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b58:	3a92      	subs	r2, #146	; 0x92
    1b5a:	3aff      	subs	r2, #255	; 0xff
    1b5c:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1b5e:	4b75      	ldr	r3, [pc, #468]	; (1d34 <USB_Handler+0x21c>)
    1b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b62:	2100      	movs	r1, #0
    1b64:	2004      	movs	r0, #4
    1b66:	4798      	blx	r3
    1b68:	e006      	b.n	1b78 <USB_Handler+0x60>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b6a:	2204      	movs	r2, #4
    1b6c:	2382      	movs	r3, #130	; 0x82
    1b6e:	05db      	lsls	r3, r3, #23
    1b70:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1b72:	4b70      	ldr	r3, [pc, #448]	; (1d34 <USB_Handler+0x21c>)
    1b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1b76:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b7a:	2382      	movs	r3, #130	; 0x82
    1b7c:	05db      	lsls	r3, r3, #23
    1b7e:	4a6e      	ldr	r2, [pc, #440]	; (1d38 <USB_Handler+0x220>)
    1b80:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b82:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b84:	3a92      	subs	r2, #146	; 0x92
    1b86:	3aff      	subs	r2, #255	; 0xff
    1b88:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1b8a:	4b6a      	ldr	r3, [pc, #424]	; (1d34 <USB_Handler+0x21c>)
    1b8c:	891b      	ldrh	r3, [r3, #8]
    1b8e:	071b      	lsls	r3, r3, #28
    1b90:	0f1b      	lsrs	r3, r3, #28
    1b92:	2b03      	cmp	r3, #3
    1b94:	d00c      	beq.n	1bb0 <USB_Handler+0x98>
    1b96:	4b67      	ldr	r3, [pc, #412]	; (1d34 <USB_Handler+0x21c>)
    1b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1b9a:	071b      	lsls	r3, r3, #28
    1b9c:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1b9e:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ba0:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1ba2:	2b03      	cmp	r3, #3
    1ba4:	d005      	beq.n	1bb2 <USB_Handler+0x9a>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1ba6:	4b63      	ldr	r3, [pc, #396]	; (1d34 <USB_Handler+0x21c>)
    1ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1baa:	2003      	movs	r0, #3
    1bac:	4798      	blx	r3
    1bae:	e7e3      	b.n	1b78 <USB_Handler+0x60>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1bb0:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1bb2:	0152      	lsls	r2, r2, #5
    1bb4:	4b5f      	ldr	r3, [pc, #380]	; (1d34 <USB_Handler+0x21c>)
    1bb6:	189b      	adds	r3, r3, r2
    1bb8:	8919      	ldrh	r1, [r3, #8]
    1bba:	0449      	lsls	r1, r1, #17
    1bbc:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1bbe:	2200      	movs	r2, #0
    1bc0:	811a      	strh	r2, [r3, #8]
    1bc2:	e7f0      	b.n	1ba6 <USB_Handler+0x8e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1bc4:	2280      	movs	r2, #128	; 0x80
    1bc6:	2382      	movs	r3, #130	; 0x82
    1bc8:	05db      	lsls	r3, r3, #23
    1bca:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1bcc:	4b59      	ldr	r3, [pc, #356]	; (1d34 <USB_Handler+0x21c>)
    1bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1bd0:	2100      	movs	r1, #0
    1bd2:	2005      	movs	r0, #5
    1bd4:	4798      	blx	r3
    1bd6:	e7cf      	b.n	1b78 <USB_Handler+0x60>
    1bd8:	2382      	movs	r3, #130	; 0x82
    1bda:	05db      	lsls	r3, r3, #23
    1bdc:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1bde:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1be0:	4a55      	ldr	r2, [pc, #340]	; (1d38 <USB_Handler+0x220>)
    1be2:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    1be4:	4b55      	ldr	r3, [pc, #340]	; (1d3c <USB_Handler+0x224>)
    1be6:	8b1b      	ldrh	r3, [r3, #24]
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(OSCCTRL)) {
    1be8:	075b      	lsls	r3, r3, #29
    1bea:	d50c      	bpl.n	1c06 <USB_Handler+0xee>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1bec:	4953      	ldr	r1, [pc, #332]	; (1d3c <USB_Handler+0x224>)
	tmp &= mask;
    1bee:	2290      	movs	r2, #144	; 0x90
    1bf0:	0112      	lsls	r2, r2, #4
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1bf2:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1bf4:	4013      	ands	r3, r2
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1bf6:	4293      	cmp	r3, r2
    1bf8:	d1fb      	bne.n	1bf2 <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1bfa:	4b4e      	ldr	r3, [pc, #312]	; (1d34 <USB_Handler+0x21c>)
    1bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1bfe:	2100      	movs	r1, #0
    1c00:	2002      	movs	r0, #2
    1c02:	4798      	blx	r3
    1c04:	e7b8      	b.n	1b78 <USB_Handler+0x60>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c06:	494d      	ldr	r1, [pc, #308]	; (1d3c <USB_Handler+0x224>)
	tmp &= mask;
    1c08:	2280      	movs	r2, #128	; 0x80
    1c0a:	0052      	lsls	r2, r2, #1
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c0c:	68cb      	ldr	r3, [r1, #12]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1c0e:	4213      	tst	r3, r2
    1c10:	d0fc      	beq.n	1c0c <USB_Handler+0xf4>
    1c12:	e7f2      	b.n	1bfa <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1c14:	2382      	movs	r3, #130	; 0x82
    1c16:	05db      	lsls	r3, r3, #23
    1c18:	2100      	movs	r1, #0
    1c1a:	2280      	movs	r2, #128	; 0x80
    1c1c:	0052      	lsls	r2, r2, #1
    1c1e:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1c20:	3af8      	subs	r2, #248	; 0xf8
    1c22:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1c24:	3268      	adds	r2, #104	; 0x68
    1c26:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1c28:	4a43      	ldr	r2, [pc, #268]	; (1d38 <USB_Handler+0x220>)
    1c2a:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1c2c:	4b44      	ldr	r3, [pc, #272]	; (1d40 <USB_Handler+0x228>)
    1c2e:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1c30:	4b40      	ldr	r3, [pc, #256]	; (1d34 <USB_Handler+0x21c>)
    1c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1c34:	2100      	movs	r1, #0
    1c36:	2001      	movs	r0, #1
    1c38:	4798      	blx	r3
    1c3a:	e79d      	b.n	1b78 <USB_Handler+0x60>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c3c:	06cb      	lsls	r3, r1, #27
    1c3e:	d407      	bmi.n	1c50 <USB_Handler+0x138>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1c40:	064b      	lsls	r3, r1, #25
    1c42:	d408      	bmi.n	1c56 <USB_Handler+0x13e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1c44:	068b      	lsls	r3, r1, #26
    1c46:	d52e      	bpl.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    1c48:	2100      	movs	r1, #0
    1c4a:	4b3e      	ldr	r3, [pc, #248]	; (1d44 <USB_Handler+0x22c>)
    1c4c:	4798      	blx	r3
    1c4e:	e02a      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_setup(ept);
    1c50:	4b3d      	ldr	r3, [pc, #244]	; (1d48 <USB_Handler+0x230>)
    1c52:	4798      	blx	r3
    1c54:	e027      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    1c56:	2101      	movs	r1, #1
    1c58:	4b3a      	ldr	r3, [pc, #232]	; (1d44 <USB_Handler+0x22c>)
    1c5a:	4798      	blx	r3
    1c5c:	e023      	b.n	1ca6 <USB_Handler+0x18e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1c5e:	064b      	lsls	r3, r1, #25
    1c60:	d40e      	bmi.n	1c80 <USB_Handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1c62:	070b      	lsls	r3, r1, #28
    1c64:	d410      	bmi.n	1c88 <USB_Handler+0x170>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1c66:	078b      	lsls	r3, r1, #30
    1c68:	d412      	bmi.n	1c90 <USB_Handler+0x178>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1c6a:	2307      	movs	r3, #7
    1c6c:	401a      	ands	r2, r3
    1c6e:	2a01      	cmp	r2, #1
    1c70:	d119      	bne.n	1ca6 <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1c72:	074b      	lsls	r3, r1, #29
    1c74:	d410      	bmi.n	1c98 <USB_Handler+0x180>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c76:	06cb      	lsls	r3, r1, #27
    1c78:	d515      	bpl.n	1ca6 <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    1c7a:	4b33      	ldr	r3, [pc, #204]	; (1d48 <USB_Handler+0x230>)
    1c7c:	4798      	blx	r3
    1c7e:	e012      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    1c80:	2101      	movs	r1, #1
    1c82:	4b30      	ldr	r3, [pc, #192]	; (1d44 <USB_Handler+0x22c>)
    1c84:	4798      	blx	r3
    1c86:	e00e      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 1);
    1c88:	2101      	movs	r1, #1
    1c8a:	4b30      	ldr	r3, [pc, #192]	; (1d4c <USB_Handler+0x234>)
    1c8c:	4798      	blx	r3
    1c8e:	e00a      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_in_next(ept, true);
    1c90:	2101      	movs	r1, #1
    1c92:	4b2f      	ldr	r3, [pc, #188]	; (1d50 <USB_Handler+0x238>)
    1c94:	4798      	blx	r3
    1c96:	e006      	b.n	1ca6 <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 0);
    1c98:	2100      	movs	r1, #0
    1c9a:	4b2c      	ldr	r3, [pc, #176]	; (1d4c <USB_Handler+0x234>)
    1c9c:	4798      	blx	r3
    1c9e:	e002      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    1ca0:	2100      	movs	r1, #0
    1ca2:	4b28      	ldr	r3, [pc, #160]	; (1d44 <USB_Handler+0x22c>)
    1ca4:	4798      	blx	r3
    1ca6:	3501      	adds	r5, #1
    1ca8:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1caa:	2d09      	cmp	r5, #9
    1cac:	d100      	bne.n	1cb0 <USB_Handler+0x198>
    1cae:	e763      	b.n	1b78 <USB_Handler+0x60>
    1cb0:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1cb2:	7ca1      	ldrb	r1, [r4, #18]
    1cb4:	29ff      	cmp	r1, #255	; 0xff
    1cb6:	d0f6      	beq.n	1ca6 <USB_Handler+0x18e>
	if (!(epint & (1u << epn))) {
    1cb8:	230f      	movs	r3, #15
    1cba:	400b      	ands	r3, r1
    1cbc:	2101      	movs	r1, #1
    1cbe:	4099      	lsls	r1, r3
    1cc0:	420e      	tst	r6, r1
    1cc2:	d0f0      	beq.n	1ca6 <USB_Handler+0x18e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1cc4:	0159      	lsls	r1, r3, #5
    1cc6:	4f23      	ldr	r7, [pc, #140]	; (1d54 <USB_Handler+0x23c>)
    1cc8:	46bc      	mov	ip, r7
    1cca:	4461      	add	r1, ip
    1ccc:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1cce:	015b      	lsls	r3, r3, #5
    1cd0:	4f21      	ldr	r7, [pc, #132]	; (1d58 <USB_Handler+0x240>)
    1cd2:	46bc      	mov	ip, r7
    1cd4:	4463      	add	r3, ip
    1cd6:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1cd8:	4019      	ands	r1, r3
	if (flags) {
    1cda:	d0e4      	beq.n	1ca6 <USB_Handler+0x18e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1cdc:	00ab      	lsls	r3, r5, #2
    1cde:	195a      	adds	r2, r3, r5
    1ce0:	0092      	lsls	r2, r2, #2
    1ce2:	4b14      	ldr	r3, [pc, #80]	; (1d34 <USB_Handler+0x21c>)
    1ce4:	469c      	mov	ip, r3
    1ce6:	4462      	add	r2, ip
    1ce8:	3270      	adds	r2, #112	; 0x70
    1cea:	7dd2      	ldrb	r2, [r2, #23]
    1cec:	2347      	movs	r3, #71	; 0x47
    1cee:	4013      	ands	r3, r2
    1cf0:	2b01      	cmp	r3, #1
    1cf2:	d0a3      	beq.n	1c3c <USB_Handler+0x124>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1cf4:	b253      	sxtb	r3, r2
    1cf6:	2b00      	cmp	r3, #0
    1cf8:	dbb1      	blt.n	1c5e <USB_Handler+0x146>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1cfa:	068b      	lsls	r3, r1, #26
    1cfc:	d4d0      	bmi.n	1ca0 <USB_Handler+0x188>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1cfe:	074b      	lsls	r3, r1, #29
    1d00:	d40c      	bmi.n	1d1c <USB_Handler+0x204>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1d02:	07cb      	lsls	r3, r1, #31
    1d04:	d40e      	bmi.n	1d24 <USB_Handler+0x20c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1d06:	2307      	movs	r3, #7
    1d08:	401a      	ands	r2, r3
    1d0a:	2a01      	cmp	r2, #1
    1d0c:	d1cb      	bne.n	1ca6 <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1d0e:	070b      	lsls	r3, r1, #28
    1d10:	d40c      	bmi.n	1d2c <USB_Handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1d12:	06cb      	lsls	r3, r1, #27
    1d14:	d5c7      	bpl.n	1ca6 <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    1d16:	4b0c      	ldr	r3, [pc, #48]	; (1d48 <USB_Handler+0x230>)
    1d18:	4798      	blx	r3
    1d1a:	e7c4      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 0);
    1d1c:	2100      	movs	r1, #0
    1d1e:	4b0b      	ldr	r3, [pc, #44]	; (1d4c <USB_Handler+0x234>)
    1d20:	4798      	blx	r3
    1d22:	e7c0      	b.n	1ca6 <USB_Handler+0x18e>
		_usb_d_dev_out_next(ept, true);
    1d24:	2101      	movs	r1, #1
    1d26:	4b0d      	ldr	r3, [pc, #52]	; (1d5c <USB_Handler+0x244>)
    1d28:	4798      	blx	r3
    1d2a:	e7bc      	b.n	1ca6 <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 1);
    1d2c:	2101      	movs	r1, #1
    1d2e:	4b07      	ldr	r3, [pc, #28]	; (1d4c <USB_Handler+0x234>)
    1d30:	4798      	blx	r3
    1d32:	e7b8      	b.n	1ca6 <USB_Handler+0x18e>
    1d34:	20000108 	.word	0x20000108
    1d38:	00000201 	.word	0x00000201
    1d3c:	40000c00 	.word	0x40000c00
    1d40:	00000c85 	.word	0x00000c85
    1d44:	00000ac1 	.word	0x00000ac1
    1d48:	00000a35 	.word	0x00000a35
    1d4c:	00000b85 	.word	0x00000b85
    1d50:	00000cc9 	.word	0x00000cc9
    1d54:	41000100 	.word	0x41000100
    1d58:	41000109 	.word	0x41000109
    1d5c:	00000e71 	.word	0x00000e71

00001d60 <main>:
#include <atmel_start.h>

int main(void)
{
    1d60:	b570      	push	{r4, r5, r6, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1d62:	4b07      	ldr	r3, [pc, #28]	; (1d80 <main+0x20>)
    1d64:	4798      	blx	r3
    1d66:	240a      	movs	r4, #10

	int temp=0;
	for(int iter=0;iter<10;iter++)
	{
		delay_ms(300);
    1d68:	2696      	movs	r6, #150	; 0x96
    1d6a:	0076      	lsls	r6, r6, #1
    1d6c:	4d05      	ldr	r5, [pc, #20]	; (1d84 <main+0x24>)
    1d6e:	0030      	movs	r0, r6
    1d70:	47a8      	blx	r5
    1d72:	3c01      	subs	r4, #1
	for(int iter=0;iter<10;iter++)
    1d74:	2c00      	cmp	r4, #0
    1d76:	d1fa      	bne.n	1d6e <main+0xe>
		temp+=2;
	}

	/* Replace with your application code */
	while (1) {
		cdcd_acm_example();
    1d78:	4c03      	ldr	r4, [pc, #12]	; (1d88 <main+0x28>)
    1d7a:	47a0      	blx	r4
    1d7c:	e7fd      	b.n	1d7a <main+0x1a>
    1d7e:	46c0      	nop			; (mov r8, r8)
    1d80:	00000115 	.word	0x00000115
    1d84:	000002c1 	.word	0x000002c1
    1d88:	000029f1 	.word	0x000029f1

00001d8c <cdcdf_acm_req>:
 * \param[in] ep Endpoint address.
 * \param[in] req Pointer to the request.
 * \return Operation status.
 */
static int32_t cdcdf_acm_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8e:	b083      	sub	sp, #12
    1d90:	0006      	movs	r6, r0
    1d92:	000c      	movs	r4, r1
    1d94:	0015      	movs	r5, r2
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { // class request
    1d96:	780a      	ldrb	r2, [r1, #0]
    1d98:	0653      	lsls	r3, r2, #25
    1d9a:	0f9b      	lsrs	r3, r3, #30
    1d9c:	2b01      	cmp	r3, #1
    1d9e:	d000      	beq.n	1da2 <cdcdf_acm_req+0x16>
    1da0:	e06c      	b.n	1e7c <cdcdf_acm_req+0xf0>
		return ERR_NOT_FOUND;
	}
	if ((req->wIndex == _cdcdf_acm_funcd.func_iface[0]) || (req->wIndex == _cdcdf_acm_funcd.func_iface[1])) {
    1da2:	7909      	ldrb	r1, [r1, #4]
    1da4:	7963      	ldrb	r3, [r4, #5]
    1da6:	021b      	lsls	r3, r3, #8
    1da8:	430b      	orrs	r3, r1
    1daa:	493b      	ldr	r1, [pc, #236]	; (1e98 <cdcdf_acm_req+0x10c>)
    1dac:	7809      	ldrb	r1, [r1, #0]
    1dae:	4299      	cmp	r1, r3
    1db0:	d003      	beq.n	1dba <cdcdf_acm_req+0x2e>
    1db2:	4939      	ldr	r1, [pc, #228]	; (1e98 <cdcdf_acm_req+0x10c>)
    1db4:	7849      	ldrb	r1, [r1, #1]
    1db6:	4299      	cmp	r1, r3
    1db8:	d163      	bne.n	1e82 <cdcdf_acm_req+0xf6>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1dba:	b252      	sxtb	r2, r2
    1dbc:	2a00      	cmp	r2, #0
    1dbe:	db0e      	blt.n	1dde <cdcdf_acm_req+0x52>
	uint16_t                   len      = req->wLength;
    1dc0:	79a7      	ldrb	r7, [r4, #6]
    1dc2:	79e3      	ldrb	r3, [r4, #7]
    1dc4:	021b      	lsls	r3, r3, #8
    1dc6:	431f      	orrs	r7, r3
	uint8_t *                  ctrl_buf = usbdc_get_ctrl_buffer();
    1dc8:	4b34      	ldr	r3, [pc, #208]	; (1e9c <cdcdf_acm_req+0x110>)
    1dca:	4798      	blx	r3
	switch (req->bRequest) {
    1dcc:	7863      	ldrb	r3, [r4, #1]
    1dce:	2b20      	cmp	r3, #32
    1dd0:	d018      	beq.n	1e04 <cdcdf_acm_req+0x78>
    1dd2:	2b22      	cmp	r3, #34	; 0x22
    1dd4:	d03c      	beq.n	1e50 <cdcdf_acm_req+0xc4>
		return ERR_INVALID_ARG;
    1dd6:	200d      	movs	r0, #13
    1dd8:	4240      	negs	r0, r0
			return cdcdf_acm_set_req(ep, req, stage);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1dda:	b003      	add	sp, #12
    1ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (USB_DATA_STAGE == stage) {
    1dde:	2d01      	cmp	r5, #1
    1de0:	d052      	beq.n	1e88 <cdcdf_acm_req+0xfc>
	switch (req->bRequest) {
    1de2:	7863      	ldrb	r3, [r4, #1]
    1de4:	2b21      	cmp	r3, #33	; 0x21
    1de6:	d151      	bne.n	1e8c <cdcdf_acm_req+0x100>
	uint16_t len = req->wLength;
    1de8:	79a2      	ldrb	r2, [r4, #6]
    1dea:	79e3      	ldrb	r3, [r4, #7]
    1dec:	021b      	lsls	r3, r3, #8
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1dee:	4313      	orrs	r3, r2
    1df0:	2b07      	cmp	r3, #7
    1df2:	d14e      	bne.n	1e92 <cdcdf_acm_req+0x106>
		return usbdc_xfer(ep, (uint8_t *)&usbd_cdc_line_coding, len, false);
    1df4:	2300      	movs	r3, #0
    1df6:	2207      	movs	r2, #7
    1df8:	4927      	ldr	r1, [pc, #156]	; (1e98 <cdcdf_acm_req+0x10c>)
    1dfa:	3108      	adds	r1, #8
    1dfc:	0030      	movs	r0, r6
    1dfe:	4c28      	ldr	r4, [pc, #160]	; (1ea0 <cdcdf_acm_req+0x114>)
    1e00:	47a0      	blx	r4
    1e02:	e7ea      	b.n	1dda <cdcdf_acm_req+0x4e>
		if (sizeof(struct usb_cdc_line_coding) != len) {
    1e04:	2f07      	cmp	r7, #7
    1e06:	d134      	bne.n	1e72 <cdcdf_acm_req+0xe6>
		if (USB_SETUP_STAGE == stage) {
    1e08:	2d00      	cmp	r5, #0
    1e0a:	d01a      	beq.n	1e42 <cdcdf_acm_req+0xb6>
			memcpy(&line_coding_tmp, ctrl_buf, sizeof(struct usb_cdc_line_coding));
    1e0c:	2207      	movs	r2, #7
    1e0e:	0001      	movs	r1, r0
    1e10:	4668      	mov	r0, sp
    1e12:	4b24      	ldr	r3, [pc, #144]	; (1ea4 <cdcdf_acm_req+0x118>)
    1e14:	4798      	blx	r3
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1e16:	4b20      	ldr	r3, [pc, #128]	; (1e98 <cdcdf_acm_req+0x10c>)
    1e18:	691b      	ldr	r3, [r3, #16]
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d005      	beq.n	1e2a <cdcdf_acm_req+0x9e>
    1e1e:	4668      	mov	r0, sp
    1e20:	4798      	blx	r3
    1e22:	0003      	movs	r3, r0
			return ERR_NONE;
    1e24:	2000      	movs	r0, #0
			if ((NULL == cdcdf_acm_set_line_coding) || (true == cdcdf_acm_set_line_coding(&line_coding_tmp))) {
    1e26:	2b00      	cmp	r3, #0
    1e28:	d0d7      	beq.n	1dda <cdcdf_acm_req+0x4e>
				usbd_cdc_line_coding = line_coding_tmp;
    1e2a:	4a1b      	ldr	r2, [pc, #108]	; (1e98 <cdcdf_acm_req+0x10c>)
    1e2c:	0013      	movs	r3, r2
    1e2e:	9900      	ldr	r1, [sp, #0]
    1e30:	6091      	str	r1, [r2, #8]
    1e32:	466a      	mov	r2, sp
    1e34:	8892      	ldrh	r2, [r2, #4]
    1e36:	819a      	strh	r2, [r3, #12]
    1e38:	466a      	mov	r2, sp
    1e3a:	7992      	ldrb	r2, [r2, #6]
    1e3c:	739a      	strb	r2, [r3, #14]
			return ERR_NONE;
    1e3e:	2000      	movs	r0, #0
    1e40:	e7cb      	b.n	1dda <cdcdf_acm_req+0x4e>
			return usbdc_xfer(ep, ctrl_buf, len, false);
    1e42:	2300      	movs	r3, #0
    1e44:	2207      	movs	r2, #7
    1e46:	0001      	movs	r1, r0
    1e48:	0030      	movs	r0, r6
    1e4a:	4c15      	ldr	r4, [pc, #84]	; (1ea0 <cdcdf_acm_req+0x114>)
    1e4c:	47a0      	blx	r4
    1e4e:	e7c4      	b.n	1dda <cdcdf_acm_req+0x4e>
		usbdc_xfer(0, NULL, 0, 0);
    1e50:	2300      	movs	r3, #0
    1e52:	2200      	movs	r2, #0
    1e54:	2100      	movs	r1, #0
    1e56:	2000      	movs	r0, #0
    1e58:	4d11      	ldr	r5, [pc, #68]	; (1ea0 <cdcdf_acm_req+0x114>)
    1e5a:	47a8      	blx	r5
		if (NULL != cdcdf_acm_notify_state) {
    1e5c:	4b0e      	ldr	r3, [pc, #56]	; (1e98 <cdcdf_acm_req+0x10c>)
    1e5e:	695b      	ldr	r3, [r3, #20]
    1e60:	2b00      	cmp	r3, #0
    1e62:	d009      	beq.n	1e78 <cdcdf_acm_req+0xec>
			cdcdf_acm_notify_state(req->wValue);
    1e64:	78a2      	ldrb	r2, [r4, #2]
    1e66:	78e0      	ldrb	r0, [r4, #3]
    1e68:	0200      	lsls	r0, r0, #8
    1e6a:	4310      	orrs	r0, r2
    1e6c:	4798      	blx	r3
		return ERR_NONE;
    1e6e:	2000      	movs	r0, #0
    1e70:	e7b3      	b.n	1dda <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    1e72:	2001      	movs	r0, #1
    1e74:	4240      	negs	r0, r0
    1e76:	e7b0      	b.n	1dda <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    1e78:	2000      	movs	r0, #0
			return cdcdf_acm_set_req(ep, req, stage);
    1e7a:	e7ae      	b.n	1dda <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    1e7c:	200a      	movs	r0, #10
    1e7e:	4240      	negs	r0, r0
    1e80:	e7ab      	b.n	1dda <cdcdf_acm_req+0x4e>
		return ERR_NOT_FOUND;
    1e82:	200a      	movs	r0, #10
    1e84:	4240      	negs	r0, r0
    1e86:	e7a8      	b.n	1dda <cdcdf_acm_req+0x4e>
		return ERR_NONE;
    1e88:	2000      	movs	r0, #0
    1e8a:	e7a6      	b.n	1dda <cdcdf_acm_req+0x4e>
		return ERR_INVALID_ARG;
    1e8c:	200d      	movs	r0, #13
    1e8e:	4240      	negs	r0, r0
    1e90:	e7a3      	b.n	1dda <cdcdf_acm_req+0x4e>
			return ERR_INVALID_DATA;
    1e92:	2001      	movs	r0, #1
    1e94:	4240      	negs	r0, r0
    1e96:	e7a0      	b.n	1dda <cdcdf_acm_req+0x4e>
    1e98:	200002f0 	.word	0x200002f0
    1e9c:	00002811 	.word	0x00002811
    1ea0:	000022c1 	.word	0x000022c1
    1ea4:	00002b7d 	.word	0x00002b7d

00001ea8 <cdcdf_acm_ctrl>:
{
    1ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eaa:	46de      	mov	lr, fp
    1eac:	4657      	mov	r7, sl
    1eae:	464e      	mov	r6, r9
    1eb0:	4645      	mov	r5, r8
    1eb2:	b5e0      	push	{r5, r6, r7, lr}
    1eb4:	b083      	sub	sp, #12
    1eb6:	0016      	movs	r6, r2
	switch (ctrl) {
    1eb8:	2901      	cmp	r1, #1
    1eba:	d068      	beq.n	1f8e <cdcdf_acm_ctrl+0xe6>
    1ebc:	2900      	cmp	r1, #0
    1ebe:	d00b      	beq.n	1ed8 <cdcdf_acm_ctrl+0x30>
    1ec0:	2902      	cmp	r1, #2
    1ec2:	d100      	bne.n	1ec6 <cdcdf_acm_ctrl+0x1e>
    1ec4:	e093      	b.n	1fee <cdcdf_acm_ctrl+0x146>
		return ERR_INVALID_ARG;
    1ec6:	200d      	movs	r0, #13
    1ec8:	4240      	negs	r0, r0
}
    1eca:	b003      	add	sp, #12
    1ecc:	bc3c      	pop	{r2, r3, r4, r5}
    1ece:	4690      	mov	r8, r2
    1ed0:	4699      	mov	r9, r3
    1ed2:	46a2      	mov	sl, r4
    1ed4:	46ab      	mov	fp, r5
    1ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    1ed8:	6883      	ldr	r3, [r0, #8]
    1eda:	4698      	mov	r8, r3
	ifc = desc->sod;
    1edc:	6810      	ldr	r0, [r2, #0]
		if (NULL == ifc) {
    1ede:	2800      	cmp	r0, #0
    1ee0:	d100      	bne.n	1ee4 <cdcdf_acm_ctrl+0x3c>
    1ee2:	e087      	b.n	1ff4 <cdcdf_acm_ctrl+0x14c>
    1ee4:	9301      	str	r3, [sp, #4]
    1ee6:	2301      	movs	r3, #1
    1ee8:	4443      	add	r3, r8
    1eea:	469b      	mov	fp, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    1eec:	4f47      	ldr	r7, [pc, #284]	; (200c <cdcdf_acm_ctrl+0x164>)
				usb_d_ep_enable(func_data->func_ep_out);
    1eee:	4b48      	ldr	r3, [pc, #288]	; (2010 <cdcdf_acm_ctrl+0x168>)
    1ef0:	4699      	mov	r9, r3
		ifc_desc.bInterfaceNumber = ifc[2];
    1ef2:	7882      	ldrb	r2, [r0, #2]
		if ((CDC_CLASS_COMM == ifc_desc.bInterfaceClass) || (CDC_CLASS_DATA == ifc_desc.bInterfaceClass)) {
    1ef4:	7943      	ldrb	r3, [r0, #5]
    1ef6:	2108      	movs	r1, #8
    1ef8:	438b      	bics	r3, r1
    1efa:	2b02      	cmp	r3, #2
    1efc:	d002      	beq.n	1f04 <cdcdf_acm_ctrl+0x5c>
			return ERR_NOT_FOUND;
    1efe:	200a      	movs	r0, #10
    1f00:	4240      	negs	r0, r0
    1f02:	e7e2      	b.n	1eca <cdcdf_acm_ctrl+0x22>
    1f04:	9901      	ldr	r1, [sp, #4]
    1f06:	468a      	mov	sl, r1
			if (func_data->func_iface[i] == ifc_desc.bInterfaceNumber) { // Initialized
    1f08:	780b      	ldrb	r3, [r1, #0]
    1f0a:	429a      	cmp	r2, r3
    1f0c:	d075      	beq.n	1ffa <cdcdf_acm_ctrl+0x152>
			} else if (func_data->func_iface[i] != 0xFF) { // Occupied
    1f0e:	2bff      	cmp	r3, #255	; 0xff
    1f10:	d176      	bne.n	2000 <cdcdf_acm_ctrl+0x158>
				func_data->func_iface[i] = ifc_desc.bInterfaceNumber;
    1f12:	700a      	strb	r2, [r1, #0]
		ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    1f14:	2205      	movs	r2, #5
    1f16:	6871      	ldr	r1, [r6, #4]
    1f18:	4b3e      	ldr	r3, [pc, #248]	; (2014 <cdcdf_acm_ctrl+0x16c>)
    1f1a:	4798      	blx	r3
    1f1c:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    1f1e:	d11e      	bne.n	1f5e <cdcdf_acm_ctrl+0xb6>
		ifc = usb_find_desc(usb_desc_next(desc->sod), desc->eod, USB_DT_INTERFACE);
    1f20:	6830      	ldr	r0, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    1f22:	7803      	ldrb	r3, [r0, #0]
    1f24:	18c0      	adds	r0, r0, r3
    1f26:	2204      	movs	r2, #4
    1f28:	6871      	ldr	r1, [r6, #4]
    1f2a:	4b3a      	ldr	r3, [pc, #232]	; (2014 <cdcdf_acm_ctrl+0x16c>)
    1f2c:	4798      	blx	r3
	for (i = 0; i < 2; i++) {
    1f2e:	9b01      	ldr	r3, [sp, #4]
    1f30:	455b      	cmp	r3, fp
    1f32:	d027      	beq.n	1f84 <cdcdf_acm_ctrl+0xdc>
    1f34:	9b01      	ldr	r3, [sp, #4]
    1f36:	3301      	adds	r3, #1
    1f38:	9301      	str	r3, [sp, #4]
		if (NULL == ifc) {
    1f3a:	2800      	cmp	r0, #0
    1f3c:	d1d9      	bne.n	1ef2 <cdcdf_acm_ctrl+0x4a>
			return ERR_NOT_FOUND;
    1f3e:	200a      	movs	r0, #10
    1f40:	4240      	negs	r0, r0
    1f42:	e7c2      	b.n	1eca <cdcdf_acm_ctrl+0x22>
				func_data->func_ep_in[i] = ep_desc.bEndpointAddress;
    1f44:	4653      	mov	r3, sl
    1f46:	709d      	strb	r5, [r3, #2]
				usb_d_ep_enable(func_data->func_ep_in[i]);
    1f48:	0028      	movs	r0, r5
    1f4a:	4b31      	ldr	r3, [pc, #196]	; (2010 <cdcdf_acm_ctrl+0x168>)
    1f4c:	4798      	blx	r3
			desc->sod = ep;
    1f4e:	6034      	str	r4, [r6, #0]
    1f50:	7820      	ldrb	r0, [r4, #0]
    1f52:	1820      	adds	r0, r4, r0
			ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    1f54:	6871      	ldr	r1, [r6, #4]
    1f56:	4b30      	ldr	r3, [pc, #192]	; (2018 <cdcdf_acm_ctrl+0x170>)
    1f58:	4798      	blx	r3
    1f5a:	1e04      	subs	r4, r0, #0
		while (NULL != ep) {
    1f5c:	d0e0      	beq.n	1f20 <cdcdf_acm_ctrl+0x78>
			ep_desc.bEndpointAddress = ep[2];
    1f5e:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    1f60:	7963      	ldrb	r3, [r4, #5]
    1f62:	021b      	lsls	r3, r3, #8
    1f64:	7922      	ldrb	r2, [r4, #4]
    1f66:	18d2      	adds	r2, r2, r3
			if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    1f68:	b292      	uxth	r2, r2
    1f6a:	78e1      	ldrb	r1, [r4, #3]
    1f6c:	0028      	movs	r0, r5
    1f6e:	47b8      	blx	r7
    1f70:	2800      	cmp	r0, #0
    1f72:	d148      	bne.n	2006 <cdcdf_acm_ctrl+0x15e>
			if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    1f74:	b26b      	sxtb	r3, r5
    1f76:	2b00      	cmp	r3, #0
    1f78:	dbe4      	blt.n	1f44 <cdcdf_acm_ctrl+0x9c>
				func_data->func_ep_out = ep_desc.bEndpointAddress;
    1f7a:	4643      	mov	r3, r8
    1f7c:	711d      	strb	r5, [r3, #4]
				usb_d_ep_enable(func_data->func_ep_out);
    1f7e:	0028      	movs	r0, r5
    1f80:	47c8      	blx	r9
    1f82:	e7e4      	b.n	1f4e <cdcdf_acm_ctrl+0xa6>
	_cdcdf_acm_funcd.enabled = true;
    1f84:	2201      	movs	r2, #1
    1f86:	4b25      	ldr	r3, [pc, #148]	; (201c <cdcdf_acm_ctrl+0x174>)
    1f88:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    1f8a:	2000      	movs	r0, #0
    1f8c:	e79d      	b.n	1eca <cdcdf_acm_ctrl+0x22>
	struct cdcdf_acm_func_data *func_data = (struct cdcdf_acm_func_data *)(drv->func_data);
    1f8e:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    1f90:	2a00      	cmp	r2, #0
    1f92:	d008      	beq.n	1fa6 <cdcdf_acm_ctrl+0xfe>
		ifc_desc.bInterfaceClass = desc->sod[5];
    1f94:	6813      	ldr	r3, [r2, #0]
		if ((ifc_desc.bInterfaceClass != CDC_CLASS_COMM) && (ifc_desc.bInterfaceClass != CDC_CLASS_DATA)) {
    1f96:	795b      	ldrb	r3, [r3, #5]
    1f98:	2208      	movs	r2, #8
    1f9a:	4393      	bics	r3, r2
    1f9c:	2b02      	cmp	r3, #2
    1f9e:	d002      	beq.n	1fa6 <cdcdf_acm_ctrl+0xfe>
			return ERR_NOT_FOUND;
    1fa0:	200a      	movs	r0, #10
    1fa2:	4240      	negs	r0, r0
    1fa4:	e791      	b.n	1eca <cdcdf_acm_ctrl+0x22>
		if (func_data->func_iface[i] == 0xFF) {
    1fa6:	7823      	ldrb	r3, [r4, #0]
    1fa8:	2bff      	cmp	r3, #255	; 0xff
    1faa:	d008      	beq.n	1fbe <cdcdf_acm_ctrl+0x116>
			func_data->func_iface[i] = 0xFF;
    1fac:	23ff      	movs	r3, #255	; 0xff
    1fae:	7023      	strb	r3, [r4, #0]
			if (func_data->func_ep_in[i] != 0xFF) {
    1fb0:	78a0      	ldrb	r0, [r4, #2]
    1fb2:	28ff      	cmp	r0, #255	; 0xff
    1fb4:	d003      	beq.n	1fbe <cdcdf_acm_ctrl+0x116>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    1fb6:	4b1a      	ldr	r3, [pc, #104]	; (2020 <cdcdf_acm_ctrl+0x178>)
    1fb8:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    1fba:	23ff      	movs	r3, #255	; 0xff
    1fbc:	70a3      	strb	r3, [r4, #2]
		if (func_data->func_iface[i] == 0xFF) {
    1fbe:	7863      	ldrb	r3, [r4, #1]
    1fc0:	2bff      	cmp	r3, #255	; 0xff
    1fc2:	d008      	beq.n	1fd6 <cdcdf_acm_ctrl+0x12e>
			func_data->func_iface[i] = 0xFF;
    1fc4:	23ff      	movs	r3, #255	; 0xff
    1fc6:	7063      	strb	r3, [r4, #1]
			if (func_data->func_ep_in[i] != 0xFF) {
    1fc8:	78e0      	ldrb	r0, [r4, #3]
    1fca:	28ff      	cmp	r0, #255	; 0xff
    1fcc:	d003      	beq.n	1fd6 <cdcdf_acm_ctrl+0x12e>
				usb_d_ep_deinit(func_data->func_ep_in[i]);
    1fce:	4b14      	ldr	r3, [pc, #80]	; (2020 <cdcdf_acm_ctrl+0x178>)
    1fd0:	4798      	blx	r3
				func_data->func_ep_in[i] = 0xFF;
    1fd2:	23ff      	movs	r3, #255	; 0xff
    1fd4:	70e3      	strb	r3, [r4, #3]
	if (func_data->func_ep_out != 0xFF) {
    1fd6:	7920      	ldrb	r0, [r4, #4]
    1fd8:	28ff      	cmp	r0, #255	; 0xff
    1fda:	d003      	beq.n	1fe4 <cdcdf_acm_ctrl+0x13c>
		usb_d_ep_deinit(func_data->func_ep_out);
    1fdc:	4b10      	ldr	r3, [pc, #64]	; (2020 <cdcdf_acm_ctrl+0x178>)
    1fde:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    1fe0:	23ff      	movs	r3, #255	; 0xff
    1fe2:	7123      	strb	r3, [r4, #4]
	_cdcdf_acm_funcd.enabled = false;
    1fe4:	2200      	movs	r2, #0
    1fe6:	4b0d      	ldr	r3, [pc, #52]	; (201c <cdcdf_acm_ctrl+0x174>)
    1fe8:	715a      	strb	r2, [r3, #5]
	return ERR_NONE;
    1fea:	2000      	movs	r0, #0
    1fec:	e76d      	b.n	1eca <cdcdf_acm_ctrl+0x22>
		return ERR_UNSUPPORTED_OP;
    1fee:	201b      	movs	r0, #27
    1ff0:	4240      	negs	r0, r0
    1ff2:	e76a      	b.n	1eca <cdcdf_acm_ctrl+0x22>
			return ERR_NOT_FOUND;
    1ff4:	200a      	movs	r0, #10
    1ff6:	4240      	negs	r0, r0
    1ff8:	e767      	b.n	1eca <cdcdf_acm_ctrl+0x22>
				return ERR_ALREADY_INITIALIZED;
    1ffa:	2012      	movs	r0, #18
    1ffc:	4240      	negs	r0, r0
    1ffe:	e764      	b.n	1eca <cdcdf_acm_ctrl+0x22>
				return ERR_NO_RESOURCE;
    2000:	201c      	movs	r0, #28
    2002:	4240      	negs	r0, r0
    2004:	e761      	b.n	1eca <cdcdf_acm_ctrl+0x22>
				return ERR_NOT_INITIALIZED;
    2006:	2014      	movs	r0, #20
    2008:	4240      	negs	r0, r0
    200a:	e75e      	b.n	1eca <cdcdf_acm_ctrl+0x22>
    200c:	000005e5 	.word	0x000005e5
    2010:	00000679 	.word	0x00000679
    2014:	0000282d 	.word	0x0000282d
    2018:	00002863 	.word	0x00002863
    201c:	200002f0 	.word	0x200002f0
    2020:	0000064d 	.word	0x0000064d

00002024 <cdcdf_acm_init>:

/**
 * \brief Initialize the USB CDC ACM Function Driver
 */
int32_t cdcdf_acm_init(void)
{
    2024:	b510      	push	{r4, lr}
	if (usbdc_get_state() > USBD_S_POWER) {
    2026:	4b0a      	ldr	r3, [pc, #40]	; (2050 <cdcdf_acm_init+0x2c>)
    2028:	4798      	blx	r3
    202a:	2801      	cmp	r0, #1
    202c:	d80c      	bhi.n	2048 <cdcdf_acm_init+0x24>
		return ERR_DENIED;
	}

	_cdcdf_acm.ctrl      = cdcdf_acm_ctrl;
    202e:	4809      	ldr	r0, [pc, #36]	; (2054 <cdcdf_acm_init+0x30>)
    2030:	4b09      	ldr	r3, [pc, #36]	; (2058 <cdcdf_acm_init+0x34>)
    2032:	61c3      	str	r3, [r0, #28]
	_cdcdf_acm.func_data = &_cdcdf_acm_funcd;
    2034:	6200      	str	r0, [r0, #32]

	usbdc_register_function(&_cdcdf_acm);
    2036:	3018      	adds	r0, #24
    2038:	4b08      	ldr	r3, [pc, #32]	; (205c <cdcdf_acm_init+0x38>)
    203a:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &cdcdf_acm_req_h);
    203c:	4908      	ldr	r1, [pc, #32]	; (2060 <cdcdf_acm_init+0x3c>)
    203e:	2001      	movs	r0, #1
    2040:	4b08      	ldr	r3, [pc, #32]	; (2064 <cdcdf_acm_init+0x40>)
    2042:	4798      	blx	r3
	return ERR_NONE;
    2044:	2000      	movs	r0, #0
}
    2046:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2048:	2011      	movs	r0, #17
    204a:	4240      	negs	r0, r0
    204c:	e7fb      	b.n	2046 <cdcdf_acm_init+0x22>
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	0000281d 	.word	0x0000281d
    2054:	200002f0 	.word	0x200002f0
    2058:	00001ea9 	.word	0x00001ea9
    205c:	000027b5 	.word	0x000027b5
    2060:	20000000 	.word	0x20000000
    2064:	0000271d 	.word	0x0000271d

00002068 <cdcdf_acm_read>:

/**
 * \brief USB CDC ACM Function Read Data
 */
int32_t cdcdf_acm_read(uint8_t *buf, uint32_t size)
{
    2068:	b510      	push	{r4, lr}
    206a:	0004      	movs	r4, r0
/**
 * \brief Check whether CDC ACM Function is enabled
 */
bool cdcdf_acm_is_enabled(void)
{
	return _cdcdf_acm_funcd.enabled;
    206c:	4b07      	ldr	r3, [pc, #28]	; (208c <cdcdf_acm_read+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    206e:	795b      	ldrb	r3, [r3, #5]
    2070:	2b00      	cmp	r3, #0
    2072:	d007      	beq.n	2084 <cdcdf_acm_read+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_out, buf, size, false);
    2074:	4b05      	ldr	r3, [pc, #20]	; (208c <cdcdf_acm_read+0x24>)
    2076:	7918      	ldrb	r0, [r3, #4]
    2078:	2300      	movs	r3, #0
    207a:	000a      	movs	r2, r1
    207c:	0021      	movs	r1, r4
    207e:	4c04      	ldr	r4, [pc, #16]	; (2090 <cdcdf_acm_read+0x28>)
    2080:	47a0      	blx	r4
}
    2082:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2084:	2011      	movs	r0, #17
    2086:	4240      	negs	r0, r0
    2088:	e7fb      	b.n	2082 <cdcdf_acm_read+0x1a>
    208a:	46c0      	nop			; (mov r8, r8)
    208c:	200002f0 	.word	0x200002f0
    2090:	000022c1 	.word	0x000022c1

00002094 <cdcdf_acm_write>:
{
    2094:	b510      	push	{r4, lr}
    2096:	0004      	movs	r4, r0
	return _cdcdf_acm_funcd.enabled;
    2098:	4b07      	ldr	r3, [pc, #28]	; (20b8 <cdcdf_acm_write+0x24>)
	if (!cdcdf_acm_is_enabled()) {
    209a:	795b      	ldrb	r3, [r3, #5]
    209c:	2b00      	cmp	r3, #0
    209e:	d007      	beq.n	20b0 <cdcdf_acm_write+0x1c>
	return usbdc_xfer(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], buf, size, true);
    20a0:	4b05      	ldr	r3, [pc, #20]	; (20b8 <cdcdf_acm_write+0x24>)
    20a2:	78d8      	ldrb	r0, [r3, #3]
    20a4:	2301      	movs	r3, #1
    20a6:	000a      	movs	r2, r1
    20a8:	0021      	movs	r1, r4
    20aa:	4c04      	ldr	r4, [pc, #16]	; (20bc <cdcdf_acm_write+0x28>)
    20ac:	47a0      	blx	r4
}
    20ae:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    20b0:	2011      	movs	r0, #17
    20b2:	4240      	negs	r0, r0
    20b4:	e7fb      	b.n	20ae <cdcdf_acm_write+0x1a>
    20b6:	46c0      	nop			; (mov r8, r8)
    20b8:	200002f0 	.word	0x200002f0
    20bc:	000022c1 	.word	0x000022c1

000020c0 <cdcdf_acm_register_callback>:
{
    20c0:	b510      	push	{r4, lr}
	switch (cb_type) {
    20c2:	2801      	cmp	r0, #1
    20c4:	d010      	beq.n	20e8 <cdcdf_acm_register_callback+0x28>
    20c6:	2800      	cmp	r0, #0
    20c8:	d006      	beq.n	20d8 <cdcdf_acm_register_callback+0x18>
    20ca:	2802      	cmp	r0, #2
    20cc:	d014      	beq.n	20f8 <cdcdf_acm_register_callback+0x38>
    20ce:	2803      	cmp	r0, #3
    20d0:	d016      	beq.n	2100 <cdcdf_acm_register_callback+0x40>
		return ERR_INVALID_ARG;
    20d2:	200d      	movs	r0, #13
    20d4:	4240      	negs	r0, r0
    20d6:	e006      	b.n	20e6 <cdcdf_acm_register_callback+0x26>
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_out, USB_D_EP_CB_XFER, func);
    20d8:	4b0b      	ldr	r3, [pc, #44]	; (2108 <cdcdf_acm_register_callback+0x48>)
    20da:	7918      	ldrb	r0, [r3, #4]
    20dc:	000a      	movs	r2, r1
    20de:	2102      	movs	r1, #2
    20e0:	4b0a      	ldr	r3, [pc, #40]	; (210c <cdcdf_acm_register_callback+0x4c>)
    20e2:	4798      	blx	r3
	return ERR_NONE;
    20e4:	2000      	movs	r0, #0
}
    20e6:	bd10      	pop	{r4, pc}
		usb_d_ep_register_callback(_cdcdf_acm_funcd.func_ep_in[CDCDF_ACM_DATA_EP_INDEX], USB_D_EP_CB_XFER, func);
    20e8:	4b07      	ldr	r3, [pc, #28]	; (2108 <cdcdf_acm_register_callback+0x48>)
    20ea:	78d8      	ldrb	r0, [r3, #3]
    20ec:	000a      	movs	r2, r1
    20ee:	2102      	movs	r1, #2
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <cdcdf_acm_register_callback+0x4c>)
    20f2:	4798      	blx	r3
	return ERR_NONE;
    20f4:	2000      	movs	r0, #0
		break;
    20f6:	e7f6      	b.n	20e6 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_set_line_coding = (cdcdf_acm_set_line_coding_t)func;
    20f8:	4b03      	ldr	r3, [pc, #12]	; (2108 <cdcdf_acm_register_callback+0x48>)
    20fa:	6119      	str	r1, [r3, #16]
	return ERR_NONE;
    20fc:	2000      	movs	r0, #0
		break;
    20fe:	e7f2      	b.n	20e6 <cdcdf_acm_register_callback+0x26>
		cdcdf_acm_notify_state = (cdcdf_acm_notify_state_t)func;
    2100:	4b01      	ldr	r3, [pc, #4]	; (2108 <cdcdf_acm_register_callback+0x48>)
    2102:	6159      	str	r1, [r3, #20]
	return ERR_NONE;
    2104:	2000      	movs	r0, #0
		break;
    2106:	e7ee      	b.n	20e6 <cdcdf_acm_register_callback+0x26>
    2108:	200002f0 	.word	0x200002f0
    210c:	00000855 	.word	0x00000855

00002110 <cdcdf_acm_is_enabled>:
	return _cdcdf_acm_funcd.enabled;
    2110:	4b01      	ldr	r3, [pc, #4]	; (2118 <cdcdf_acm_is_enabled+0x8>)
    2112:	7958      	ldrb	r0, [r3, #5]
}
    2114:	4770      	bx	lr
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	200002f0 	.word	0x200002f0

0000211c <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    211c:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    211e:	4b06      	ldr	r3, [pc, #24]	; (2138 <usbdc_unconfig+0x1c>)
    2120:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    2122:	2c00      	cmp	r4, #0
    2124:	d007      	beq.n	2136 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2126:	2200      	movs	r2, #0
    2128:	2101      	movs	r1, #1
    212a:	0020      	movs	r0, r4
    212c:	6863      	ldr	r3, [r4, #4]
    212e:	4798      	blx	r3
		func = func->next;
    2130:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    2132:	2c00      	cmp	r4, #0
    2134:	d1f7      	bne.n	2126 <usbdc_unconfig+0xa>
	}
}
    2136:	bd10      	pop	{r4, pc}
    2138:	20000314 	.word	0x20000314

0000213c <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    213c:	b570      	push	{r4, r5, r6, lr}
    213e:	0006      	movs	r6, r0
    2140:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    2142:	4b07      	ldr	r3, [pc, #28]	; (2160 <usbdc_change_notify+0x24>)
    2144:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2146:	2c00      	cmp	r4, #0
    2148:	d103      	bne.n	2152 <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    214a:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    214c:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    214e:	2c00      	cmp	r4, #0
    2150:	d0fb      	beq.n	214a <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    2152:	6863      	ldr	r3, [r4, #4]
    2154:	2b00      	cmp	r3, #0
    2156:	d0f9      	beq.n	214c <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2158:	0029      	movs	r1, r5
    215a:	0030      	movs	r0, r6
    215c:	4798      	blx	r3
    215e:	e7f5      	b.n	214c <usbdc_change_notify+0x10>
    2160:	20000314 	.word	0x20000314

00002164 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    2164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2166:	0007      	movs	r7, r0
    2168:	000e      	movs	r6, r1
    216a:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    216c:	4b0d      	ldr	r3, [pc, #52]	; (21a4 <usbdc_request_handler+0x40>)
    216e:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    2170:	2c00      	cmp	r4, #0
    2172:	d104      	bne.n	217e <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    2174:	2000      	movs	r0, #0
    2176:	e011      	b.n	219c <usbdc_request_handler+0x38>
		h = h->next;
    2178:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    217a:	2c00      	cmp	r4, #0
    217c:	d00d      	beq.n	219a <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    217e:	6863      	ldr	r3, [r4, #4]
    2180:	2b00      	cmp	r3, #0
    2182:	d0f9      	beq.n	2178 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    2184:	002a      	movs	r2, r5
    2186:	0031      	movs	r1, r6
    2188:	0038      	movs	r0, r7
    218a:	4798      	blx	r3
			if (0 == rc) {
    218c:	2800      	cmp	r0, #0
    218e:	d006      	beq.n	219e <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    2190:	300a      	adds	r0, #10
    2192:	d0f1      	beq.n	2178 <usbdc_request_handler+0x14>
				return -1;
    2194:	2001      	movs	r0, #1
    2196:	4240      	negs	r0, r0
    2198:	e000      	b.n	219c <usbdc_request_handler+0x38>
	return false;
    219a:	2000      	movs	r0, #0
}
    219c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    219e:	2001      	movs	r0, #1
    21a0:	e7fc      	b.n	219c <usbdc_request_handler+0x38>
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	20000314 	.word	0x20000314

000021a8 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    21a8:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    21aa:	4b06      	ldr	r3, [pc, #24]	; (21c4 <usbd_sof_cb+0x1c>)
    21ac:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    21ae:	2c00      	cmp	r4, #0
    21b0:	d103      	bne.n	21ba <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    21b2:	bd10      	pop	{r4, pc}
		sof = sof->next;
    21b4:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    21b6:	2c00      	cmp	r4, #0
    21b8:	d0fb      	beq.n	21b2 <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    21ba:	6863      	ldr	r3, [r4, #4]
    21bc:	2b00      	cmp	r3, #0
    21be:	d0f9      	beq.n	21b4 <usbd_sof_cb+0xc>
			sof->cb();
    21c0:	4798      	blx	r3
    21c2:	e7f7      	b.n	21b4 <usbd_sof_cb+0xc>
    21c4:	20000314 	.word	0x20000314

000021c8 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    21c8:	b510      	push	{r4, lr}
    21ca:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    21cc:	2900      	cmp	r1, #0
    21ce:	d003      	beq.n	21d8 <usbdc_cb_ctl_done+0x10>
    21d0:	2901      	cmp	r1, #1
    21d2:	d029      	beq.n	2228 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    21d4:	2000      	movs	r0, #0
    21d6:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    21d8:	7813      	ldrb	r3, [r2, #0]
    21da:	2b00      	cmp	r3, #0
    21dc:	d1fa      	bne.n	21d4 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    21de:	7853      	ldrb	r3, [r2, #1]
    21e0:	2b05      	cmp	r3, #5
    21e2:	d011      	beq.n	2208 <usbdc_cb_ctl_done+0x40>
    21e4:	2b09      	cmp	r3, #9
    21e6:	d1f5      	bne.n	21d4 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    21e8:	7892      	ldrb	r2, [r2, #2]
    21ea:	4b12      	ldr	r3, [pc, #72]	; (2234 <usbdc_cb_ctl_done+0x6c>)
    21ec:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    21ee:	78a3      	ldrb	r3, [r4, #2]
    21f0:	78e1      	ldrb	r1, [r4, #3]
    21f2:	0209      	lsls	r1, r1, #8
    21f4:	4319      	orrs	r1, r3
    21f6:	1e4b      	subs	r3, r1, #1
    21f8:	4199      	sbcs	r1, r3
    21fa:	3103      	adds	r1, #3
    21fc:	4b0d      	ldr	r3, [pc, #52]	; (2234 <usbdc_cb_ctl_done+0x6c>)
    21fe:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2200:	2001      	movs	r0, #1
    2202:	4b0d      	ldr	r3, [pc, #52]	; (2238 <usbdc_cb_ctl_done+0x70>)
    2204:	4798      	blx	r3
    2206:	e7e5      	b.n	21d4 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2208:	7890      	ldrb	r0, [r2, #2]
    220a:	4b0c      	ldr	r3, [pc, #48]	; (223c <usbdc_cb_ctl_done+0x74>)
    220c:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    220e:	78a3      	ldrb	r3, [r4, #2]
    2210:	78e1      	ldrb	r1, [r4, #3]
    2212:	0209      	lsls	r1, r1, #8
    2214:	4319      	orrs	r1, r3
    2216:	1e4b      	subs	r3, r1, #1
    2218:	4199      	sbcs	r1, r3
    221a:	3102      	adds	r1, #2
    221c:	4b05      	ldr	r3, [pc, #20]	; (2234 <usbdc_cb_ctl_done+0x6c>)
    221e:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    2220:	2001      	movs	r0, #1
    2222:	4b05      	ldr	r3, [pc, #20]	; (2238 <usbdc_cb_ctl_done+0x70>)
    2224:	4798      	blx	r3
    2226:	e7d5      	b.n	21d4 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2228:	2201      	movs	r2, #1
    222a:	0021      	movs	r1, r4
    222c:	2000      	movs	r0, #0
    222e:	4b04      	ldr	r3, [pc, #16]	; (2240 <usbdc_cb_ctl_done+0x78>)
    2230:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    2232:	e7cf      	b.n	21d4 <usbdc_cb_ctl_done+0xc>
    2234:	20000314 	.word	0x20000314
    2238:	0000213d 	.word	0x0000213d
    223c:	000005d9 	.word	0x000005d9
    2240:	00002165 	.word	0x00002165

00002244 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2244:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2246:	4b0d      	ldr	r3, [pc, #52]	; (227c <usbdc_reset+0x38>)
    2248:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    224a:	4c0d      	ldr	r4, [pc, #52]	; (2280 <usbdc_reset+0x3c>)
    224c:	2302      	movs	r3, #2
    224e:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    2250:	2300      	movs	r3, #0
    2252:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2254:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2256:	2000      	movs	r0, #0
    2258:	4b0a      	ldr	r3, [pc, #40]	; (2284 <usbdc_reset+0x40>)
    225a:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    225c:	7f20      	ldrb	r0, [r4, #28]
    225e:	4b0a      	ldr	r3, [pc, #40]	; (2288 <usbdc_reset+0x44>)
    2260:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    2262:	4a0a      	ldr	r2, [pc, #40]	; (228c <usbdc_reset+0x48>)
    2264:	2100      	movs	r1, #0
    2266:	2000      	movs	r0, #0
    2268:	4c09      	ldr	r4, [pc, #36]	; (2290 <usbdc_reset+0x4c>)
    226a:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    226c:	4a09      	ldr	r2, [pc, #36]	; (2294 <usbdc_reset+0x50>)
    226e:	2102      	movs	r1, #2
    2270:	2000      	movs	r0, #0
    2272:	47a0      	blx	r4
	usb_d_ep_enable(0);
    2274:	2000      	movs	r0, #0
    2276:	4b08      	ldr	r3, [pc, #32]	; (2298 <usbdc_reset+0x54>)
    2278:	4798      	blx	r3
}
    227a:	bd10      	pop	{r4, pc}
    227c:	0000211d 	.word	0x0000211d
    2280:	20000314 	.word	0x20000314
    2284:	0000064d 	.word	0x0000064d
    2288:	00000639 	.word	0x00000639
    228c:	000022dd 	.word	0x000022dd
    2290:	00000855 	.word	0x00000855
    2294:	000021c9 	.word	0x000021c9
    2298:	00000679 	.word	0x00000679

0000229c <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    229c:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    229e:	2800      	cmp	r0, #0
    22a0:	d002      	beq.n	22a8 <usbd_event_cb+0xc>
    22a2:	2801      	cmp	r0, #1
    22a4:	d004      	beq.n	22b0 <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    22a6:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    22a8:	2000      	movs	r0, #0
    22aa:	4b03      	ldr	r3, [pc, #12]	; (22b8 <usbd_event_cb+0x1c>)
    22ac:	4798      	blx	r3
		break;
    22ae:	e7fa      	b.n	22a6 <usbd_event_cb+0xa>
		usbdc_reset();
    22b0:	4b02      	ldr	r3, [pc, #8]	; (22bc <usbd_event_cb+0x20>)
    22b2:	4798      	blx	r3
}
    22b4:	e7f7      	b.n	22a6 <usbd_event_cb+0xa>
    22b6:	46c0      	nop			; (mov r8, r8)
    22b8:	0000213d 	.word	0x0000213d
    22bc:	00002245 	.word	0x00002245

000022c0 <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    22c0:	b510      	push	{r4, lr}
    22c2:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    22c4:	ac01      	add	r4, sp, #4
    22c6:	9101      	str	r1, [sp, #4]
    22c8:	9202      	str	r2, [sp, #8]
    22ca:	7220      	strb	r0, [r4, #8]
    22cc:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    22ce:	0020      	movs	r0, r4
    22d0:	4b01      	ldr	r3, [pc, #4]	; (22d8 <usbdc_xfer+0x18>)
    22d2:	4798      	blx	r3
}
    22d4:	b004      	add	sp, #16
    22d6:	bd10      	pop	{r4, pc}
    22d8:	000006c5 	.word	0x000006c5

000022dc <usbdc_cb_ctl_req>:
{
    22dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    22de:	46c6      	mov	lr, r8
    22e0:	b500      	push	{lr}
    22e2:	b084      	sub	sp, #16
    22e4:	0005      	movs	r5, r0
    22e6:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    22e8:	2200      	movs	r2, #0
    22ea:	4bb5      	ldr	r3, [pc, #724]	; (25c0 <usbdc_cb_ctl_req+0x2e4>)
    22ec:	4798      	blx	r3
    22ee:	1c43      	adds	r3, r0, #1
    22f0:	d00d      	beq.n	230e <usbdc_cb_ctl_req+0x32>
		return true;
    22f2:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    22f4:	2801      	cmp	r0, #1
    22f6:	d00b      	beq.n	2310 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    22f8:	7822      	ldrb	r2, [r4, #0]
    22fa:	231f      	movs	r3, #31
    22fc:	0011      	movs	r1, r2
    22fe:	4399      	bics	r1, r3
    2300:	d00b      	beq.n	231a <usbdc_cb_ctl_req+0x3e>
    2302:	b2cb      	uxtb	r3, r1
    2304:	2b80      	cmp	r3, #128	; 0x80
    2306:	d100      	bne.n	230a <usbdc_cb_ctl_req+0x2e>
    2308:	e0f8      	b.n	24fc <usbdc_cb_ctl_req+0x220>
		return false;
    230a:	2300      	movs	r3, #0
    230c:	e000      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    230e:	2300      	movs	r3, #0
}
    2310:	0018      	movs	r0, r3
    2312:	b004      	add	sp, #16
    2314:	bc04      	pop	{r2}
    2316:	4690      	mov	r8, r2
    2318:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    231a:	7863      	ldrb	r3, [r4, #1]
    231c:	2b0b      	cmp	r3, #11
    231e:	d900      	bls.n	2322 <usbdc_cb_ctl_req+0x46>
    2320:	e1e4      	b.n	26ec <usbdc_cb_ctl_req+0x410>
    2322:	009b      	lsls	r3, r3, #2
    2324:	49a7      	ldr	r1, [pc, #668]	; (25c4 <usbdc_cb_ctl_req+0x2e8>)
    2326:	58cb      	ldr	r3, [r1, r3]
    2328:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    232a:	2301      	movs	r3, #1
    232c:	2200      	movs	r2, #0
    232e:	2100      	movs	r1, #0
    2330:	0028      	movs	r0, r5
    2332:	4ca5      	ldr	r4, [pc, #660]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    2334:	47a0      	blx	r4
    2336:	4243      	negs	r3, r0
    2338:	4143      	adcs	r3, r0
    233a:	b2db      	uxtb	r3, r3
    233c:	e7e8      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    233e:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    2340:	2a00      	cmp	r2, #0
    2342:	d01a      	beq.n	237a <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2344:	4ba1      	ldr	r3, [pc, #644]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	6859      	ldr	r1, [r3, #4]
    234a:	6818      	ldr	r0, [r3, #0]
    234c:	4ba0      	ldr	r3, [pc, #640]	; (25d0 <usbdc_cb_ctl_req+0x2f4>)
    234e:	4798      	blx	r3
	if (NULL == cfg_desc) {
    2350:	2800      	cmp	r0, #0
    2352:	d100      	bne.n	2356 <usbdc_cb_ctl_req+0x7a>
    2354:	e1d4      	b.n	2700 <usbdc_cb_ctl_req+0x424>
    2356:	78c3      	ldrb	r3, [r0, #3]
    2358:	021b      	lsls	r3, r3, #8
    235a:	7881      	ldrb	r1, [r0, #2]
    235c:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    235e:	b289      	uxth	r1, r1
    2360:	1841      	adds	r1, r0, r1
    2362:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    2364:	2204      	movs	r2, #4
    2366:	4b9b      	ldr	r3, [pc, #620]	; (25d4 <usbdc_cb_ctl_req+0x2f8>)
    2368:	4798      	blx	r3
    236a:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    236c:	2800      	cmp	r0, #0
    236e:	d006      	beq.n	237e <usbdc_cb_ctl_req+0xa2>
    2370:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    2372:	4f96      	ldr	r7, [pc, #600]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2374:	4b97      	ldr	r3, [pc, #604]	; (25d4 <usbdc_cb_ctl_req+0x2f8>)
    2376:	4698      	mov	r8, r3
    2378:	e01a      	b.n	23b0 <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    237a:	4b97      	ldr	r3, [pc, #604]	; (25d8 <usbdc_cb_ctl_req+0x2fc>)
    237c:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    237e:	2301      	movs	r3, #1
    2380:	2200      	movs	r2, #0
    2382:	2100      	movs	r1, #0
    2384:	0028      	movs	r0, r5
    2386:	4c90      	ldr	r4, [pc, #576]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    2388:	47a0      	blx	r4
    238a:	4243      	negs	r3, r0
    238c:	4143      	adcs	r3, r0
    238e:	b2db      	uxtb	r3, r3
    2390:	e7be      	b.n	2310 <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    2392:	0034      	movs	r4, r6
    2394:	e000      	b.n	2398 <usbdc_cb_ctl_req+0xbc>
    2396:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    2398:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    239a:	7803      	ldrb	r3, [r0, #0]
    239c:	18c0      	adds	r0, r0, r3
    239e:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    23a0:	9b03      	ldr	r3, [sp, #12]
    23a2:	9301      	str	r3, [sp, #4]
    23a4:	2204      	movs	r2, #4
    23a6:	0019      	movs	r1, r3
    23a8:	47c0      	blx	r8
    23aa:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    23ac:	2800      	cmp	r0, #0
    23ae:	d0e6      	beq.n	237e <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    23b0:	7886      	ldrb	r6, [r0, #2]
    23b2:	42a6      	cmp	r6, r4
    23b4:	d0f0      	beq.n	2398 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    23b6:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    23b8:	2c00      	cmp	r4, #0
    23ba:	d0ea      	beq.n	2392 <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    23bc:	aa02      	add	r2, sp, #8
    23be:	2100      	movs	r1, #0
    23c0:	0020      	movs	r0, r4
    23c2:	6863      	ldr	r3, [r4, #4]
    23c4:	4798      	blx	r3
    23c6:	2800      	cmp	r0, #0
    23c8:	d0e5      	beq.n	2396 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    23ca:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    23cc:	2c00      	cmp	r4, #0
    23ce:	d1f5      	bne.n	23bc <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    23d0:	0034      	movs	r4, r6
    23d2:	e7e1      	b.n	2398 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    23d4:	231f      	movs	r3, #31
    23d6:	401a      	ands	r2, r3
		return false;
    23d8:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    23da:	2a02      	cmp	r2, #2
    23dc:	d198      	bne.n	2310 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    23de:	79a3      	ldrb	r3, [r4, #6]
    23e0:	79e2      	ldrb	r2, [r4, #7]
    23e2:	0212      	lsls	r2, r2, #8
    23e4:	431a      	orrs	r2, r3
			return false;
    23e6:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    23e8:	2a00      	cmp	r2, #0
    23ea:	d000      	beq.n	23ee <usbdc_cb_ctl_req+0x112>
    23ec:	e790      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    23ee:	7920      	ldrb	r0, [r4, #4]
    23f0:	2100      	movs	r1, #0
    23f2:	4b7a      	ldr	r3, [pc, #488]	; (25dc <usbdc_cb_ctl_req+0x300>)
    23f4:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    23f6:	2301      	movs	r3, #1
    23f8:	2200      	movs	r2, #0
    23fa:	2100      	movs	r1, #0
    23fc:	0028      	movs	r0, r5
    23fe:	4c72      	ldr	r4, [pc, #456]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    2400:	47a0      	blx	r4
		return true;
    2402:	2301      	movs	r3, #1
    2404:	e784      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2406:	231f      	movs	r3, #31
    2408:	401a      	ands	r2, r3
		return false;
    240a:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    240c:	2a02      	cmp	r2, #2
    240e:	d000      	beq.n	2412 <usbdc_cb_ctl_req+0x136>
    2410:	e77e      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    2412:	79a3      	ldrb	r3, [r4, #6]
    2414:	79e2      	ldrb	r2, [r4, #7]
    2416:	0212      	lsls	r2, r2, #8
    2418:	431a      	orrs	r2, r3
			return false;
    241a:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    241c:	2a00      	cmp	r2, #0
    241e:	d000      	beq.n	2422 <usbdc_cb_ctl_req+0x146>
    2420:	e776      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    2422:	7920      	ldrb	r0, [r4, #4]
    2424:	2101      	movs	r1, #1
    2426:	4b6d      	ldr	r3, [pc, #436]	; (25dc <usbdc_cb_ctl_req+0x300>)
    2428:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    242a:	2301      	movs	r3, #1
    242c:	2200      	movs	r2, #0
    242e:	2100      	movs	r1, #0
    2430:	0028      	movs	r0, r5
    2432:	4c65      	ldr	r4, [pc, #404]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    2434:	47a0      	blx	r4
		return true;
    2436:	2301      	movs	r3, #1
    2438:	e76a      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    243a:	78a3      	ldrb	r3, [r4, #2]
    243c:	78e5      	ldrb	r5, [r4, #3]
    243e:	022d      	lsls	r5, r5, #8
    2440:	431d      	orrs	r5, r3
    2442:	7923      	ldrb	r3, [r4, #4]
    2444:	7964      	ldrb	r4, [r4, #5]
    2446:	0224      	lsls	r4, r4, #8
    2448:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    244a:	4a60      	ldr	r2, [pc, #384]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    244c:	6813      	ldr	r3, [r2, #0]
    244e:	7ed2      	ldrb	r2, [r2, #27]
    2450:	6859      	ldr	r1, [r3, #4]
    2452:	6818      	ldr	r0, [r3, #0]
    2454:	4b5e      	ldr	r3, [pc, #376]	; (25d0 <usbdc_cb_ctl_req+0x2f4>)
    2456:	4798      	blx	r3
	if (NULL == ifc) {
    2458:	2800      	cmp	r0, #0
    245a:	d047      	beq.n	24ec <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    245c:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    245e:	78c3      	ldrb	r3, [r0, #3]
    2460:	021b      	lsls	r3, r3, #8
    2462:	7881      	ldrb	r1, [r0, #2]
    2464:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    2466:	b289      	uxth	r1, r1
    2468:	1841      	adds	r1, r0, r1
    246a:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    246c:	2204      	movs	r2, #4
    246e:	4b59      	ldr	r3, [pc, #356]	; (25d4 <usbdc_cb_ctl_req+0x2f8>)
    2470:	4798      	blx	r3
    2472:	2800      	cmp	r0, #0
    2474:	d03c      	beq.n	24f0 <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2476:	4e57      	ldr	r6, [pc, #348]	; (25d4 <usbdc_cb_ctl_req+0x2f8>)
    2478:	e008      	b.n	248c <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    247a:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    247c:	7803      	ldrb	r3, [r0, #0]
    247e:	18c0      	adds	r0, r0, r3
    2480:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    2482:	2204      	movs	r2, #4
    2484:	9903      	ldr	r1, [sp, #12]
    2486:	47b0      	blx	r6
		if (NULL == ifc) {
    2488:	2800      	cmp	r0, #0
    248a:	d033      	beq.n	24f4 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    248c:	7883      	ldrb	r3, [r0, #2]
    248e:	42a3      	cmp	r3, r4
    2490:	d1f3      	bne.n	247a <usbdc_cb_ctl_req+0x19e>
    2492:	78c3      	ldrb	r3, [r0, #3]
    2494:	42ab      	cmp	r3, r5
    2496:	d1f0      	bne.n	247a <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    2498:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    249a:	4b4c      	ldr	r3, [pc, #304]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    249c:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    249e:	2e00      	cmp	r6, #0
    24a0:	d02a      	beq.n	24f8 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    24a2:	aa02      	add	r2, sp, #8
    24a4:	2101      	movs	r1, #1
    24a6:	0030      	movs	r0, r6
    24a8:	6873      	ldr	r3, [r6, #4]
    24aa:	4798      	blx	r3
    24ac:	2800      	cmp	r0, #0
    24ae:	d004      	beq.n	24ba <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    24b0:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    24b2:	2e00      	cmp	r6, #0
    24b4:	d1f5      	bne.n	24a2 <usbdc_cb_ctl_req+0x1c6>
	return false;
    24b6:	2300      	movs	r3, #0
    24b8:	e72a      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    24ba:	6873      	ldr	r3, [r6, #4]
    24bc:	aa02      	add	r2, sp, #8
    24be:	2100      	movs	r1, #0
    24c0:	0030      	movs	r0, r6
    24c2:	4798      	blx	r3
			return false;
    24c4:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    24c6:	2800      	cmp	r0, #0
    24c8:	d000      	beq.n	24cc <usbdc_cb_ctl_req+0x1f0>
    24ca:	e721      	b.n	2310 <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    24cc:	2d00      	cmp	r5, #0
    24ce:	d005      	beq.n	24dc <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    24d0:	493e      	ldr	r1, [pc, #248]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    24d2:	2201      	movs	r2, #1
    24d4:	40a2      	lsls	r2, r4
    24d6:	7f4b      	ldrb	r3, [r1, #29]
    24d8:	4313      	orrs	r3, r2
    24da:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    24dc:	2300      	movs	r3, #0
    24de:	2200      	movs	r2, #0
    24e0:	2100      	movs	r1, #0
    24e2:	2000      	movs	r0, #0
    24e4:	4c38      	ldr	r4, [pc, #224]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    24e6:	47a0      	blx	r4
			return true;
    24e8:	2301      	movs	r3, #1
    24ea:	e711      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    24ec:	2300      	movs	r3, #0
    24ee:	e70f      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    24f0:	2300      	movs	r3, #0
    24f2:	e70d      	b.n	2310 <usbdc_cb_ctl_req+0x34>
			return false;
    24f4:	2300      	movs	r3, #0
    24f6:	e70b      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	return false;
    24f8:	2300      	movs	r3, #0
    24fa:	e709      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    24fc:	7863      	ldrb	r3, [r4, #1]
    24fe:	2b06      	cmp	r3, #6
    2500:	d033      	beq.n	256a <usbdc_cb_ctl_req+0x28e>
    2502:	b2d9      	uxtb	r1, r3
    2504:	2906      	cmp	r1, #6
    2506:	d922      	bls.n	254e <usbdc_cb_ctl_req+0x272>
    2508:	2b08      	cmp	r3, #8
    250a:	d100      	bne.n	250e <usbdc_cb_ctl_req+0x232>
    250c:	e0af      	b.n	266e <usbdc_cb_ctl_req+0x392>
    250e:	2b0a      	cmp	r3, #10
    2510:	d000      	beq.n	2514 <usbdc_cb_ctl_req+0x238>
    2512:	e0ed      	b.n	26f0 <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2514:	4b2d      	ldr	r3, [pc, #180]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    2516:	7f5a      	ldrb	r2, [r3, #29]
    2518:	7921      	ldrb	r1, [r4, #4]
    251a:	7963      	ldrb	r3, [r4, #5]
    251c:	021b      	lsls	r3, r3, #8
    251e:	430b      	orrs	r3, r1
    2520:	411a      	asrs	r2, r3
    2522:	07d3      	lsls	r3, r2, #31
    2524:	d400      	bmi.n	2528 <usbdc_cb_ctl_req+0x24c>
    2526:	e0ca      	b.n	26be <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2528:	4b28      	ldr	r3, [pc, #160]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    252a:	691d      	ldr	r5, [r3, #16]
	return false;
    252c:	2300      	movs	r3, #0
	while (NULL != func) {
    252e:	2d00      	cmp	r5, #0
    2530:	d100      	bne.n	2534 <usbdc_cb_ctl_req+0x258>
    2532:	e6ed      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2534:	0022      	movs	r2, r4
    2536:	2102      	movs	r1, #2
    2538:	0028      	movs	r0, r5
    253a:	686b      	ldr	r3, [r5, #4]
    253c:	4798      	blx	r3
    253e:	2800      	cmp	r0, #0
    2540:	db00      	blt.n	2544 <usbdc_cb_ctl_req+0x268>
    2542:	e0c8      	b.n	26d6 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    2544:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2546:	2d00      	cmp	r5, #0
    2548:	d1f4      	bne.n	2534 <usbdc_cb_ctl_req+0x258>
	return false;
    254a:	2300      	movs	r3, #0
    254c:	e6e0      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    254e:	2b00      	cmp	r3, #0
    2550:	d000      	beq.n	2554 <usbdc_cb_ctl_req+0x278>
    2552:	e0cd      	b.n	26f0 <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2554:	231f      	movs	r3, #31
    2556:	401a      	ands	r2, r3
    2558:	b2d3      	uxtb	r3, r2
    255a:	2b01      	cmp	r3, #1
    255c:	d800      	bhi.n	2560 <usbdc_cb_ctl_req+0x284>
    255e:	e092      	b.n	2686 <usbdc_cb_ctl_req+0x3aa>
    2560:	2a02      	cmp	r2, #2
    2562:	d100      	bne.n	2566 <usbdc_cb_ctl_req+0x28a>
    2564:	e09f      	b.n	26a6 <usbdc_cb_ctl_req+0x3ca>
		return false;
    2566:	2300      	movs	r3, #0
    2568:	e6d2      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    256a:	78a3      	ldrb	r3, [r4, #2]
    256c:	78e2      	ldrb	r2, [r4, #3]
    256e:	0212      	lsls	r2, r2, #8
    2570:	431a      	orrs	r2, r3
    2572:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    2574:	2b02      	cmp	r3, #2
    2576:	d033      	beq.n	25e0 <usbdc_cb_ctl_req+0x304>
    2578:	2b03      	cmp	r3, #3
    257a:	d056      	beq.n	262a <usbdc_cb_ctl_req+0x34e>
    257c:	2b01      	cmp	r3, #1
    257e:	d001      	beq.n	2584 <usbdc_cb_ctl_req+0x2a8>
	return false;
    2580:	2300      	movs	r3, #0
    2582:	e6c5      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2584:	79a2      	ldrb	r2, [r4, #6]
    2586:	79e3      	ldrb	r3, [r4, #7]
    2588:	021b      	lsls	r3, r3, #8
    258a:	4313      	orrs	r3, r2
    258c:	1c1a      	adds	r2, r3, #0
    258e:	2b12      	cmp	r3, #18
    2590:	d900      	bls.n	2594 <usbdc_cb_ctl_req+0x2b8>
    2592:	2212      	movs	r2, #18
    2594:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    2596:	4b0d      	ldr	r3, [pc, #52]	; (25cc <usbdc_cb_ctl_req+0x2f0>)
    2598:	681b      	ldr	r3, [r3, #0]
    259a:	6859      	ldr	r1, [r3, #4]
    259c:	6818      	ldr	r0, [r3, #0]
    259e:	2201      	movs	r2, #1
    25a0:	4b0c      	ldr	r3, [pc, #48]	; (25d4 <usbdc_cb_ctl_req+0x2f8>)
    25a2:	4798      	blx	r3
	if (!dev_desc) {
    25a4:	2800      	cmp	r0, #0
    25a6:	d100      	bne.n	25aa <usbdc_cb_ctl_req+0x2ce>
    25a8:	e0a4      	b.n	26f4 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    25aa:	2300      	movs	r3, #0
    25ac:	0022      	movs	r2, r4
    25ae:	0001      	movs	r1, r0
    25b0:	0028      	movs	r0, r5
    25b2:	4c05      	ldr	r4, [pc, #20]	; (25c8 <usbdc_cb_ctl_req+0x2ec>)
    25b4:	47a0      	blx	r4
    25b6:	4243      	negs	r3, r0
    25b8:	4143      	adcs	r3, r0
    25ba:	b2db      	uxtb	r3, r3
    25bc:	e6a8      	b.n	2310 <usbdc_cb_ctl_req+0x34>
    25be:	46c0      	nop			; (mov r8, r8)
    25c0:	00002165 	.word	0x00002165
    25c4:	00002be4 	.word	0x00002be4
    25c8:	000022c1 	.word	0x000022c1
    25cc:	20000314 	.word	0x20000314
    25d0:	000028a9 	.word	0x000028a9
    25d4:	0000282d 	.word	0x0000282d
    25d8:	0000211d 	.word	0x0000211d
    25dc:	000007ed 	.word	0x000007ed
	uint16_t length   = req->wLength;
    25e0:	79a3      	ldrb	r3, [r4, #6]
    25e2:	79e6      	ldrb	r6, [r4, #7]
    25e4:	0236      	lsls	r6, r6, #8
    25e6:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    25e8:	4b46      	ldr	r3, [pc, #280]	; (2704 <usbdc_cb_ctl_req+0x428>)
    25ea:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    25ec:	681b      	ldr	r3, [r3, #0]
    25ee:	3201      	adds	r2, #1
    25f0:	b2d2      	uxtb	r2, r2
    25f2:	6859      	ldr	r1, [r3, #4]
    25f4:	6818      	ldr	r0, [r3, #0]
    25f6:	4b44      	ldr	r3, [pc, #272]	; (2708 <usbdc_cb_ctl_req+0x42c>)
    25f8:	4798      	blx	r3
    25fa:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    25fc:	d07c      	beq.n	26f8 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    25fe:	78c3      	ldrb	r3, [r0, #3]
    2600:	021b      	lsls	r3, r3, #8
    2602:	7884      	ldrb	r4, [r0, #2]
    2604:	18e4      	adds	r4, r4, r3
    2606:	b2a4      	uxth	r4, r4
		need_zlp = false;
    2608:	2300      	movs	r3, #0
	if (length <= total_len) {
    260a:	42a6      	cmp	r6, r4
    260c:	d905      	bls.n	261a <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    260e:	3f01      	subs	r7, #1
    2610:	403e      	ands	r6, r7
    2612:	4273      	negs	r3, r6
    2614:	4173      	adcs	r3, r6
    2616:	b2db      	uxtb	r3, r3
		length = total_len;
    2618:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    261a:	0032      	movs	r2, r6
    261c:	0028      	movs	r0, r5
    261e:	4c3b      	ldr	r4, [pc, #236]	; (270c <usbdc_cb_ctl_req+0x430>)
    2620:	47a0      	blx	r4
    2622:	4243      	negs	r3, r0
    2624:	4143      	adcs	r3, r0
    2626:	b2db      	uxtb	r3, r3
    2628:	e672      	b.n	2310 <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    262a:	79a3      	ldrb	r3, [r4, #6]
    262c:	79e1      	ldrb	r1, [r4, #7]
    262e:	0209      	lsls	r1, r1, #8
    2630:	4319      	orrs	r1, r3
    2632:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2634:	4b33      	ldr	r3, [pc, #204]	; (2704 <usbdc_cb_ctl_req+0x428>)
    2636:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	b2d2      	uxtb	r2, r2
    263c:	6859      	ldr	r1, [r3, #4]
    263e:	6818      	ldr	r0, [r3, #0]
    2640:	4b33      	ldr	r3, [pc, #204]	; (2710 <usbdc_cb_ctl_req+0x434>)
    2642:	4798      	blx	r3
    2644:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    2646:	d059      	beq.n	26fc <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    2648:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    264a:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    264c:	4294      	cmp	r4, r2
    264e:	d906      	bls.n	265e <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2650:	1e73      	subs	r3, r6, #1
    2652:	4023      	ands	r3, r4
    2654:	0018      	movs	r0, r3
    2656:	4243      	negs	r3, r0
    2658:	4143      	adcs	r3, r0
    265a:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    265c:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    265e:	0022      	movs	r2, r4
    2660:	0028      	movs	r0, r5
    2662:	4c2a      	ldr	r4, [pc, #168]	; (270c <usbdc_cb_ctl_req+0x430>)
    2664:	47a0      	blx	r4
    2666:	4243      	negs	r3, r0
    2668:	4143      	adcs	r3, r0
    266a:	b2db      	uxtb	r3, r3
    266c:	e650      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    266e:	4b25      	ldr	r3, [pc, #148]	; (2704 <usbdc_cb_ctl_req+0x428>)
    2670:	7eda      	ldrb	r2, [r3, #27]
    2672:	6959      	ldr	r1, [r3, #20]
    2674:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2676:	6959      	ldr	r1, [r3, #20]
    2678:	2300      	movs	r3, #0
    267a:	2201      	movs	r2, #1
    267c:	0028      	movs	r0, r5
    267e:	4c23      	ldr	r4, [pc, #140]	; (270c <usbdc_cb_ctl_req+0x430>)
    2680:	47a0      	blx	r4
		return true;
    2682:	2301      	movs	r3, #1
    2684:	e644      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		st = 0;
    2686:	2300      	movs	r3, #0
    2688:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    268a:	4c1e      	ldr	r4, [pc, #120]	; (2704 <usbdc_cb_ctl_req+0x428>)
    268c:	2202      	movs	r2, #2
    268e:	a902      	add	r1, sp, #8
    2690:	6960      	ldr	r0, [r4, #20]
    2692:	4b20      	ldr	r3, [pc, #128]	; (2714 <usbdc_cb_ctl_req+0x438>)
    2694:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2696:	6961      	ldr	r1, [r4, #20]
    2698:	2300      	movs	r3, #0
    269a:	2202      	movs	r2, #2
    269c:	0028      	movs	r0, r5
    269e:	4c1b      	ldr	r4, [pc, #108]	; (270c <usbdc_cb_ctl_req+0x430>)
    26a0:	47a0      	blx	r4
	return true;
    26a2:	2301      	movs	r3, #1
    26a4:	e634      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    26a6:	7920      	ldrb	r0, [r4, #4]
    26a8:	2102      	movs	r1, #2
    26aa:	4b1b      	ldr	r3, [pc, #108]	; (2718 <usbdc_cb_ctl_req+0x43c>)
    26ac:	4798      	blx	r3
		if (st < 0) {
    26ae:	2800      	cmp	r0, #0
    26b0:	db03      	blt.n	26ba <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    26b2:	2301      	movs	r3, #1
    26b4:	4018      	ands	r0, r3
    26b6:	9002      	str	r0, [sp, #8]
    26b8:	e7e7      	b.n	268a <usbdc_cb_ctl_req+0x3ae>
			return false;
    26ba:	2300      	movs	r3, #0
    26bc:	e628      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    26be:	4b11      	ldr	r3, [pc, #68]	; (2704 <usbdc_cb_ctl_req+0x428>)
    26c0:	2200      	movs	r2, #0
    26c2:	6959      	ldr	r1, [r3, #20]
    26c4:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    26c6:	6959      	ldr	r1, [r3, #20]
    26c8:	2300      	movs	r3, #0
    26ca:	3201      	adds	r2, #1
    26cc:	2000      	movs	r0, #0
    26ce:	4c0f      	ldr	r4, [pc, #60]	; (270c <usbdc_cb_ctl_req+0x430>)
    26d0:	47a0      	blx	r4
		return true;
    26d2:	2301      	movs	r3, #1
    26d4:	e61c      	b.n	2310 <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    26d6:	4b0b      	ldr	r3, [pc, #44]	; (2704 <usbdc_cb_ctl_req+0x428>)
    26d8:	695a      	ldr	r2, [r3, #20]
    26da:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    26dc:	6959      	ldr	r1, [r3, #20]
    26de:	2300      	movs	r3, #0
    26e0:	2201      	movs	r2, #1
    26e2:	2000      	movs	r0, #0
    26e4:	4c09      	ldr	r4, [pc, #36]	; (270c <usbdc_cb_ctl_req+0x430>)
    26e6:	47a0      	blx	r4
			return true;
    26e8:	2301      	movs	r3, #1
    26ea:	e611      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    26ec:	2300      	movs	r3, #0
    26ee:	e60f      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    26f0:	2300      	movs	r3, #0
    26f2:	e60d      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    26f4:	2300      	movs	r3, #0
    26f6:	e60b      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    26f8:	2300      	movs	r3, #0
    26fa:	e609      	b.n	2310 <usbdc_cb_ctl_req+0x34>
		return false;
    26fc:	2300      	movs	r3, #0
    26fe:	e607      	b.n	2310 <usbdc_cb_ctl_req+0x34>
			return false;
    2700:	2300      	movs	r3, #0
    2702:	e605      	b.n	2310 <usbdc_cb_ctl_req+0x34>
    2704:	20000314 	.word	0x20000314
    2708:	000028a9 	.word	0x000028a9
    270c:	000022c1 	.word	0x000022c1
    2710:	00002911 	.word	0x00002911
    2714:	00002b7d 	.word	0x00002b7d
    2718:	000007ed 	.word	0x000007ed

0000271c <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    271c:	b510      	push	{r4, lr}
	switch (type) {
    271e:	2801      	cmp	r0, #1
    2720:	d009      	beq.n	2736 <usbdc_register_handler+0x1a>
    2722:	2800      	cmp	r0, #0
    2724:	d002      	beq.n	272c <usbdc_register_handler+0x10>
    2726:	2802      	cmp	r0, #2
    2728:	d00a      	beq.n	2740 <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    272a:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    272c:	4807      	ldr	r0, [pc, #28]	; (274c <usbdc_register_handler+0x30>)
    272e:	3004      	adds	r0, #4
    2730:	4b07      	ldr	r3, [pc, #28]	; (2750 <usbdc_register_handler+0x34>)
    2732:	4798      	blx	r3
		break;
    2734:	e7f9      	b.n	272a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2736:	4805      	ldr	r0, [pc, #20]	; (274c <usbdc_register_handler+0x30>)
    2738:	3008      	adds	r0, #8
    273a:	4b05      	ldr	r3, [pc, #20]	; (2750 <usbdc_register_handler+0x34>)
    273c:	4798      	blx	r3
		break;
    273e:	e7f4      	b.n	272a <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2740:	4802      	ldr	r0, [pc, #8]	; (274c <usbdc_register_handler+0x30>)
    2742:	300c      	adds	r0, #12
    2744:	4b02      	ldr	r3, [pc, #8]	; (2750 <usbdc_register_handler+0x34>)
    2746:	4798      	blx	r3
}
    2748:	e7ef      	b.n	272a <usbdc_register_handler+0xe>
    274a:	46c0      	nop			; (mov r8, r8)
    274c:	20000314 	.word	0x20000314
    2750:	000008d1 	.word	0x000008d1

00002754 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2754:	b570      	push	{r4, r5, r6, lr}
    2756:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2758:	1e43      	subs	r3, r0, #1
    275a:	4198      	sbcs	r0, r3
    275c:	b2c0      	uxtb	r0, r0
    275e:	4a0c      	ldr	r2, [pc, #48]	; (2790 <usbdc_init+0x3c>)
    2760:	490c      	ldr	r1, [pc, #48]	; (2794 <usbdc_init+0x40>)
    2762:	4b0d      	ldr	r3, [pc, #52]	; (2798 <usbdc_init+0x44>)
    2764:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2766:	4b0d      	ldr	r3, [pc, #52]	; (279c <usbdc_init+0x48>)
    2768:	4798      	blx	r3
	if (rc < 0) {
    276a:	2800      	cmp	r0, #0
    276c:	db0e      	blt.n	278c <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    276e:	4d0c      	ldr	r5, [pc, #48]	; (27a0 <usbdc_init+0x4c>)
    2770:	2220      	movs	r2, #32
    2772:	2100      	movs	r1, #0
    2774:	0028      	movs	r0, r5
    2776:	4b0b      	ldr	r3, [pc, #44]	; (27a4 <usbdc_init+0x50>)
    2778:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    277a:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    277c:	490a      	ldr	r1, [pc, #40]	; (27a8 <usbdc_init+0x54>)
    277e:	2000      	movs	r0, #0
    2780:	4c0a      	ldr	r4, [pc, #40]	; (27ac <usbdc_init+0x58>)
    2782:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2784:	490a      	ldr	r1, [pc, #40]	; (27b0 <usbdc_init+0x5c>)
    2786:	2001      	movs	r0, #1
    2788:	47a0      	blx	r4

	return 0;
    278a:	2000      	movs	r0, #0
}
    278c:	bd70      	pop	{r4, r5, r6, pc}
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	00000355 	.word	0x00000355
    2794:	00002c14 	.word	0x00002c14
    2798:	000008a5 	.word	0x000008a5
    279c:	00000551 	.word	0x00000551
    27a0:	20000314 	.word	0x20000314
    27a4:	00002b8f 	.word	0x00002b8f
    27a8:	000021a9 	.word	0x000021a9
    27ac:	000005b5 	.word	0x000005b5
    27b0:	0000229d 	.word	0x0000229d

000027b4 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    27b4:	b510      	push	{r4, lr}
    27b6:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    27b8:	4802      	ldr	r0, [pc, #8]	; (27c4 <usbdc_register_function+0x10>)
    27ba:	3010      	adds	r0, #16
    27bc:	4b02      	ldr	r3, [pc, #8]	; (27c8 <usbdc_register_function+0x14>)
    27be:	4798      	blx	r3
}
    27c0:	bd10      	pop	{r4, pc}
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	20000314 	.word	0x20000314
    27c8:	000008d1 	.word	0x000008d1

000027cc <usbdc_start>:

/**
 * \brief Start the USB device driver with specific descriptors set
 */
int32_t usbdc_start(struct usbd_descriptors *desces)
{
    27cc:	b510      	push	{r4, lr}
	if (usbdc.state >= USBD_S_POWER) {
    27ce:	4b0b      	ldr	r3, [pc, #44]	; (27fc <usbdc_start+0x30>)
    27d0:	7e9b      	ldrb	r3, [r3, #26]
    27d2:	2b00      	cmp	r3, #0
    27d4:	d10c      	bne.n	27f0 <usbdc_start+0x24>
		return ERR_BUSY;
	}

	if (desces) {
    27d6:	2800      	cmp	r0, #0
    27d8:	d00d      	beq.n	27f6 <usbdc_start+0x2a>
		usbdc.desces.ls_fs = desces;
    27da:	4b08      	ldr	r3, [pc, #32]	; (27fc <usbdc_start+0x30>)
    27dc:	6018      	str	r0, [r3, #0]
#endif
	} else {
		return ERR_BAD_DATA;
	}

	usbdc.ctrl_size = desces->sod[7];
    27de:	6802      	ldr	r2, [r0, #0]
    27e0:	79d2      	ldrb	r2, [r2, #7]
    27e2:	771a      	strb	r2, [r3, #28]
	usbdc.state     = USBD_S_POWER;
    27e4:	2201      	movs	r2, #1
    27e6:	769a      	strb	r2, [r3, #26]
	usb_d_enable();
    27e8:	4b05      	ldr	r3, [pc, #20]	; (2800 <usbdc_start+0x34>)
    27ea:	4798      	blx	r3
	return ERR_NONE;
    27ec:	2000      	movs	r0, #0
}
    27ee:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    27f0:	2004      	movs	r0, #4
    27f2:	4240      	negs	r0, r0
    27f4:	e7fb      	b.n	27ee <usbdc_start+0x22>
		return ERR_BAD_DATA;
    27f6:	2009      	movs	r0, #9
    27f8:	4240      	negs	r0, r0
    27fa:	e7f8      	b.n	27ee <usbdc_start+0x22>
    27fc:	20000314 	.word	0x20000314
    2800:	000005c1 	.word	0x000005c1

00002804 <usbdc_attach>:

/**
 * \brief Attach the USB device to host
 */
void usbdc_attach(void)
{
    2804:	b510      	push	{r4, lr}
	usb_d_attach();
    2806:	4b01      	ldr	r3, [pc, #4]	; (280c <usbdc_attach+0x8>)
    2808:	4798      	blx	r3
}
    280a:	bd10      	pop	{r4, pc}
    280c:	000005cd 	.word	0x000005cd

00002810 <usbdc_get_ctrl_buffer>:
/**
 * \brief Return USB Device endpoint0 buffer
 */
uint8_t *usbdc_get_ctrl_buffer(void)
{
	return usbdc.ctrl_buf;
    2810:	4b01      	ldr	r3, [pc, #4]	; (2818 <usbdc_get_ctrl_buffer+0x8>)
    2812:	6958      	ldr	r0, [r3, #20]
}
    2814:	4770      	bx	lr
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	20000314 	.word	0x20000314

0000281c <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    281c:	4b02      	ldr	r3, [pc, #8]	; (2828 <usbdc_get_state+0xc>)
    281e:	7e98      	ldrb	r0, [r3, #26]
    2820:	06c3      	lsls	r3, r0, #27
    2822:	d500      	bpl.n	2826 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2824:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2826:	4770      	bx	lr
    2828:	20000314 	.word	0x20000314

0000282c <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    282c:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    282e:	4288      	cmp	r0, r1
    2830:	d211      	bcs.n	2856 <usb_find_desc+0x2a>
	return desc[0];
    2832:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2834:	2b01      	cmp	r3, #1
    2836:	d910      	bls.n	285a <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    2838:	7844      	ldrb	r4, [r0, #1]
    283a:	4294      	cmp	r4, r2
    283c:	d00a      	beq.n	2854 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    283e:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2840:	4281      	cmp	r1, r0
    2842:	d906      	bls.n	2852 <usb_find_desc+0x26>
	return desc[0];
    2844:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2846:	2b01      	cmp	r3, #1
    2848:	d909      	bls.n	285e <usb_find_desc+0x32>
	return desc[1];
    284a:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    284c:	4294      	cmp	r4, r2
    284e:	d1f6      	bne.n	283e <usb_find_desc+0x12>
    2850:	e000      	b.n	2854 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2852:	2000      	movs	r0, #0
}
    2854:	bd10      	pop	{r4, pc}
	return NULL;
    2856:	2000      	movs	r0, #0
    2858:	e7fc      	b.n	2854 <usb_find_desc+0x28>
		_desc_len_check();
    285a:	2000      	movs	r0, #0
    285c:	e7fa      	b.n	2854 <usb_find_desc+0x28>
    285e:	2000      	movs	r0, #0
    2860:	e7f8      	b.n	2854 <usb_find_desc+0x28>

00002862 <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2862:	4288      	cmp	r0, r1
    2864:	d215      	bcs.n	2892 <usb_find_ep_desc+0x30>
	return desc[0];
    2866:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2868:	2b01      	cmp	r3, #1
    286a:	d914      	bls.n	2896 <usb_find_ep_desc+0x34>
	return desc[1];
    286c:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    286e:	2a04      	cmp	r2, #4
    2870:	d013      	beq.n	289a <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2872:	2a05      	cmp	r2, #5
    2874:	d00c      	beq.n	2890 <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    2876:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2878:	4281      	cmp	r1, r0
    287a:	d908      	bls.n	288e <usb_find_ep_desc+0x2c>
	return desc[0];
    287c:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    287e:	2b01      	cmp	r3, #1
    2880:	d90d      	bls.n	289e <usb_find_ep_desc+0x3c>
	return desc[1];
    2882:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2884:	2a04      	cmp	r2, #4
    2886:	d00c      	beq.n	28a2 <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2888:	2a05      	cmp	r2, #5
    288a:	d1f4      	bne.n	2876 <usb_find_ep_desc+0x14>
    288c:	e000      	b.n	2890 <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    288e:	2000      	movs	r0, #0
}
    2890:	4770      	bx	lr
	return NULL;
    2892:	2000      	movs	r0, #0
    2894:	e7fc      	b.n	2890 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2896:	2000      	movs	r0, #0
    2898:	e7fa      	b.n	2890 <usb_find_ep_desc+0x2e>
	return NULL;
    289a:	2000      	movs	r0, #0
    289c:	e7f8      	b.n	2890 <usb_find_ep_desc+0x2e>
		_desc_len_check();
    289e:	2000      	movs	r0, #0
    28a0:	e7f6      	b.n	2890 <usb_find_ep_desc+0x2e>
	return NULL;
    28a2:	2000      	movs	r0, #0
    28a4:	e7f4      	b.n	2890 <usb_find_ep_desc+0x2e>
	...

000028a8 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    28a8:	b570      	push	{r4, r5, r6, lr}
    28aa:	000c      	movs	r4, r1
    28ac:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    28ae:	2202      	movs	r2, #2
    28b0:	4b16      	ldr	r3, [pc, #88]	; (290c <usb_find_cfg_desc+0x64>)
    28b2:	4798      	blx	r3
	if (!desc) {
    28b4:	2800      	cmp	r0, #0
    28b6:	d01d      	beq.n	28f4 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    28b8:	4284      	cmp	r4, r0
    28ba:	d91c      	bls.n	28f6 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    28bc:	7803      	ldrb	r3, [r0, #0]
    28be:	2b01      	cmp	r3, #1
    28c0:	d91b      	bls.n	28fa <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    28c2:	7843      	ldrb	r3, [r0, #1]
    28c4:	2b02      	cmp	r3, #2
    28c6:	d11a      	bne.n	28fe <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    28c8:	7943      	ldrb	r3, [r0, #5]
    28ca:	42ab      	cmp	r3, r5
    28cc:	d012      	beq.n	28f4 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    28ce:	78c2      	ldrb	r2, [r0, #3]
    28d0:	0212      	lsls	r2, r2, #8
    28d2:	7883      	ldrb	r3, [r0, #2]
    28d4:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    28d6:	b29b      	uxth	r3, r3
    28d8:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    28da:	4284      	cmp	r4, r0
    28dc:	d909      	bls.n	28f2 <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    28de:	7803      	ldrb	r3, [r0, #0]
    28e0:	2b01      	cmp	r3, #1
    28e2:	d90e      	bls.n	2902 <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    28e4:	7843      	ldrb	r3, [r0, #1]
    28e6:	2b02      	cmp	r3, #2
    28e8:	d10d      	bne.n	2906 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    28ea:	7943      	ldrb	r3, [r0, #5]
    28ec:	42ab      	cmp	r3, r5
    28ee:	d1ee      	bne.n	28ce <usb_find_cfg_desc+0x26>
    28f0:	e000      	b.n	28f4 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    28f2:	2000      	movs	r0, #0
}
    28f4:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    28f6:	2000      	movs	r0, #0
    28f8:	e7fc      	b.n	28f4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    28fa:	2000      	movs	r0, #0
    28fc:	e7fa      	b.n	28f4 <usb_find_cfg_desc+0x4c>
	return NULL;
    28fe:	2000      	movs	r0, #0
    2900:	e7f8      	b.n	28f4 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2902:	2000      	movs	r0, #0
    2904:	e7f6      	b.n	28f4 <usb_find_cfg_desc+0x4c>
	return NULL;
    2906:	2000      	movs	r0, #0
    2908:	e7f4      	b.n	28f4 <usb_find_cfg_desc+0x4c>
    290a:	46c0      	nop			; (mov r8, r8)
    290c:	0000282d 	.word	0x0000282d

00002910 <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2912:	000d      	movs	r5, r1
    2914:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2916:	4288      	cmp	r0, r1
    2918:	d212      	bcs.n	2940 <usb_find_str_desc+0x30>
    291a:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    291c:	4e0a      	ldr	r6, [pc, #40]	; (2948 <usb_find_str_desc+0x38>)
    291e:	2203      	movs	r2, #3
    2920:	0029      	movs	r1, r5
    2922:	47b0      	blx	r6
		if (desc) {
    2924:	2800      	cmp	r0, #0
    2926:	d00e      	beq.n	2946 <usb_find_str_desc+0x36>
	return desc[0];
    2928:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    292a:	2b01      	cmp	r3, #1
    292c:	d90a      	bls.n	2944 <usb_find_str_desc+0x34>
			if (i == str_index) {
    292e:	42a7      	cmp	r7, r4
    2930:	d009      	beq.n	2946 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    2932:	3401      	adds	r4, #1
    2934:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2936:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    2938:	4285      	cmp	r5, r0
    293a:	d8f0      	bhi.n	291e <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    293c:	2000      	movs	r0, #0
    293e:	e002      	b.n	2946 <usb_find_str_desc+0x36>
    2940:	2000      	movs	r0, #0
    2942:	e000      	b.n	2946 <usb_find_str_desc+0x36>
			_desc_len_check();
    2944:	2000      	movs	r0, #0
}
    2946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2948:	0000282d 	.word	0x0000282d

0000294c <usb_device_cb_state_c>:

/**
 * \brief Callback invoked when Line State Change
 */
static bool usb_device_cb_state_c(usb_cdc_control_signal_t state)
{
    294c:	b510      	push	{r4, lr}
    294e:	b082      	sub	sp, #8
    2950:	1c03      	adds	r3, r0, #0
    2952:	aa01      	add	r2, sp, #4
    2954:	8010      	strh	r0, [r2, #0]
	if (state.rs232.DTR) {
    2956:	07db      	lsls	r3, r3, #31
    2958:	d402      	bmi.n	2960 <usb_device_cb_state_c+0x14>
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
	}

	/* No error. */
	return false;
}
    295a:	2000      	movs	r0, #0
    295c:	b002      	add	sp, #8
    295e:	bd10      	pop	{r4, pc}
		cdcdf_acm_register_callback(CDCDF_ACM_CB_READ, (FUNC_PTR)usb_device_cb_bulk_out);
    2960:	4905      	ldr	r1, [pc, #20]	; (2978 <usb_device_cb_state_c+0x2c>)
    2962:	2000      	movs	r0, #0
    2964:	4c05      	ldr	r4, [pc, #20]	; (297c <usb_device_cb_state_c+0x30>)
    2966:	47a0      	blx	r4
		cdcdf_acm_register_callback(CDCDF_ACM_CB_WRITE, (FUNC_PTR)usb_device_cb_bulk_in);
    2968:	4905      	ldr	r1, [pc, #20]	; (2980 <usb_device_cb_state_c+0x34>)
    296a:	2001      	movs	r0, #1
    296c:	47a0      	blx	r4
		cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    296e:	2140      	movs	r1, #64	; 0x40
    2970:	4804      	ldr	r0, [pc, #16]	; (2984 <usb_device_cb_state_c+0x38>)
    2972:	4b05      	ldr	r3, [pc, #20]	; (2988 <usb_device_cb_state_c+0x3c>)
    2974:	4798      	blx	r3
    2976:	e7f0      	b.n	295a <usb_device_cb_state_c+0xe>
    2978:	000029a5 	.word	0x000029a5
    297c:	000020c1 	.word	0x000020c1
    2980:	0000298d 	.word	0x0000298d
    2984:	20000334 	.word	0x20000334
    2988:	00002069 	.word	0x00002069

0000298c <usb_device_cb_bulk_in>:
{
    298c:	b510      	push	{r4, lr}
	cdcdf_acm_read((uint8_t *)usbd_cdc_buffer, sizeof(usbd_cdc_buffer));
    298e:	2140      	movs	r1, #64	; 0x40
    2990:	4802      	ldr	r0, [pc, #8]	; (299c <usb_device_cb_bulk_in+0x10>)
    2992:	4b03      	ldr	r3, [pc, #12]	; (29a0 <usb_device_cb_bulk_in+0x14>)
    2994:	4798      	blx	r3
}
    2996:	2000      	movs	r0, #0
    2998:	bd10      	pop	{r4, pc}
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	20000334 	.word	0x20000334
    29a0:	00002069 	.word	0x00002069

000029a4 <usb_device_cb_bulk_out>:
{
    29a4:	b510      	push	{r4, lr}
	cdcdf_acm_write((uint8_t *)usbd_cdc_buffer, count);
    29a6:	0011      	movs	r1, r2
    29a8:	4802      	ldr	r0, [pc, #8]	; (29b4 <usb_device_cb_bulk_out+0x10>)
    29aa:	4b03      	ldr	r3, [pc, #12]	; (29b8 <usb_device_cb_bulk_out+0x14>)
    29ac:	4798      	blx	r3
}
    29ae:	2000      	movs	r0, #0
    29b0:	bd10      	pop	{r4, pc}
    29b2:	46c0      	nop			; (mov r8, r8)
    29b4:	20000334 	.word	0x20000334
    29b8:	00002095 	.word	0x00002095

000029bc <cdc_device_acm_init>:

/**
 * \brief CDC ACM Init
 */
void cdc_device_acm_init(void)
{
    29bc:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    29be:	4806      	ldr	r0, [pc, #24]	; (29d8 <cdc_device_acm_init+0x1c>)
    29c0:	3040      	adds	r0, #64	; 0x40
    29c2:	4b06      	ldr	r3, [pc, #24]	; (29dc <cdc_device_acm_init+0x20>)
    29c4:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	cdcdf_acm_init();
    29c6:	4b06      	ldr	r3, [pc, #24]	; (29e0 <cdc_device_acm_init+0x24>)
    29c8:	4798      	blx	r3

	usbdc_start(single_desc);
    29ca:	4806      	ldr	r0, [pc, #24]	; (29e4 <cdc_device_acm_init+0x28>)
    29cc:	4b06      	ldr	r3, [pc, #24]	; (29e8 <cdc_device_acm_init+0x2c>)
    29ce:	4798      	blx	r3
	usbdc_attach();
    29d0:	4b06      	ldr	r3, [pc, #24]	; (29ec <cdc_device_acm_init+0x30>)
    29d2:	4798      	blx	r3
}
    29d4:	bd10      	pop	{r4, pc}
    29d6:	46c0      	nop			; (mov r8, r8)
    29d8:	20000334 	.word	0x20000334
    29dc:	00002755 	.word	0x00002755
    29e0:	00002025 	.word	0x00002025
    29e4:	20000008 	.word	0x20000008
    29e8:	000027cd 	.word	0x000027cd
    29ec:	00002805 	.word	0x00002805

000029f0 <cdcd_acm_example>:
 * The application will behave as a virtual COM.
 * - Open a HyperTerminal or other COM tools in PC side.
 * - Send out a character or string and it will echo the content received.
 */
void cdcd_acm_example(void)
{
    29f0:	b510      	push	{r4, lr}
	while (!cdcdf_acm_is_enabled()) {
    29f2:	4c04      	ldr	r4, [pc, #16]	; (2a04 <cdcd_acm_example+0x14>)
    29f4:	47a0      	blx	r4
    29f6:	2800      	cmp	r0, #0
    29f8:	d0fc      	beq.n	29f4 <cdcd_acm_example+0x4>
		// wait cdc acm to be installed
	};

	cdcdf_acm_register_callback(CDCDF_ACM_CB_STATE_C, (FUNC_PTR)usb_device_cb_state_c);
    29fa:	4903      	ldr	r1, [pc, #12]	; (2a08 <cdcd_acm_example+0x18>)
    29fc:	2003      	movs	r0, #3
    29fe:	4b03      	ldr	r3, [pc, #12]	; (2a0c <cdcd_acm_example+0x1c>)
    2a00:	4798      	blx	r3
    2a02:	e7fe      	b.n	2a02 <cdcd_acm_example+0x12>
    2a04:	00002111 	.word	0x00002111
    2a08:	0000294d 	.word	0x0000294d
    2a0c:	000020c1 	.word	0x000020c1

00002a10 <usb_init>:
	while (1) {
	}
}

void usb_init(void)
{
    2a10:	b510      	push	{r4, lr}

	cdc_device_acm_init();
    2a12:	4b01      	ldr	r3, [pc, #4]	; (2a18 <usb_init+0x8>)
    2a14:	4798      	blx	r3
}
    2a16:	bd10      	pop	{r4, pc}
    2a18:	000029bd 	.word	0x000029bd

00002a1c <__udivsi3>:
    2a1c:	2200      	movs	r2, #0
    2a1e:	0843      	lsrs	r3, r0, #1
    2a20:	428b      	cmp	r3, r1
    2a22:	d374      	bcc.n	2b0e <__udivsi3+0xf2>
    2a24:	0903      	lsrs	r3, r0, #4
    2a26:	428b      	cmp	r3, r1
    2a28:	d35f      	bcc.n	2aea <__udivsi3+0xce>
    2a2a:	0a03      	lsrs	r3, r0, #8
    2a2c:	428b      	cmp	r3, r1
    2a2e:	d344      	bcc.n	2aba <__udivsi3+0x9e>
    2a30:	0b03      	lsrs	r3, r0, #12
    2a32:	428b      	cmp	r3, r1
    2a34:	d328      	bcc.n	2a88 <__udivsi3+0x6c>
    2a36:	0c03      	lsrs	r3, r0, #16
    2a38:	428b      	cmp	r3, r1
    2a3a:	d30d      	bcc.n	2a58 <__udivsi3+0x3c>
    2a3c:	22ff      	movs	r2, #255	; 0xff
    2a3e:	0209      	lsls	r1, r1, #8
    2a40:	ba12      	rev	r2, r2
    2a42:	0c03      	lsrs	r3, r0, #16
    2a44:	428b      	cmp	r3, r1
    2a46:	d302      	bcc.n	2a4e <__udivsi3+0x32>
    2a48:	1212      	asrs	r2, r2, #8
    2a4a:	0209      	lsls	r1, r1, #8
    2a4c:	d065      	beq.n	2b1a <__udivsi3+0xfe>
    2a4e:	0b03      	lsrs	r3, r0, #12
    2a50:	428b      	cmp	r3, r1
    2a52:	d319      	bcc.n	2a88 <__udivsi3+0x6c>
    2a54:	e000      	b.n	2a58 <__udivsi3+0x3c>
    2a56:	0a09      	lsrs	r1, r1, #8
    2a58:	0bc3      	lsrs	r3, r0, #15
    2a5a:	428b      	cmp	r3, r1
    2a5c:	d301      	bcc.n	2a62 <__udivsi3+0x46>
    2a5e:	03cb      	lsls	r3, r1, #15
    2a60:	1ac0      	subs	r0, r0, r3
    2a62:	4152      	adcs	r2, r2
    2a64:	0b83      	lsrs	r3, r0, #14
    2a66:	428b      	cmp	r3, r1
    2a68:	d301      	bcc.n	2a6e <__udivsi3+0x52>
    2a6a:	038b      	lsls	r3, r1, #14
    2a6c:	1ac0      	subs	r0, r0, r3
    2a6e:	4152      	adcs	r2, r2
    2a70:	0b43      	lsrs	r3, r0, #13
    2a72:	428b      	cmp	r3, r1
    2a74:	d301      	bcc.n	2a7a <__udivsi3+0x5e>
    2a76:	034b      	lsls	r3, r1, #13
    2a78:	1ac0      	subs	r0, r0, r3
    2a7a:	4152      	adcs	r2, r2
    2a7c:	0b03      	lsrs	r3, r0, #12
    2a7e:	428b      	cmp	r3, r1
    2a80:	d301      	bcc.n	2a86 <__udivsi3+0x6a>
    2a82:	030b      	lsls	r3, r1, #12
    2a84:	1ac0      	subs	r0, r0, r3
    2a86:	4152      	adcs	r2, r2
    2a88:	0ac3      	lsrs	r3, r0, #11
    2a8a:	428b      	cmp	r3, r1
    2a8c:	d301      	bcc.n	2a92 <__udivsi3+0x76>
    2a8e:	02cb      	lsls	r3, r1, #11
    2a90:	1ac0      	subs	r0, r0, r3
    2a92:	4152      	adcs	r2, r2
    2a94:	0a83      	lsrs	r3, r0, #10
    2a96:	428b      	cmp	r3, r1
    2a98:	d301      	bcc.n	2a9e <__udivsi3+0x82>
    2a9a:	028b      	lsls	r3, r1, #10
    2a9c:	1ac0      	subs	r0, r0, r3
    2a9e:	4152      	adcs	r2, r2
    2aa0:	0a43      	lsrs	r3, r0, #9
    2aa2:	428b      	cmp	r3, r1
    2aa4:	d301      	bcc.n	2aaa <__udivsi3+0x8e>
    2aa6:	024b      	lsls	r3, r1, #9
    2aa8:	1ac0      	subs	r0, r0, r3
    2aaa:	4152      	adcs	r2, r2
    2aac:	0a03      	lsrs	r3, r0, #8
    2aae:	428b      	cmp	r3, r1
    2ab0:	d301      	bcc.n	2ab6 <__udivsi3+0x9a>
    2ab2:	020b      	lsls	r3, r1, #8
    2ab4:	1ac0      	subs	r0, r0, r3
    2ab6:	4152      	adcs	r2, r2
    2ab8:	d2cd      	bcs.n	2a56 <__udivsi3+0x3a>
    2aba:	09c3      	lsrs	r3, r0, #7
    2abc:	428b      	cmp	r3, r1
    2abe:	d301      	bcc.n	2ac4 <__udivsi3+0xa8>
    2ac0:	01cb      	lsls	r3, r1, #7
    2ac2:	1ac0      	subs	r0, r0, r3
    2ac4:	4152      	adcs	r2, r2
    2ac6:	0983      	lsrs	r3, r0, #6
    2ac8:	428b      	cmp	r3, r1
    2aca:	d301      	bcc.n	2ad0 <__udivsi3+0xb4>
    2acc:	018b      	lsls	r3, r1, #6
    2ace:	1ac0      	subs	r0, r0, r3
    2ad0:	4152      	adcs	r2, r2
    2ad2:	0943      	lsrs	r3, r0, #5
    2ad4:	428b      	cmp	r3, r1
    2ad6:	d301      	bcc.n	2adc <__udivsi3+0xc0>
    2ad8:	014b      	lsls	r3, r1, #5
    2ada:	1ac0      	subs	r0, r0, r3
    2adc:	4152      	adcs	r2, r2
    2ade:	0903      	lsrs	r3, r0, #4
    2ae0:	428b      	cmp	r3, r1
    2ae2:	d301      	bcc.n	2ae8 <__udivsi3+0xcc>
    2ae4:	010b      	lsls	r3, r1, #4
    2ae6:	1ac0      	subs	r0, r0, r3
    2ae8:	4152      	adcs	r2, r2
    2aea:	08c3      	lsrs	r3, r0, #3
    2aec:	428b      	cmp	r3, r1
    2aee:	d301      	bcc.n	2af4 <__udivsi3+0xd8>
    2af0:	00cb      	lsls	r3, r1, #3
    2af2:	1ac0      	subs	r0, r0, r3
    2af4:	4152      	adcs	r2, r2
    2af6:	0883      	lsrs	r3, r0, #2
    2af8:	428b      	cmp	r3, r1
    2afa:	d301      	bcc.n	2b00 <__udivsi3+0xe4>
    2afc:	008b      	lsls	r3, r1, #2
    2afe:	1ac0      	subs	r0, r0, r3
    2b00:	4152      	adcs	r2, r2
    2b02:	0843      	lsrs	r3, r0, #1
    2b04:	428b      	cmp	r3, r1
    2b06:	d301      	bcc.n	2b0c <__udivsi3+0xf0>
    2b08:	004b      	lsls	r3, r1, #1
    2b0a:	1ac0      	subs	r0, r0, r3
    2b0c:	4152      	adcs	r2, r2
    2b0e:	1a41      	subs	r1, r0, r1
    2b10:	d200      	bcs.n	2b14 <__udivsi3+0xf8>
    2b12:	4601      	mov	r1, r0
    2b14:	4152      	adcs	r2, r2
    2b16:	4610      	mov	r0, r2
    2b18:	4770      	bx	lr
    2b1a:	e7ff      	b.n	2b1c <__udivsi3+0x100>
    2b1c:	b501      	push	{r0, lr}
    2b1e:	2000      	movs	r0, #0
    2b20:	f000 f806 	bl	2b30 <__aeabi_idiv0>
    2b24:	bd02      	pop	{r1, pc}
    2b26:	46c0      	nop			; (mov r8, r8)

00002b28 <__aeabi_uidivmod>:
    2b28:	2900      	cmp	r1, #0
    2b2a:	d0f7      	beq.n	2b1c <__udivsi3+0x100>
    2b2c:	e776      	b.n	2a1c <__udivsi3>
    2b2e:	4770      	bx	lr

00002b30 <__aeabi_idiv0>:
    2b30:	4770      	bx	lr
    2b32:	46c0      	nop			; (mov r8, r8)

00002b34 <__libc_init_array>:
    2b34:	b570      	push	{r4, r5, r6, lr}
    2b36:	2600      	movs	r6, #0
    2b38:	4d0c      	ldr	r5, [pc, #48]	; (2b6c <__libc_init_array+0x38>)
    2b3a:	4c0d      	ldr	r4, [pc, #52]	; (2b70 <__libc_init_array+0x3c>)
    2b3c:	1b64      	subs	r4, r4, r5
    2b3e:	10a4      	asrs	r4, r4, #2
    2b40:	42a6      	cmp	r6, r4
    2b42:	d109      	bne.n	2b58 <__libc_init_array+0x24>
    2b44:	2600      	movs	r6, #0
    2b46:	f000 f871 	bl	2c2c <_init>
    2b4a:	4d0a      	ldr	r5, [pc, #40]	; (2b74 <__libc_init_array+0x40>)
    2b4c:	4c0a      	ldr	r4, [pc, #40]	; (2b78 <__libc_init_array+0x44>)
    2b4e:	1b64      	subs	r4, r4, r5
    2b50:	10a4      	asrs	r4, r4, #2
    2b52:	42a6      	cmp	r6, r4
    2b54:	d105      	bne.n	2b62 <__libc_init_array+0x2e>
    2b56:	bd70      	pop	{r4, r5, r6, pc}
    2b58:	00b3      	lsls	r3, r6, #2
    2b5a:	58eb      	ldr	r3, [r5, r3]
    2b5c:	4798      	blx	r3
    2b5e:	3601      	adds	r6, #1
    2b60:	e7ee      	b.n	2b40 <__libc_init_array+0xc>
    2b62:	00b3      	lsls	r3, r6, #2
    2b64:	58eb      	ldr	r3, [r5, r3]
    2b66:	4798      	blx	r3
    2b68:	3601      	adds	r6, #1
    2b6a:	e7f2      	b.n	2b52 <__libc_init_array+0x1e>
    2b6c:	00002c38 	.word	0x00002c38
    2b70:	00002c38 	.word	0x00002c38
    2b74:	00002c38 	.word	0x00002c38
    2b78:	00002c3c 	.word	0x00002c3c

00002b7c <memcpy>:
    2b7c:	2300      	movs	r3, #0
    2b7e:	b510      	push	{r4, lr}
    2b80:	429a      	cmp	r2, r3
    2b82:	d100      	bne.n	2b86 <memcpy+0xa>
    2b84:	bd10      	pop	{r4, pc}
    2b86:	5ccc      	ldrb	r4, [r1, r3]
    2b88:	54c4      	strb	r4, [r0, r3]
    2b8a:	3301      	adds	r3, #1
    2b8c:	e7f8      	b.n	2b80 <memcpy+0x4>

00002b8e <memset>:
    2b8e:	0003      	movs	r3, r0
    2b90:	1882      	adds	r2, r0, r2
    2b92:	4293      	cmp	r3, r2
    2b94:	d100      	bne.n	2b98 <memset+0xa>
    2b96:	4770      	bx	lr
    2b98:	7019      	strb	r1, [r3, #0]
    2b9a:	3301      	adds	r3, #1
    2b9c:	e7f9      	b.n	2b92 <memset+0x4>
    2b9e:	0000      	movs	r0, r0
    2ba0:	682f2e2e 	.word	0x682f2e2e
    2ba4:	752f6c61 	.word	0x752f6c61
    2ba8:	736c6974 	.word	0x736c6974
    2bac:	6372732f 	.word	0x6372732f
    2bb0:	6974752f 	.word	0x6974752f
    2bb4:	6c5f736c 	.word	0x6c5f736c
    2bb8:	2e747369 	.word	0x2e747369
    2bbc:	0063      	.short	0x0063
    2bbe:	2000      	.short	0x2000

00002bc0 <_usb_ep_cfgs>:
    2bc0:	02b0 2000 0000 0000 0040 0000 0270 2000     ... ....@...p.. 
    2bd0:	0000 0000 0040 0000 0230 2000 0000 0000     ....@...0.. ....
    2be0:	0040 0000 26ec 0000 23d4 0000 26ec 0000     @....&...#...&..
    2bf0:	2406 0000 26ec 0000 232a 0000 26ec 0000     .$...&..*#...&..
    2c00:	26ec 0000 26ec 0000 233e 0000 26ec 0000     .&...&..>#...&..
    2c10:	243a 0000 2e2e 752f 6273 642f 7665 6369     :$..../usb/devic
    2c20:	2f65 7375 6462 2e63 0063 0000               e/usbdc.c...

00002c2c <_init>:
    2c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c32:	bc08      	pop	{r3}
    2c34:	469e      	mov	lr, r3
    2c36:	4770      	bx	lr

00002c38 <__init_array_start>:
    2c38:	000000dd 	.word	0x000000dd

00002c3c <_fini>:
    2c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c3e:	46c0      	nop			; (mov r8, r8)
    2c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2c42:	bc08      	pop	{r3}
    2c44:	469e      	mov	lr, r3
    2c46:	4770      	bx	lr

00002c48 <__fini_array_start>:
    2c48:	000000b5 	.word	0x000000b5
