
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f44  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20000000  00002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  00020050  2**0
                  CONTENTS
  3 .bss          00000354  20000050  00002f94  00020050  2**2
                  ALLOC
  4 .stack        00000804  200003a4  000032e8  00020050  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  7 .debug_info   00017c01  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002f69  00000000  00000000  00037cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000094d6  00000000  00000000  0003ac3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000680  00000000  00000000  00044111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ab0  00000000  00000000  00044791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c85f  00000000  00000000  00045241  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e85e  00000000  00000000  00061aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00092ed6  00000000  00000000  000702fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000fc8  00000000  00000000  001031d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 0b 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     ... -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 51 1a 00 00     )...)...)...Q...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 00 00 00 00                             ).......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000050 	.word	0x20000050
      d4:	00000000 	.word	0x00000000
      d8:	00002f44 	.word	0x00002f44

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000054 	.word	0x20000054
     108:	00002f44 	.word	0x00002f44
     10c:	00002f44 	.word	0x00002f44
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b02      	ldr	r3, [pc, #8]	; (120 <atmel_start_init+0xc>)
     118:	4798      	blx	r3
	usb_init();
     11a:	4b02      	ldr	r3, [pc, #8]	; (124 <atmel_start_init+0x10>)
     11c:	4798      	blx	r3
}
     11e:	bd10      	pop	{r4, pc}
     120:	00000291 	.word	0x00000291
     124:	00002d59 	.word	0x00002d59

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a1a      	ldr	r2, [pc, #104]	; (198 <Reset_Handler+0x6c>)
     130:	4b1a      	ldr	r3, [pc, #104]	; (19c <Reset_Handler+0x70>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b19      	ldr	r3, [pc, #100]	; (1a0 <Reset_Handler+0x74>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a19      	ldr	r2, [pc, #100]	; (1a4 <Reset_Handler+0x78>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4813      	ldr	r0, [pc, #76]	; (19c <Reset_Handler+0x70>)
     14e:	4912      	ldr	r1, [pc, #72]	; (198 <Reset_Handler+0x6c>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a13      	ldr	r2, [pc, #76]	; (1a8 <Reset_Handler+0x7c>)
     15c:	4b13      	ldr	r3, [pc, #76]	; (1ac <Reset_Handler+0x80>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	4911      	ldr	r1, [pc, #68]	; (1ac <Reset_Handler+0x80>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x84>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0d      	ldr	r3, [pc, #52]	; (1b4 <Reset_Handler+0x88>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     182:	4a0d      	ldr	r2, [pc, #52]	; (1b8 <Reset_Handler+0x8c>)
     184:	6853      	ldr	r3, [r2, #4]
     186:	397f      	subs	r1, #127	; 0x7f
     188:	430b      	orrs	r3, r1
     18a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     18c:	4b0b      	ldr	r3, [pc, #44]	; (1bc <Reset_Handler+0x90>)
     18e:	4798      	blx	r3
        main();
     190:	4b0b      	ldr	r3, [pc, #44]	; (1c0 <Reset_Handler+0x94>)
     192:	4798      	blx	r3
     194:	e7fe      	b.n	194 <Reset_Handler+0x68>
     196:	46c0      	nop			; (mov r8, r8)
     198:	00002f44 	.word	0x00002f44
     19c:	20000000 	.word	0x20000000
     1a0:	20000050 	.word	0x20000050
     1a4:	20000004 	.word	0x20000004
     1a8:	20000050 	.word	0x20000050
     1ac:	200003a4 	.word	0x200003a4
     1b0:	e000ed00 	.word	0xe000ed00
     1b4:	00000000 	.word	0x00000000
     1b8:	41004000 	.word	0x41004000
     1bc:	00002d65 	.word	0x00002d65
     1c0:	00001c99 	.word	0x00001c99

000001c4 <USB_DEVICE_INSTANCE_PORT_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void USB_DEVICE_INSTANCE_PORT_init(void)
{
     1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     1c6:	46c6      	mov	lr, r8
     1c8:	b500      	push	{lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     1ca:	24c0      	movs	r4, #192	; 0xc0
     1cc:	05e4      	lsls	r4, r4, #23
     1ce:	2280      	movs	r2, #128	; 0x80
     1d0:	0452      	lsls	r2, r2, #17
     1d2:	60a2      	str	r2, [r4, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1d4:	4b1a      	ldr	r3, [pc, #104]	; (240 <USB_DEVICE_INSTANCE_PORT_init+0x7c>)
     1d6:	2780      	movs	r7, #128	; 0x80
     1d8:	05ff      	lsls	r7, r7, #23
     1da:	629f      	str	r7, [r3, #40]	; 0x28
     1dc:	4919      	ldr	r1, [pc, #100]	; (244 <USB_DEVICE_INSTANCE_PORT_init+0x80>)
     1de:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     1e0:	6162      	str	r2, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1e2:	2058      	movs	r0, #88	; 0x58
     1e4:	5c19      	ldrb	r1, [r3, r0]
     1e6:	2204      	movs	r2, #4
     1e8:	4690      	mov	r8, r2
     1ea:	4391      	bics	r1, r2
     1ec:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ee:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f0:	2601      	movs	r6, #1
     1f2:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1f4:	2501      	movs	r5, #1
     1f6:	4329      	orrs	r1, r5
     1f8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1fc:	381c      	subs	r0, #28
     1fe:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     200:	320b      	adds	r2, #11
     202:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     204:	3a09      	subs	r2, #9
     206:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     208:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     20a:	2180      	movs	r1, #128	; 0x80
     20c:	0489      	lsls	r1, r1, #18
     20e:	60a1      	str	r1, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     210:	629f      	str	r7, [r3, #40]	; 0x28
     212:	4f0d      	ldr	r7, [pc, #52]	; (248 <USB_DEVICE_INSTANCE_PORT_init+0x84>)
     214:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     216:	6161      	str	r1, [r4, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     218:	2159      	movs	r1, #89	; 0x59
     21a:	5c5c      	ldrb	r4, [r3, r1]
     21c:	4642      	mov	r2, r8
     21e:	4394      	bics	r4, r2
     220:	545c      	strb	r4, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     222:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     224:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     226:	432a      	orrs	r2, r5
     228:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     22a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     22c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     22e:	394a      	subs	r1, #74	; 0x4a
     230:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     232:	3151      	adds	r1, #81	; 0x51
     234:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     236:	541a      	strb	r2, [r3, r0]
	                      // <GPIO_PIN_FUNCTION_F"> F
	                      // <GPIO_PIN_FUNCTION_G"> G
	                      // <GPIO_PIN_FUNCTION_H"> H
	                      // <GPIO_PIN_FUNCTION_I"> I
	                      PINMUX_PA25G_USB_DP);
}
     238:	bc04      	pop	{r2}
     23a:	4690      	mov	r8, r2
     23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     23e:	46c0      	nop			; (mov r8, r8)
     240:	40002800 	.word	0x40002800
     244:	c0000100 	.word	0xc0000100
     248:	c0000200 	.word	0xc0000200

0000024c <USB_DEVICE_INSTANCE_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     24c:	2140      	movs	r1, #64	; 0x40
     24e:	2390      	movs	r3, #144	; 0x90
     250:	4a06      	ldr	r2, [pc, #24]	; (26c <USB_DEVICE_INSTANCE_CLOCK_init+0x20>)
     252:	50d1      	str	r1, [r2, r3]
}

static inline void hri_mclk_set_AHBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_USB;
     254:	4b06      	ldr	r3, [pc, #24]	; (270 <USB_DEVICE_INSTANCE_CLOCK_init+0x24>)
     256:	6919      	ldr	r1, [r3, #16]
     258:	2280      	movs	r2, #128	; 0x80
     25a:	0152      	lsls	r2, r2, #5
     25c:	430a      	orrs	r2, r1
     25e:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBBMASK_USB_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_USB;
     260:	699a      	ldr	r2, [r3, #24]
     262:	2101      	movs	r1, #1
     264:	430a      	orrs	r2, r1
     266:	619a      	str	r2, [r3, #24]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, USB_GCLK_ID, CONF_GCLK_USB_SRC | GCLK_PCHCTRL_CHEN);
	hri_mclk_set_AHBMASK_USB_bit(MCLK);
	hri_mclk_set_APBBMASK_USB_bit(MCLK);
}
     268:	4770      	bx	lr
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	40001800 	.word	0x40001800
     270:	40000400 	.word	0x40000400

00000274 <USB_DEVICE_INSTANCE_init>:

void USB_DEVICE_INSTANCE_init(void)
{
     274:	b510      	push	{r4, lr}
	USB_DEVICE_INSTANCE_CLOCK_init();
     276:	4b03      	ldr	r3, [pc, #12]	; (284 <USB_DEVICE_INSTANCE_init+0x10>)
     278:	4798      	blx	r3
	usb_d_init();
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <USB_DEVICE_INSTANCE_init+0x14>)
     27c:	4798      	blx	r3
	USB_DEVICE_INSTANCE_PORT_init();
     27e:	4b03      	ldr	r3, [pc, #12]	; (28c <USB_DEVICE_INSTANCE_init+0x18>)
     280:	4798      	blx	r3
}
     282:	bd10      	pop	{r4, pc}
     284:	0000024d 	.word	0x0000024d
     288:	00000531 	.word	0x00000531
     28c:	000001c5 	.word	0x000001c5

00000290 <system_init>:

void system_init(void)
{
     290:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     292:	4b02      	ldr	r3, [pc, #8]	; (29c <system_init+0xc>)
     294:	4798      	blx	r3
	init_mcu();

	USB_DEVICE_INSTANCE_init();
     296:	4b02      	ldr	r3, [pc, #8]	; (2a0 <system_init+0x10>)
     298:	4798      	blx	r3
}
     29a:	bd10      	pop	{r4, pc}
     29c:	000008d9 	.word	0x000008d9
     2a0:	00000275 	.word	0x00000275

000002a4 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     2a4:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     2a8:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     2aa:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     2ac:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     2b0:	4770      	bx	lr

000002b2 <atomic_leave_critical>:
     2b2:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     2b6:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     2b8:	f383 8810 	msr	PRIMASK, r3
}
     2bc:	4770      	bx	lr
	...

000002c0 <_usb_d_find_ep>:
 * \return Index of endpoint descriptor.
 * \retval >=0 The index.
 * \retval <0 Not found (endpoint is not initialized).
 */
static int8_t _usb_d_find_ep(const uint8_t ep)
{
     2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
     2c2:	0004      	movs	r4, r0
	int8_t i;
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2c4:	4b0e      	ldr	r3, [pc, #56]	; (300 <_usb_d_find_ep+0x40>)
     2c6:	785a      	ldrb	r2, [r3, #1]
     2c8:	4290      	cmp	r0, r2
     2ca:	d017      	beq.n	2fc <_usb_d_find_ep+0x3c>
     2cc:	2300      	movs	r3, #0
     2ce:	2000      	movs	r0, #0
			return i;
		}
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     2d0:	4f0b      	ldr	r7, [pc, #44]	; (300 <_usb_d_find_ep+0x40>)
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     2d2:	260f      	movs	r6, #15
     2d4:	4026      	ands	r6, r4
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2d6:	003d      	movs	r5, r7
     2d8:	e008      	b.n	2ec <_usb_d_find_ep+0x2c>
     2da:	3001      	adds	r0, #1
     2dc:	b240      	sxtb	r0, r0
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     2de:	2804      	cmp	r0, #4
     2e0:	d00a      	beq.n	2f8 <_usb_d_find_ep+0x38>
     2e2:	3320      	adds	r3, #32
		if (usb_d_inst.ep[i].xfer.hdr.ep == ep) {
     2e4:	18ea      	adds	r2, r5, r3
     2e6:	7852      	ldrb	r2, [r2, #1]
     2e8:	42a2      	cmp	r2, r4
     2ea:	d006      	beq.n	2fa <_usb_d_find_ep+0x3a>
		if (usb_d_inst.ep[i].xfer.hdr.type == USB_EP_XTYPE_CTRL
     2ec:	5dd9      	ldrb	r1, [r3, r7]
     2ee:	2900      	cmp	r1, #0
     2f0:	d1f3      	bne.n	2da <_usb_d_find_ep+0x1a>
		    && (ep & USB_EP_N_MASK) == usb_d_inst.ep[i].xfer.hdr.ep) {
     2f2:	4296      	cmp	r6, r2
     2f4:	d1f1      	bne.n	2da <_usb_d_find_ep+0x1a>
     2f6:	e000      	b.n	2fa <_usb_d_find_ep+0x3a>
			return i;
		}
	}
	return -1;
     2f8:	3805      	subs	r0, #5
}
     2fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     2fc:	2000      	movs	r0, #0
     2fe:	e7fc      	b.n	2fa <_usb_d_find_ep+0x3a>
     300:	2000006c 	.word	0x2000006c

00000304 <usb_d_dummy_cb_false>:
{
	(void)unused0;
	(void)unused1;
	(void)unused2;
	return false;
}
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr

00000308 <usb_d_cb_trans_more>:
 * \brief Callback invoked when request more data
 * \param[in] ep Endpoint number with transfer direction on bit 8.
 * \param[in] transfered Number of bytes transfered.
 */
static bool usb_d_cb_trans_more(const uint8_t ep, const uint32_t transfered)
{
     308:	b570      	push	{r4, r5, r6, lr}
     30a:	0004      	movs	r4, r0
     30c:	000d      	movs	r5, r1
	int8_t           ep_index = _usb_d_find_ep(ep);
     30e:	4b0a      	ldr	r3, [pc, #40]	; (338 <usb_d_cb_trans_more+0x30>)
     310:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     312:	0142      	lsls	r2, r0, #5
     314:	4b09      	ldr	r3, [pc, #36]	; (33c <usb_d_cb_trans_more+0x34>)
     316:	189b      	adds	r3, r3, r2
     318:	789a      	ldrb	r2, [r3, #2]
		return ept->callbacks.more(ep, transfered);
	}
	return false;
     31a:	2300      	movs	r3, #0
	if (ept->xfer.hdr.state == USB_EP_S_X_DATA) {
     31c:	2a03      	cmp	r2, #3
     31e:	d001      	beq.n	324 <usb_d_cb_trans_more+0x1c>
}
     320:	0018      	movs	r0, r3
     322:	bd70      	pop	{r4, r5, r6, pc}
		return ept->callbacks.more(ep, transfered);
     324:	0140      	lsls	r0, r0, #5
     326:	4b05      	ldr	r3, [pc, #20]	; (33c <usb_d_cb_trans_more+0x34>)
     328:	1818      	adds	r0, r3, r0
     32a:	6983      	ldr	r3, [r0, #24]
     32c:	0029      	movs	r1, r5
     32e:	0020      	movs	r0, r4
     330:	4798      	blx	r3
     332:	0003      	movs	r3, r0
     334:	e7f4      	b.n	320 <usb_d_cb_trans_more+0x18>
     336:	46c0      	nop			; (mov r8, r8)
     338:	000002c1 	.word	0x000002c1
     33c:	2000006c 	.word	0x2000006c

00000340 <_usb_d_cb_trans_done>:

/**
 * Callback when USB transactions are finished.
 */
static void _usb_d_cb_trans_done(const uint8_t ep, const int32_t code, const uint32_t transferred)
{
     340:	b5f0      	push	{r4, r5, r6, r7, lr}
     342:	b085      	sub	sp, #20
     344:	0005      	movs	r5, r0
     346:	000f      	movs	r7, r1
     348:	0016      	movs	r6, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     34a:	4b51      	ldr	r3, [pc, #324]	; (490 <_usb_d_cb_trans_done+0x150>)
     34c:	4798      	blx	r3
     34e:	0004      	movs	r4, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];

	if (code == USB_TRANS_DONE) {
     350:	2f00      	cmp	r7, #0
     352:	d162      	bne.n	41a <_usb_d_cb_trans_done+0xda>
		ept->xfer.hdr.status = USB_XFER_DONE;
     354:	4b4f      	ldr	r3, [pc, #316]	; (494 <_usb_d_cb_trans_done+0x154>)
     356:	0142      	lsls	r2, r0, #5
     358:	1899      	adds	r1, r3, r2
     35a:	2000      	movs	r0, #0
     35c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     35e:	5cd3      	ldrb	r3, [r2, r3]
     360:	2b00      	cmp	r3, #0
     362:	d00e      	beq.n	382 <_usb_d_cb_trans_done+0x42>
			usb_d_ctrl_trans_done(ept);
			return;
		}
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     364:	0162      	lsls	r2, r4, #5
     366:	4b4b      	ldr	r3, [pc, #300]	; (494 <_usb_d_cb_trans_done+0x154>)
     368:	189b      	adds	r3, r3, r2
     36a:	2201      	movs	r2, #1
     36c:	709a      	strb	r2, [r3, #2]
	} else {
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
		ept->xfer.hdr.status = USB_XFER_ERROR;
	}

	ept->callbacks.xfer(ep, (enum usb_xfer_code)ept->xfer.hdr.status, (void *)transferred);
     36e:	0164      	lsls	r4, r4, #5
     370:	4b48      	ldr	r3, [pc, #288]	; (494 <_usb_d_cb_trans_done+0x154>)
     372:	191c      	adds	r4, r3, r4
     374:	78e1      	ldrb	r1, [r4, #3]
     376:	69e3      	ldr	r3, [r4, #28]
     378:	0032      	movs	r2, r6
     37a:	0028      	movs	r0, r5
     37c:	4798      	blx	r3
}
     37e:	b005      	add	sp, #20
     380:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (state == USB_EP_S_X_DATA) {
     382:	788b      	ldrb	r3, [r1, #2]
     384:	2b03      	cmp	r3, #3
     386:	d00c      	beq.n	3a2 <_usb_d_cb_trans_done+0x62>
		ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DONE, ept->xfer.req);
     388:	4b42      	ldr	r3, [pc, #264]	; (494 <_usb_d_cb_trans_done+0x154>)
     38a:	0162      	lsls	r2, r4, #5
     38c:	320c      	adds	r2, #12
     38e:	189a      	adds	r2, r3, r2
     390:	0164      	lsls	r4, r4, #5
     392:	191c      	adds	r4, r3, r4
     394:	7860      	ldrb	r0, [r4, #1]
     396:	2100      	movs	r1, #0
     398:	69e3      	ldr	r3, [r4, #28]
     39a:	4798      	blx	r3
		ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     39c:	2302      	movs	r3, #2
     39e:	70a3      	strb	r3, [r4, #2]
     3a0:	e7ed      	b.n	37e <_usb_d_cb_trans_done+0x3e>
	bool    req_dir = USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN;
     3a2:	4a3c      	ldr	r2, [pc, #240]	; (494 <_usb_d_cb_trans_done+0x154>)
     3a4:	000b      	movs	r3, r1
     3a6:	250c      	movs	r5, #12
     3a8:	574d      	ldrsb	r5, [r1, r5]
		bool err = ept->callbacks.xfer(ept->xfer.hdr.ep, USB_XFER_DATA, ept->xfer.req);
     3aa:	0161      	lsls	r1, r4, #5
     3ac:	310c      	adds	r1, #12
     3ae:	1852      	adds	r2, r2, r1
     3b0:	7858      	ldrb	r0, [r3, #1]
     3b2:	69db      	ldr	r3, [r3, #28]
     3b4:	2101      	movs	r1, #1
     3b6:	4798      	blx	r3
		if (err) {
     3b8:	2800      	cmp	r0, #0
     3ba:	d017      	beq.n	3ec <_usb_d_cb_trans_done+0xac>
			ept->xfer.hdr.state  = USB_EP_S_HALTED;
     3bc:	0162      	lsls	r2, r4, #5
     3be:	4b35      	ldr	r3, [pc, #212]	; (494 <_usb_d_cb_trans_done+0x154>)
     3c0:	189b      	adds	r3, r3, r2
     3c2:	2205      	movs	r2, #5
     3c4:	709a      	strb	r2, [r3, #2]
			ept->xfer.hdr.status = USB_XFER_HALT;
     3c6:	3a03      	subs	r2, #3
     3c8:	70da      	strb	r2, [r3, #3]
			_usb_d_dev_ep_stall(req_dir ? ept->xfer.hdr.ep : (ept->xfer.hdr.ep | USB_EP_DIR), USB_EP_STALL_SET);
     3ca:	2d00      	cmp	r5, #0
     3cc:	db09      	blt.n	3e2 <_usb_d_cb_trans_done+0xa2>
     3ce:	0164      	lsls	r4, r4, #5
     3d0:	4b30      	ldr	r3, [pc, #192]	; (494 <_usb_d_cb_trans_done+0x154>)
     3d2:	191c      	adds	r4, r3, r4
     3d4:	7860      	ldrb	r0, [r4, #1]
     3d6:	2380      	movs	r3, #128	; 0x80
     3d8:	4318      	orrs	r0, r3
     3da:	2101      	movs	r1, #1
     3dc:	4b2e      	ldr	r3, [pc, #184]	; (498 <_usb_d_cb_trans_done+0x158>)
     3de:	4798      	blx	r3
     3e0:	e7cd      	b.n	37e <_usb_d_cb_trans_done+0x3e>
     3e2:	0164      	lsls	r4, r4, #5
     3e4:	4b2b      	ldr	r3, [pc, #172]	; (494 <_usb_d_cb_trans_done+0x154>)
     3e6:	191c      	adds	r4, r3, r4
     3e8:	7860      	ldrb	r0, [r4, #1]
     3ea:	e7f6      	b.n	3da <_usb_d_cb_trans_done+0x9a>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     3ec:	0164      	lsls	r4, r4, #5
     3ee:	4b29      	ldr	r3, [pc, #164]	; (494 <_usb_d_cb_trans_done+0x154>)
     3f0:	191c      	adds	r4, r3, r4
     3f2:	2304      	movs	r3, #4
     3f4:	70a3      	strb	r3, [r4, #2]
			_usb_d_trans(ept->xfer.hdr.ep, !req_dir, NULL, 0, 1);
     3f6:	7863      	ldrb	r3, [r4, #1]
	struct usb_d_transfer trans
     3f8:	2200      	movs	r2, #0
     3fa:	9201      	str	r2, [sp, #4]
     3fc:	9202      	str	r2, [sp, #8]
     3fe:	2d00      	cmp	r5, #0
     400:	db08      	blt.n	414 <_usb_d_cb_trans_done+0xd4>
     402:	3280      	adds	r2, #128	; 0x80
     404:	4313      	orrs	r3, r2
     406:	a801      	add	r0, sp, #4
     408:	7203      	strb	r3, [r0, #8]
     40a:	2301      	movs	r3, #1
     40c:	7243      	strb	r3, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     40e:	4b23      	ldr	r3, [pc, #140]	; (49c <_usb_d_cb_trans_done+0x15c>)
     410:	4798      	blx	r3
     412:	e7b4      	b.n	37e <_usb_d_cb_trans_done+0x3e>
	struct usb_d_transfer trans
     414:	220f      	movs	r2, #15
     416:	4013      	ands	r3, r2
     418:	e7f5      	b.n	406 <_usb_d_cb_trans_done+0xc6>
	} else if (code == USB_TRANS_STALL) {
     41a:	2f01      	cmp	r7, #1
     41c:	d00a      	beq.n	434 <_usb_d_cb_trans_done+0xf4>
	} else if (code == USB_TRANS_ABORT) {
     41e:	2f02      	cmp	r7, #2
     420:	d01d      	beq.n	45e <_usb_d_cb_trans_done+0x11e>
	} else if (code == USB_TRANS_RESET) {
     422:	2f03      	cmp	r7, #3
     424:	d02c      	beq.n	480 <_usb_d_cb_trans_done+0x140>
		ept->xfer.hdr.state  = USB_EP_S_ERROR;
     426:	0142      	lsls	r2, r0, #5
     428:	4b1a      	ldr	r3, [pc, #104]	; (494 <_usb_d_cb_trans_done+0x154>)
     42a:	189b      	adds	r3, r3, r2
     42c:	2206      	movs	r2, #6
     42e:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_ERROR;
     430:	70da      	strb	r2, [r3, #3]
     432:	e79c      	b.n	36e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_HALT;
     434:	4b17      	ldr	r3, [pc, #92]	; (494 <_usb_d_cb_trans_done+0x154>)
     436:	0142      	lsls	r2, r0, #5
     438:	1899      	adds	r1, r3, r2
     43a:	2002      	movs	r0, #2
     43c:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     43e:	5cd3      	ldrb	r3, [r2, r3]
     440:	2b00      	cmp	r3, #0
     442:	d005      	beq.n	450 <_usb_d_cb_trans_done+0x110>
			ept->xfer.hdr.state = USB_EP_S_HALTED;
     444:	0162      	lsls	r2, r4, #5
     446:	4b13      	ldr	r3, [pc, #76]	; (494 <_usb_d_cb_trans_done+0x154>)
     448:	189b      	adds	r3, r3, r2
     44a:	2205      	movs	r2, #5
     44c:	709a      	strb	r2, [r3, #2]
     44e:	e78e      	b.n	36e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     450:	2202      	movs	r2, #2
     452:	708a      	strb	r2, [r1, #2]
			_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     454:	2100      	movs	r1, #0
     456:	0028      	movs	r0, r5
     458:	4b0f      	ldr	r3, [pc, #60]	; (498 <_usb_d_cb_trans_done+0x158>)
     45a:	4798      	blx	r3
     45c:	e787      	b.n	36e <_usb_d_cb_trans_done+0x2e>
		ept->xfer.hdr.status = USB_XFER_ABORT;
     45e:	4b0d      	ldr	r3, [pc, #52]	; (494 <_usb_d_cb_trans_done+0x154>)
     460:	0142      	lsls	r2, r0, #5
     462:	1899      	adds	r1, r3, r2
     464:	2004      	movs	r0, #4
     466:	70c8      	strb	r0, [r1, #3]
		if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     468:	5cd3      	ldrb	r3, [r2, r3]
     46a:	2b00      	cmp	r3, #0
     46c:	d005      	beq.n	47a <_usb_d_cb_trans_done+0x13a>
		ept->xfer.hdr.state = USB_EP_S_IDLE;
     46e:	0162      	lsls	r2, r4, #5
     470:	4b08      	ldr	r3, [pc, #32]	; (494 <_usb_d_cb_trans_done+0x154>)
     472:	189b      	adds	r3, r3, r2
     474:	2201      	movs	r2, #1
     476:	709a      	strb	r2, [r3, #2]
     478:	e779      	b.n	36e <_usb_d_cb_trans_done+0x2e>
			ept->xfer.hdr.state = USB_EP_S_X_SETUP;
     47a:	2302      	movs	r3, #2
     47c:	708b      	strb	r3, [r1, #2]
			return;
     47e:	e77e      	b.n	37e <_usb_d_cb_trans_done+0x3e>
		ept->xfer.hdr.state  = USB_EP_S_DISABLED;
     480:	0142      	lsls	r2, r0, #5
     482:	4b04      	ldr	r3, [pc, #16]	; (494 <_usb_d_cb_trans_done+0x154>)
     484:	189b      	adds	r3, r3, r2
     486:	2200      	movs	r2, #0
     488:	709a      	strb	r2, [r3, #2]
		ept->xfer.hdr.status = USB_XFER_RESET;
     48a:	3205      	adds	r2, #5
     48c:	70da      	strb	r2, [r3, #3]
     48e:	e76e      	b.n	36e <_usb_d_cb_trans_done+0x2e>
     490:	000002c1 	.word	0x000002c1
     494:	2000006c 	.word	0x2000006c
     498:	0000161d 	.word	0x0000161d
     49c:	000017e9 	.word	0x000017e9

000004a0 <usb_d_cb_trans_setup>:
{
     4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a2:	46c6      	mov	lr, r8
     4a4:	b500      	push	{lr}
     4a6:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     4a8:	4b1d      	ldr	r3, [pc, #116]	; (520 <usb_d_cb_trans_setup+0x80>)
     4aa:	4798      	blx	r3
     4ac:	0006      	movs	r6, r0
	uint8_t *        req      = ept->xfer.req;
     4ae:	0145      	lsls	r5, r0, #5
     4b0:	350c      	adds	r5, #12
     4b2:	4b1c      	ldr	r3, [pc, #112]	; (524 <usb_d_cb_trans_setup+0x84>)
     4b4:	195d      	adds	r5, r3, r5
	uint8_t n = _usb_d_dev_ep_read_req(ep, req);
     4b6:	0029      	movs	r1, r5
     4b8:	0020      	movs	r0, r4
     4ba:	4b1b      	ldr	r3, [pc, #108]	; (528 <usb_d_cb_trans_setup+0x88>)
     4bc:	4798      	blx	r3
	if (n != 8) {
     4be:	b2c0      	uxtb	r0, r0
     4c0:	2808      	cmp	r0, #8
     4c2:	d00a      	beq.n	4da <usb_d_cb_trans_setup+0x3a>
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     4c4:	2101      	movs	r1, #1
     4c6:	0020      	movs	r0, r4
     4c8:	4d18      	ldr	r5, [pc, #96]	; (52c <usb_d_cb_trans_setup+0x8c>)
     4ca:	47a8      	blx	r5
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     4cc:	2080      	movs	r0, #128	; 0x80
     4ce:	4320      	orrs	r0, r4
     4d0:	2101      	movs	r1, #1
     4d2:	47a8      	blx	r5
}
     4d4:	bc04      	pop	{r2}
     4d6:	4690      	mov	r8, r2
     4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	_usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     4da:	2100      	movs	r1, #0
     4dc:	0020      	movs	r0, r4
     4de:	4b13      	ldr	r3, [pc, #76]	; (52c <usb_d_cb_trans_setup+0x8c>)
     4e0:	4698      	mov	r8, r3
     4e2:	4798      	blx	r3
	_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_CLR);
     4e4:	2780      	movs	r7, #128	; 0x80
     4e6:	4327      	orrs	r7, r4
     4e8:	2100      	movs	r1, #0
     4ea:	0038      	movs	r0, r7
     4ec:	47c0      	blx	r8
	ept->xfer.hdr.state = USB_EP_S_IDLE;
     4ee:	0172      	lsls	r2, r6, #5
     4f0:	4b0c      	ldr	r3, [pc, #48]	; (524 <usb_d_cb_trans_setup+0x84>)
     4f2:	189b      	adds	r3, r3, r2
     4f4:	2201      	movs	r2, #1
     4f6:	709a      	strb	r2, [r3, #2]
	if (!ept->callbacks.req(ep, req)) {
     4f8:	695b      	ldr	r3, [r3, #20]
     4fa:	0029      	movs	r1, r5
     4fc:	0020      	movs	r0, r4
     4fe:	4798      	blx	r3
     500:	2800      	cmp	r0, #0
     502:	d1e7      	bne.n	4d4 <usb_d_cb_trans_setup+0x34>
		ept->xfer.hdr.state = USB_EP_S_HALTED;
     504:	0176      	lsls	r6, r6, #5
     506:	4b07      	ldr	r3, [pc, #28]	; (524 <usb_d_cb_trans_setup+0x84>)
     508:	199e      	adds	r6, r3, r6
     50a:	2305      	movs	r3, #5
     50c:	70b3      	strb	r3, [r6, #2]
		_usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     50e:	2101      	movs	r1, #1
     510:	0020      	movs	r0, r4
     512:	4c06      	ldr	r4, [pc, #24]	; (52c <usb_d_cb_trans_setup+0x8c>)
     514:	47a0      	blx	r4
		_usb_d_dev_ep_stall(ep | USB_EP_DIR, USB_EP_STALL_SET);
     516:	2101      	movs	r1, #1
     518:	0038      	movs	r0, r7
     51a:	47a0      	blx	r4
     51c:	e7da      	b.n	4d4 <usb_d_cb_trans_setup+0x34>
     51e:	46c0      	nop			; (mov r8, r8)
     520:	000002c1 	.word	0x000002c1
     524:	2000006c 	.word	0x2000006c
     528:	0000177d 	.word	0x0000177d
     52c:	0000161d 	.word	0x0000161d

00000530 <usb_d_init>:

int32_t usb_d_init(void)
{
     530:	b510      	push	{r4, lr}
	int32_t rc = _usb_d_dev_init();
     532:	4b10      	ldr	r3, [pc, #64]	; (574 <usb_d_init+0x44>)
     534:	4798      	blx	r3
	uint8_t i;
	if (rc < 0) {
     536:	2800      	cmp	r0, #0
     538:	db1b      	blt.n	572 <usb_d_init+0x42>
		return rc;
	}
	memset(usb_d_inst.ep, 0x00, sizeof(struct usb_d_ep) * CONF_USB_D_NUM_EP_SP);
     53a:	4c0f      	ldr	r4, [pc, #60]	; (578 <usb_d_init+0x48>)
     53c:	2280      	movs	r2, #128	; 0x80
     53e:	2100      	movs	r1, #0
     540:	0020      	movs	r0, r4
     542:	4b0e      	ldr	r3, [pc, #56]	; (57c <usb_d_init+0x4c>)
     544:	4798      	blx	r3
     546:	0023      	movs	r3, r4
     548:	3480      	adds	r4, #128	; 0x80
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     54a:	21ff      	movs	r1, #255	; 0xff
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     54c:	4a0c      	ldr	r2, [pc, #48]	; (580 <usb_d_init+0x50>)
		usb_d_inst.ep[i].xfer.hdr.ep    = 0xFF;
     54e:	7059      	strb	r1, [r3, #1]
		usb_d_inst.ep[i].callbacks.req  = (usb_d_ep_cb_setup_t)usb_d_dummy_cb_false;
     550:	615a      	str	r2, [r3, #20]
		usb_d_inst.ep[i].callbacks.more = (usb_d_ep_cb_more_t)usb_d_dummy_cb_false;
     552:	619a      	str	r2, [r3, #24]
		usb_d_inst.ep[i].callbacks.xfer = (usb_d_ep_cb_xfer_t)usb_d_dummy_cb_false;
     554:	61da      	str	r2, [r3, #28]
     556:	3320      	adds	r3, #32
	for (i = 0; i < CONF_USB_D_NUM_EP_SP; i++) {
     558:	42a3      	cmp	r3, r4
     55a:	d1f8      	bne.n	54e <usb_d_init+0x1e>
	}
	/* Handles device driver endpoint callbacks to build transfer. */
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_SETUP, (FUNC_PTR)usb_d_cb_trans_setup);
     55c:	4909      	ldr	r1, [pc, #36]	; (584 <usb_d_init+0x54>)
     55e:	2000      	movs	r0, #0
     560:	4c09      	ldr	r4, [pc, #36]	; (588 <usb_d_init+0x58>)
     562:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_MORE, (FUNC_PTR)usb_d_cb_trans_more);
     564:	4909      	ldr	r1, [pc, #36]	; (58c <usb_d_init+0x5c>)
     566:	2001      	movs	r0, #1
     568:	47a0      	blx	r4
	_usb_d_dev_register_ep_callback(USB_D_DEV_EP_CB_DONE, (FUNC_PTR)_usb_d_cb_trans_done);
     56a:	4909      	ldr	r1, [pc, #36]	; (590 <usb_d_init+0x60>)
     56c:	2002      	movs	r0, #2
     56e:	47a0      	blx	r4
	return ERR_NONE;
     570:	2000      	movs	r0, #0
}
     572:	bd10      	pop	{r4, pc}
     574:	00001045 	.word	0x00001045
     578:	2000006c 	.word	0x2000006c
     57c:	00002dbf 	.word	0x00002dbf
     580:	00000305 	.word	0x00000305
     584:	000004a1 	.word	0x000004a1
     588:	00001a21 	.word	0x00001a21
     58c:	00000309 	.word	0x00000309
     590:	00000341 	.word	0x00000341

00000594 <usb_d_register_callback>:
{
	_usb_d_dev_deinit();
}

void usb_d_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
     594:	b510      	push	{r4, lr}
	/* Directly uses device driver callback. */
	_usb_d_dev_register_callback(type, func);
     596:	4b01      	ldr	r3, [pc, #4]	; (59c <usb_d_register_callback+0x8>)
     598:	4798      	blx	r3
}
     59a:	bd10      	pop	{r4, pc}
     59c:	000019fd 	.word	0x000019fd

000005a0 <usb_d_set_address>:
{
	return _usb_d_dev_get_uframe_n();
}

void usb_d_set_address(const uint8_t addr)
{
     5a0:	b510      	push	{r4, lr}
	_usb_d_dev_set_address(addr);
     5a2:	4b01      	ldr	r3, [pc, #4]	; (5a8 <usb_d_set_address+0x8>)
     5a4:	4798      	blx	r3
}
     5a6:	bd10      	pop	{r4, pc}
     5a8:	00001131 	.word	0x00001131

000005ac <usb_d_ep_init>:
{
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
}

int32_t usb_d_ep_init(const uint8_t ep, const uint8_t attr, const uint16_t max_pkt_size)
{
     5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5ae:	0005      	movs	r5, r0
     5b0:	000e      	movs	r6, r1
     5b2:	0017      	movs	r7, r2
	int32_t          rc;
	int8_t           ep_index = _usb_d_find_ep(ep);
     5b4:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <usb_d_ep_init+0x48>)
     5b6:	4798      	blx	r3
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index >= 0) {
     5b8:	2800      	cmp	r0, #0
     5ba:	da14      	bge.n	5e6 <usb_d_ep_init+0x3a>
		return -USB_ERR_REDO;
	} else {
		ep_index = _usb_d_find_ep(0xFF);
     5bc:	20ff      	movs	r0, #255	; 0xff
     5be:	4b0d      	ldr	r3, [pc, #52]	; (5f4 <usb_d_ep_init+0x48>)
     5c0:	4798      	blx	r3
     5c2:	1e04      	subs	r4, r0, #0
		if (ep_index < 0) {
     5c4:	db12      	blt.n	5ec <usb_d_ep_init+0x40>
			return -USB_ERR_ALLOC_FAIL;
		}
		ept = &usb_d_inst.ep[ep_index];
	}
	rc = _usb_d_dev_ep_init(ep, attr, max_pkt_size);
     5c6:	003a      	movs	r2, r7
     5c8:	0031      	movs	r1, r6
     5ca:	0028      	movs	r0, r5
     5cc:	4b0a      	ldr	r3, [pc, #40]	; (5f8 <usb_d_ep_init+0x4c>)
     5ce:	4798      	blx	r3
	if (rc < 0) {
     5d0:	2800      	cmp	r0, #0
     5d2:	db07      	blt.n	5e4 <usb_d_ep_init+0x38>
		return rc;
	}
	ept->xfer.hdr.ep   = ep;
     5d4:	4a09      	ldr	r2, [pc, #36]	; (5fc <usb_d_ep_init+0x50>)
     5d6:	0164      	lsls	r4, r4, #5
     5d8:	1913      	adds	r3, r2, r4
     5da:	705d      	strb	r5, [r3, #1]
	ept->xfer.hdr.type = attr & USB_EP_XTYPE_MASK;
     5dc:	2303      	movs	r3, #3
     5de:	401e      	ands	r6, r3
     5e0:	54a6      	strb	r6, [r4, r2]
	return ERR_NONE;
     5e2:	2000      	movs	r0, #0
}
     5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -USB_ERR_REDO;
     5e6:	2014      	movs	r0, #20
     5e8:	4240      	negs	r0, r0
     5ea:	e7fb      	b.n	5e4 <usb_d_ep_init+0x38>
			return -USB_ERR_ALLOC_FAIL;
     5ec:	2015      	movs	r0, #21
     5ee:	4240      	negs	r0, r0
     5f0:	e7f8      	b.n	5e4 <usb_d_ep_init+0x38>
     5f2:	46c0      	nop			; (mov r8, r8)
     5f4:	000002c1 	.word	0x000002c1
     5f8:	0000113d 	.word	0x0000113d
     5fc:	2000006c 	.word	0x2000006c

00000600 <usb_d_ep0_init>:
{
     600:	b510      	push	{r4, lr}
	return usb_d_ep_init(0, USB_EP_XTYPE_CTRL, max_pkt_size);
     602:	b282      	uxth	r2, r0
     604:	2100      	movs	r1, #0
     606:	2000      	movs	r0, #0
     608:	4b01      	ldr	r3, [pc, #4]	; (610 <usb_d_ep0_init+0x10>)
     60a:	4798      	blx	r3
}
     60c:	bd10      	pop	{r4, pc}
     60e:	46c0      	nop			; (mov r8, r8)
     610:	000005ad 	.word	0x000005ad

00000614 <usb_d_ep_deinit>:

void usb_d_ep_deinit(const uint8_t ep)
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	0005      	movs	r5, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     618:	4b06      	ldr	r3, [pc, #24]	; (634 <usb_d_ep_deinit+0x20>)
     61a:	4798      	blx	r3
     61c:	1e04      	subs	r4, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	if (ep_index < 0) {
     61e:	db07      	blt.n	630 <usb_d_ep_deinit+0x1c>
		return;
	}
	_usb_d_dev_ep_deinit(ep);
     620:	0028      	movs	r0, r5
     622:	4b05      	ldr	r3, [pc, #20]	; (638 <usb_d_ep_deinit+0x24>)
     624:	4798      	blx	r3
	ept->xfer.hdr.ep = 0xFF;
     626:	0164      	lsls	r4, r4, #5
     628:	4b04      	ldr	r3, [pc, #16]	; (63c <usb_d_ep_deinit+0x28>)
     62a:	191c      	adds	r4, r3, r4
     62c:	23ff      	movs	r3, #255	; 0xff
     62e:	7063      	strb	r3, [r4, #1]
}
     630:	bd70      	pop	{r4, r5, r6, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	000002c1 	.word	0x000002c1
     638:	00001269 	.word	0x00001269
     63c:	2000006c 	.word	0x2000006c

00000640 <usb_d_ep_enable>:

int32_t usb_d_ep_enable(const uint8_t ep)
{
     640:	b570      	push	{r4, r5, r6, lr}
     642:	0004      	movs	r4, r0
	int8_t           ep_index = _usb_d_find_ep(ep);
     644:	4b0e      	ldr	r3, [pc, #56]	; (680 <usb_d_ep_enable+0x40>)
     646:	4798      	blx	r3
     648:	1e05      	subs	r5, r0, #0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	int32_t          rc;
	if (ep_index < 0) {
     64a:	db15      	blt.n	678 <usb_d_ep_enable+0x38>
		return -USB_ERR_PARAM;
	}
	ept->xfer.hdr.state = (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) ? USB_EP_S_X_SETUP : USB_EP_S_IDLE;
     64c:	0143      	lsls	r3, r0, #5
     64e:	4a0d      	ldr	r2, [pc, #52]	; (684 <usb_d_ep_enable+0x44>)
     650:	5c9b      	ldrb	r3, [r3, r2]
     652:	425a      	negs	r2, r3
     654:	4153      	adcs	r3, r2
     656:	3301      	adds	r3, #1
     658:	0141      	lsls	r1, r0, #5
     65a:	4a0a      	ldr	r2, [pc, #40]	; (684 <usb_d_ep_enable+0x44>)
     65c:	1852      	adds	r2, r2, r1
     65e:	7093      	strb	r3, [r2, #2]
	rc                  = _usb_d_dev_ep_enable(ep);
     660:	0020      	movs	r0, r4
     662:	4b09      	ldr	r3, [pc, #36]	; (688 <usb_d_ep_enable+0x48>)
     664:	4798      	blx	r3
	if (rc < 0) {
     666:	2800      	cmp	r0, #0
     668:	db00      	blt.n	66c <usb_d_ep_enable+0x2c>
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
	}
	return rc;
}
     66a:	bd70      	pop	{r4, r5, r6, pc}
		ept->xfer.hdr.state = USB_EP_S_DISABLED;
     66c:	016d      	lsls	r5, r5, #5
     66e:	4b05      	ldr	r3, [pc, #20]	; (684 <usb_d_ep_enable+0x44>)
     670:	195d      	adds	r5, r3, r5
     672:	2300      	movs	r3, #0
     674:	70ab      	strb	r3, [r5, #2]
     676:	e7f8      	b.n	66a <usb_d_ep_enable+0x2a>
		return -USB_ERR_PARAM;
     678:	2012      	movs	r0, #18
     67a:	4240      	negs	r0, r0
     67c:	e7f5      	b.n	66a <usb_d_ep_enable+0x2a>
     67e:	46c0      	nop			; (mov r8, r8)
     680:	000002c1 	.word	0x000002c1
     684:	2000006c 	.word	0x2000006c
     688:	00001339 	.word	0x00001339

0000068c <usb_d_ep_transfer>:
	}
	return usb_d_inst.ep[ep_index].xfer.req;
}

int32_t usb_d_ep_transfer(const struct usb_d_transfer *xfer)
{
     68c:	b5f0      	push	{r4, r5, r6, r7, lr}
     68e:	46d6      	mov	lr, sl
     690:	464f      	mov	r7, r9
     692:	4646      	mov	r6, r8
     694:	b5c0      	push	{r6, r7, lr}
     696:	b086      	sub	sp, #24
     698:	0004      	movs	r4, r0
	int8_t                ep_index = _usb_d_find_ep(xfer->ep);
     69a:	7a07      	ldrb	r7, [r0, #8]
     69c:	0038      	movs	r0, r7
     69e:	4b40      	ldr	r3, [pc, #256]	; (7a0 <usb_d_ep_transfer+0x114>)
     6a0:	4798      	blx	r3
     6a2:	0005      	movs	r5, r0
	struct usb_d_ep *     ept      = &usb_d_inst.ep[ep_index];
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     6a4:	7a66      	ldrb	r6, [r4, #9]
	uint32_t              len = xfer->size;
     6a6:	6863      	ldr	r3, [r4, #4]
     6a8:	4698      	mov	r8, r3
	int32_t               rc;
	volatile uint8_t      state;
	volatile hal_atomic_t flags;

	if (ep_index < 0) {
     6aa:	2800      	cmp	r0, #0
     6ac:	da00      	bge.n	6b0 <usb_d_ep_transfer+0x24>
     6ae:	e071      	b.n	794 <usb_d_ep_transfer+0x108>
		return -USB_ERR_PARAM;
	}

	atomic_enter_critical(&flags);
     6b0:	a804      	add	r0, sp, #16
     6b2:	4b3c      	ldr	r3, [pc, #240]	; (7a4 <usb_d_ep_transfer+0x118>)
     6b4:	4798      	blx	r3
	state = ept->xfer.hdr.state;
     6b6:	016a      	lsls	r2, r5, #5
     6b8:	4b3b      	ldr	r3, [pc, #236]	; (7a8 <usb_d_ep_transfer+0x11c>)
     6ba:	189b      	adds	r3, r3, r2
     6bc:	789a      	ldrb	r2, [r3, #2]
     6be:	2317      	movs	r3, #23
     6c0:	446b      	add	r3, sp
     6c2:	701a      	strb	r2, [r3, #0]
	if (state == USB_EP_S_IDLE) {
     6c4:	781b      	ldrb	r3, [r3, #0]
     6c6:	2b01      	cmp	r3, #1
     6c8:	d010      	beq.n	6ec <usb_d_ep_transfer+0x60>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
		atomic_leave_critical(&flags);
	} else {
		atomic_leave_critical(&flags);
     6ca:	a804      	add	r0, sp, #16
     6cc:	4b37      	ldr	r3, [pc, #220]	; (7ac <usb_d_ep_transfer+0x120>)
     6ce:	4798      	blx	r3
		switch (state) {
     6d0:	2317      	movs	r3, #23
     6d2:	446b      	add	r3, sp
     6d4:	781b      	ldrb	r3, [r3, #0]
     6d6:	b2db      	uxtb	r3, r3
     6d8:	2b05      	cmp	r3, #5
     6da:	d05e      	beq.n	79a <usb_d_ep_transfer+0x10e>
     6dc:	2b06      	cmp	r3, #6
     6de:	d023      	beq.n	728 <usb_d_ep_transfer+0x9c>
		case USB_EP_S_ERROR:
			return -USB_ERROR;
		case USB_EP_S_DISABLED:
			return -USB_ERR_FUNC;
		default: /* USB_EP_S_X_xxxx  */
			return USB_BUSY;
     6e0:	2001      	movs	r0, #1
		switch (state) {
     6e2:	2b00      	cmp	r3, #0
     6e4:	d13c      	bne.n	760 <usb_d_ep_transfer+0xd4>
			return -USB_ERR_FUNC;
     6e6:	2013      	movs	r0, #19
     6e8:	4240      	negs	r0, r0
     6ea:	e039      	b.n	760 <usb_d_ep_transfer+0xd4>
		ept->xfer.hdr.state = USB_EP_S_X_DATA;
     6ec:	4b2e      	ldr	r3, [pc, #184]	; (7a8 <usb_d_ep_transfer+0x11c>)
     6ee:	4699      	mov	r9, r3
     6f0:	016b      	lsls	r3, r5, #5
     6f2:	469a      	mov	sl, r3
     6f4:	464b      	mov	r3, r9
     6f6:	4453      	add	r3, sl
     6f8:	2203      	movs	r2, #3
     6fa:	709a      	strb	r2, [r3, #2]
		atomic_leave_critical(&flags);
     6fc:	a804      	add	r0, sp, #16
     6fe:	4b2b      	ldr	r3, [pc, #172]	; (7ac <usb_d_ep_transfer+0x120>)
     700:	4798      	blx	r3
		}
	}

	if (ept->xfer.hdr.type == USB_EP_XTYPE_CTRL) {
     702:	464b      	mov	r3, r9
     704:	4652      	mov	r2, sl
     706:	5cd3      	ldrb	r3, [r2, r3]
     708:	2b00      	cmp	r3, #0
     70a:	d010      	beq.n	72e <usb_d_ep_transfer+0xa2>
				zlp = false;
			}
		}
	}

	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     70c:	7a23      	ldrb	r3, [r4, #8]
	bool                  dir = USB_EP_GET_DIR(xfer->ep), zlp = xfer->zlp;
     70e:	1e72      	subs	r2, r6, #1
     710:	4196      	sbcs	r6, r2
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     712:	b2f6      	uxtb	r6, r6
	struct usb_d_transfer trans
     714:	6822      	ldr	r2, [r4, #0]
     716:	9201      	str	r2, [sp, #4]
     718:	4642      	mov	r2, r8
     71a:	9202      	str	r2, [sp, #8]
     71c:	b27f      	sxtb	r7, r7
     71e:	2f00      	cmp	r7, #0
     720:	db17      	blt.n	752 <usb_d_ep_transfer+0xc6>
     722:	220f      	movs	r2, #15
     724:	4013      	ands	r3, r2
     726:	e016      	b.n	756 <usb_d_ep_transfer+0xca>
			return -USB_ERROR;
     728:	2010      	movs	r0, #16
     72a:	4240      	negs	r0, r0
     72c:	e018      	b.n	760 <usb_d_ep_transfer+0xd4>
		uint16_t req_len = USB_GET_wLength(ept->xfer.req);
     72e:	016b      	lsls	r3, r5, #5
     730:	4a1d      	ldr	r2, [pc, #116]	; (7a8 <usb_d_ep_transfer+0x11c>)
     732:	18d2      	adds	r2, r2, r3
     734:	7cd1      	ldrb	r1, [r2, #19]
     736:	0209      	lsls	r1, r1, #8
     738:	7c93      	ldrb	r3, [r2, #18]
     73a:	185b      	adds	r3, r3, r1
     73c:	b29b      	uxth	r3, r3
		if (req_len == 0) {
     73e:	2b00      	cmp	r3, #0
     740:	d114      	bne.n	76c <usb_d_ep_transfer+0xe0>
			ept->xfer.hdr.state = USB_EP_S_X_STATUS;
     742:	2304      	movs	r3, #4
     744:	7093      	strb	r3, [r2, #2]
			len                 = 0;
     746:	2200      	movs	r2, #0
			zlp                 = true;
     748:	2601      	movs	r6, #1
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     74a:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     74c:	6821      	ldr	r1, [r4, #0]
     74e:	9101      	str	r1, [sp, #4]
     750:	9202      	str	r2, [sp, #8]
     752:	2280      	movs	r2, #128	; 0x80
     754:	4313      	orrs	r3, r2
     756:	a801      	add	r0, sp, #4
     758:	7203      	strb	r3, [r0, #8]
     75a:	7246      	strb	r6, [r0, #9]
	return _usb_d_dev_ep_trans(&trans);
     75c:	4b14      	ldr	r3, [pc, #80]	; (7b0 <usb_d_ep_transfer+0x124>)
     75e:	4798      	blx	r3
	return rc;
}
     760:	b006      	add	sp, #24
     762:	bc1c      	pop	{r2, r3, r4}
     764:	4690      	mov	r8, r2
     766:	4699      	mov	r9, r3
     768:	46a2      	mov	sl, r4
     76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     76c:	4642      	mov	r2, r8
     76e:	429a      	cmp	r2, r3
     770:	d900      	bls.n	774 <usb_d_ep_transfer+0xe8>
     772:	001a      	movs	r2, r3
			dir = (USB_GET_bmRequestType(ept->xfer.req) & USB_REQ_TYPE_IN);
     774:	016d      	lsls	r5, r5, #5
     776:	490c      	ldr	r1, [pc, #48]	; (7a8 <usb_d_ep_transfer+0x11c>)
     778:	194d      	adds	r5, r1, r5
			if (dir) {
     77a:	7b29      	ldrb	r1, [r5, #12]
     77c:	297f      	cmp	r1, #127	; 0x7f
     77e:	d805      	bhi.n	78c <usb_d_ep_transfer+0x100>
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     780:	7a23      	ldrb	r3, [r4, #8]
	struct usb_d_transfer trans
     782:	6821      	ldr	r1, [r4, #0]
     784:	9101      	str	r1, [sp, #4]
     786:	9202      	str	r2, [sp, #8]
	rc = _usb_d_trans(xfer->ep, dir, xfer->buf, len, zlp);
     788:	2600      	movs	r6, #0
     78a:	e7ca      	b.n	722 <usb_d_ep_transfer+0x96>
				zlp = (req_len > len);
     78c:	429a      	cmp	r2, r3
     78e:	41b6      	sbcs	r6, r6
     790:	4276      	negs	r6, r6
     792:	e7da      	b.n	74a <usb_d_ep_transfer+0xbe>
		return -USB_ERR_PARAM;
     794:	2012      	movs	r0, #18
     796:	4240      	negs	r0, r0
     798:	e7e2      	b.n	760 <usb_d_ep_transfer+0xd4>
			return USB_HALTED;
     79a:	2002      	movs	r0, #2
     79c:	e7e0      	b.n	760 <usb_d_ep_transfer+0xd4>
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	000002c1 	.word	0x000002c1
     7a4:	000002a5 	.word	0x000002a5
     7a8:	2000006c 	.word	0x2000006c
     7ac:	000002b3 	.word	0x000002b3
     7b0:	000017e9 	.word	0x000017e9

000007b4 <usb_d_ep_halt>:
	}
	return ERR_NONE;
}

int32_t usb_d_ep_halt(const uint8_t ep, const enum usb_ep_halt_ctrl ctrl)
{
     7b4:	b570      	push	{r4, r5, r6, lr}
     7b6:	0004      	movs	r4, r0
	if (ctrl == USB_EP_HALT_CLR) {
     7b8:	2900      	cmp	r1, #0
     7ba:	d005      	beq.n	7c8 <usb_d_ep_halt+0x14>
		return _usb_d_ep_halt_clr(ep);
	} else if (ctrl == USB_EP_HALT_SET) {
     7bc:	2901      	cmp	r1, #1
     7be:	d021      	beq.n	804 <STACK_SIZE+0x4>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
	} else {
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_GET);
     7c0:	2102      	movs	r1, #2
     7c2:	4b13      	ldr	r3, [pc, #76]	; (810 <STACK_SIZE+0x10>)
     7c4:	4798      	blx	r3
	}
}
     7c6:	bd70      	pop	{r4, r5, r6, pc}
	int8_t           ep_index = _usb_d_find_ep(ep);
     7c8:	4b12      	ldr	r3, [pc, #72]	; (814 <STACK_SIZE+0x14>)
     7ca:	4798      	blx	r3
     7cc:	1e05      	subs	r5, r0, #0
	if (ep_index < 0) {
     7ce:	db1c      	blt.n	80a <STACK_SIZE+0xa>
	if (_usb_d_dev_ep_stall(ep, USB_EP_STALL_GET)) {
     7d0:	2102      	movs	r1, #2
     7d2:	0020      	movs	r0, r4
     7d4:	4b0e      	ldr	r3, [pc, #56]	; (810 <STACK_SIZE+0x10>)
     7d6:	4798      	blx	r3
     7d8:	2800      	cmp	r0, #0
     7da:	d0f4      	beq.n	7c6 <usb_d_ep_halt+0x12>
		rc = _usb_d_dev_ep_stall(ep, USB_EP_STALL_CLR);
     7dc:	2100      	movs	r1, #0
     7de:	0020      	movs	r0, r4
     7e0:	4b0b      	ldr	r3, [pc, #44]	; (810 <STACK_SIZE+0x10>)
     7e2:	4798      	blx	r3
		if (rc < 0) {
     7e4:	2800      	cmp	r0, #0
     7e6:	dbee      	blt.n	7c6 <usb_d_ep_halt+0x12>
		ept->xfer.hdr.state  = USB_EP_S_IDLE;
     7e8:	016d      	lsls	r5, r5, #5
     7ea:	4b0b      	ldr	r3, [pc, #44]	; (818 <STACK_SIZE+0x18>)
     7ec:	195d      	adds	r5, r3, r5
     7ee:	2301      	movs	r3, #1
     7f0:	70ab      	strb	r3, [r5, #2]
		ept->xfer.hdr.status = USB_XFER_UNHALT;
     7f2:	3302      	adds	r3, #2
     7f4:	70eb      	strb	r3, [r5, #3]
		ept->callbacks.xfer(ep, USB_XFER_UNHALT, NULL);
     7f6:	69eb      	ldr	r3, [r5, #28]
     7f8:	2200      	movs	r2, #0
     7fa:	2103      	movs	r1, #3
     7fc:	0020      	movs	r0, r4
     7fe:	4798      	blx	r3
	return ERR_NONE;
     800:	2000      	movs	r0, #0
     802:	e7e0      	b.n	7c6 <usb_d_ep_halt+0x12>
		return _usb_d_dev_ep_stall(ep, USB_EP_STALL_SET);
     804:	4b02      	ldr	r3, [pc, #8]	; (810 <STACK_SIZE+0x10>)
     806:	4798      	blx	r3
     808:	e7dd      	b.n	7c6 <usb_d_ep_halt+0x12>
		return -USB_ERR_PARAM;
     80a:	2012      	movs	r0, #18
     80c:	4240      	negs	r0, r0
     80e:	e7da      	b.n	7c6 <usb_d_ep_halt+0x12>
     810:	0000161d 	.word	0x0000161d
     814:	000002c1 	.word	0x000002c1
     818:	2000006c 	.word	0x2000006c

0000081c <usb_d_ep_register_callback>:

void usb_d_ep_register_callback(const uint8_t ep, const enum usb_d_ep_cb_type type, const FUNC_PTR func)
{
     81c:	b570      	push	{r4, r5, r6, lr}
     81e:	000d      	movs	r5, r1
     820:	0014      	movs	r4, r2
	int8_t           ep_index = _usb_d_find_ep(ep);
     822:	4b0f      	ldr	r3, [pc, #60]	; (860 <usb_d_ep_register_callback+0x44>)
     824:	4798      	blx	r3
     826:	0003      	movs	r3, r0
	struct usb_d_ep *ept      = &usb_d_inst.ep[ep_index];
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     828:	1e22      	subs	r2, r4, #0
     82a:	d008      	beq.n	83e <usb_d_ep_register_callback+0x22>
	if (ep_index < 0) {
     82c:	2b00      	cmp	r3, #0
     82e:	db05      	blt.n	83c <usb_d_ep_register_callback+0x20>
		return;
	}
	switch (type) {
     830:	2d01      	cmp	r5, #1
     832:	d00b      	beq.n	84c <usb_d_ep_register_callback+0x30>
     834:	2d00      	cmp	r5, #0
     836:	d004      	beq.n	842 <usb_d_ep_register_callback+0x26>
     838:	2d02      	cmp	r5, #2
     83a:	d00c      	beq.n	856 <usb_d_ep_register_callback+0x3a>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
		break;
	default:
		break;
	}
}
     83c:	bd70      	pop	{r4, r5, r6, pc}
	FUNC_PTR         f        = func ? (FUNC_PTR)func : (FUNC_PTR)usb_d_dummy_cb_false;
     83e:	4a09      	ldr	r2, [pc, #36]	; (864 <usb_d_ep_register_callback+0x48>)
     840:	e7f4      	b.n	82c <usb_d_ep_register_callback+0x10>
		ept->callbacks.req = (usb_d_ep_cb_setup_t)f;
     842:	0140      	lsls	r0, r0, #5
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <usb_d_ep_register_callback+0x4c>)
     846:	1818      	adds	r0, r3, r0
     848:	6142      	str	r2, [r0, #20]
		break;
     84a:	e7f7      	b.n	83c <usb_d_ep_register_callback+0x20>
		ept->callbacks.more = (usb_d_ep_cb_more_t)f;
     84c:	0140      	lsls	r0, r0, #5
     84e:	4b06      	ldr	r3, [pc, #24]	; (868 <usb_d_ep_register_callback+0x4c>)
     850:	1818      	adds	r0, r3, r0
     852:	6182      	str	r2, [r0, #24]
		break;
     854:	e7f2      	b.n	83c <usb_d_ep_register_callback+0x20>
		ept->callbacks.xfer = (usb_d_ep_cb_xfer_t)f;
     856:	0140      	lsls	r0, r0, #5
     858:	4b03      	ldr	r3, [pc, #12]	; (868 <usb_d_ep_register_callback+0x4c>)
     85a:	1818      	adds	r0, r3, r0
     85c:	61c2      	str	r2, [r0, #28]
		break;
     85e:	e7ed      	b.n	83c <usb_d_ep_register_callback+0x20>
     860:	000002c1 	.word	0x000002c1
     864:	00000305 	.word	0x00000305
     868:	2000006c 	.word	0x2000006c

0000086c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     86c:	2800      	cmp	r0, #0
     86e:	d100      	bne.n	872 <assert+0x6>
		__asm("BKPT #0");
     870:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     872:	4770      	bx	lr

00000874 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     874:	6803      	ldr	r3, [r0, #0]
     876:	2b00      	cmp	r3, #0
     878:	d00a      	beq.n	890 <is_list_element+0x1c>
		if (it == element) {
     87a:	428b      	cmp	r3, r1
     87c:	d00a      	beq.n	894 <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     87e:	681b      	ldr	r3, [r3, #0]
     880:	2b00      	cmp	r3, #0
     882:	d003      	beq.n	88c <is_list_element+0x18>
		if (it == element) {
     884:	4299      	cmp	r1, r3
     886:	d1fa      	bne.n	87e <is_list_element+0xa>
			return true;
     888:	2001      	movs	r0, #1
     88a:	e000      	b.n	88e <is_list_element+0x1a>
		}
	}

	return false;
     88c:	2000      	movs	r0, #0
}
     88e:	4770      	bx	lr
	return false;
     890:	2000      	movs	r0, #0
     892:	e7fc      	b.n	88e <is_list_element+0x1a>
			return true;
     894:	2001      	movs	r0, #1
     896:	e7fa      	b.n	88e <is_list_element+0x1a>

00000898 <list_insert_at_end>:

/**
 * \brief Insert an element at list end
 */
void list_insert_at_end(struct list_descriptor *const list, void *const element)
{
     898:	b570      	push	{r4, r5, r6, lr}
     89a:	0005      	movs	r5, r0
     89c:	000e      	movs	r6, r1
	struct list_element *it = list->head;
     89e:	6804      	ldr	r4, [r0, #0]

	ASSERT(!is_list_element(list, element));
     8a0:	4b0a      	ldr	r3, [pc, #40]	; (8cc <list_insert_at_end+0x34>)
     8a2:	4798      	blx	r3
     8a4:	2301      	movs	r3, #1
     8a6:	4058      	eors	r0, r3
     8a8:	b2c0      	uxtb	r0, r0
     8aa:	224f      	movs	r2, #79	; 0x4f
     8ac:	4908      	ldr	r1, [pc, #32]	; (8d0 <list_insert_at_end+0x38>)
     8ae:	4b09      	ldr	r3, [pc, #36]	; (8d4 <list_insert_at_end+0x3c>)
     8b0:	4798      	blx	r3

	if (!list->head) {
     8b2:	682b      	ldr	r3, [r5, #0]
     8b4:	2b00      	cmp	r3, #0
     8b6:	d103      	bne.n	8c0 <list_insert_at_end+0x28>
		list->head                             = (struct list_element *)element;
     8b8:	602e      	str	r6, [r5, #0]
		((struct list_element *)element)->next = NULL;
     8ba:	6033      	str	r3, [r6, #0]
		return;
     8bc:	e005      	b.n	8ca <list_insert_at_end+0x32>
	}

	while (it->next) {
		it = it->next;
     8be:	001c      	movs	r4, r3
	while (it->next) {
     8c0:	6823      	ldr	r3, [r4, #0]
     8c2:	2b00      	cmp	r3, #0
     8c4:	d1fb      	bne.n	8be <list_insert_at_end+0x26>
	}
	it->next                               = (struct list_element *)element;
     8c6:	6026      	str	r6, [r4, #0]
	((struct list_element *)element)->next = NULL;
     8c8:	6033      	str	r3, [r6, #0]
}
     8ca:	bd70      	pop	{r4, r5, r6, pc}
     8cc:	00000875 	.word	0x00000875
     8d0:	00002dd0 	.word	0x00002dd0
     8d4:	0000086d 	.word	0x0000086d

000008d8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8d8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     8da:	4b09      	ldr	r3, [pc, #36]	; (900 <_init_chip+0x28>)
     8dc:	685a      	ldr	r2, [r3, #4]
     8de:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
     8e0:	2002      	movs	r0, #2
     8e2:	4b08      	ldr	r3, [pc, #32]	; (904 <_init_chip+0x2c>)
     8e4:	4798      	blx	r3

	_osc32kctrl_init_sources();
     8e6:	4b08      	ldr	r3, [pc, #32]	; (908 <_init_chip+0x30>)
     8e8:	4798      	blx	r3
	_oscctrl_init_sources();
     8ea:	4b08      	ldr	r3, [pc, #32]	; (90c <_init_chip+0x34>)
     8ec:	4798      	blx	r3
	_mclk_init();
     8ee:	4b08      	ldr	r3, [pc, #32]	; (910 <_init_chip+0x38>)
     8f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     8f2:	4b08      	ldr	r3, [pc, #32]	; (914 <_init_chip+0x3c>)
     8f4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     8f6:	20ff      	movs	r0, #255	; 0xff
     8f8:	4b07      	ldr	r3, [pc, #28]	; (918 <_init_chip+0x40>)
     8fa:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     8fc:	bd10      	pop	{r4, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	41004000 	.word	0x41004000
     904:	000009a7 	.word	0x000009a7
     908:	00000955 	.word	0x00000955
     90c:	0000096d 	.word	0x0000096d
     910:	00000941 	.word	0x00000941
     914:	000009a5 	.word	0x000009a5
     918:	0000091d 	.word	0x0000091d

0000091c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     91c:	07c3      	lsls	r3, r0, #31
     91e:	d507      	bpl.n	930 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     920:	4a04      	ldr	r2, [pc, #16]	; (934 <_gclk_init_generators_by_fref+0x18>)
     922:	4b05      	ldr	r3, [pc, #20]	; (938 <_gclk_init_generators_by_fref+0x1c>)
     924:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     926:	0019      	movs	r1, r3
     928:	4a04      	ldr	r2, [pc, #16]	; (93c <_gclk_init_generators_by_fref+0x20>)
     92a:	684b      	ldr	r3, [r1, #4]
     92c:	4213      	tst	r3, r2
     92e:	d1fc      	bne.n	92a <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     930:	4770      	bx	lr
     932:	46c0      	nop			; (mov r8, r8)
     934:	00010106 	.word	0x00010106
     938:	40001800 	.word	0x40001800
     93c:	000007fd 	.word	0x000007fd

00000940 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
     940:	4b03      	ldr	r3, [pc, #12]	; (950 <_mclk_init+0x10>)
     942:	2208      	movs	r2, #8
     944:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
     946:	3a04      	subs	r2, #4
     948:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
     94a:	3a03      	subs	r2, #3
     94c:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     94e:	4770      	bx	lr
     950:	40000400 	.word	0x40000400

00000954 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     954:	4b04      	ldr	r3, [pc, #16]	; (968 <_osc32kctrl_init_sources+0x14>)
     956:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     958:	21f8      	movs	r1, #248	; 0xf8
     95a:	0149      	lsls	r1, r1, #5
     95c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     95e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     960:	2201      	movs	r2, #1
     962:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     964:	4770      	bx	lr
     966:	46c0      	nop			; (mov r8, r8)
     968:	40001000 	.word	0x40001000

0000096c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
     96c:	2282      	movs	r2, #130	; 0x82
     96e:	4b0c      	ldr	r3, [pc, #48]	; (9a0 <_oscctrl_init_sources+0x34>)
     970:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     972:	0018      	movs	r0, r3
     974:	2138      	movs	r1, #56	; 0x38
     976:	3a80      	subs	r2, #128	; 0x80
     978:	5c43      	ldrb	r3, [r0, r1]
     97a:	4213      	tst	r3, r2
     97c:	d1fc      	bne.n	978 <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
     97e:	4908      	ldr	r1, [pc, #32]	; (9a0 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
     980:	2210      	movs	r2, #16
     982:	68cb      	ldr	r3, [r1, #12]
     984:	421a      	tst	r2, r3
     986:	d0fc      	beq.n	982 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
     988:	4a05      	ldr	r2, [pc, #20]	; (9a0 <_oscctrl_init_sources+0x34>)
     98a:	7d13      	ldrb	r3, [r2, #20]
     98c:	2180      	movs	r1, #128	; 0x80
     98e:	430b      	orrs	r3, r1
     990:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
     992:	0010      	movs	r0, r2
     994:	3948      	subs	r1, #72	; 0x48
     996:	220e      	movs	r2, #14
     998:	5c43      	ldrb	r3, [r0, r1]
     99a:	4213      	tst	r3, r2
     99c:	d1fc      	bne.n	998 <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     99e:	4770      	bx	lr
     9a0:	40000c00 	.word	0x40000c00

000009a4 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
     9a4:	4770      	bx	lr

000009a6 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
     9a6:	2380      	movs	r3, #128	; 0x80
     9a8:	05db      	lsls	r3, r3, #23
     9aa:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
     9ac:	2203      	movs	r2, #3
     9ae:	4013      	ands	r3, r2
     9b0:	4298      	cmp	r0, r3
     9b2:	d00c      	beq.n	9ce <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
     9b4:	2280      	movs	r2, #128	; 0x80
     9b6:	05d2      	lsls	r2, r2, #23
     9b8:	23ff      	movs	r3, #255	; 0xff
     9ba:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
     9bc:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
     9be:	2103      	movs	r1, #3
     9c0:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
     9c2:	4008      	ands	r0, r1
     9c4:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
     9c6:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
     9c8:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
     9ca:	2b00      	cmp	r3, #0
     9cc:	d0fc      	beq.n	9c8 <_set_performance_level+0x22>
			;
	}
}
     9ce:	4770      	bx	lr

000009d0 <_dummy_func_no_return>:
static bool _dummy_func_no_return(uint32_t unused0, uint32_t unused1)
{
	(void)unused0;
	(void)unused1;
	return false;
}
     9d0:	2000      	movs	r0, #0
     9d2:	4770      	bx	lr

000009d4 <_usb_d_dev_handle_setup>:
/**
 * \brief Handles setup received interrupt
 * \param[in] ept Pointer to endpoint information.
 */
static void _usb_d_dev_handle_setup(struct _usb_d_dev_ep *ept)
{
     9d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t epn     = USB_EP_GET_N(ept->ep);
     9d6:	7c83      	ldrb	r3, [r0, #18]
     9d8:	220f      	movs	r2, #15
     9da:	4013      	ands	r3, r2
	bool    is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     9dc:	7cc1      	ldrb	r1, [r0, #19]

	if (!is_ctrl) {
     9de:	3a08      	subs	r2, #8
     9e0:	400a      	ands	r2, r1
     9e2:	2a01      	cmp	r2, #1
     9e4:	d00b      	beq.n	9fe <_usb_d_dev_handle_setup+0x2a>
}

static inline void hri_usbendpoint_clear_EPINTFLAG_reg(const void *const hw, uint8_t submodule_index,
                                                       hri_usbendpoint_epintflag_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     9e6:	015a      	lsls	r2, r3, #5
     9e8:	491a      	ldr	r1, [pc, #104]	; (a54 <_usb_d_dev_handle_setup+0x80>)
     9ea:	468c      	mov	ip, r1
     9ec:	4462      	add	r2, ip
     9ee:	2110      	movs	r1, #16
     9f0:	71d1      	strb	r1, [r2, #7]
	}
}

static inline void hri_usbendpoint_clear_EPINTEN_RXSTP_bit(const void *const hw, uint8_t submodule_index)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = USB_DEVICE_EPINTENSET_RXSTP;
     9f2:	015b      	lsls	r3, r3, #5
     9f4:	4a18      	ldr	r2, [pc, #96]	; (a58 <_usb_d_dev_handle_setup+0x84>)
     9f6:	4694      	mov	ip, r2
     9f8:	4463      	add	r3, ip
     9fa:	7019      	strb	r1, [r3, #0]
	_usbd_ep_clear_bank_status(epn, 1);
	_usbd_ep_int_ack(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	_usbd_ep_int_dis(epn, USB_D_BANK0_INT_FLAGS | USB_D_BANK1_INT_FLAGS);
	/* Invoke callback. */
	dev_inst.ep_callbacks.setup(ept->ep);
}
     9fc:	bd70      	pop	{r4, r5, r6, pc}
	if (_usb_d_dev_ep_is_busy(ept)) {
     9fe:	064a      	lsls	r2, r1, #25
     a00:	d50f      	bpl.n	a22 <_usb_d_dev_handle_setup+0x4e>
		ept->flags.bits.is_busy = 0;
     a02:	7cc2      	ldrb	r2, [r0, #19]
     a04:	2140      	movs	r1, #64	; 0x40
     a06:	438a      	bics	r2, r1
     a08:	74c2      	strb	r2, [r0, #19]
     a0a:	015a      	lsls	r2, r3, #5
     a0c:	2482      	movs	r4, #130	; 0x82
     a0e:	05e4      	lsls	r4, r4, #23
     a10:	46a4      	mov	ip, r4
     a12:	4462      	add	r2, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     a14:	2580      	movs	r5, #128	; 0x80
     a16:	2482      	movs	r4, #130	; 0x82
     a18:	0064      	lsls	r4, r4, #1
     a1a:	5515      	strb	r5, [r2, r4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     a1c:	2406      	movs	r4, #6
     a1e:	34ff      	adds	r4, #255	; 0xff
     a20:	5511      	strb	r1, [r2, r4]
	ept->flags.bits.is_stalled = 0;
     a22:	7cc2      	ldrb	r2, [r0, #19]
     a24:	2108      	movs	r1, #8
     a26:	438a      	bics	r2, r1
     a28:	74c2      	strb	r2, [r0, #19]
	bank->STATUS_BK.reg     = 0;
     a2a:	490c      	ldr	r1, [pc, #48]	; (a5c <_usb_d_dev_handle_setup+0x88>)
     a2c:	015a      	lsls	r2, r3, #5
     a2e:	188c      	adds	r4, r1, r2
     a30:	2500      	movs	r5, #0
     a32:	72a5      	strb	r5, [r4, #10]
     a34:	76a5      	strb	r5, [r4, #26]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     a36:	0013      	movs	r3, r2
     a38:	4c06      	ldr	r4, [pc, #24]	; (a54 <_usb_d_dev_handle_setup+0x80>)
     a3a:	46a4      	mov	ip, r4
     a3c:	4463      	add	r3, ip
     a3e:	246f      	movs	r4, #111	; 0x6f
     a40:	71dc      	strb	r4, [r3, #7]
}

static inline void hri_usbendpoint_clear_EPINTEN_reg(const void *const hw, uint8_t submodule_index,
                                                     hri_usbendpoint_epintenset_reg_t mask)
{
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     a42:	4b05      	ldr	r3, [pc, #20]	; (a58 <_usb_d_dev_handle_setup+0x84>)
     a44:	469c      	mov	ip, r3
     a46:	4462      	add	r2, ip
     a48:	7014      	strb	r4, [r2, #0]
	dev_inst.ep_callbacks.setup(ept->ep);
     a4a:	7c80      	ldrb	r0, [r0, #18]
     a4c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
     a4e:	4798      	blx	r3
     a50:	e7d4      	b.n	9fc <_usb_d_dev_handle_setup+0x28>
     a52:	46c0      	nop			; (mov r8, r8)
     a54:	41000100 	.word	0x41000100
     a58:	41000108 	.word	0x41000108
     a5c:	200000ec 	.word	0x200000ec

00000a60 <_usb_d_dev_handle_stall>:
 * \brief Handles stall sent interrupt
 * \param[in] ept Pointer to endpoint information.
 * \param[in] bank_n Bank number.
 */
static void _usb_d_dev_handle_stall(struct _usb_d_dev_ep *ept, const uint8_t bank_n)
{
     a60:	b510      	push	{r4, lr}
		_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << bank_n);
     a62:	2220      	movs	r2, #32
     a64:	408a      	lsls	r2, r1
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
     a66:	b2d2      	uxtb	r2, r2
	uint8_t epn = USB_EP_GET_N(ept->ep);
     a68:	7c81      	ldrb	r1, [r0, #18]
     a6a:	230f      	movs	r3, #15
     a6c:	400b      	ands	r3, r1
     a6e:	015b      	lsls	r3, r3, #5
     a70:	4905      	ldr	r1, [pc, #20]	; (a88 <_usb_d_dev_handle_stall+0x28>)
     a72:	468c      	mov	ip, r1
     a74:	4463      	add	r3, ip
     a76:	701a      	strb	r2, [r3, #0]
	/* Clear interrupt enable. Leave status there for status check. */
	_usbd_ep_int_stall_en(epn, bank_n, false);
	dev_inst.ep_callbacks.done(ept->ep, USB_TRANS_STALL, ept->trans_count);
     a78:	6882      	ldr	r2, [r0, #8]
     a7a:	7c80      	ldrb	r0, [r0, #18]
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <_usb_d_dev_handle_stall+0x2c>)
     a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
     a80:	2101      	movs	r1, #1
     a82:	4798      	blx	r3
}
     a84:	bd10      	pop	{r4, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	41000108 	.word	0x41000108
     a8c:	200000ec 	.word	0x200000ec

00000a90 <_usb_d_dev_trans_done>:
 *  \brief Finish the transaction and invoke callback
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_done(struct _usb_d_dev_ep *ept, const int32_t code)
{
     a90:	b510      	push	{r4, lr}
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     a92:	7c83      	ldrb	r3, [r0, #18]
     a94:	2bff      	cmp	r3, #255	; 0xff
     a96:	d002      	beq.n	a9e <_usb_d_dev_trans_done+0xe>
     a98:	7cc2      	ldrb	r2, [r0, #19]
     a9a:	0652      	lsls	r2, r2, #25
     a9c:	d400      	bmi.n	aa0 <_usb_d_dev_trans_done+0x10>
		return;
	}
	ept->flags.bits.is_busy = 0;
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
}
     a9e:	bd10      	pop	{r4, pc}
	ept->flags.bits.is_busy = 0;
     aa0:	7cc2      	ldrb	r2, [r0, #19]
     aa2:	2440      	movs	r4, #64	; 0x40
     aa4:	43a2      	bics	r2, r4
     aa6:	74c2      	strb	r2, [r0, #19]
	dev_inst.ep_callbacks.done(ept->ep, code, ept->trans_count);
     aa8:	6882      	ldr	r2, [r0, #8]
     aaa:	4802      	ldr	r0, [pc, #8]	; (ab4 <_usb_d_dev_trans_done+0x24>)
     aac:	6f04      	ldr	r4, [r0, #112]	; 0x70
     aae:	0018      	movs	r0, r3
     ab0:	47a0      	blx	r4
     ab2:	e7f4      	b.n	a9e <_usb_d_dev_trans_done+0xe>
     ab4:	200000ec 	.word	0x200000ec

00000ab8 <_usb_d_dev_trans_stop>:
 * \param[in, out] ept Pointer to endpoint information.
 * \param[in] dir Endpoint direction.
 * \param[in] code Information code passed.
 */
static void _usb_d_dev_trans_stop(struct _usb_d_dev_ep *ept, bool dir, const int32_t code)
{
     ab8:	b530      	push	{r4, r5, lr}
     aba:	b083      	sub	sp, #12
	uint8_t epn = USB_EP_GET_N(ept->ep);
     abc:	7c83      	ldrb	r3, [r0, #18]
	;
	const uint8_t intflags[2] = {USB_D_BANK0_INT_FLAGS, USB_D_BANK1_INT_FLAGS};
     abe:	ac01      	add	r4, sp, #4
     ac0:	2525      	movs	r5, #37	; 0x25
     ac2:	7025      	strb	r5, [r4, #0]
     ac4:	3525      	adds	r5, #37	; 0x25
     ac6:	7065      	strb	r5, [r4, #1]
	if (!(_usb_d_dev_ep_is_used(ept) && _usb_d_dev_ep_is_busy(ept))) {
     ac8:	2bff      	cmp	r3, #255	; 0xff
     aca:	d01b      	beq.n	b04 <_usb_d_dev_trans_stop+0x4c>
     acc:	7cc4      	ldrb	r4, [r0, #19]
     ace:	0664      	lsls	r4, r4, #25
     ad0:	d518      	bpl.n	b04 <_usb_d_dev_trans_stop+0x4c>
	uint8_t epn = USB_EP_GET_N(ept->ep);
     ad2:	240f      	movs	r4, #15
     ad4:	4023      	ands	r3, r4
		return;
	}
	/* Stop transfer */
	if (dir) {
     ad6:	2900      	cmp	r1, #0
     ad8:	d016      	beq.n	b08 <_usb_d_dev_trans_stop+0x50>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     ada:	015c      	lsls	r4, r3, #5
     adc:	4d0e      	ldr	r5, [pc, #56]	; (b18 <_usb_d_dev_trans_stop+0x60>)
     ade:	46ac      	mov	ip, r5
     ae0:	4464      	add	r4, ip
     ae2:	2580      	movs	r5, #128	; 0x80
     ae4:	7125      	strb	r5, [r4, #4]
		_usbd_ep_set_in_rdy(epn, 1, false);
	} else {
		/* NAK OUT */
		_usbd_ep_set_out_rdy(epn, 0, false);
	}
	_usbd_ep_int_ack(epn, intflags[dir]);
     ae6:	ac01      	add	r4, sp, #4
     ae8:	5c64      	ldrb	r4, [r4, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     aea:	0159      	lsls	r1, r3, #5
     aec:	4d0a      	ldr	r5, [pc, #40]	; (b18 <_usb_d_dev_trans_stop+0x60>)
     aee:	46ac      	mov	ip, r5
     af0:	4461      	add	r1, ip
     af2:	71cc      	strb	r4, [r1, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     af4:	015b      	lsls	r3, r3, #5
     af6:	4909      	ldr	r1, [pc, #36]	; (b1c <_usb_d_dev_trans_stop+0x64>)
     af8:	468c      	mov	ip, r1
     afa:	4463      	add	r3, ip
     afc:	701c      	strb	r4, [r3, #0]
	_usbd_ep_int_dis(epn, intflags[dir]);
	_usb_d_dev_trans_done(ept, code);
     afe:	0011      	movs	r1, r2
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <_usb_d_dev_trans_stop+0x68>)
     b02:	4798      	blx	r3
}
     b04:	b003      	add	sp, #12
     b06:	bd30      	pop	{r4, r5, pc}
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     b08:	015c      	lsls	r4, r3, #5
     b0a:	4d03      	ldr	r5, [pc, #12]	; (b18 <_usb_d_dev_trans_stop+0x60>)
     b0c:	46ac      	mov	ip, r5
     b0e:	4464      	add	r4, ip
     b10:	2540      	movs	r5, #64	; 0x40
     b12:	7165      	strb	r5, [r4, #5]
     b14:	e7e7      	b.n	ae6 <_usb_d_dev_trans_stop+0x2e>
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	41000100 	.word	0x41000100
     b1c:	41000108 	.word	0x41000108
     b20:	00000a91 	.word	0x00000a91

00000b24 <_usb_d_dev_handle_trfail>:
{
     b24:	b570      	push	{r4, r5, r6, lr}
     b26:	b082      	sub	sp, #8
	uint8_t            epn     = USB_EP_GET_N(ept->ep);
     b28:	7c83      	ldrb	r3, [r0, #18]
     b2a:	220f      	movs	r2, #15
     b2c:	4013      	ands	r3, r2
	const uint8_t      fail[2] = {USB_DEVICE_EPINTFLAG_TRFAIL0, USB_DEVICE_EPINTFLAG_TRFAIL1};
     b2e:	aa01      	add	r2, sp, #4
     b30:	2404      	movs	r4, #4
     b32:	7014      	strb	r4, [r2, #0]
     b34:	3404      	adds	r4, #4
     b36:	7054      	strb	r4, [r2, #1]
     b38:	015d      	lsls	r5, r3, #5
	uint8_t            eptype
     b3a:	2900      	cmp	r1, #0
     b3c:	d032      	beq.n	ba4 <_usb_d_dev_handle_trfail+0x80>

static inline hri_usbendpoint_epcfg_reg_t hri_usbendpoint_read_EPCFG_EPTYPE1_bf(const void *const hw,
                                                                                uint8_t           submodule_index)
{
	uint8_t tmp;
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     b3e:	001a      	movs	r2, r3
     b40:	3208      	adds	r2, #8
     b42:	0152      	lsls	r2, r2, #5
     b44:	2482      	movs	r4, #130	; 0x82
     b46:	05e4      	lsls	r4, r4, #23
     b48:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE1_Msk) >> USB_DEVICE_EPCFG_EPTYPE1_Pos;
     b4a:	0664      	lsls	r4, r4, #25
     b4c:	0f64      	lsrs	r4, r4, #29
	st.reg = bank[bank_n].STATUS_BK.reg;
     b4e:	010a      	lsls	r2, r1, #4
     b50:	1952      	adds	r2, r2, r5
     b52:	4d30      	ldr	r5, [pc, #192]	; (c14 <_usb_d_dev_handle_trfail+0xf0>)
     b54:	18aa      	adds	r2, r5, r2
     b56:	7a95      	ldrb	r5, [r2, #10]
     b58:	b2ed      	uxtb	r5, r5
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     b5a:	2c02      	cmp	r4, #2
     b5c:	d02b      	beq.n	bb6 <_usb_d_dev_handle_trfail+0x92>
	} else if (st.bit.ERRORFLOW) {
     b5e:	07ac      	lsls	r4, r5, #30
     b60:	d542      	bpl.n	be8 <_usb_d_dev_handle_trfail+0xc4>
	bool                      is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     b62:	7cc5      	ldrb	r5, [r0, #19]
		bank[bank_n].STATUS_BK.bit.ERRORFLOW = 0;
     b64:	7a94      	ldrb	r4, [r2, #10]
     b66:	2602      	movs	r6, #2
     b68:	43b4      	bics	r4, r6
     b6a:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     b6c:	aa01      	add	r2, sp, #4
     b6e:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     b70:	015a      	lsls	r2, r3, #5
     b72:	4e29      	ldr	r6, [pc, #164]	; (c18 <_usb_d_dev_handle_trfail+0xf4>)
     b74:	46b4      	mov	ip, r6
     b76:	4462      	add	r2, ip
     b78:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     b7a:	015b      	lsls	r3, r3, #5
     b7c:	4a27      	ldr	r2, [pc, #156]	; (c1c <_usb_d_dev_handle_trfail+0xf8>)
     b7e:	4694      	mov	ip, r2
     b80:	4463      	add	r3, ip
     b82:	701c      	strb	r4, [r3, #0]
		if (is_ctrl && _usb_d_dev_ep_is_busy(ept)) {
     b84:	2307      	movs	r3, #7
     b86:	402b      	ands	r3, r5
     b88:	2b01      	cmp	r3, #1
     b8a:	d140      	bne.n	c0e <_usb_d_dev_handle_trfail+0xea>
     b8c:	7cc3      	ldrb	r3, [r0, #19]
     b8e:	065b      	lsls	r3, r3, #25
     b90:	d53d      	bpl.n	c0e <_usb_d_dev_handle_trfail+0xea>
			if (bank_n != _usb_d_dev_ep_is_in(ept)) {
     b92:	7cc3      	ldrb	r3, [r0, #19]
     b94:	09db      	lsrs	r3, r3, #7
     b96:	4299      	cmp	r1, r3
     b98:	d039      	beq.n	c0e <_usb_d_dev_handle_trfail+0xea>
				_usb_d_dev_trans_stop(ept, _usb_d_dev_ep_is_in(ept), USB_TRANS_DONE);
     b9a:	2200      	movs	r2, #0
     b9c:	0019      	movs	r1, r3
     b9e:	4b20      	ldr	r3, [pc, #128]	; (c20 <_usb_d_dev_handle_trfail+0xfc>)
     ba0:	4798      	blx	r3
     ba2:	e034      	b.n	c0e <_usb_d_dev_handle_trfail+0xea>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
     ba4:	001a      	movs	r2, r3
     ba6:	3208      	adds	r2, #8
     ba8:	0152      	lsls	r2, r2, #5
     baa:	2482      	movs	r4, #130	; 0x82
     bac:	05e4      	lsls	r4, r4, #23
     bae:	5d14      	ldrb	r4, [r2, r4]
	tmp = (tmp & USB_DEVICE_EPCFG_EPTYPE0_Msk) >> USB_DEVICE_EPCFG_EPTYPE0_Pos;
     bb0:	2207      	movs	r2, #7
     bb2:	4014      	ands	r4, r2
     bb4:	e7cb      	b.n	b4e <_usb_d_dev_handle_trfail+0x2a>
	if ((eptype == USB_D_EPTYPE_ISOCH) && st.bit.CRCERR) {
     bb6:	07ec      	lsls	r4, r5, #31
     bb8:	d5d1      	bpl.n	b5e <_usb_d_dev_handle_trfail+0x3a>
		bank[bank_n].STATUS_BK.bit.CRCERR = 0;
     bba:	7a94      	ldrb	r4, [r2, #10]
     bbc:	2501      	movs	r5, #1
     bbe:	43ac      	bics	r4, r5
     bc0:	7294      	strb	r4, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     bc2:	aa01      	add	r2, sp, #4
     bc4:	5c54      	ldrb	r4, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     bc6:	015a      	lsls	r2, r3, #5
     bc8:	4d13      	ldr	r5, [pc, #76]	; (c18 <_usb_d_dev_handle_trfail+0xf4>)
     bca:	46ac      	mov	ip, r5
     bcc:	4462      	add	r2, ip
     bce:	71d4      	strb	r4, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     bd0:	015b      	lsls	r3, r3, #5
     bd2:	4a12      	ldr	r2, [pc, #72]	; (c1c <_usb_d_dev_handle_trfail+0xf8>)
     bd4:	4694      	mov	ip, r2
     bd6:	4463      	add	r3, ip
     bd8:	701c      	strb	r4, [r3, #0]
		_usb_d_dev_trans_stop(ept, bank_n, USB_TRANS_ERROR);
     bda:	1e4b      	subs	r3, r1, #1
     bdc:	4199      	sbcs	r1, r3
     bde:	b2c9      	uxtb	r1, r1
     be0:	2204      	movs	r2, #4
     be2:	4b0f      	ldr	r3, [pc, #60]	; (c20 <_usb_d_dev_handle_trfail+0xfc>)
     be4:	4798      	blx	r3
     be6:	e012      	b.n	c0e <_usb_d_dev_handle_trfail+0xea>
	bank->STATUS_BK.reg     = 0;
     be8:	005a      	lsls	r2, r3, #1
     bea:	1852      	adds	r2, r2, r1
     bec:	0112      	lsls	r2, r2, #4
     bee:	4809      	ldr	r0, [pc, #36]	; (c14 <_usb_d_dev_handle_trfail+0xf0>)
     bf0:	1882      	adds	r2, r0, r2
     bf2:	2000      	movs	r0, #0
     bf4:	7290      	strb	r0, [r2, #10]
		hri_usbendpoint_clear_EPINTFLAG_reg(hw, epn, fail[bank_n]);
     bf6:	aa01      	add	r2, sp, #4
     bf8:	5c51      	ldrb	r1, [r2, r1]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     bfa:	015a      	lsls	r2, r3, #5
     bfc:	4806      	ldr	r0, [pc, #24]	; (c18 <_usb_d_dev_handle_trfail+0xf4>)
     bfe:	4684      	mov	ip, r0
     c00:	4462      	add	r2, ip
     c02:	71d1      	strb	r1, [r2, #7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     c04:	015b      	lsls	r3, r3, #5
     c06:	4a05      	ldr	r2, [pc, #20]	; (c1c <_usb_d_dev_handle_trfail+0xf8>)
     c08:	4694      	mov	ip, r2
     c0a:	4463      	add	r3, ip
     c0c:	7019      	strb	r1, [r3, #0]
}
     c0e:	b002      	add	sp, #8
     c10:	bd70      	pop	{r4, r5, r6, pc}
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	200000ec 	.word	0x200000ec
     c18:	41000100 	.word	0x41000100
     c1c:	41000108 	.word	0x41000108
     c20:	00000ab9 	.word	0x00000ab9

00000c24 <_usb_d_dev_reset_epts>:
{
     c24:	b5f0      	push	{r4, r5, r6, r7, lr}
     c26:	46c6      	mov	lr, r8
     c28:	b500      	push	{lr}
     c2a:	4d0c      	ldr	r5, [pc, #48]	; (c5c <_usb_d_dev_reset_epts+0x38>)
     c2c:	002c      	movs	r4, r5
     c2e:	3474      	adds	r4, #116	; 0x74
     c30:	3529      	adds	r5, #41	; 0x29
     c32:	35ff      	adds	r5, #255	; 0xff
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     c34:	4b0a      	ldr	r3, [pc, #40]	; (c60 <_usb_d_dev_reset_epts+0x3c>)
     c36:	4698      	mov	r8, r3
		dev_inst.ep[i].ep       = 0xFF;
     c38:	27ff      	movs	r7, #255	; 0xff
		dev_inst.ep[i].flags.u8 = 0;
     c3a:	2600      	movs	r6, #0
		_usb_d_dev_trans_done(&dev_inst.ep[i], USB_TRANS_RESET);
     c3c:	2103      	movs	r1, #3
     c3e:	0020      	movs	r0, r4
     c40:	47c0      	blx	r8
		dev_inst.ep[i].ep       = 0xFF;
     c42:	74a7      	strb	r7, [r4, #18]
		dev_inst.ep[i].flags.u8 = 0;
     c44:	74e6      	strb	r6, [r4, #19]
     c46:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
     c48:	42ac      	cmp	r4, r5
     c4a:	d1f7      	bne.n	c3c <_usb_d_dev_reset_epts+0x18>
	memset(prvt_inst.desc_table, 0, sizeof(UsbDeviceDescriptor) * (CONF_USB_D_MAX_EP_N + 1));
     c4c:	2260      	movs	r2, #96	; 0x60
     c4e:	2100      	movs	r1, #0
     c50:	4802      	ldr	r0, [pc, #8]	; (c5c <_usb_d_dev_reset_epts+0x38>)
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <_usb_d_dev_reset_epts+0x40>)
     c54:	4798      	blx	r3
}
     c56:	bc04      	pop	{r2}
     c58:	4690      	mov	r8, r2
     c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c5c:	200000ec 	.word	0x200000ec
     c60:	00000a91 	.word	0x00000a91
     c64:	00002dbf 	.word	0x00002dbf

00000c68 <_usb_d_dev_in_next>:
{
     c68:	b5f0      	push	{r4, r5, r6, r7, lr}
     c6a:	46c6      	mov	lr, r8
     c6c:	b500      	push	{lr}
     c6e:	0004      	movs	r4, r0
     c70:	000e      	movs	r6, r1
	uint8_t            epn         = USB_EP_GET_N(ept->ep);
     c72:	7c83      	ldrb	r3, [r0, #18]
     c74:	250f      	movs	r5, #15
     c76:	401d      	ands	r5, r3
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     c78:	2900      	cmp	r1, #0
     c7a:	d100      	bne.n	c7e <_usb_d_dev_in_next+0x16>
     c7c:	e0aa      	b.n	dd4 <_usb_d_dev_in_next+0x16c>
	UsbDeviceDescBank *bank        = &prvt_inst.desc_table[epn].DeviceDescBank[0];
     c7e:	016a      	lsls	r2, r5, #5
     c80:	4b5a      	ldr	r3, [pc, #360]	; (dec <_usb_d_dev_in_next+0x184>)
     c82:	189b      	adds	r3, r3, r2
	uint16_t           trans_count = isr ? bank[1].PCKSIZE.bit.BYTE_COUNT : 0;
     c84:	6958      	ldr	r0, [r3, #20]
     c86:	0480      	lsls	r0, r0, #18
     c88:	0c80      	lsrs	r0, r0, #18
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     c8a:	8a23      	ldrh	r3, [r4, #16]
     c8c:	4a58      	ldr	r2, [pc, #352]	; (df0 <_usb_d_dev_in_next+0x188>)
     c8e:	4293      	cmp	r3, r2
     c90:	d100      	bne.n	c94 <_usb_d_dev_in_next+0x2c>
     c92:	e09a      	b.n	dca <_usb_d_dev_in_next+0x162>
     c94:	3b01      	subs	r3, #1
     c96:	b29a      	uxth	r2, r3
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     c98:	7ce3      	ldrb	r3, [r4, #19]
     c9a:	2707      	movs	r7, #7
     c9c:	401f      	ands	r7, r3
	if (isr) {
     c9e:	2e00      	cmp	r6, #0
     ca0:	d005      	beq.n	cae <_usb_d_dev_in_next+0x46>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     ca2:	016b      	lsls	r3, r5, #5
     ca4:	4953      	ldr	r1, [pc, #332]	; (df4 <_usb_d_dev_in_next+0x18c>)
     ca6:	468c      	mov	ip, r1
     ca8:	4463      	add	r3, ip
     caa:	2102      	movs	r1, #2
     cac:	71d9      	strb	r1, [r3, #7]
	ept->trans_count += trans_count;
     cae:	68a3      	ldr	r3, [r4, #8]
     cb0:	18c1      	adds	r1, r0, r3
     cb2:	60a1      	str	r1, [r4, #8]
	if (ept->trans_count < ept->trans_size) {
     cb4:	6863      	ldr	r3, [r4, #4]
     cb6:	4299      	cmp	r1, r3
     cb8:	d24a      	bcs.n	d50 <_usb_d_dev_in_next+0xe8>
		trans_next = ept->trans_size - ept->trans_count;
     cba:	1a5b      	subs	r3, r3, r1
     cbc:	b29b      	uxth	r3, r3
		if (ept->flags.bits.use_cache) {
     cbe:	7ce2      	ldrb	r2, [r4, #19]
     cc0:	0692      	lsls	r2, r2, #26
     cc2:	d535      	bpl.n	d30 <_usb_d_dev_in_next+0xc8>
     cc4:	8a22      	ldrh	r2, [r4, #16]
     cc6:	1c10      	adds	r0, r2, #0
     cc8:	b292      	uxth	r2, r2
     cca:	429a      	cmp	r2, r3
     ccc:	d900      	bls.n	cd0 <_usb_d_dev_in_next+0x68>
     cce:	1c18      	adds	r0, r3, #0
     cd0:	b283      	uxth	r3, r0
     cd2:	4698      	mov	r8, r3
			memcpy(ept->cache, &ept->trans_buf[ept->trans_count], trans_next);
     cd4:	6823      	ldr	r3, [r4, #0]
     cd6:	469c      	mov	ip, r3
     cd8:	4461      	add	r1, ip
     cda:	4642      	mov	r2, r8
     cdc:	68e0      	ldr	r0, [r4, #12]
     cde:	4b46      	ldr	r3, [pc, #280]	; (df8 <_usb_d_dev_in_next+0x190>)
     ce0:	4798      	blx	r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)ept->cache);
     ce2:	68e1      	ldr	r1, [r4, #12]
	bank->ADDR.reg          = addr;
     ce4:	016a      	lsls	r2, r5, #5
     ce6:	4b41      	ldr	r3, [pc, #260]	; (dec <_usb_d_dev_in_next+0x184>)
     ce8:	189b      	adds	r3, r3, r2
     cea:	6119      	str	r1, [r3, #16]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     cec:	016a      	lsls	r2, r5, #5
     cee:	4b3f      	ldr	r3, [pc, #252]	; (dec <_usb_d_dev_in_next+0x184>)
     cf0:	189b      	adds	r3, r3, r2
     cf2:	695a      	ldr	r2, [r3, #20]
     cf4:	4641      	mov	r1, r8
     cf6:	0489      	lsls	r1, r1, #18
     cf8:	0c89      	lsrs	r1, r1, #18
     cfa:	0b92      	lsrs	r2, r2, #14
     cfc:	0392      	lsls	r2, r2, #14
     cfe:	430a      	orrs	r2, r1
     d00:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     d02:	695a      	ldr	r2, [r3, #20]
     d04:	493d      	ldr	r1, [pc, #244]	; (dfc <_usb_d_dev_in_next+0x194>)
     d06:	400a      	ands	r2, r1
     d08:	615a      	str	r2, [r3, #20]
	if (!isr) {
     d0a:	2e00      	cmp	r6, #0
     d0c:	d107      	bne.n	d1e <_usb_d_dev_in_next+0xb6>
		if (is_ctrl) {
     d0e:	2f01      	cmp	r7, #1
     d10:	d059      	beq.n	dc6 <_usb_d_dev_in_next+0x15e>
			inten = USB_D_BANK1_INT_FLAGS;
     d12:	224a      	movs	r2, #74	; 0x4a
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     d14:	016b      	lsls	r3, r5, #5
     d16:	493a      	ldr	r1, [pc, #232]	; (e00 <_usb_d_dev_in_next+0x198>)
     d18:	468c      	mov	ip, r1
     d1a:	4463      	add	r3, ip
     d1c:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
     d1e:	016d      	lsls	r5, r5, #5
     d20:	4b34      	ldr	r3, [pc, #208]	; (df4 <_usb_d_dev_in_next+0x18c>)
     d22:	469c      	mov	ip, r3
     d24:	4465      	add	r5, ip
     d26:	2380      	movs	r3, #128	; 0x80
     d28:	716b      	strb	r3, [r5, #5]
}
     d2a:	bc04      	pop	{r2}
     d2c:	4690      	mov	r8, r2
     d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d30:	1c1a      	adds	r2, r3, #0
     d32:	2080      	movs	r0, #128	; 0x80
     d34:	0180      	lsls	r0, r0, #6
     d36:	4283      	cmp	r3, r0
     d38:	d901      	bls.n	d3e <_usb_d_dev_in_next+0xd6>
     d3a:	4b32      	ldr	r3, [pc, #200]	; (e04 <_usb_d_dev_in_next+0x19c>)
     d3c:	881a      	ldrh	r2, [r3, #0]
     d3e:	b293      	uxth	r3, r2
     d40:	4698      	mov	r8, r3
			_usbd_ep_set_buf(epn, 1, (uint32_t)&ept->trans_buf[ept->trans_count]);
     d42:	6823      	ldr	r3, [r4, #0]
     d44:	1859      	adds	r1, r3, r1
	bank->ADDR.reg          = addr;
     d46:	016a      	lsls	r2, r5, #5
     d48:	4b28      	ldr	r3, [pc, #160]	; (dec <_usb_d_dev_in_next+0x184>)
     d4a:	189b      	adds	r3, r3, r2
     d4c:	6119      	str	r1, [r3, #16]
     d4e:	e7cd      	b.n	cec <_usb_d_dev_in_next+0x84>
	} else if (ept->flags.bits.need_zlp) {
     d50:	7ce3      	ldrb	r3, [r4, #19]
     d52:	06db      	lsls	r3, r3, #27
     d54:	d50f      	bpl.n	d76 <_usb_d_dev_in_next+0x10e>
		ept->flags.bits.need_zlp = 0;
     d56:	7ce3      	ldrb	r3, [r4, #19]
     d58:	2210      	movs	r2, #16
     d5a:	4393      	bics	r3, r2
     d5c:	74e3      	strb	r3, [r4, #19]
	bank->PCKSIZE.bit.BYTE_COUNT = size;
     d5e:	016a      	lsls	r2, r5, #5
     d60:	4b22      	ldr	r3, [pc, #136]	; (dec <_usb_d_dev_in_next+0x184>)
     d62:	189b      	adds	r3, r3, r2
     d64:	695a      	ldr	r2, [r3, #20]
     d66:	0b92      	lsrs	r2, r2, #14
     d68:	0392      	lsls	r2, r2, #14
     d6a:	615a      	str	r2, [r3, #20]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = count;
     d6c:	695a      	ldr	r2, [r3, #20]
     d6e:	4923      	ldr	r1, [pc, #140]	; (dfc <_usb_d_dev_in_next+0x194>)
     d70:	400a      	ands	r2, r1
     d72:	615a      	str	r2, [r3, #20]
     d74:	e7c9      	b.n	d0a <_usb_d_dev_in_next+0xa2>
	if (is_ctrl) {
     d76:	2f01      	cmp	r7, #1
     d78:	d00e      	beq.n	d98 <_usb_d_dev_in_next+0x130>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     d7a:	016d      	lsls	r5, r5, #5
     d7c:	4b22      	ldr	r3, [pc, #136]	; (e08 <_usb_d_dev_in_next+0x1a0>)
     d7e:	469c      	mov	ip, r3
     d80:	4465      	add	r5, ip
     d82:	234a      	movs	r3, #74	; 0x4a
     d84:	702b      	strb	r3, [r5, #0]
	if (last_pkt == ept->size) {
     d86:	8a21      	ldrh	r1, [r4, #16]
     d88:	4002      	ands	r2, r0
     d8a:	4291      	cmp	r1, r2
     d8c:	d00b      	beq.n	da6 <_usb_d_dev_in_next+0x13e>
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     d8e:	2100      	movs	r1, #0
     d90:	0020      	movs	r0, r4
     d92:	4b1e      	ldr	r3, [pc, #120]	; (e0c <_usb_d_dev_in_next+0x1a4>)
     d94:	4798      	blx	r3
	return;
     d96:	e7c8      	b.n	d2a <_usb_d_dev_in_next+0xc2>
     d98:	016d      	lsls	r5, r5, #5
     d9a:	4b1b      	ldr	r3, [pc, #108]	; (e08 <_usb_d_dev_in_next+0x1a0>)
     d9c:	469c      	mov	ip, r3
     d9e:	4465      	add	r5, ip
     da0:	234b      	movs	r3, #75	; 0x4b
     da2:	702b      	strb	r3, [r5, #0]
     da4:	e7ef      	b.n	d86 <_usb_d_dev_in_next+0x11e>
		ept->flags.bits.is_busy = 0;
     da6:	7ce3      	ldrb	r3, [r4, #19]
     da8:	2240      	movs	r2, #64	; 0x40
     daa:	4393      	bics	r3, r2
     dac:	74e3      	strb	r3, [r4, #19]
		if (dev_inst.ep_callbacks.more(ept->ep, ept->trans_count)) {
     dae:	7ca0      	ldrb	r0, [r4, #18]
     db0:	4b0e      	ldr	r3, [pc, #56]	; (dec <_usb_d_dev_in_next+0x184>)
     db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
     db4:	68a1      	ldr	r1, [r4, #8]
     db6:	4798      	blx	r3
     db8:	2800      	cmp	r0, #0
     dba:	d1b6      	bne.n	d2a <_usb_d_dev_in_next+0xc2>
		ept->flags.bits.is_busy = 1;
     dbc:	7ce3      	ldrb	r3, [r4, #19]
     dbe:	2240      	movs	r2, #64	; 0x40
     dc0:	4313      	orrs	r3, r2
     dc2:	74e3      	strb	r3, [r4, #19]
     dc4:	e7e3      	b.n	d8e <_usb_d_dev_in_next+0x126>
			inten = USB_D_BANK1_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL0;
     dc6:	224e      	movs	r2, #78	; 0x4e
     dc8:	e7a4      	b.n	d14 <_usb_d_dev_in_next+0xac>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     dca:	7ce7      	ldrb	r7, [r4, #19]
     dcc:	2307      	movs	r3, #7
     dce:	401f      	ands	r7, r3
     dd0:	4a07      	ldr	r2, [pc, #28]	; (df0 <_usb_d_dev_in_next+0x188>)
     dd2:	e766      	b.n	ca2 <_usb_d_dev_in_next+0x3a>
	uint16_t           last_pkt = trans_count & ((ept->size == 1023) ? ept->size : (ept->size - 1));
     dd4:	8a03      	ldrh	r3, [r0, #16]
     dd6:	4a06      	ldr	r2, [pc, #24]	; (df0 <_usb_d_dev_in_next+0x188>)
     dd8:	2000      	movs	r0, #0
     dda:	4293      	cmp	r3, r2
     ddc:	d000      	beq.n	de0 <_usb_d_dev_in_next+0x178>
     dde:	e759      	b.n	c94 <_usb_d_dev_in_next+0x2c>
	bool               is_ctrl  = _usb_d_dev_ep_is_ctrl(ept);
     de0:	7ce3      	ldrb	r3, [r4, #19]
     de2:	2707      	movs	r7, #7
     de4:	401f      	ands	r7, r3
     de6:	2000      	movs	r0, #0
     de8:	4a01      	ldr	r2, [pc, #4]	; (df0 <_usb_d_dev_in_next+0x188>)
     dea:	e760      	b.n	cae <_usb_d_dev_in_next+0x46>
     dec:	200000ec 	.word	0x200000ec
     df0:	000003ff 	.word	0x000003ff
     df4:	41000100 	.word	0x41000100
     df8:	00002dad 	.word	0x00002dad
     dfc:	f0003fff 	.word	0xf0003fff
     e00:	41000109 	.word	0x41000109
     e04:	00002dee 	.word	0x00002dee
     e08:	41000108 	.word	0x41000108
     e0c:	00000a91 	.word	0x00000a91

00000e10 <_usb_d_dev_out_next>:
{
     e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e12:	46de      	mov	lr, fp
     e14:	4657      	mov	r7, sl
     e16:	464e      	mov	r6, r9
     e18:	4645      	mov	r5, r8
     e1a:	b5e0      	push	{r5, r6, r7, lr}
     e1c:	0004      	movs	r4, r0
     e1e:	4688      	mov	r8, r1
	uint8_t            epn        = USB_EP_GET_N(ept->ep);
     e20:	7c83      	ldrb	r3, [r0, #18]
     e22:	250f      	movs	r5, #15
     e24:	401d      	ands	r5, r3
	uint16_t           trans_size = isr ? bank->PCKSIZE.bit.MULTI_PACKET_SIZE : 0;
     e26:	2900      	cmp	r1, #0
     e28:	d057      	beq.n	eda <_usb_d_dev_out_next+0xca>
     e2a:	016a      	lsls	r2, r5, #5
     e2c:	4b7d      	ldr	r3, [pc, #500]	; (1024 <_usb_d_dev_out_next+0x214>)
     e2e:	189b      	adds	r3, r3, r2
     e30:	685a      	ldr	r2, [r3, #4]
     e32:	0112      	lsls	r2, r2, #4
     e34:	0c92      	lsrs	r2, r2, #18
     e36:	4692      	mov	sl, r2
	uint16_t           last_trans = isr ? bank->PCKSIZE.bit.BYTE_COUNT : 0;
     e38:	685f      	ldr	r7, [r3, #4]
     e3a:	04bf      	lsls	r7, r7, #18
     e3c:	0cbf      	lsrs	r7, r7, #18
     e3e:	46bb      	mov	fp, r7
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     e40:	8a06      	ldrh	r6, [r0, #16]
     e42:	4b79      	ldr	r3, [pc, #484]	; (1028 <_usb_d_dev_out_next+0x218>)
     e44:	429e      	cmp	r6, r3
     e46:	d100      	bne.n	e4a <_usb_d_dev_out_next+0x3a>
     e48:	e0cd      	b.n	fe6 <_usb_d_dev_out_next+0x1d6>
     e4a:	3e01      	subs	r6, #1
     e4c:	b2b6      	uxth	r6, r6
	uint16_t           last_pkt   = last_trans & size_mask;
     e4e:	465f      	mov	r7, fp
     e50:	4037      	ands	r7, r6
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     e52:	7ce3      	ldrb	r3, [r4, #19]
     e54:	2207      	movs	r2, #7
     e56:	401a      	ands	r2, r3
     e58:	4691      	mov	r9, r2
	if (isr) {
     e5a:	4643      	mov	r3, r8
     e5c:	2b00      	cmp	r3, #0
     e5e:	d005      	beq.n	e6c <_usb_d_dev_out_next+0x5c>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
     e60:	016b      	lsls	r3, r5, #5
     e62:	4a72      	ldr	r2, [pc, #456]	; (102c <_usb_d_dev_out_next+0x21c>)
     e64:	4694      	mov	ip, r2
     e66:	4463      	add	r3, ip
     e68:	2201      	movs	r2, #1
     e6a:	71da      	strb	r2, [r3, #7]
	if (ept->flags.bits.use_cache && ept->trans_size) {
     e6c:	7ce3      	ldrb	r3, [r4, #19]
     e6e:	069b      	lsls	r3, r3, #26
     e70:	d50f      	bpl.n	e92 <_usb_d_dev_out_next+0x82>
     e72:	6863      	ldr	r3, [r4, #4]
     e74:	2b00      	cmp	r3, #0
     e76:	d039      	beq.n	eec <_usb_d_dev_out_next+0xdc>
		uint16_t buf_remain = ept->trans_size - ept->trans_count;
     e78:	68a0      	ldr	r0, [r4, #8]
     e7a:	1a1b      	subs	r3, r3, r0
     e7c:	b29b      	uxth	r3, r3
		memcpy(&ept->trans_buf[ept->trans_count], ept->cache, (buf_remain > last_pkt) ? last_pkt : buf_remain);
     e7e:	6822      	ldr	r2, [r4, #0]
     e80:	4694      	mov	ip, r2
     e82:	4460      	add	r0, ip
     e84:	68e1      	ldr	r1, [r4, #12]
     e86:	001a      	movs	r2, r3
     e88:	42bb      	cmp	r3, r7
     e8a:	d900      	bls.n	e8e <_usb_d_dev_out_next+0x7e>
     e8c:	003a      	movs	r2, r7
     e8e:	4b68      	ldr	r3, [pc, #416]	; (1030 <_usb_d_dev_out_next+0x220>)
     e90:	4798      	blx	r3
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     e92:	6863      	ldr	r3, [r4, #4]
     e94:	2b00      	cmp	r3, #0
     e96:	d029      	beq.n	eec <_usb_d_dev_out_next+0xdc>
	} else if (isr && last_pkt < ept->size) {
     e98:	4642      	mov	r2, r8
     e9a:	2a00      	cmp	r2, #0
     e9c:	d042      	beq.n	f24 <_usb_d_dev_out_next+0x114>
     e9e:	8a22      	ldrh	r2, [r4, #16]
     ea0:	42ba      	cmp	r2, r7
     ea2:	d93f      	bls.n	f24 <_usb_d_dev_out_next+0x114>
		ept->flags.bits.need_zlp = 0;
     ea4:	7ce3      	ldrb	r3, [r4, #19]
     ea6:	2210      	movs	r2, #16
     ea8:	4393      	bics	r3, r2
     eaa:	74e3      	strb	r3, [r4, #19]
		ept->trans_count += last_trans;
     eac:	68a3      	ldr	r3, [r4, #8]
     eae:	445b      	add	r3, fp
     eb0:	60a3      	str	r3, [r4, #8]
	if (is_ctrl) {
     eb2:	464b      	mov	r3, r9
     eb4:	2b01      	cmp	r3, #1
     eb6:	d100      	bne.n	eba <_usb_d_dev_out_next+0xaa>
     eb8:	e087      	b.n	fca <_usb_d_dev_out_next+0x1ba>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     eba:	016b      	lsls	r3, r5, #5
     ebc:	4a5d      	ldr	r2, [pc, #372]	; (1034 <_usb_d_dev_out_next+0x224>)
     ebe:	4694      	mov	ip, r2
     ec0:	4463      	add	r3, ip
     ec2:	2225      	movs	r2, #37	; 0x25
     ec4:	701a      	strb	r2, [r3, #0]
	if (0 == epn) {
     ec6:	2d00      	cmp	r5, #0
     ec8:	d102      	bne.n	ed0 <_usb_d_dev_out_next+0xc0>
	bank->ADDR.reg          = addr;
     eca:	4b56      	ldr	r3, [pc, #344]	; (1024 <_usb_d_dev_out_next+0x214>)
     ecc:	68e2      	ldr	r2, [r4, #12]
     ece:	601a      	str	r2, [r3, #0]
	_usb_d_dev_trans_done(ept, USB_TRANS_DONE);
     ed0:	2100      	movs	r1, #0
     ed2:	0020      	movs	r0, r4
     ed4:	4b58      	ldr	r3, [pc, #352]	; (1038 <_usb_d_dev_out_next+0x228>)
     ed6:	4798      	blx	r3
	return;
     ed8:	e059      	b.n	f8e <_usb_d_dev_out_next+0x17e>
	uint16_t           size_mask  = (ept->size == 1023) ? 1023 : (ept->size - 1);
     eda:	8a06      	ldrh	r6, [r0, #16]
     edc:	4b52      	ldr	r3, [pc, #328]	; (1028 <_usb_d_dev_out_next+0x218>)
     ede:	429e      	cmp	r6, r3
     ee0:	d100      	bne.n	ee4 <_usb_d_dev_out_next+0xd4>
     ee2:	e08e      	b.n	1002 <_usb_d_dev_out_next+0x1f2>
     ee4:	2300      	movs	r3, #0
     ee6:	469b      	mov	fp, r3
     ee8:	469a      	mov	sl, r3
     eea:	e7ae      	b.n	e4a <_usb_d_dev_out_next+0x3a>
	if (ept->trans_size == 0 && ept->flags.bits.need_zlp) {
     eec:	7ce3      	ldrb	r3, [r4, #19]
     eee:	06db      	lsls	r3, r3, #27
     ef0:	d400      	bmi.n	ef4 <_usb_d_dev_out_next+0xe4>
     ef2:	e07f      	b.n	ff4 <_usb_d_dev_out_next+0x1e4>
		ept->flags.bits.need_zlp  = 0;
     ef4:	7ce3      	ldrb	r3, [r4, #19]
		ept->flags.bits.use_cache = 1;
     ef6:	2210      	movs	r2, #16
     ef8:	4393      	bics	r3, r2
     efa:	2220      	movs	r2, #32
     efc:	4313      	orrs	r3, r2
     efe:	74e3      	strb	r3, [r4, #19]
	bank->ADDR.reg          = addr;
     f00:	4a48      	ldr	r2, [pc, #288]	; (1024 <_usb_d_dev_out_next+0x214>)
     f02:	016b      	lsls	r3, r5, #5
     f04:	68e1      	ldr	r1, [r4, #12]
     f06:	5099      	str	r1, [r3, r2]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     f08:	8a21      	ldrh	r1, [r4, #16]
     f0a:	18d3      	adds	r3, r2, r3
     f0c:	685a      	ldr	r2, [r3, #4]
     f0e:	0489      	lsls	r1, r1, #18
     f10:	0909      	lsrs	r1, r1, #4
     f12:	484a      	ldr	r0, [pc, #296]	; (103c <_usb_d_dev_out_next+0x22c>)
     f14:	4002      	ands	r2, r0
     f16:	430a      	orrs	r2, r1
     f18:	605a      	str	r2, [r3, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     f1a:	685a      	ldr	r2, [r3, #4]
     f1c:	0b92      	lsrs	r2, r2, #14
     f1e:	0392      	lsls	r2, r2, #14
     f20:	605a      	str	r2, [r3, #4]
     f22:	e022      	b.n	f6a <_usb_d_dev_out_next+0x15a>
		ept->trans_count += trans_size;
     f24:	68a2      	ldr	r2, [r4, #8]
     f26:	4452      	add	r2, sl
     f28:	60a2      	str	r2, [r4, #8]
		if (ept->trans_count < ept->trans_size) {
     f2a:	4293      	cmp	r3, r2
     f2c:	d9c1      	bls.n	eb2 <_usb_d_dev_out_next+0xa2>
			trans_next = ept->trans_size - ept->trans_count;
     f2e:	1a9b      	subs	r3, r3, r2
     f30:	b29b      	uxth	r3, r3
			if (ept->flags.bits.use_cache) {
     f32:	7ce1      	ldrb	r1, [r4, #19]
     f34:	0689      	lsls	r1, r1, #26
     f36:	d530      	bpl.n	f9a <_usb_d_dev_out_next+0x18a>
     f38:	8a22      	ldrh	r2, [r4, #16]
     f3a:	1c11      	adds	r1, r2, #0
     f3c:	b292      	uxth	r2, r2
     f3e:	429a      	cmp	r2, r3
     f40:	d900      	bls.n	f44 <_usb_d_dev_out_next+0x134>
     f42:	1c19      	adds	r1, r3, #0
     f44:	b28b      	uxth	r3, r1
				_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
     f46:	68e0      	ldr	r0, [r4, #12]
	bank->ADDR.reg          = addr;
     f48:	016a      	lsls	r2, r5, #5
     f4a:	4936      	ldr	r1, [pc, #216]	; (1024 <_usb_d_dev_out_next+0x214>)
     f4c:	5050      	str	r0, [r2, r1]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
     f4e:	016a      	lsls	r2, r5, #5
     f50:	4934      	ldr	r1, [pc, #208]	; (1024 <_usb_d_dev_out_next+0x214>)
     f52:	1889      	adds	r1, r1, r2
     f54:	684a      	ldr	r2, [r1, #4]
     f56:	049b      	lsls	r3, r3, #18
     f58:	091b      	lsrs	r3, r3, #4
     f5a:	4838      	ldr	r0, [pc, #224]	; (103c <_usb_d_dev_out_next+0x22c>)
     f5c:	4002      	ands	r2, r0
     f5e:	4313      	orrs	r3, r2
     f60:	604b      	str	r3, [r1, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
     f62:	684b      	ldr	r3, [r1, #4]
     f64:	0b9b      	lsrs	r3, r3, #14
     f66:	039b      	lsls	r3, r3, #14
     f68:	604b      	str	r3, [r1, #4]
	if (!isr) {
     f6a:	4643      	mov	r3, r8
     f6c:	2b00      	cmp	r3, #0
     f6e:	d108      	bne.n	f82 <_usb_d_dev_out_next+0x172>
			inten = USB_D_BANK0_INT_FLAGS;
     f70:	2225      	movs	r2, #37	; 0x25
		if (is_ctrl) {
     f72:	464b      	mov	r3, r9
     f74:	2b01      	cmp	r3, #1
     f76:	d02f      	beq.n	fd8 <_usb_d_dev_out_next+0x1c8>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
     f78:	016b      	lsls	r3, r5, #5
     f7a:	4931      	ldr	r1, [pc, #196]	; (1040 <_usb_d_dev_out_next+0x230>)
     f7c:	468c      	mov	ip, r1
     f7e:	4463      	add	r3, ip
     f80:	701a      	strb	r2, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
     f82:	016d      	lsls	r5, r5, #5
     f84:	4b29      	ldr	r3, [pc, #164]	; (102c <_usb_d_dev_out_next+0x21c>)
     f86:	469c      	mov	ip, r3
     f88:	4465      	add	r5, ip
     f8a:	2340      	movs	r3, #64	; 0x40
     f8c:	712b      	strb	r3, [r5, #4]
}
     f8e:	bc3c      	pop	{r2, r3, r4, r5}
     f90:	4690      	mov	r8, r2
     f92:	4699      	mov	r9, r3
     f94:	46a2      	mov	sl, r4
     f96:	46ab      	mov	fp, r5
     f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (trans_next > ept->size) {
     f9a:	8a21      	ldrh	r1, [r4, #16]
     f9c:	428b      	cmp	r3, r1
     f9e:	d90a      	bls.n	fb6 <_usb_d_dev_out_next+0x1a6>
					if (trans_next > USB_D_DEV_TRANS_MAX) {
     fa0:	2180      	movs	r1, #128	; 0x80
     fa2:	0189      	lsls	r1, r1, #6
     fa4:	428b      	cmp	r3, r1
     fa6:	d80d      	bhi.n	fc4 <_usb_d_dev_out_next+0x1b4>
     fa8:	43b3      	bics	r3, r6
				_usbd_ep_set_buf(epn, 0, (uint32_t)&ept->trans_buf[ept->trans_count]);
     faa:	6821      	ldr	r1, [r4, #0]
     fac:	188a      	adds	r2, r1, r2
	bank->ADDR.reg          = addr;
     fae:	0169      	lsls	r1, r5, #5
     fb0:	481c      	ldr	r0, [pc, #112]	; (1024 <_usb_d_dev_out_next+0x214>)
     fb2:	500a      	str	r2, [r1, r0]
     fb4:	e7cb      	b.n	f4e <_usb_d_dev_out_next+0x13e>
				} else if (trans_next < ept->size) {
     fb6:	428b      	cmp	r3, r1
     fb8:	d2f7      	bcs.n	faa <_usb_d_dev_out_next+0x19a>
					ept->flags.bits.use_cache = 1;
     fba:	7ce1      	ldrb	r1, [r4, #19]
     fbc:	2020      	movs	r0, #32
     fbe:	4301      	orrs	r1, r0
     fc0:	74e1      	strb	r1, [r4, #19]
     fc2:	e7f2      	b.n	faa <_usb_d_dev_out_next+0x19a>
						trans_next = USB_D_DEV_TRANS_MAX;
     fc4:	2380      	movs	r3, #128	; 0x80
     fc6:	019b      	lsls	r3, r3, #6
     fc8:	e7ef      	b.n	faa <_usb_d_dev_out_next+0x19a>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
     fca:	016b      	lsls	r3, r5, #5
     fcc:	4a19      	ldr	r2, [pc, #100]	; (1034 <_usb_d_dev_out_next+0x224>)
     fce:	4694      	mov	ip, r2
     fd0:	4463      	add	r3, ip
     fd2:	222d      	movs	r2, #45	; 0x2d
     fd4:	701a      	strb	r2, [r3, #0]
     fd6:	e776      	b.n	ec6 <_usb_d_dev_out_next+0xb6>
	bank->STATUS_BK.reg     = 0;
     fd8:	016a      	lsls	r2, r5, #5
     fda:	4b12      	ldr	r3, [pc, #72]	; (1024 <_usb_d_dev_out_next+0x214>)
     fdc:	189b      	adds	r3, r3, r2
     fde:	2200      	movs	r2, #0
     fe0:	769a      	strb	r2, [r3, #26]
			inten = USB_D_BANK0_INT_FLAGS | USB_DEVICE_EPINTFLAG_TRFAIL1;
     fe2:	322d      	adds	r2, #45	; 0x2d
     fe4:	e7c8      	b.n	f78 <_usb_d_dev_out_next+0x168>
	uint16_t           last_pkt   = last_trans & size_mask;
     fe6:	05bf      	lsls	r7, r7, #22
     fe8:	0dbf      	lsrs	r7, r7, #22
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
     fea:	7cc3      	ldrb	r3, [r0, #19]
     fec:	2207      	movs	r2, #7
     fee:	401a      	ands	r2, r3
     ff0:	4691      	mov	r9, r2
     ff2:	e735      	b.n	e60 <_usb_d_dev_out_next+0x50>
	} else if (isr && last_pkt < ept->size) {
     ff4:	4643      	mov	r3, r8
     ff6:	2b00      	cmp	r3, #0
     ff8:	d10c      	bne.n	1014 <_usb_d_dev_out_next+0x204>
		ept->trans_count += trans_size;
     ffa:	68a3      	ldr	r3, [r4, #8]
     ffc:	4453      	add	r3, sl
     ffe:	60a3      	str	r3, [r4, #8]
    1000:	e757      	b.n	eb2 <_usb_d_dev_out_next+0xa2>
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    1002:	7cc3      	ldrb	r3, [r0, #19]
    1004:	2207      	movs	r2, #7
    1006:	401a      	ands	r2, r3
    1008:	4691      	mov	r9, r2
	uint16_t           last_pkt   = last_trans & size_mask;
    100a:	2700      	movs	r7, #0
	bool               is_ctrl = _usb_d_dev_ep_is_ctrl(ept);
    100c:	2300      	movs	r3, #0
    100e:	469b      	mov	fp, r3
    1010:	469a      	mov	sl, r3
    1012:	e72b      	b.n	e6c <_usb_d_dev_out_next+0x5c>
	} else if (isr && last_pkt < ept->size) {
    1014:	8a23      	ldrh	r3, [r4, #16]
    1016:	42bb      	cmp	r3, r7
    1018:	d900      	bls.n	101c <_usb_d_dev_out_next+0x20c>
    101a:	e743      	b.n	ea4 <_usb_d_dev_out_next+0x94>
		ept->trans_count += trans_size;
    101c:	68a3      	ldr	r3, [r4, #8]
    101e:	4453      	add	r3, sl
    1020:	60a3      	str	r3, [r4, #8]
    1022:	e746      	b.n	eb2 <_usb_d_dev_out_next+0xa2>
    1024:	200000ec 	.word	0x200000ec
    1028:	000003ff 	.word	0x000003ff
    102c:	41000100 	.word	0x41000100
    1030:	00002dad 	.word	0x00002dad
    1034:	41000108 	.word	0x41000108
    1038:	00000a91 	.word	0x00000a91
    103c:	f0003fff 	.word	0xf0003fff
    1040:	41000109 	.word	0x41000109

00001044 <_usb_d_dev_init>:
{
    1044:	b510      	push	{r4, lr}
	return ((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg;
    1046:	2382      	movs	r3, #130	; 0x82
    1048:	05db      	lsls	r3, r3, #23
    104a:	789b      	ldrb	r3, [r3, #2]
	if (!hri_usbdevice_is_syncing(hw, USB_SYNCBUSY_SWRST)) {
    104c:	07db      	lsls	r3, r3, #31
    104e:	d424      	bmi.n	109a <_usb_d_dev_init+0x56>
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1050:	2182      	movs	r1, #130	; 0x82
    1052:	05c9      	lsls	r1, r1, #23
    1054:	2203      	movs	r2, #3
    1056:	788b      	ldrb	r3, [r1, #2]
    1058:	4213      	tst	r3, r2
    105a:	d1fc      	bne.n	1056 <_usb_d_dev_init+0x12>

static inline hri_usb_ctrla_reg_t hri_usb_get_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_usb_wait_for_sync(hw, USB_SYNCBUSY_MASK);
	tmp = ((Usb *)hw)->HOST.CTRLA.reg;
    105c:	2382      	movs	r3, #130	; 0x82
    105e:	05db      	lsls	r3, r3, #23
    1060:	781b      	ldrb	r3, [r3, #0]
		if (hri_usbdevice_get_CTRLA_reg(hw, USB_CTRLA_ENABLE)) {
    1062:	079b      	lsls	r3, r3, #30
    1064:	d510      	bpl.n	1088 <_usb_d_dev_init+0x44>
	((Usb *)hw)->HOST.CTRLA.reg &= ~USB_CTRLA_ENABLE;
    1066:	2282      	movs	r2, #130	; 0x82
    1068:	05d2      	lsls	r2, r2, #23
    106a:	7813      	ldrb	r3, [r2, #0]
    106c:	2102      	movs	r1, #2
    106e:	438b      	bics	r3, r1
    1070:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1072:	0011      	movs	r1, r2
    1074:	2203      	movs	r2, #3
    1076:	788b      	ldrb	r3, [r1, #2]
    1078:	4213      	tst	r3, r2
    107a:	d1fc      	bne.n	1076 <_usb_d_dev_init+0x32>
    107c:	2182      	movs	r1, #130	; 0x82
    107e:	05c9      	lsls	r1, r1, #23
    1080:	2202      	movs	r2, #2
    1082:	788b      	ldrb	r3, [r1, #2]
    1084:	4213      	tst	r3, r2
    1086:	d1fc      	bne.n	1082 <_usb_d_dev_init+0x3e>
}

static inline void hri_usb_write_CTRLA_reg(const void *const hw, hri_usb_ctrla_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.CTRLA.reg = data;
    1088:	2201      	movs	r2, #1
    108a:	2382      	movs	r3, #130	; 0x82
    108c:	05db      	lsls	r3, r3, #23
    108e:	701a      	strb	r2, [r3, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    1090:	0019      	movs	r1, r3
    1092:	3202      	adds	r2, #2
    1094:	788b      	ldrb	r3, [r1, #2]
    1096:	4213      	tst	r3, r2
    1098:	d1fc      	bne.n	1094 <_usb_d_dev_init+0x50>
    109a:	2182      	movs	r1, #130	; 0x82
    109c:	05c9      	lsls	r1, r1, #23
    109e:	2201      	movs	r2, #1
    10a0:	788b      	ldrb	r3, [r1, #2]
    10a2:	4213      	tst	r3, r2
    10a4:	d1fc      	bne.n	10a0 <_usb_d_dev_init+0x5c>
	dev_inst.callbacks.sof   = (_usb_d_dev_sof_cb_t)_dummy_func_no_return;
    10a6:	4b1e      	ldr	r3, [pc, #120]	; (1120 <_usb_d_dev_init+0xdc>)
    10a8:	4a1e      	ldr	r2, [pc, #120]	; (1124 <_usb_d_dev_init+0xe0>)
    10aa:	661a      	str	r2, [r3, #96]	; 0x60
	dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)_dummy_func_no_return;
    10ac:	665a      	str	r2, [r3, #100]	; 0x64
	dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)_dummy_func_no_return;
    10ae:	669a      	str	r2, [r3, #104]	; 0x68
	dev_inst.ep_callbacks.more  = (_usb_d_dev_ep_cb_more_t)_dummy_func_no_return;
    10b0:	66da      	str	r2, [r3, #108]	; 0x6c
	dev_inst.ep_callbacks.done  = (_usb_d_dev_ep_cb_done_t)_dummy_func_no_return;
    10b2:	671a      	str	r2, [r3, #112]	; 0x70
	_usb_d_dev_reset_epts();
    10b4:	4b1c      	ldr	r3, [pc, #112]	; (1128 <_usb_d_dev_init+0xe4>)
    10b6:	4798      	blx	r3
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSN_POS / 32)) >> (NVM_USB_PAD_TRANSN_POS % 32))
    10b8:	4b1c      	ldr	r3, [pc, #112]	; (112c <_usb_d_dev_init+0xe8>)
    10ba:	681b      	ldr	r3, [r3, #0]
    10bc:	0b5a      	lsrs	r2, r3, #13
	uint32_t pad_transn
    10be:	211f      	movs	r1, #31
    10c0:	400a      	ands	r2, r1
	    = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRANSP_POS / 32)) >> (NVM_USB_PAD_TRANSP_POS % 32))
    10c2:	0c98      	lsrs	r0, r3, #18
	uint32_t pad_transp
    10c4:	4001      	ands	r1, r0
	uint32_t pad_trim = (*((uint32_t *)(NVMCTRL_OTP4) + (NVM_USB_PAD_TRIM_POS / 32)) >> (NVM_USB_PAD_TRIM_POS % 32))
    10c6:	019b      	lsls	r3, r3, #6
    10c8:	0f5b      	lsrs	r3, r3, #29
	if (pad_transn == 0x1F) {
    10ca:	2a1f      	cmp	r2, #31
    10cc:	d021      	beq.n	1112 <_usb_d_dev_init+0xce>
	if (pad_transp == 0x1F) {
    10ce:	291f      	cmp	r1, #31
    10d0:	d021      	beq.n	1116 <_usb_d_dev_init+0xd2>
	if (pad_trim == 0x7) {
    10d2:	2b07      	cmp	r3, #7
    10d4:	d021      	beq.n	111a <_usb_d_dev_init+0xd6>
	hw->DEVICE.PADCAL.reg = USB_PADCAL_TRANSN(pad_transn) | USB_PADCAL_TRANSP(pad_transp) | USB_PADCAL_TRIM(pad_trim);
    10d6:	0192      	lsls	r2, r2, #6
    10d8:	430a      	orrs	r2, r1
    10da:	031b      	lsls	r3, r3, #12
    10dc:	4313      	orrs	r3, r2
    10de:	2282      	movs	r2, #130	; 0x82
    10e0:	05d2      	lsls	r2, r2, #23
    10e2:	8513      	strh	r3, [r2, #40]	; 0x28
	hw->DEVICE.QOSCTRL.bit.CQOS = 3;
    10e4:	78d3      	ldrb	r3, [r2, #3]
    10e6:	2103      	movs	r1, #3
    10e8:	430b      	orrs	r3, r1
    10ea:	70d3      	strb	r3, [r2, #3]
	hw->DEVICE.QOSCTRL.bit.DQOS = 3;
    10ec:	78d3      	ldrb	r3, [r2, #3]
    10ee:	210c      	movs	r1, #12
    10f0:	430b      	orrs	r3, r1
    10f2:	70d3      	strb	r3, [r2, #3]
	((Usb *)hw)->HOST.CTRLA.reg = data;
    10f4:	2304      	movs	r3, #4
    10f6:	7013      	strb	r3, [r2, #0]
	while (((Usb *)hw)->DEVICE.SYNCBUSY.reg & reg) {
    10f8:	0011      	movs	r1, r2
    10fa:	2203      	movs	r2, #3
    10fc:	788b      	ldrb	r3, [r1, #2]
    10fe:	4213      	tst	r3, r2
    1100:	d1fc      	bne.n	10fc <_usb_d_dev_init+0xb8>
}

static inline void hri_usb_write_DESCADD_reg(const void *const hw, hri_usb_descadd_reg_t data)
{
	USB_CRITICAL_SECTION_ENTER();
	((Usb *)hw)->HOST.DESCADD.reg = data;
    1102:	2382      	movs	r3, #130	; 0x82
    1104:	05db      	lsls	r3, r3, #23
    1106:	4a06      	ldr	r2, [pc, #24]	; (1120 <_usb_d_dev_init+0xdc>)
    1108:	625a      	str	r2, [r3, #36]	; 0x24
	((Usb *)hw)->DEVICE.CTRLB.reg = data;
    110a:	2201      	movs	r2, #1
    110c:	811a      	strh	r2, [r3, #8]
}
    110e:	2000      	movs	r0, #0
    1110:	bd10      	pop	{r4, pc}
		pad_transn = 5;
    1112:	3a1a      	subs	r2, #26
    1114:	e7db      	b.n	10ce <_usb_d_dev_init+0x8a>
		pad_transp = 29;
    1116:	3902      	subs	r1, #2
    1118:	e7db      	b.n	10d2 <_usb_d_dev_init+0x8e>
		pad_trim = 5;
    111a:	3b02      	subs	r3, #2
    111c:	e7db      	b.n	10d6 <_usb_d_dev_init+0x92>
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	200000ec 	.word	0x200000ec
    1124:	000009d1 	.word	0x000009d1
    1128:	00000c25 	.word	0x00000c25
    112c:	0080601c 	.word	0x0080601c

00001130 <_usb_d_dev_set_address>:
	hri_usbdevice_write_DADD_reg(USB, USB_DEVICE_DADD_ADDEN | USB_DEVICE_DADD_DADD(addr));
    1130:	2380      	movs	r3, #128	; 0x80
    1132:	4318      	orrs	r0, r3
	((Usb *)hw)->DEVICE.DADD.reg = data;
    1134:	2382      	movs	r3, #130	; 0x82
    1136:	05db      	lsls	r3, r3, #23
    1138:	7298      	strb	r0, [r3, #10]
}
    113a:	4770      	bx	lr

0000113c <_usb_d_dev_ep_init>:
{
    113c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    113e:	240f      	movs	r4, #15
    1140:	4004      	ands	r4, r0
    1142:	b243      	sxtb	r3, r0
    1144:	469c      	mov	ip, r3
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1146:	2c00      	cmp	r4, #0
    1148:	d054      	beq.n	11f4 <_usb_d_dev_ep_init+0xb8>
    114a:	0025      	movs	r5, r4
    114c:	2b00      	cmp	r3, #0
    114e:	db07      	blt.n	1160 <_usb_d_dev_ep_init+0x24>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    1150:	2303      	movs	r3, #3
    1152:	4019      	ands	r1, r3
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    1154:	0027      	movs	r7, r4
	if (epn > CONF_USB_D_MAX_EP_N) {
    1156:	2c02      	cmp	r4, #2
    1158:	d950      	bls.n	11fc <_usb_d_dev_ep_init+0xc0>
		return -USB_ERR_PARAM;
    115a:	2012      	movs	r0, #18
    115c:	4240      	negs	r0, r0
    115e:	e025      	b.n	11ac <_usb_d_dev_ep_init+0x70>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1160:	1ca5      	adds	r5, r4, #2
    1162:	e7f5      	b.n	1150 <_usb_d_dev_ep_init+0x14>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1164:	4663      	mov	r3, ip
    1166:	2b00      	cmp	r3, #0
    1168:	db21      	blt.n	11ae <_usb_d_dev_ep_init+0x72>
    116a:	007b      	lsls	r3, r7, #1
    116c:	19db      	adds	r3, r3, r7
    116e:	009b      	lsls	r3, r3, #2
    1170:	4c3b      	ldr	r4, [pc, #236]	; (1260 <_usb_d_dev_ep_init+0x124>)
    1172:	591b      	ldr	r3, [r3, r4]
    1174:	2b00      	cmp	r3, #0
    1176:	d166      	bne.n	1246 <_usb_d_dev_ep_init+0x10a>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    1178:	007b      	lsls	r3, r7, #1
    117a:	19df      	adds	r7, r3, r7
    117c:	00bf      	lsls	r7, r7, #2
    117e:	4b38      	ldr	r3, [pc, #224]	; (1260 <_usb_d_dev_ep_init+0x124>)
    1180:	58ff      	ldr	r7, [r7, r3]
    1182:	4b38      	ldr	r3, [pc, #224]	; (1264 <_usb_d_dev_ep_init+0x128>)
    1184:	00ae      	lsls	r6, r5, #2
    1186:	1974      	adds	r4, r6, r5
    1188:	00a4      	lsls	r4, r4, #2
    118a:	191c      	adds	r4, r3, r4
    118c:	3480      	adds	r4, #128	; 0x80
    118e:	6027      	str	r7, [r4, #0]
	ept->size     = max_pkt_siz;
    1190:	3360      	adds	r3, #96	; 0x60
    1192:	1974      	adds	r4, r6, r5
    1194:	00a4      	lsls	r4, r4, #2
    1196:	191c      	adds	r4, r3, r4
    1198:	84a2      	strh	r2, [r4, #36]	; 0x24
	ept->flags.u8 = (ep_type + 1);
    119a:	3427      	adds	r4, #39	; 0x27
    119c:	3101      	adds	r1, #1
    119e:	7021      	strb	r1, [r4, #0]
	ept->ep       = ep;
    11a0:	1975      	adds	r5, r6, r5
    11a2:	00ad      	lsls	r5, r5, #2
    11a4:	195b      	adds	r3, r3, r5
    11a6:	3326      	adds	r3, #38	; 0x26
    11a8:	7018      	strb	r0, [r3, #0]
	return USB_OK;
    11aa:	2000      	movs	r0, #0
}
    11ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    11ae:	007b      	lsls	r3, r7, #1
    11b0:	19db      	adds	r3, r3, r7
    11b2:	009b      	lsls	r3, r3, #2
    11b4:	4c2a      	ldr	r4, [pc, #168]	; (1260 <_usb_d_dev_ep_init+0x124>)
    11b6:	18e3      	adds	r3, r4, r3
    11b8:	685b      	ldr	r3, [r3, #4]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d106      	bne.n	11cc <_usb_d_dev_ep_init+0x90>
	ept->cache    = (uint8_t *)(dir ? pcfg->i_cache : pcfg->cache);
    11be:	007b      	lsls	r3, r7, #1
    11c0:	19df      	adds	r7, r3, r7
    11c2:	00bf      	lsls	r7, r7, #2
    11c4:	4b26      	ldr	r3, [pc, #152]	; (1260 <_usb_d_dev_ep_init+0x124>)
    11c6:	19df      	adds	r7, r3, r7
    11c8:	687f      	ldr	r7, [r7, #4]
    11ca:	e7da      	b.n	1182 <_usb_d_dev_ep_init+0x46>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    11cc:	007b      	lsls	r3, r7, #1
    11ce:	19db      	adds	r3, r3, r7
    11d0:	009b      	lsls	r3, r3, #2
    11d2:	4c23      	ldr	r4, [pc, #140]	; (1260 <_usb_d_dev_ep_init+0x124>)
    11d4:	18e3      	adds	r3, r4, r3
    11d6:	895b      	ldrh	r3, [r3, #10]
    11d8:	4293      	cmp	r3, r2
    11da:	daf0      	bge.n	11be <_usb_d_dev_ep_init+0x82>
		return -USB_ERR_FUNC;
    11dc:	2013      	movs	r0, #19
    11de:	4240      	negs	r0, r0
    11e0:	e7e4      	b.n	11ac <_usb_d_dev_ep_init+0x70>
		return -USB_ERR_REDO;
    11e2:	2014      	movs	r0, #20
    11e4:	4240      	negs	r0, r0
    11e6:	e7e1      	b.n	11ac <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_REDO;
    11e8:	2014      	movs	r0, #20
    11ea:	4240      	negs	r0, r0
    11ec:	e7de      	b.n	11ac <_usb_d_dev_ep_init+0x70>
			return -USB_ERR_FUNC;
    11ee:	2013      	movs	r0, #19
    11f0:	4240      	negs	r0, r0
    11f2:	e7db      	b.n	11ac <_usb_d_dev_ep_init+0x70>
	uint8_t                        ep_type = attr & USB_EP_XTYPE_MASK;
    11f4:	2303      	movs	r3, #3
    11f6:	4019      	ands	r1, r3
	return &dev_inst.ep[ep_index];
    11f8:	2500      	movs	r5, #0
	const struct _usb_ep_cfg_item *pcfg    = &_usb_ep_cfgs[epn];
    11fa:	2700      	movs	r7, #0
	if (ept->ep != 0xFF) {
    11fc:	00ab      	lsls	r3, r5, #2
    11fe:	195b      	adds	r3, r3, r5
    1200:	009e      	lsls	r6, r3, #2
    1202:	4b18      	ldr	r3, [pc, #96]	; (1264 <_usb_d_dev_ep_init+0x128>)
    1204:	199b      	adds	r3, r3, r6
    1206:	3386      	adds	r3, #134	; 0x86
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2bff      	cmp	r3, #255	; 0xff
    120c:	d1e9      	bne.n	11e2 <_usb_d_dev_ep_init+0xa6>
	if (ep_type == USB_EP_XTYPE_CTRL) {
    120e:	2900      	cmp	r1, #0
    1210:	d1a8      	bne.n	1164 <_usb_d_dev_ep_init+0x28>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1212:	2c00      	cmp	r4, #0
    1214:	d004      	beq.n	1220 <_usb_d_dev_ep_init+0xe4>
    1216:	4663      	mov	r3, ip
    1218:	2b00      	cmp	r3, #0
    121a:	db01      	blt.n	1220 <_usb_d_dev_ep_init+0xe4>
    121c:	3402      	adds	r4, #2
    121e:	b2e4      	uxtb	r4, r4
		if (ept_in->ep != 0xFF) {
    1220:	00a3      	lsls	r3, r4, #2
    1222:	191b      	adds	r3, r3, r4
    1224:	009b      	lsls	r3, r3, #2
    1226:	4c0f      	ldr	r4, [pc, #60]	; (1264 <_usb_d_dev_ep_init+0x128>)
    1228:	18e4      	adds	r4, r4, r3
    122a:	3486      	adds	r4, #134	; 0x86
    122c:	7823      	ldrb	r3, [r4, #0]
    122e:	2bff      	cmp	r3, #255	; 0xff
    1230:	d1da      	bne.n	11e8 <_usb_d_dev_ep_init+0xac>
		if (pcfg->cache == NULL) {
    1232:	007b      	lsls	r3, r7, #1
    1234:	19db      	adds	r3, r3, r7
    1236:	009b      	lsls	r3, r3, #2
    1238:	4c09      	ldr	r4, [pc, #36]	; (1260 <_usb_d_dev_ep_init+0x124>)
    123a:	591b      	ldr	r3, [r3, r4]
    123c:	2b00      	cmp	r3, #0
    123e:	d0d6      	beq.n	11ee <_usb_d_dev_ep_init+0xb2>
	if ((dir ? pcfg->i_cache : pcfg->cache) && ((dir ? pcfg->i_size : pcfg->size) < max_pkt_siz)) {
    1240:	4663      	mov	r3, ip
    1242:	2b00      	cmp	r3, #0
    1244:	dbb3      	blt.n	11ae <_usb_d_dev_ep_init+0x72>
    1246:	007b      	lsls	r3, r7, #1
    1248:	19db      	adds	r3, r3, r7
    124a:	009b      	lsls	r3, r3, #2
    124c:	4c04      	ldr	r4, [pc, #16]	; (1260 <_usb_d_dev_ep_init+0x124>)
    124e:	18e3      	adds	r3, r4, r3
    1250:	891b      	ldrh	r3, [r3, #8]
    1252:	4293      	cmp	r3, r2
    1254:	db00      	blt.n	1258 <_usb_d_dev_ep_init+0x11c>
    1256:	e78f      	b.n	1178 <_usb_d_dev_ep_init+0x3c>
		return -USB_ERR_FUNC;
    1258:	2013      	movs	r0, #19
    125a:	4240      	negs	r0, r0
    125c:	e7a6      	b.n	11ac <_usb_d_dev_ep_init+0x70>
    125e:	46c0      	nop			; (mov r8, r8)
    1260:	00002df0 	.word	0x00002df0
    1264:	200000ec 	.word	0x200000ec

00001268 <_usb_d_dev_ep_deinit>:
{
    1268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    126a:	0005      	movs	r5, r0
	uint8_t               epn = USB_EP_GET_N(ep);
    126c:	240f      	movs	r4, #15
    126e:	4004      	ands	r4, r0
    1270:	b247      	sxtb	r7, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1272:	2c00      	cmp	r4, #0
    1274:	d010      	beq.n	1298 <_usb_d_dev_ep_deinit+0x30>
    1276:	0020      	movs	r0, r4
    1278:	2f00      	cmp	r7, #0
    127a:	db02      	blt.n	1282 <_usb_d_dev_ep_deinit+0x1a>
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    127c:	2c02      	cmp	r4, #2
    127e:	d902      	bls.n	1286 <_usb_d_dev_ep_deinit+0x1e>
}
    1280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1282:	1ca0      	adds	r0, r4, #2
    1284:	e7fa      	b.n	127c <_usb_d_dev_ep_deinit+0x14>
	return &dev_inst.ep[ep_index];
    1286:	0006      	movs	r6, r0
    1288:	3001      	adds	r0, #1
    128a:	0083      	lsls	r3, r0, #2
    128c:	1818      	adds	r0, r3, r0
    128e:	0080      	lsls	r0, r0, #2
    1290:	4b27      	ldr	r3, [pc, #156]	; (1330 <_usb_d_dev_ep_deinit+0xc8>)
    1292:	3360      	adds	r3, #96	; 0x60
    1294:	1818      	adds	r0, r3, r0
    1296:	e002      	b.n	129e <_usb_d_dev_ep_deinit+0x36>
    1298:	4825      	ldr	r0, [pc, #148]	; (1330 <_usb_d_dev_ep_deinit+0xc8>)
    129a:	3074      	adds	r0, #116	; 0x74
    129c:	2600      	movs	r6, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    129e:	00b3      	lsls	r3, r6, #2
    12a0:	199b      	adds	r3, r3, r6
    12a2:	009a      	lsls	r2, r3, #2
    12a4:	4b22      	ldr	r3, [pc, #136]	; (1330 <_usb_d_dev_ep_deinit+0xc8>)
    12a6:	189b      	adds	r3, r3, r2
    12a8:	3386      	adds	r3, #134	; 0x86
    12aa:	781b      	ldrb	r3, [r3, #0]
    12ac:	2bff      	cmp	r3, #255	; 0xff
    12ae:	d0e7      	beq.n	1280 <_usb_d_dev_ep_deinit+0x18>
	_usb_d_dev_trans_stop(ept, dir, USB_TRANS_RESET);
    12b0:	0ff9      	lsrs	r1, r7, #31
    12b2:	2203      	movs	r2, #3
    12b4:	4b1f      	ldr	r3, [pc, #124]	; (1334 <_usb_d_dev_ep_deinit+0xcc>)
    12b6:	4798      	blx	r3
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    12b8:	00b3      	lsls	r3, r6, #2
    12ba:	199b      	adds	r3, r3, r6
    12bc:	009a      	lsls	r2, r3, #2
    12be:	4b1c      	ldr	r3, [pc, #112]	; (1330 <_usb_d_dev_ep_deinit+0xc8>)
    12c0:	189b      	adds	r3, r3, r2
    12c2:	3380      	adds	r3, #128	; 0x80
    12c4:	79da      	ldrb	r2, [r3, #7]
    12c6:	2307      	movs	r3, #7
    12c8:	4013      	ands	r3, r2
    12ca:	2b01      	cmp	r3, #1
    12cc:	d01c      	beq.n	1308 <_usb_d_dev_ep_deinit+0xa0>
	} else if (USB_EP_GET_DIR(ep)) {
    12ce:	2f00      	cmp	r7, #0
    12d0:	db21      	blt.n	1316 <_usb_d_dev_ep_deinit+0xae>
    12d2:	016d      	lsls	r5, r5, #5
    12d4:	2382      	movs	r3, #130	; 0x82
    12d6:	05db      	lsls	r3, r3, #23
    12d8:	469c      	mov	ip, r3
    12da:	4465      	add	r5, ip
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE0_Msk;
    12dc:	2280      	movs	r2, #128	; 0x80
    12de:	0052      	lsls	r2, r2, #1
    12e0:	5cab      	ldrb	r3, [r5, r2]
    12e2:	2107      	movs	r1, #7
    12e4:	438b      	bics	r3, r1
    12e6:	54ab      	strb	r3, [r5, r2]
	ept->flags.u8 = 0;
    12e8:	4b11      	ldr	r3, [pc, #68]	; (1330 <_usb_d_dev_ep_deinit+0xc8>)
    12ea:	3360      	adds	r3, #96	; 0x60
    12ec:	00b1      	lsls	r1, r6, #2
    12ee:	198a      	adds	r2, r1, r6
    12f0:	0092      	lsls	r2, r2, #2
    12f2:	189a      	adds	r2, r3, r2
    12f4:	3227      	adds	r2, #39	; 0x27
    12f6:	2000      	movs	r0, #0
    12f8:	7010      	strb	r0, [r2, #0]
	ept->ep       = 0xFF;
    12fa:	198e      	adds	r6, r1, r6
    12fc:	00b6      	lsls	r6, r6, #2
    12fe:	199b      	adds	r3, r3, r6
    1300:	3326      	adds	r3, #38	; 0x26
    1302:	22ff      	movs	r2, #255	; 0xff
    1304:	701a      	strb	r2, [r3, #0]
    1306:	e7bb      	b.n	1280 <_usb_d_dev_ep_deinit+0x18>
		hw->DEVICE.DeviceEndpoint[ep].EPCFG.reg = 0;
    1308:	3508      	adds	r5, #8
    130a:	016d      	lsls	r5, r5, #5
    130c:	2200      	movs	r2, #0
    130e:	2382      	movs	r3, #130	; 0x82
    1310:	05db      	lsls	r3, r3, #23
    1312:	54ea      	strb	r2, [r5, r3]
    1314:	e7e8      	b.n	12e8 <_usb_d_dev_ep_deinit+0x80>
    1316:	0164      	lsls	r4, r4, #5
    1318:	2382      	movs	r3, #130	; 0x82
    131a:	05db      	lsls	r3, r3, #23
    131c:	469c      	mov	ip, r3
    131e:	4464      	add	r4, ip
		hw->DEVICE.DeviceEndpoint[USB_EP_GET_N(ep)].EPCFG.reg &= ~USB_DEVICE_EPCFG_EPTYPE1_Msk;
    1320:	2280      	movs	r2, #128	; 0x80
    1322:	0052      	lsls	r2, r2, #1
    1324:	5ca3      	ldrb	r3, [r4, r2]
    1326:	2170      	movs	r1, #112	; 0x70
    1328:	438b      	bics	r3, r1
    132a:	54a3      	strb	r3, [r4, r2]
    132c:	e7dc      	b.n	12e8 <_usb_d_dev_ep_deinit+0x80>
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	200000ec 	.word	0x200000ec
    1334:	00000ab9 	.word	0x00000ab9

00001338 <_usb_d_dev_ep_enable>:
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	46c6      	mov	lr, r8
    133c:	b500      	push	{lr}
	uint8_t               epn   = USB_EP_GET_N(ep);
    133e:	220f      	movs	r2, #15
    1340:	4002      	ands	r2, r0
    1342:	b240      	sxtb	r0, r0
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1344:	2a00      	cmp	r2, #0
    1346:	d100      	bne.n	134a <_usb_d_dev_ep_enable+0x12>
    1348:	e095      	b.n	1476 <_usb_d_dev_ep_enable+0x13e>
    134a:	0013      	movs	r3, r2
    134c:	2800      	cmp	r0, #0
    134e:	db0c      	blt.n	136a <_usb_d_dev_ep_enable+0x32>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1350:	0011      	movs	r1, r2
    1352:	3208      	adds	r2, #8
    1354:	0152      	lsls	r2, r2, #5
    1356:	2482      	movs	r4, #130	; 0x82
    1358:	05e4      	lsls	r4, r4, #23
    135a:	5d15      	ldrb	r5, [r2, r4]
    135c:	b2ed      	uxtb	r5, r5
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    135e:	2902      	cmp	r1, #2
    1360:	d800      	bhi.n	1364 <_usb_d_dev_ep_enable+0x2c>
    1362:	e090      	b.n	1486 <_usb_d_dev_ep_enable+0x14e>
		return -USB_ERR_PARAM;
    1364:	2012      	movs	r0, #18
    1366:	4240      	negs	r0, r0
    1368:	e0e9      	b.n	153e <_usb_d_dev_ep_enable+0x206>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    136a:	1c93      	adds	r3, r2, #2
    136c:	e7f0      	b.n	1350 <_usb_d_dev_ep_enable+0x18>
		if (epcfg & (USB_DEVICE_EPCFG_EPTYPE1_Msk | USB_DEVICE_EPCFG_EPTYPE0_Msk)) {
    136e:	3276      	adds	r2, #118	; 0x76
    1370:	422a      	tst	r2, r5
    1372:	d177      	bne.n	1464 <_usb_d_dev_ep_enable+0x12c>
    1374:	2282      	movs	r2, #130	; 0x82
    1376:	05d2      	lsls	r2, r2, #23
    1378:	4690      	mov	r8, r2
    137a:	4444      	add	r4, r8
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    137c:	2011      	movs	r0, #17
    137e:	2280      	movs	r2, #128	; 0x80
    1380:	0052      	lsls	r2, r2, #1
    1382:	54a0      	strb	r0, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1384:	009a      	lsls	r2, r3, #2
    1386:	18d2      	adds	r2, r2, r3
    1388:	0095      	lsls	r5, r2, #2
    138a:	4aa0      	ldr	r2, [pc, #640]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    138c:	3260      	adds	r2, #96	; 0x60
    138e:	1952      	adds	r2, r2, r5
    1390:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    1392:	0395      	lsls	r5, r2, #14
    1394:	489e      	ldr	r0, [pc, #632]	; (1610 <_usb_d_dev_ep_enable+0x2d8>)
    1396:	4005      	ands	r5, r0
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1398:	2080      	movs	r0, #128	; 0x80
    139a:	0080      	lsls	r0, r0, #2
    139c:	4282      	cmp	r2, r0
    139e:	d900      	bls.n	13a2 <_usb_d_dev_ep_enable+0x6a>
    13a0:	e0d0      	b.n	1544 <_usb_d_dev_ep_enable+0x20c>
    13a2:	3801      	subs	r0, #1
    13a4:	38ff      	subs	r0, #255	; 0xff
    13a6:	4282      	cmp	r2, r0
    13a8:	d900      	bls.n	13ac <_usb_d_dev_ep_enable+0x74>
    13aa:	e117      	b.n	15dc <_usb_d_dev_ep_enable+0x2a4>
    13ac:	2a80      	cmp	r2, #128	; 0x80
    13ae:	d900      	bls.n	13b2 <_usb_d_dev_ep_enable+0x7a>
    13b0:	e104      	b.n	15bc <_usb_d_dev_ep_enable+0x284>
    13b2:	2a40      	cmp	r2, #64	; 0x40
    13b4:	d900      	bls.n	13b8 <_usb_d_dev_ep_enable+0x80>
    13b6:	e119      	b.n	15ec <_usb_d_dev_ep_enable+0x2b4>
    13b8:	2a20      	cmp	r2, #32
    13ba:	d900      	bls.n	13be <_usb_d_dev_ep_enable+0x86>
    13bc:	e106      	b.n	15cc <_usb_d_dev_ep_enable+0x294>
    13be:	2a10      	cmp	r2, #16
    13c0:	d900      	bls.n	13c4 <_usb_d_dev_ep_enable+0x8c>
    13c2:	e11b      	b.n	15fc <_usb_d_dev_ep_enable+0x2c4>
    13c4:	38f8      	subs	r0, #248	; 0xf8
    13c6:	4290      	cmp	r0, r2
    13c8:	4180      	sbcs	r0, r0
    13ca:	4240      	negs	r0, r0
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    13cc:	0706      	lsls	r6, r0, #28
    13ce:	4335      	orrs	r5, r6
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    13d0:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    13d2:	0495      	lsls	r5, r2, #18
    13d4:	0cad      	lsrs	r5, r5, #18
    13d6:	e0bc      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE1_Msk) {
    13d8:	2270      	movs	r2, #112	; 0x70
    13da:	422a      	tst	r2, r5
    13dc:	d145      	bne.n	146a <_usb_d_dev_ep_enable+0x132>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE1(ept->flags.bits.eptype);
    13de:	488b      	ldr	r0, [pc, #556]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    13e0:	009e      	lsls	r6, r3, #2
    13e2:	18f2      	adds	r2, r6, r3
    13e4:	0092      	lsls	r2, r2, #2
    13e6:	1882      	adds	r2, r0, r2
    13e8:	3280      	adds	r2, #128	; 0x80
    13ea:	79d2      	ldrb	r2, [r2, #7]
    13ec:	0752      	lsls	r2, r2, #29
    13ee:	0e52      	lsrs	r2, r2, #25
    13f0:	4315      	orrs	r5, r2
    13f2:	2282      	movs	r2, #130	; 0x82
    13f4:	05d2      	lsls	r2, r2, #23
    13f6:	4694      	mov	ip, r2
    13f8:	4464      	add	r4, ip
    13fa:	2280      	movs	r2, #128	; 0x80
    13fc:	0052      	lsls	r2, r2, #1
    13fe:	54a5      	strb	r5, [r4, r2]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1400:	3060      	adds	r0, #96	; 0x60
    1402:	18f6      	adds	r6, r6, r3
    1404:	00b6      	lsls	r6, r6, #2
    1406:	1980      	adds	r0, r0, r6
    1408:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    140a:	0485      	lsls	r5, r0, #18
    140c:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    140e:	3201      	adds	r2, #1
    1410:	32ff      	adds	r2, #255	; 0xff
    1412:	2307      	movs	r3, #7
    1414:	4290      	cmp	r0, r2
    1416:	d814      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    1418:	3a01      	subs	r2, #1
    141a:	3aff      	subs	r2, #255	; 0xff
    141c:	3b01      	subs	r3, #1
    141e:	4290      	cmp	r0, r2
    1420:	d80f      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    1422:	3b01      	subs	r3, #1
    1424:	2880      	cmp	r0, #128	; 0x80
    1426:	d80c      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    1428:	3b01      	subs	r3, #1
    142a:	2840      	cmp	r0, #64	; 0x40
    142c:	d809      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    142e:	3b01      	subs	r3, #1
    1430:	2820      	cmp	r0, #32
    1432:	d806      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    1434:	3b01      	subs	r3, #1
    1436:	2810      	cmp	r0, #16
    1438:	d803      	bhi.n	1442 <_usb_d_dev_ep_enable+0x10a>
    143a:	3af8      	subs	r2, #248	; 0xf8
    143c:	4282      	cmp	r2, r0
    143e:	4192      	sbcs	r2, r2
    1440:	4253      	negs	r3, r2
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1442:	071b      	lsls	r3, r3, #28
    1444:	432b      	orrs	r3, r5
    1446:	617b      	str	r3, [r7, #20]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1448:	2280      	movs	r2, #128	; 0x80
    144a:	2382      	movs	r3, #130	; 0x82
    144c:	005b      	lsls	r3, r3, #1
    144e:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    1450:	0149      	lsls	r1, r1, #5
    1452:	4b6e      	ldr	r3, [pc, #440]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    1454:	1859      	adds	r1, r3, r1
    1456:	2300      	movs	r3, #0
    1458:	768b      	strb	r3, [r1, #26]
	return USB_OK;
    145a:	2000      	movs	r0, #0
    145c:	e06f      	b.n	153e <_usb_d_dev_ep_enable+0x206>
		return -USB_ERR_PARAM;
    145e:	2012      	movs	r0, #18
    1460:	4240      	negs	r0, r0
    1462:	e06c      	b.n	153e <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    1464:	2014      	movs	r0, #20
    1466:	4240      	negs	r0, r0
    1468:	e069      	b.n	153e <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    146a:	2014      	movs	r0, #20
    146c:	4240      	negs	r0, r0
    146e:	e066      	b.n	153e <_usb_d_dev_ep_enable+0x206>
			return -USB_ERR_REDO;
    1470:	2014      	movs	r0, #20
    1472:	4240      	negs	r0, r0
    1474:	e063      	b.n	153e <_usb_d_dev_ep_enable+0x206>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    1476:	2380      	movs	r3, #128	; 0x80
    1478:	005b      	lsls	r3, r3, #1
    147a:	2282      	movs	r2, #130	; 0x82
    147c:	05d2      	lsls	r2, r2, #23
    147e:	5cd5      	ldrb	r5, [r2, r3]
    1480:	b2ed      	uxtb	r5, r5
    1482:	2100      	movs	r1, #0
	return &dev_inst.ep[ep_index];
    1484:	2300      	movs	r3, #0
	if (epn > CONF_USB_D_MAX_EP_N || !_usb_d_dev_ep_is_used(ept)) {
    1486:	009a      	lsls	r2, r3, #2
    1488:	18d2      	adds	r2, r2, r3
    148a:	0094      	lsls	r4, r2, #2
    148c:	4a5f      	ldr	r2, [pc, #380]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    148e:	1912      	adds	r2, r2, r4
    1490:	3286      	adds	r2, #134	; 0x86
    1492:	7812      	ldrb	r2, [r2, #0]
    1494:	4694      	mov	ip, r2
    1496:	2aff      	cmp	r2, #255	; 0xff
    1498:	d0e1      	beq.n	145e <_usb_d_dev_ep_enable+0x126>
    149a:	014c      	lsls	r4, r1, #5
	bank = prvt_inst.desc_table[epn].DeviceDescBank;
    149c:	4a5b      	ldr	r2, [pc, #364]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    149e:	1917      	adds	r7, r2, r4
	if (ept->flags.bits.eptype == USB_D_EPTYPE_CTRL) {
    14a0:	009e      	lsls	r6, r3, #2
    14a2:	18f6      	adds	r6, r6, r3
    14a4:	00b6      	lsls	r6, r6, #2
    14a6:	1992      	adds	r2, r2, r6
    14a8:	3280      	adds	r2, #128	; 0x80
    14aa:	79d6      	ldrb	r6, [r2, #7]
    14ac:	2207      	movs	r2, #7
    14ae:	4032      	ands	r2, r6
    14b0:	2a01      	cmp	r2, #1
    14b2:	d100      	bne.n	14b6 <_usb_d_dev_ep_enable+0x17e>
    14b4:	e75b      	b.n	136e <_usb_d_dev_ep_enable+0x36>
	} else if (dir) {
    14b6:	2800      	cmp	r0, #0
    14b8:	db8e      	blt.n	13d8 <_usb_d_dev_ep_enable+0xa0>
		if (epcfg & USB_DEVICE_EPCFG_EPTYPE0_Msk) {
    14ba:	076a      	lsls	r2, r5, #29
    14bc:	d1d8      	bne.n	1470 <_usb_d_dev_ep_enable+0x138>
		epcfg |= USB_DEVICE_EPCFG_EPTYPE0(ept->flags.bits.eptype);
    14be:	4853      	ldr	r0, [pc, #332]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    14c0:	009e      	lsls	r6, r3, #2
    14c2:	18f2      	adds	r2, r6, r3
    14c4:	0092      	lsls	r2, r2, #2
    14c6:	1882      	adds	r2, r0, r2
    14c8:	3280      	adds	r2, #128	; 0x80
    14ca:	79d2      	ldrb	r2, [r2, #7]
    14cc:	0752      	lsls	r2, r2, #29
    14ce:	0f52      	lsrs	r2, r2, #29
    14d0:	4315      	orrs	r5, r2
    14d2:	2282      	movs	r2, #130	; 0x82
    14d4:	05d2      	lsls	r2, r2, #23
    14d6:	4694      	mov	ip, r2
    14d8:	4464      	add	r4, ip
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    14da:	2280      	movs	r2, #128	; 0x80
    14dc:	0052      	lsls	r2, r2, #1
    14de:	54a5      	strb	r5, [r4, r2]
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    14e0:	3060      	adds	r0, #96	; 0x60
    14e2:	18f6      	adds	r6, r6, r3
    14e4:	00b6      	lsls	r6, r6, #2
    14e6:	1980      	adds	r0, r0, r6
    14e8:	8c85      	ldrh	r5, [r0, #36]	; 0x24
    14ea:	03ab      	lsls	r3, r5, #14
    14ec:	4848      	ldr	r0, [pc, #288]	; (1610 <_usb_d_dev_ep_enable+0x2d8>)
    14ee:	4018      	ands	r0, r3
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    14f0:	3201      	adds	r2, #1
    14f2:	32ff      	adds	r2, #255	; 0xff
    14f4:	2307      	movs	r3, #7
    14f6:	4295      	cmp	r5, r2
    14f8:	d814      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    14fa:	3a01      	subs	r2, #1
    14fc:	3aff      	subs	r2, #255	; 0xff
    14fe:	3b01      	subs	r3, #1
    1500:	4295      	cmp	r5, r2
    1502:	d80f      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    1504:	3b01      	subs	r3, #1
    1506:	2d80      	cmp	r5, #128	; 0x80
    1508:	d80c      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    150a:	3b01      	subs	r3, #1
    150c:	2d40      	cmp	r5, #64	; 0x40
    150e:	d809      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    1510:	3b01      	subs	r3, #1
    1512:	2d20      	cmp	r5, #32
    1514:	d806      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    1516:	3b01      	subs	r3, #1
    1518:	2d10      	cmp	r5, #16
    151a:	d803      	bhi.n	1524 <_usb_d_dev_ep_enable+0x1ec>
    151c:	3af8      	subs	r2, #248	; 0xf8
    151e:	42aa      	cmp	r2, r5
    1520:	4192      	sbcs	r2, r2
    1522:	4253      	negs	r3, r2
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1524:	071b      	lsls	r3, r3, #28
    1526:	4303      	orrs	r3, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1528:	607b      	str	r3, [r7, #4]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    152a:	2240      	movs	r2, #64	; 0x40
    152c:	2306      	movs	r3, #6
    152e:	33ff      	adds	r3, #255	; 0xff
    1530:	54e2      	strb	r2, [r4, r3]
	bank->STATUS_BK.reg     = 0;
    1532:	0149      	lsls	r1, r1, #5
    1534:	4b35      	ldr	r3, [pc, #212]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    1536:	1859      	adds	r1, r3, r1
    1538:	2300      	movs	r3, #0
    153a:	728b      	strb	r3, [r1, #10]
	return USB_OK;
    153c:	2000      	movs	r0, #0
}
    153e:	bc04      	pop	{r2}
    1540:	4690      	mov	r8, r2
    1542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1544:	20e0      	movs	r0, #224	; 0xe0
    1546:	05c0      	lsls	r0, r0, #23
    1548:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    154a:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    154c:	0495      	lsls	r5, r2, #18
    154e:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1550:	2007      	movs	r0, #7
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1552:	0700      	lsls	r0, r0, #28
    1554:	4328      	orrs	r0, r5
    1556:	6178      	str	r0, [r7, #20]
    1558:	2506      	movs	r5, #6
    155a:	35ff      	adds	r5, #255	; 0xff
    155c:	2640      	movs	r6, #64	; 0x40
    155e:	5566      	strb	r6, [r4, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1560:	2782      	movs	r7, #130	; 0x82
    1562:	007f      	lsls	r7, r7, #1
    1564:	2080      	movs	r0, #128	; 0x80
    1566:	55e0      	strb	r0, [r4, r7]
	bank->STATUS_BK.reg     = 0;
    1568:	4828      	ldr	r0, [pc, #160]	; (160c <_usb_d_dev_ep_enable+0x2d4>)
    156a:	0149      	lsls	r1, r1, #5
    156c:	1841      	adds	r1, r0, r1
    156e:	2400      	movs	r4, #0
    1570:	728c      	strb	r4, [r1, #10]
    1572:	768c      	strb	r4, [r1, #26]
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1574:	340f      	adds	r4, #15
    1576:	4661      	mov	r1, ip
    1578:	400c      	ands	r4, r1
	_usbd_ep_set_buf(epn, 0, (uint32_t)ept->cache);
    157a:	0099      	lsls	r1, r3, #2
    157c:	18c9      	adds	r1, r1, r3
    157e:	0089      	lsls	r1, r1, #2
    1580:	1841      	adds	r1, r0, r1
    1582:	3180      	adds	r1, #128	; 0x80
    1584:	6809      	ldr	r1, [r1, #0]
	bank->ADDR.reg          = addr;
    1586:	0163      	lsls	r3, r4, #5
    1588:	5019      	str	r1, [r3, r0]
	bank->PCKSIZE.bit.MULTI_PACKET_SIZE = size;
    158a:	18c0      	adds	r0, r0, r3
    158c:	6841      	ldr	r1, [r0, #4]
    158e:	0492      	lsls	r2, r2, #18
    1590:	0914      	lsrs	r4, r2, #4
    1592:	4a20      	ldr	r2, [pc, #128]	; (1614 <_usb_d_dev_ep_enable+0x2dc>)
    1594:	400a      	ands	r2, r1
    1596:	4322      	orrs	r2, r4
    1598:	6042      	str	r2, [r0, #4]
	bank->PCKSIZE.bit.BYTE_COUNT = count;
    159a:	6842      	ldr	r2, [r0, #4]
    159c:	0b92      	lsrs	r2, r2, #14
    159e:	0392      	lsls	r2, r2, #14
    15a0:	6042      	str	r2, [r0, #4]
    15a2:	2282      	movs	r2, #130	; 0x82
    15a4:	05d2      	lsls	r2, r2, #23
    15a6:	189a      	adds	r2, r3, r2
    15a8:	21b0      	movs	r1, #176	; 0xb0
    15aa:	55d1      	strb	r1, [r2, r7]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    15ac:	5556      	strb	r6, [r2, r5]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    15ae:	4a1a      	ldr	r2, [pc, #104]	; (1618 <_usb_d_dev_ep_enable+0x2e0>)
    15b0:	4694      	mov	ip, r2
    15b2:	4463      	add	r3, ip
    15b4:	2210      	movs	r2, #16
    15b6:	701a      	strb	r2, [r3, #0]
	return USB_OK;
    15b8:	2000      	movs	r0, #0
    15ba:	e7c0      	b.n	153e <_usb_d_dev_ep_enable+0x206>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15bc:	20a0      	movs	r0, #160	; 0xa0
    15be:	05c0      	lsls	r0, r0, #23
    15c0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15c2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15c4:	0495      	lsls	r5, r2, #18
    15c6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    15c8:	2005      	movs	r0, #5
    15ca:	e7c2      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15cc:	20c0      	movs	r0, #192	; 0xc0
    15ce:	0580      	lsls	r0, r0, #22
    15d0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15d2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15d4:	0495      	lsls	r5, r2, #18
    15d6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    15d8:	2003      	movs	r0, #3
    15da:	e7ba      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15dc:	20c0      	movs	r0, #192	; 0xc0
    15de:	05c0      	lsls	r0, r0, #23
    15e0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15e2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15e4:	0495      	lsls	r5, r2, #18
    15e6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    15e8:	2006      	movs	r0, #6
    15ea:	e7b2      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15ec:	2080      	movs	r0, #128	; 0x80
    15ee:	05c0      	lsls	r0, r0, #23
    15f0:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    15f2:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15f4:	0495      	lsls	r5, r2, #18
    15f6:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    15f8:	2004      	movs	r0, #4
    15fa:	e7aa      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
		                      | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    15fc:	2080      	movs	r0, #128	; 0x80
    15fe:	0580      	lsls	r0, r0, #22
    1600:	4305      	orrs	r5, r0
		bank[0].PCKSIZE.reg = USB_DEVICE_PCKSIZE_MULTI_PACKET_SIZE(ept->size)
    1602:	607d      	str	r5, [r7, #4]
		    = USB_DEVICE_PCKSIZE_BYTE_COUNT(ept->size) | USB_DEVICE_PCKSIZE_SIZE(_usbd_ep_pcksize_size(ept->size));
    1604:	0495      	lsls	r5, r2, #18
    1606:	0cad      	lsrs	r5, r5, #18
	        : ((n > 256) ? 6 : ((n > 128) ? 5 : ((n > 64) ? 4 : ((n > 32) ? 3 : ((n > 16) ? 2 : ((n > 8) ? 1 : 0)))))));
    1608:	2002      	movs	r0, #2
    160a:	e7a2      	b.n	1552 <_usb_d_dev_ep_enable+0x21a>
    160c:	200000ec 	.word	0x200000ec
    1610:	0fffc000 	.word	0x0fffc000
    1614:	f0003fff 	.word	0xf0003fff
    1618:	41000109 	.word	0x41000109

0000161c <_usb_d_dev_ep_stall>:
{
    161c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t               epn = USB_EP_GET_N(ep);
    161e:	230f      	movs	r3, #15
    1620:	4003      	ands	r3, r0
    1622:	b240      	sxtb	r0, r0
	bool                  dir = USB_EP_GET_DIR(ep);
    1624:	0fc4      	lsrs	r4, r0, #31
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1626:	2b00      	cmp	r3, #0
    1628:	d009      	beq.n	163e <_usb_d_dev_ep_stall+0x22>
    162a:	001a      	movs	r2, r3
    162c:	2800      	cmp	r0, #0
    162e:	db04      	blt.n	163a <_usb_d_dev_ep_stall+0x1e>
	if (epn > CONF_USB_D_MAX_EP_N) {
    1630:	2b02      	cmp	r3, #2
    1632:	d905      	bls.n	1640 <_usb_d_dev_ep_stall+0x24>
		return -USB_ERR_PARAM;
    1634:	2012      	movs	r0, #18
    1636:	4240      	negs	r0, r0
    1638:	e019      	b.n	166e <_usb_d_dev_ep_stall+0x52>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    163a:	1c9a      	adds	r2, r3, #2
    163c:	e7f8      	b.n	1630 <_usb_d_dev_ep_stall+0x14>
	return &dev_inst.ep[ep_index];
    163e:	2200      	movs	r2, #0
	if (USB_EP_STALL_SET == ctrl) {
    1640:	2901      	cmp	r1, #1
    1642:	d015      	beq.n	1670 <_usb_d_dev_ep_stall+0x54>
	} else if (USB_EP_STALL_CLR == ctrl) {
    1644:	2900      	cmp	r1, #0
    1646:	d036      	beq.n	16b6 <_usb_d_dev_ep_stall+0x9a>
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1648:	0093      	lsls	r3, r2, #2
    164a:	189b      	adds	r3, r3, r2
    164c:	009b      	lsls	r3, r3, #2
    164e:	4a47      	ldr	r2, [pc, #284]	; (176c <_usb_d_dev_ep_stall+0x150>)
    1650:	18d2      	adds	r2, r2, r3
    1652:	3286      	adds	r2, #134	; 0x86
    1654:	7812      	ldrb	r2, [r2, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1656:	230f      	movs	r3, #15
    1658:	4013      	ands	r3, r2
    165a:	015b      	lsls	r3, r3, #5
    165c:	4a44      	ldr	r2, [pc, #272]	; (1770 <_usb_d_dev_ep_stall+0x154>)
    165e:	4694      	mov	ip, r2
    1660:	4463      	add	r3, ip
    1662:	7998      	ldrb	r0, [r3, #6]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1664:	2310      	movs	r3, #16
    1666:	40a3      	lsls	r3, r4
    1668:	4018      	ands	r0, r3
	return _usbd_ep_is_stalled(epn, dir);
    166a:	1e43      	subs	r3, r0, #1
    166c:	4198      	sbcs	r0, r3
}
    166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hri_usbendpoint_set_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    1670:	2510      	movs	r5, #16
    1672:	40a5      	lsls	r5, r4
    1674:	b2ed      	uxtb	r5, r5
	uint8_t epn = USB_EP_GET_N(ept->ep);
    1676:	493d      	ldr	r1, [pc, #244]	; (176c <_usb_d_dev_ep_stall+0x150>)
    1678:	0090      	lsls	r0, r2, #2
    167a:	1883      	adds	r3, r0, r2
    167c:	009b      	lsls	r3, r3, #2
    167e:	18cb      	adds	r3, r1, r3
    1680:	3386      	adds	r3, #134	; 0x86
    1682:	781e      	ldrb	r6, [r3, #0]
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSSET.reg = mask;
    1684:	230f      	movs	r3, #15
    1686:	4033      	ands	r3, r6
    1688:	015e      	lsls	r6, r3, #5
    168a:	4f39      	ldr	r7, [pc, #228]	; (1770 <_usb_d_dev_ep_stall+0x154>)
    168c:	46bc      	mov	ip, r7
    168e:	4466      	add	r6, ip
    1690:	7175      	strb	r5, [r6, #5]
	_usbd_ep_int_en(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    1692:	2520      	movs	r5, #32
    1694:	40a5      	lsls	r5, r4
	hri_usbendpoint_set_EPINTEN_reg(USB, epn, flags);
    1696:	b2ec      	uxtb	r4, r5
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENSET.reg = mask;
    1698:	015b      	lsls	r3, r3, #5
    169a:	4d36      	ldr	r5, [pc, #216]	; (1774 <_usb_d_dev_ep_stall+0x158>)
    169c:	46ac      	mov	ip, r5
    169e:	4463      	add	r3, ip
    16a0:	701c      	strb	r4, [r3, #0]
	ept->flags.bits.is_stalled = 1;
    16a2:	1882      	adds	r2, r0, r2
    16a4:	0092      	lsls	r2, r2, #2
    16a6:	188a      	adds	r2, r1, r2
    16a8:	3280      	adds	r2, #128	; 0x80
    16aa:	79d3      	ldrb	r3, [r2, #7]
    16ac:	2108      	movs	r1, #8
    16ae:	430b      	orrs	r3, r1
    16b0:	71d3      	strb	r3, [r2, #7]
		rc = _usb_d_dev_ep_stall_set(ept, dir);
    16b2:	2000      	movs	r0, #0
    16b4:	e7db      	b.n	166e <_usb_d_dev_ep_stall+0x52>
	uint8_t epn        = USB_EP_GET_N(ept->ep);
    16b6:	0093      	lsls	r3, r2, #2
    16b8:	189b      	adds	r3, r3, r2
    16ba:	0099      	lsls	r1, r3, #2
    16bc:	4b2b      	ldr	r3, [pc, #172]	; (176c <_usb_d_dev_ep_stall+0x150>)
    16be:	185b      	adds	r3, r3, r1
    16c0:	3386      	adds	r3, #134	; 0x86
    16c2:	781b      	ldrb	r3, [r3, #0]
    16c4:	210f      	movs	r1, #15
    16c6:	400b      	ands	r3, r1
    16c8:	015d      	lsls	r5, r3, #5
    16ca:	2182      	movs	r1, #130	; 0x82
    16cc:	05c9      	lsls	r1, r1, #23
    16ce:	468c      	mov	ip, r1
    16d0:	4465      	add	r5, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    16d2:	2183      	movs	r1, #131	; 0x83
    16d4:	0049      	lsls	r1, r1, #1
    16d6:	5c6e      	ldrb	r6, [r5, r1]
	return (hri_usbendpoint_read_EPSTATUS_reg(hw, epn) & (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    16d8:	39f6      	subs	r1, #246	; 0xf6
    16da:	40a1      	lsls	r1, r4
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    16dc:	2000      	movs	r0, #0
	if (!is_stalled) {
    16de:	420e      	tst	r6, r1
    16e0:	d0c5      	beq.n	166e <_usb_d_dev_ep_stall+0x52>
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_STALLRQ0 << bank_n));
    16e2:	b2c9      	uxtb	r1, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    16e4:	3005      	adds	r0, #5
    16e6:	30ff      	adds	r0, #255	; 0xff
    16e8:	5429      	strb	r1, [r5, r0]
	_usbd_ep_int_dis(epn, USB_DEVICE_EPINTFLAG_STALL0 << dir);
    16ea:	2120      	movs	r1, #32
    16ec:	40a1      	lsls	r1, r4
	hri_usbendpoint_clear_EPINTEN_reg(USB, epn, flags);
    16ee:	b2c8      	uxtb	r0, r1
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTENCLR.reg = mask;
    16f0:	015b      	lsls	r3, r3, #5
    16f2:	4e21      	ldr	r6, [pc, #132]	; (1778 <_usb_d_dev_ep_stall+0x15c>)
    16f4:	46b4      	mov	ip, r6
    16f6:	4463      	add	r3, ip
    16f8:	7018      	strb	r0, [r3, #0]
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    16fa:	2308      	movs	r3, #8
    16fc:	33ff      	adds	r3, #255	; 0xff
    16fe:	5ceb      	ldrb	r3, [r5, r3]
	if (_usbd_ep_is_stall_sent(epn, dir)) {
    1700:	420b      	tst	r3, r1
    1702:	d009      	beq.n	1718 <_usb_d_dev_ep_stall+0xfc>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    1704:	2308      	movs	r3, #8
    1706:	33ff      	adds	r3, #255	; 0xff
    1708:	54e8      	strb	r0, [r5, r3]
		hri_usbendpoint_clear_EPSTATUS_reg(USB, epn, (USB_DEVICE_EPSTATUS_DTGLOUT << bank_n));
    170a:	3b07      	subs	r3, #7
    170c:	3bff      	subs	r3, #255	; 0xff
    170e:	40a3      	lsls	r3, r4
    1710:	b2db      	uxtb	r3, r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUSCLR.reg = mask;
    1712:	2182      	movs	r1, #130	; 0x82
    1714:	0049      	lsls	r1, r1, #1
    1716:	546b      	strb	r3, [r5, r1]
	if (_usb_d_dev_ep_is_ctrl(ept)) {
    1718:	0093      	lsls	r3, r2, #2
    171a:	189b      	adds	r3, r3, r2
    171c:	0099      	lsls	r1, r3, #2
    171e:	4b13      	ldr	r3, [pc, #76]	; (176c <_usb_d_dev_ep_stall+0x150>)
    1720:	185b      	adds	r3, r3, r1
    1722:	3380      	adds	r3, #128	; 0x80
    1724:	79d9      	ldrb	r1, [r3, #7]
    1726:	2307      	movs	r3, #7
    1728:	400b      	ands	r3, r1
    172a:	2b01      	cmp	r3, #1
    172c:	d00b      	beq.n	1746 <_usb_d_dev_ep_stall+0x12a>
		ept->flags.bits.is_stalled = 0;
    172e:	0093      	lsls	r3, r2, #2
    1730:	189a      	adds	r2, r3, r2
    1732:	0092      	lsls	r2, r2, #2
    1734:	4b0d      	ldr	r3, [pc, #52]	; (176c <_usb_d_dev_ep_stall+0x150>)
    1736:	189b      	adds	r3, r3, r2
    1738:	3380      	adds	r3, #128	; 0x80
    173a:	79da      	ldrb	r2, [r3, #7]
    173c:	2108      	movs	r1, #8
    173e:	438a      	bics	r2, r1
    1740:	71da      	strb	r2, [r3, #7]
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    1742:	2000      	movs	r0, #0
    1744:	e793      	b.n	166e <_usb_d_dev_ep_stall+0x52>
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPSTATUS.reg;
    1746:	3306      	adds	r3, #6
    1748:	33ff      	adds	r3, #255	; 0xff
    174a:	5ce9      	ldrb	r1, [r5, r3]
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    174c:	3bd6      	subs	r3, #214	; 0xd6
		rc = _usb_d_dev_ep_stall_clr(ept, dir);
    174e:	2000      	movs	r0, #0
		if ((hri_usbendpoint_read_EPSTATUS_reg(USB, epn) & USB_DEVICE_EPSTATUS_STALLRQ_Msk) == 0) {
    1750:	4219      	tst	r1, r3
    1752:	d000      	beq.n	1756 <_usb_d_dev_ep_stall+0x13a>
    1754:	e78b      	b.n	166e <_usb_d_dev_ep_stall+0x52>
			ept->flags.bits.is_stalled = 0;
    1756:	0093      	lsls	r3, r2, #2
    1758:	189a      	adds	r2, r3, r2
    175a:	0092      	lsls	r2, r2, #2
    175c:	4b03      	ldr	r3, [pc, #12]	; (176c <_usb_d_dev_ep_stall+0x150>)
    175e:	189b      	adds	r3, r3, r2
    1760:	3380      	adds	r3, #128	; 0x80
    1762:	79da      	ldrb	r2, [r3, #7]
    1764:	2108      	movs	r1, #8
    1766:	438a      	bics	r2, r1
    1768:	71da      	strb	r2, [r3, #7]
    176a:	e780      	b.n	166e <_usb_d_dev_ep_stall+0x52>
    176c:	200000ec 	.word	0x200000ec
    1770:	41000100 	.word	0x41000100
    1774:	41000109 	.word	0x41000109
    1778:	41000108 	.word	0x41000108

0000177c <_usb_d_dev_ep_read_req>:

int32_t _usb_d_dev_ep_read_req(const uint8_t ep, uint8_t *req_buf)
{
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	000d      	movs	r5, r1
	uint8_t            epn   = USB_EP_GET_N(ep);
    1780:	230f      	movs	r3, #15
    1782:	4018      	ands	r0, r3
    1784:	0144      	lsls	r4, r0, #5
	UsbDeviceDescBank *bank  = prvt_inst.desc_table[epn].DeviceDescBank;
    1786:	4b16      	ldr	r3, [pc, #88]	; (17e0 <_usb_d_dev_ep_read_req+0x64>)
    1788:	191b      	adds	r3, r3, r4
	uint32_t           addr  = bank[0].ADDR.reg;
    178a:	6819      	ldr	r1, [r3, #0]
	uint16_t           bytes = bank[0].PCKSIZE.bit.BYTE_COUNT;
    178c:	685b      	ldr	r3, [r3, #4]
    178e:	049b      	lsls	r3, r3, #18
    1790:	0c9e      	lsrs	r6, r3, #18

	if (epn > CONF_USB_D_MAX_EP_N || !req_buf) {
    1792:	2802      	cmp	r0, #2
    1794:	d81b      	bhi.n	17ce <_usb_d_dev_ep_read_req+0x52>
    1796:	2d00      	cmp	r5, #0
    1798:	d01c      	beq.n	17d4 <_usb_d_dev_ep_read_req+0x58>
    179a:	2382      	movs	r3, #130	; 0x82
    179c:	05db      	lsls	r3, r3, #23
    179e:	469c      	mov	ip, r3
    17a0:	4464      	add	r4, ip
	return ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg;
    17a2:	2380      	movs	r3, #128	; 0x80
    17a4:	005b      	lsls	r3, r3, #1
    17a6:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_PARAM;
	}
	if (!_usbd_ep_is_ctrl(epn)) {
    17a8:	2b11      	cmp	r3, #17
    17aa:	d116      	bne.n	17da <_usb_d_dev_ep_read_req+0x5e>
	tmp = ((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg;
    17ac:	2308      	movs	r3, #8
    17ae:	33ff      	adds	r3, #255	; 0xff
    17b0:	5ce3      	ldrb	r3, [r4, r3]
		return -USB_ERR_FUNC;
	}
	if (!_usbd_ep_is_setup(epn)) {
		return ERR_NONE;
    17b2:	2000      	movs	r0, #0
	if (!_usbd_ep_is_setup(epn)) {
    17b4:	06db      	lsls	r3, r3, #27
    17b6:	d400      	bmi.n	17ba <_usb_d_dev_ep_read_req+0x3e>
	}
	memcpy(req_buf, (void *)addr, 8);
	_usbd_ep_ack_setup(epn);

	return bytes;
}
    17b8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(req_buf, (void *)addr, 8);
    17ba:	2208      	movs	r2, #8
    17bc:	0028      	movs	r0, r5
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <_usb_d_dev_ep_read_req+0x68>)
    17c0:	4798      	blx	r3
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPINTFLAG.reg = mask;
    17c2:	2210      	movs	r2, #16
    17c4:	2308      	movs	r3, #8
    17c6:	33ff      	adds	r3, #255	; 0xff
    17c8:	54e2      	strb	r2, [r4, r3]
	return bytes;
    17ca:	0030      	movs	r0, r6
    17cc:	e7f4      	b.n	17b8 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_PARAM;
    17ce:	2012      	movs	r0, #18
    17d0:	4240      	negs	r0, r0
    17d2:	e7f1      	b.n	17b8 <_usb_d_dev_ep_read_req+0x3c>
    17d4:	2012      	movs	r0, #18
    17d6:	4240      	negs	r0, r0
    17d8:	e7ee      	b.n	17b8 <_usb_d_dev_ep_read_req+0x3c>
		return -USB_ERR_FUNC;
    17da:	2013      	movs	r0, #19
    17dc:	4240      	negs	r0, r0
    17de:	e7eb      	b.n	17b8 <_usb_d_dev_ep_read_req+0x3c>
    17e0:	200000ec 	.word	0x200000ec
    17e4:	00002dad 	.word	0x00002dad

000017e8 <_usb_d_dev_ep_trans>:

int32_t _usb_d_dev_ep_trans(const struct usb_d_transfer *trans)
{
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	46de      	mov	lr, fp
    17ec:	4657      	mov	r7, sl
    17ee:	464e      	mov	r6, r9
    17f0:	4645      	mov	r5, r8
    17f2:	b5e0      	push	{r5, r6, r7, lr}
    17f4:	b085      	sub	sp, #20
    17f6:	4680      	mov	r8, r0
	uint8_t               epn = USB_EP_GET_N(trans->ep);
    17f8:	7a06      	ldrb	r6, [r0, #8]
    17fa:	230f      	movs	r3, #15
    17fc:	4033      	ands	r3, r6
    17fe:	b276      	sxtb	r6, r6
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1800:	2b00      	cmp	r3, #0
    1802:	d100      	bne.n	1806 <_usb_d_dev_ep_trans+0x1e>
    1804:	e0d3      	b.n	19ae <_usb_d_dev_ep_trans+0x1c6>
    1806:	0018      	movs	r0, r3
    1808:	2e00      	cmp	r6, #0
    180a:	db39      	blt.n	1880 <_usb_d_dev_ep_trans+0x98>
	return &dev_inst.ep[ep_index];
    180c:	0004      	movs	r4, r0
    180e:	4a73      	ldr	r2, [pc, #460]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    1810:	3260      	adds	r2, #96	; 0x60
    1812:	1c41      	adds	r1, r0, #1
    1814:	008d      	lsls	r5, r1, #2
    1816:	186d      	adds	r5, r5, r1
    1818:	00ad      	lsls	r5, r5, #2
    181a:	1955      	adds	r5, r2, r5
	bool                  dir = USB_EP_GET_DIR(trans->ep);
	struct _usb_d_dev_ep *ept = _usb_d_dev_ept(epn, dir);

	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    181c:	0081      	lsls	r1, r0, #2
    181e:	1809      	adds	r1, r1, r0
    1820:	0089      	lsls	r1, r1, #2
    1822:	1852      	adds	r2, r2, r1
    1824:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    1826:	4a6e      	ldr	r2, [pc, #440]	; (19e0 <_usb_d_dev_ep_trans+0x1f8>)
    1828:	4291      	cmp	r1, r2
    182a:	d02b      	beq.n	1884 <_usb_d_dev_ep_trans+0x9c>
    182c:	1e4f      	subs	r7, r1, #1
    182e:	b2bf      	uxth	r7, r7
	bool     size_n_aligned = (trans->size & size_mask);
    1830:	4642      	mov	r2, r8
    1832:	6852      	ldr	r2, [r2, #4]
    1834:	4017      	ands	r7, r2

	bool use_cache = false;

	volatile hal_atomic_t flags;

	if (epn > CONF_USB_D_MAX_EP_N) {
    1836:	2b02      	cmp	r3, #2
    1838:	d900      	bls.n	183c <_usb_d_dev_ep_trans+0x54>
    183a:	e0a4      	b.n	1986 <_usb_d_dev_ep_trans+0x19e>
	 * 1. Buffer not in RAM (cache all).
	 * 2. IN/OUT with unaligned buffer (cache all).
	 * 3. OUT with unaligned packet size (cache last packet).
	 * 4. OUT size < 8 (sub-case for 3).
	 */
	if (!_usb_is_addr4dma(trans->buf, trans->size) || (!_usb_is_aligned(trans->buf))
    183c:	4643      	mov	r3, r8
    183e:	681b      	ldr	r3, [r3, #0]
    1840:	4868      	ldr	r0, [pc, #416]	; (19e4 <_usb_d_dev_ep_trans+0x1fc>)
    1842:	4283      	cmp	r3, r0
    1844:	d920      	bls.n	1888 <_usb_d_dev_ep_trans+0xa0>
    1846:	1898      	adds	r0, r3, r2
    1848:	9001      	str	r0, [sp, #4]
    184a:	4867      	ldr	r0, [pc, #412]	; (19e8 <_usb_d_dev_ep_trans+0x200>)
    184c:	4684      	mov	ip, r0
    184e:	9801      	ldr	r0, [sp, #4]
    1850:	4560      	cmp	r0, ip
    1852:	d819      	bhi.n	1888 <_usb_d_dev_ep_trans+0xa0>
    1854:	079b      	lsls	r3, r3, #30
    1856:	d117      	bne.n	1888 <_usb_d_dev_ep_trans+0xa0>
	    || (!dir && (trans->size < ept->size))) {
    1858:	2e00      	cmp	r6, #0
    185a:	db32      	blt.n	18c2 <_usb_d_dev_ep_trans+0xda>
    185c:	4291      	cmp	r1, r2
    185e:	d900      	bls.n	1862 <_usb_d_dev_ep_trans+0x7a>
    1860:	e0af      	b.n	19c2 <_usb_d_dev_ep_trans+0x1da>
			return -USB_ERR_FUNC;
		}
		/* Use cache all the time. */
		use_cache = true;
	}
	if (!dir && size_n_aligned) {
    1862:	2f00      	cmp	r7, #0
    1864:	d030      	beq.n	18c8 <_usb_d_dev_ep_trans+0xe0>
		if (!ept->cache) {
    1866:	00a3      	lsls	r3, r4, #2
    1868:	191b      	adds	r3, r3, r4
    186a:	009a      	lsls	r2, r3, #2
    186c:	4b5b      	ldr	r3, [pc, #364]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    186e:	189b      	adds	r3, r3, r2
    1870:	3380      	adds	r3, #128	; 0x80
    1872:	681b      	ldr	r3, [r3, #0]
    1874:	2b00      	cmp	r3, #0
    1876:	d100      	bne.n	187a <_usb_d_dev_ep_trans+0x92>
    1878:	e08b      	b.n	1992 <_usb_d_dev_ep_trans+0x1aa>
	bool use_cache = false;
    187a:	2300      	movs	r3, #0
    187c:	4699      	mov	r9, r3
    187e:	e00f      	b.n	18a0 <_usb_d_dev_ep_trans+0xb8>
	uint8_t ep_index = (epn == 0) ? 0 : (dir ? (epn + CONF_USB_D_MAX_EP_N) : epn);
    1880:	1c98      	adds	r0, r3, #2
    1882:	e7c3      	b.n	180c <_usb_d_dev_ep_trans+0x24>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    1884:	000f      	movs	r7, r1
    1886:	e7d3      	b.n	1830 <_usb_d_dev_ep_trans+0x48>
		if (!ept->cache) {
    1888:	00a3      	lsls	r3, r4, #2
    188a:	191b      	adds	r3, r3, r4
    188c:	009a      	lsls	r2, r3, #2
    188e:	4b53      	ldr	r3, [pc, #332]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    1890:	189b      	adds	r3, r3, r2
    1892:	3380      	adds	r3, #128	; 0x80
    1894:	681b      	ldr	r3, [r3, #0]
    1896:	2b00      	cmp	r3, #0
    1898:	d100      	bne.n	189c <_usb_d_dev_ep_trans+0xb4>
    189a:	e077      	b.n	198c <_usb_d_dev_ep_trans+0x1a4>
		use_cache = true;
    189c:	2301      	movs	r3, #1
    189e:	4699      	mov	r9, r3
		}
		/* Set 'use_cache' on last packet. */
	}

	/* Check halt */
	if (ept->flags.bits.is_stalled) {
    18a0:	00a3      	lsls	r3, r4, #2
    18a2:	191b      	adds	r3, r3, r4
    18a4:	009a      	lsls	r2, r3, #2
    18a6:	4b4d      	ldr	r3, [pc, #308]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    18a8:	189b      	adds	r3, r3, r2
    18aa:	3380      	adds	r3, #128	; 0x80
    18ac:	79db      	ldrb	r3, [r3, #7]
		return USB_HALTED;
    18ae:	2002      	movs	r0, #2
	if (ept->flags.bits.is_stalled) {
    18b0:	071b      	lsls	r3, r3, #28
    18b2:	d50c      	bpl.n	18ce <_usb_d_dev_ep_trans+0xe6>
	} else {
		_usb_d_dev_out_next(ept, false);
	}

	return ERR_NONE;
}
    18b4:	b005      	add	sp, #20
    18b6:	bc3c      	pop	{r2, r3, r4, r5}
    18b8:	4690      	mov	r8, r2
    18ba:	4699      	mov	r9, r3
    18bc:	46a2      	mov	sl, r4
    18be:	46ab      	mov	fp, r5
    18c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bool use_cache = false;
    18c2:	2300      	movs	r3, #0
    18c4:	4699      	mov	r9, r3
    18c6:	e7eb      	b.n	18a0 <_usb_d_dev_ep_trans+0xb8>
    18c8:	2300      	movs	r3, #0
    18ca:	4699      	mov	r9, r3
    18cc:	e7e8      	b.n	18a0 <_usb_d_dev_ep_trans+0xb8>
	atomic_enter_critical(&flags);
    18ce:	a803      	add	r0, sp, #12
    18d0:	4b46      	ldr	r3, [pc, #280]	; (19ec <_usb_d_dev_ep_trans+0x204>)
    18d2:	4798      	blx	r3
	if (_usb_d_dev_ep_is_busy(ept)) {
    18d4:	00a3      	lsls	r3, r4, #2
    18d6:	191b      	adds	r3, r3, r4
    18d8:	009a      	lsls	r2, r3, #2
    18da:	4b40      	ldr	r3, [pc, #256]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    18dc:	189b      	adds	r3, r3, r2
    18de:	3380      	adds	r3, #128	; 0x80
    18e0:	79db      	ldrb	r3, [r3, #7]
    18e2:	065b      	lsls	r3, r3, #25
    18e4:	d444      	bmi.n	1970 <_usb_d_dev_ep_trans+0x188>
	ept->flags.bits.is_busy = 1;
    18e6:	00a3      	lsls	r3, r4, #2
    18e8:	191b      	adds	r3, r3, r4
    18ea:	009b      	lsls	r3, r3, #2
    18ec:	4a3b      	ldr	r2, [pc, #236]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    18ee:	4693      	mov	fp, r2
    18f0:	449b      	add	fp, r3
    18f2:	2380      	movs	r3, #128	; 0x80
    18f4:	445b      	add	r3, fp
    18f6:	469a      	mov	sl, r3
    18f8:	79db      	ldrb	r3, [r3, #7]
    18fa:	2240      	movs	r2, #64	; 0x40
    18fc:	4313      	orrs	r3, r2
    18fe:	4652      	mov	r2, sl
    1900:	71d3      	strb	r3, [r2, #7]
	atomic_leave_critical(&flags);
    1902:	a803      	add	r0, sp, #12
    1904:	4b3a      	ldr	r3, [pc, #232]	; (19f0 <_usb_d_dev_ep_trans+0x208>)
    1906:	4798      	blx	r3
	ept->trans_buf   = trans->buf;
    1908:	465b      	mov	r3, fp
    190a:	4642      	mov	r2, r8
    190c:	6812      	ldr	r2, [r2, #0]
    190e:	675a      	str	r2, [r3, #116]	; 0x74
	ept->trans_size  = trans->size;
    1910:	4642      	mov	r2, r8
    1912:	6852      	ldr	r2, [r2, #4]
    1914:	679a      	str	r2, [r3, #120]	; 0x78
	ept->trans_count = 0;
    1916:	2300      	movs	r3, #0
    1918:	465a      	mov	r2, fp
    191a:	67d3      	str	r3, [r2, #124]	; 0x7c
	bool                  dir = USB_EP_GET_DIR(trans->ep);
    191c:	0ff2      	lsrs	r2, r6, #31
	ept->flags.bits.dir       = dir;
    191e:	01d2      	lsls	r2, r2, #7
    1920:	4653      	mov	r3, sl
    1922:	79d9      	ldrb	r1, [r3, #7]
    1924:	237f      	movs	r3, #127	; 0x7f
    1926:	400b      	ands	r3, r1
	ept->flags.bits.use_cache = use_cache;
    1928:	4649      	mov	r1, r9
    192a:	0149      	lsls	r1, r1, #5
    192c:	4313      	orrs	r3, r2
    192e:	2220      	movs	r2, #32
    1930:	4393      	bics	r3, r2
    1932:	430b      	orrs	r3, r1
    1934:	4652      	mov	r2, sl
    1936:	71d3      	strb	r3, [r2, #7]
	ept->flags.bits.need_zlp  = (trans->zlp && (!size_n_aligned));
    1938:	4643      	mov	r3, r8
    193a:	7a5b      	ldrb	r3, [r3, #9]
    193c:	2200      	movs	r2, #0
    193e:	2b00      	cmp	r3, #0
    1940:	d002      	beq.n	1948 <_usb_d_dev_ep_trans+0x160>
    1942:	427a      	negs	r2, r7
    1944:	417a      	adcs	r2, r7
    1946:	b2d2      	uxtb	r2, r2
    1948:	00a3      	lsls	r3, r4, #2
    194a:	191c      	adds	r4, r3, r4
    194c:	00a4      	lsls	r4, r4, #2
    194e:	4b23      	ldr	r3, [pc, #140]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    1950:	191b      	adds	r3, r3, r4
    1952:	3380      	adds	r3, #128	; 0x80
    1954:	0112      	lsls	r2, r2, #4
    1956:	79df      	ldrb	r7, [r3, #7]
    1958:	2110      	movs	r1, #16
    195a:	438f      	bics	r7, r1
    195c:	4317      	orrs	r7, r2
    195e:	71df      	strb	r7, [r3, #7]
	if (dir) {
    1960:	2e00      	cmp	r6, #0
    1962:	db0a      	blt.n	197a <_usb_d_dev_ep_trans+0x192>
		_usb_d_dev_out_next(ept, false);
    1964:	2100      	movs	r1, #0
    1966:	0028      	movs	r0, r5
    1968:	4b22      	ldr	r3, [pc, #136]	; (19f4 <_usb_d_dev_ep_trans+0x20c>)
    196a:	4798      	blx	r3
	return ERR_NONE;
    196c:	2000      	movs	r0, #0
    196e:	e7a1      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
		atomic_leave_critical(&flags);
    1970:	a803      	add	r0, sp, #12
    1972:	4b1f      	ldr	r3, [pc, #124]	; (19f0 <_usb_d_dev_ep_trans+0x208>)
    1974:	4798      	blx	r3
		return USB_BUSY;
    1976:	2001      	movs	r0, #1
    1978:	e79c      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
		_usb_d_dev_in_next(ept, false);
    197a:	2100      	movs	r1, #0
    197c:	0028      	movs	r0, r5
    197e:	4b1e      	ldr	r3, [pc, #120]	; (19f8 <_usb_d_dev_ep_trans+0x210>)
    1980:	4798      	blx	r3
	return ERR_NONE;
    1982:	2000      	movs	r0, #0
    1984:	e796      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
		return -USB_ERR_PARAM;
    1986:	2012      	movs	r0, #18
    1988:	4240      	negs	r0, r0
    198a:	e793      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    198c:	2013      	movs	r0, #19
    198e:	4240      	negs	r0, r0
    1990:	e790      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_PARAM;
    1992:	2012      	movs	r0, #18
    1994:	4240      	negs	r0, r0
    1996:	e78d      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
			return -USB_ERR_FUNC;
    1998:	2013      	movs	r0, #19
    199a:	4240      	negs	r0, r0
    199c:	e78a      	b.n	18b4 <_usb_d_dev_ep_trans+0xcc>
	bool     size_n_aligned = (trans->size & size_mask);
    199e:	4643      	mov	r3, r8
    19a0:	685a      	ldr	r2, [r3, #4]
    19a2:	0597      	lsls	r7, r2, #22
    19a4:	0dbf      	lsrs	r7, r7, #22
	return &dev_inst.ep[ep_index];
    19a6:	4d0d      	ldr	r5, [pc, #52]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    19a8:	3574      	adds	r5, #116	; 0x74
    19aa:	2400      	movs	r4, #0
    19ac:	e746      	b.n	183c <_usb_d_dev_ep_trans+0x54>
	uint16_t size_mask      = (ept->size == 1023) ? 1023 : (ept->size - 1);
    19ae:	4a0b      	ldr	r2, [pc, #44]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    19b0:	3260      	adds	r2, #96	; 0x60
    19b2:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    19b4:	4a0a      	ldr	r2, [pc, #40]	; (19e0 <_usb_d_dev_ep_trans+0x1f8>)
    19b6:	4291      	cmp	r1, r2
    19b8:	d0f1      	beq.n	199e <_usb_d_dev_ep_trans+0x1b6>
	return &dev_inst.ep[ep_index];
    19ba:	4d08      	ldr	r5, [pc, #32]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    19bc:	3574      	adds	r5, #116	; 0x74
    19be:	2400      	movs	r4, #0
    19c0:	e734      	b.n	182c <_usb_d_dev_ep_trans+0x44>
		if (!ept->cache) {
    19c2:	00a3      	lsls	r3, r4, #2
    19c4:	191b      	adds	r3, r3, r4
    19c6:	009a      	lsls	r2, r3, #2
    19c8:	4b04      	ldr	r3, [pc, #16]	; (19dc <_usb_d_dev_ep_trans+0x1f4>)
    19ca:	189b      	adds	r3, r3, r2
    19cc:	3380      	adds	r3, #128	; 0x80
    19ce:	681b      	ldr	r3, [r3, #0]
    19d0:	2b00      	cmp	r3, #0
    19d2:	d0e1      	beq.n	1998 <_usb_d_dev_ep_trans+0x1b0>
    19d4:	2301      	movs	r3, #1
    19d6:	4699      	mov	r9, r3
    19d8:	e762      	b.n	18a0 <_usb_d_dev_ep_trans+0xb8>
    19da:	46c0      	nop			; (mov r8, r8)
    19dc:	200000ec 	.word	0x200000ec
    19e0:	000003ff 	.word	0x000003ff
    19e4:	1fffffff 	.word	0x1fffffff
    19e8:	20002fff 	.word	0x20002fff
    19ec:	000002a5 	.word	0x000002a5
    19f0:	000002b3 	.word	0x000002b3
    19f4:	00000e11 	.word	0x00000e11
    19f8:	00000c69 	.word	0x00000c69

000019fc <_usb_d_dev_register_callback>:
	return USB_OK;
}

void _usb_d_dev_register_callback(const enum usb_d_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    19fc:	1e0b      	subs	r3, r1, #0
    19fe:	d006      	beq.n	1a0e <_usb_d_dev_register_callback+0x12>
	if (type == USB_D_CB_EVENT) {
    1a00:	2801      	cmp	r0, #1
    1a02:	d006      	beq.n	1a12 <_usb_d_dev_register_callback+0x16>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
	} else if (type == USB_D_CB_SOF) {
    1a04:	2800      	cmp	r0, #0
    1a06:	d101      	bne.n	1a0c <_usb_d_dev_register_callback+0x10>
		dev_inst.callbacks.sof = (_usb_d_dev_sof_cb_t)f;
    1a08:	4a03      	ldr	r2, [pc, #12]	; (1a18 <_usb_d_dev_register_callback+0x1c>)
    1a0a:	6613      	str	r3, [r2, #96]	; 0x60
	}
}
    1a0c:	4770      	bx	lr
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1a0e:	4b03      	ldr	r3, [pc, #12]	; (1a1c <_usb_d_dev_register_callback+0x20>)
    1a10:	e7f6      	b.n	1a00 <_usb_d_dev_register_callback+0x4>
		dev_inst.callbacks.event = (_usb_d_dev_event_cb_t)f;
    1a12:	4a01      	ldr	r2, [pc, #4]	; (1a18 <_usb_d_dev_register_callback+0x1c>)
    1a14:	6653      	str	r3, [r2, #100]	; 0x64
    1a16:	e7f9      	b.n	1a0c <_usb_d_dev_register_callback+0x10>
    1a18:	200000ec 	.word	0x200000ec
    1a1c:	000009d1 	.word	0x000009d1

00001a20 <_usb_d_dev_register_ep_callback>:

void _usb_d_dev_register_ep_callback(const enum usb_d_dev_ep_cb_type type, const FUNC_PTR func)
{
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1a20:	1e0b      	subs	r3, r1, #0
    1a22:	d008      	beq.n	1a36 <_usb_d_dev_register_ep_callback+0x16>
	if (type == USB_D_DEV_EP_CB_SETUP) {
    1a24:	2800      	cmp	r0, #0
    1a26:	d008      	beq.n	1a3a <_usb_d_dev_register_ep_callback+0x1a>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
	} else if (type == USB_D_DEV_EP_CB_MORE) {
    1a28:	2801      	cmp	r0, #1
    1a2a:	d009      	beq.n	1a40 <_usb_d_dev_register_ep_callback+0x20>
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
	} else if (type == USB_D_DEV_EP_CB_DONE) {
    1a2c:	2802      	cmp	r0, #2
    1a2e:	d106      	bne.n	1a3e <_usb_d_dev_register_ep_callback+0x1e>
		dev_inst.ep_callbacks.done = (_usb_d_dev_ep_cb_done_t)f;
    1a30:	4a05      	ldr	r2, [pc, #20]	; (1a48 <_usb_d_dev_register_ep_callback+0x28>)
    1a32:	6713      	str	r3, [r2, #112]	; 0x70
	}
}
    1a34:	e003      	b.n	1a3e <_usb_d_dev_register_ep_callback+0x1e>
	FUNC_PTR f = (func == NULL) ? (FUNC_PTR)_dummy_func_no_return : (FUNC_PTR)func;
    1a36:	4b05      	ldr	r3, [pc, #20]	; (1a4c <_usb_d_dev_register_ep_callback+0x2c>)
    1a38:	e7f4      	b.n	1a24 <_usb_d_dev_register_ep_callback+0x4>
		dev_inst.ep_callbacks.setup = (_usb_d_dev_ep_cb_setup_t)f;
    1a3a:	4a03      	ldr	r2, [pc, #12]	; (1a48 <_usb_d_dev_register_ep_callback+0x28>)
    1a3c:	6693      	str	r3, [r2, #104]	; 0x68
}
    1a3e:	4770      	bx	lr
		dev_inst.ep_callbacks.more = (_usb_d_dev_ep_cb_more_t)f;
    1a40:	4a01      	ldr	r2, [pc, #4]	; (1a48 <_usb_d_dev_register_ep_callback+0x28>)
    1a42:	66d3      	str	r3, [r2, #108]	; 0x6c
    1a44:	e7fb      	b.n	1a3e <_usb_d_dev_register_ep_callback+0x1e>
    1a46:	46c0      	nop			; (mov r8, r8)
    1a48:	200000ec 	.word	0x200000ec
    1a4c:	000009d1 	.word	0x000009d1

00001a50 <USB_Handler>:

/**
 * \brief USB interrupt handler
 */
void USB_Handler(void)
{
    1a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t epint = hw->DEVICE.EPINTSMRY.reg;
    1a52:	2382      	movs	r3, #130	; 0x82
    1a54:	05db      	lsls	r3, r3, #23
    1a56:	8c1e      	ldrh	r6, [r3, #32]
    1a58:	b2b6      	uxth	r6, r6
	if (0 == epint) {
    1a5a:	2e00      	cmp	r6, #0
    1a5c:	d003      	beq.n	1a66 <USB_Handler+0x16>
    1a5e:	4c83      	ldr	r4, [pc, #524]	; (1c6c <USB_Handler+0x21c>)
    1a60:	3474      	adds	r4, #116	; 0x74
	uint32_t lpm_variable = 0;
    1a62:	2500      	movs	r5, #0
    1a64:	e0c0      	b.n	1be8 <USB_Handler+0x198>
	return ((Usb *)hw)->DEVICE.INTFLAG.reg;
    1a66:	8b99      	ldrh	r1, [r3, #28]
	return ((Usb *)hw)->DEVICE.INTENSET.reg;
    1a68:	8b1b      	ldrh	r3, [r3, #24]
	flags &= hri_usbdevice_read_INTEN_reg(USB);
    1a6a:	400b      	ands	r3, r1
	if (flags & USB_DEVICE_INTFLAG_SOF) {
    1a6c:	075a      	lsls	r2, r3, #29
    1a6e:	d418      	bmi.n	1aa2 <USB_Handler+0x52>
	if (flags & USB_DEVICE_INTFLAG_LPMSUSP) {
    1a70:	059a      	lsls	r2, r3, #22
    1a72:	d41e      	bmi.n	1ab2 <USB_Handler+0x62>
	} else if (flags & USB_DEVICE_INTFLAG_RAMACER) {
    1a74:	061a      	lsls	r2, r3, #24
    1a76:	d441      	bmi.n	1afc <USB_Handler+0xac>
	} else if (flags & USB_D_WAKEUP_INT_FLAGS) {
    1a78:	2270      	movs	r2, #112	; 0x70
    1a7a:	421a      	tst	r2, r3
    1a7c:	d148      	bne.n	1b10 <USB_Handler+0xc0>
	} else if (flags & USB_DEVICE_INTFLAG_EORST) {
    1a7e:	071a      	lsls	r2, r3, #28
    1a80:	d464      	bmi.n	1b4c <USB_Handler+0xfc>
	} else if (flags & USB_DEVICE_INTFLAG_SUSPEND) {
    1a82:	07db      	lsls	r3, r3, #31
    1a84:	d5eb      	bpl.n	1a5e <USB_Handler+0xe>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1a86:	2382      	movs	r3, #130	; 0x82
    1a88:	05db      	lsls	r3, r3, #23
    1a8a:	4a79      	ldr	r2, [pc, #484]	; (1c70 <USB_Handler+0x220>)
    1a8c:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1a8e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1a90:	3a92      	subs	r2, #146	; 0x92
    1a92:	3aff      	subs	r2, #255	; 0xff
    1a94:	831a      	strh	r2, [r3, #24]
	dev_inst.callbacks.event(USB_EV_SUSPEND, 0);
    1a96:	4b75      	ldr	r3, [pc, #468]	; (1c6c <USB_Handler+0x21c>)
    1a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1a9a:	2100      	movs	r1, #0
    1a9c:	2004      	movs	r0, #4
    1a9e:	4798      	blx	r3
    1aa0:	e006      	b.n	1ab0 <USB_Handler+0x60>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1aa2:	2204      	movs	r2, #4
    1aa4:	2382      	movs	r3, #130	; 0x82
    1aa6:	05db      	lsls	r3, r3, #23
    1aa8:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.sof();
    1aaa:	4b70      	ldr	r3, [pc, #448]	; (1c6c <USB_Handler+0x21c>)
    1aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    1aae:	4798      	blx	r3

	_usb_d_dev_handler();
}
    1ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ab2:	2382      	movs	r3, #130	; 0x82
    1ab4:	05db      	lsls	r3, r3, #23
    1ab6:	4a6e      	ldr	r2, [pc, #440]	; (1c70 <USB_Handler+0x220>)
    1ab8:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1aba:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1abc:	3a92      	subs	r2, #146	; 0x92
    1abe:	3aff      	subs	r2, #255	; 0xff
    1ac0:	831a      	strh	r2, [r3, #24]
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1ac2:	4b6a      	ldr	r3, [pc, #424]	; (1c6c <USB_Handler+0x21c>)
    1ac4:	891b      	ldrh	r3, [r3, #8]
    1ac6:	071b      	lsls	r3, r3, #28
    1ac8:	0f1b      	lsrs	r3, r3, #28
    1aca:	2b03      	cmp	r3, #3
    1acc:	d00c      	beq.n	1ae8 <USB_Handler+0x98>
    1ace:	4b67      	ldr	r3, [pc, #412]	; (1c6c <USB_Handler+0x21c>)
    1ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    1ad2:	071b      	lsls	r3, r3, #28
    1ad4:	0f1b      	lsrs	r3, r3, #28
	uint32_t lpm_variable = 0;
    1ad6:	2100      	movs	r1, #0
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ad8:	3a6f      	subs	r2, #111	; 0x6f
		if (bank->EXTREG.bit.SUBPID == 0x3) {
    1ada:	2b03      	cmp	r3, #3
    1adc:	d005      	beq.n	1aea <USB_Handler+0x9a>
	dev_inst.callbacks.event(USB_EV_LPM_SUSPEND, lpm_variable);
    1ade:	4b63      	ldr	r3, [pc, #396]	; (1c6c <USB_Handler+0x21c>)
    1ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1ae2:	2003      	movs	r0, #3
    1ae4:	4798      	blx	r3
    1ae6:	e7e3      	b.n	1ab0 <USB_Handler+0x60>
		UsbDeviceDescBank *bank = &prvt_inst.desc_table[i].DeviceDescBank[0];
    1ae8:	2200      	movs	r2, #0
			lpm_variable = bank->EXTREG.bit.VARIABLE;
    1aea:	0152      	lsls	r2, r2, #5
    1aec:	4b5f      	ldr	r3, [pc, #380]	; (1c6c <USB_Handler+0x21c>)
    1aee:	189b      	adds	r3, r3, r2
    1af0:	8919      	ldrh	r1, [r3, #8]
    1af2:	0449      	lsls	r1, r1, #17
    1af4:	0d49      	lsrs	r1, r1, #21
			bank->EXTREG.reg = 0;
    1af6:	2200      	movs	r2, #0
    1af8:	811a      	strh	r2, [r3, #8]
    1afa:	e7f0      	b.n	1ade <USB_Handler+0x8e>
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1afc:	2280      	movs	r2, #128	; 0x80
    1afe:	2382      	movs	r3, #130	; 0x82
    1b00:	05db      	lsls	r3, r3, #23
    1b02:	839a      	strh	r2, [r3, #28]
	dev_inst.callbacks.event(USB_EV_ERROR, 0);
    1b04:	4b59      	ldr	r3, [pc, #356]	; (1c6c <USB_Handler+0x21c>)
    1b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b08:	2100      	movs	r1, #0
    1b0a:	2005      	movs	r0, #5
    1b0c:	4798      	blx	r3
    1b0e:	e7cf      	b.n	1ab0 <USB_Handler+0x60>
    1b10:	2382      	movs	r3, #130	; 0x82
    1b12:	05db      	lsls	r3, r3, #23
    1b14:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b16:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b18:	4a55      	ldr	r2, [pc, #340]	; (1c70 <USB_Handler+0x220>)
    1b1a:	831a      	strh	r2, [r3, #24]
}

static inline bool hri_oscctrl_get_DFLLCTRL_MODE_bit(const void *const hw)
{
	uint16_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLCTRL.reg;
    1b1c:	4b55      	ldr	r3, [pc, #340]	; (1c74 <USB_Handler+0x224>)
    1b1e:	8b1b      	ldrh	r3, [r3, #24]
	if (hri_oscctrl_get_DFLLCTRL_MODE_bit(OSCCTRL)) {
    1b20:	075b      	lsls	r3, r3, #29
    1b22:	d50c      	bpl.n	1b3e <USB_Handler+0xee>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b24:	4953      	ldr	r1, [pc, #332]	; (1c74 <USB_Handler+0x224>)
	tmp &= mask;
    1b26:	2290      	movs	r2, #144	; 0x90
    1b28:	0112      	lsls	r2, r2, #4
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b2a:	68cb      	ldr	r3, [r1, #12]
	tmp &= mask;
    1b2c:	4013      	ands	r3, r2
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, (OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC))
    1b2e:	4293      	cmp	r3, r2
    1b30:	d1fb      	bne.n	1b2a <USB_Handler+0xda>
	dev_inst.callbacks.event(USB_EV_WAKEUP, 0);
    1b32:	4b4e      	ldr	r3, [pc, #312]	; (1c6c <USB_Handler+0x21c>)
    1b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b36:	2100      	movs	r1, #0
    1b38:	2002      	movs	r0, #2
    1b3a:	4798      	blx	r3
    1b3c:	e7b8      	b.n	1ab0 <USB_Handler+0x60>
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b3e:	494d      	ldr	r1, [pc, #308]	; (1c74 <USB_Handler+0x224>)
	tmp &= mask;
    1b40:	2280      	movs	r2, #128	; 0x80
    1b42:	0052      	lsls	r2, r2, #1
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1b44:	68cb      	ldr	r3, [r1, #12]
		while (hri_oscctrl_get_STATUS_reg(OSCCTRL, OSCCTRL_STATUS_DFLLRDY) != OSCCTRL_STATUS_DFLLRDY)
    1b46:	4213      	tst	r3, r2
    1b48:	d0fc      	beq.n	1b44 <USB_Handler+0xf4>
    1b4a:	e7f2      	b.n	1b32 <USB_Handler+0xe2>
	((UsbDevice *)hw)->DeviceEndpoint[submodule_index].EPCFG.reg = data;
    1b4c:	2382      	movs	r3, #130	; 0x82
    1b4e:	05db      	lsls	r3, r3, #23
    1b50:	2100      	movs	r1, #0
    1b52:	2280      	movs	r2, #128	; 0x80
    1b54:	0052      	lsls	r2, r2, #1
    1b56:	5499      	strb	r1, [r3, r2]
	((Usb *)hw)->DEVICE.INTFLAG.reg = mask;
    1b58:	3af8      	subs	r2, #248	; 0xf8
    1b5a:	839a      	strh	r2, [r3, #28]
	((Usb *)hw)->DEVICE.INTENCLR.reg = mask;
    1b5c:	3268      	adds	r2, #104	; 0x68
    1b5e:	829a      	strh	r2, [r3, #20]
	((Usb *)hw)->DEVICE.INTENSET.reg = mask;
    1b60:	4a43      	ldr	r2, [pc, #268]	; (1c70 <USB_Handler+0x220>)
    1b62:	831a      	strh	r2, [r3, #24]
	_usb_d_dev_reset_epts();
    1b64:	4b44      	ldr	r3, [pc, #272]	; (1c78 <USB_Handler+0x228>)
    1b66:	4798      	blx	r3
	dev_inst.callbacks.event(USB_EV_RESET, 0);
    1b68:	4b40      	ldr	r3, [pc, #256]	; (1c6c <USB_Handler+0x21c>)
    1b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    1b6c:	2100      	movs	r1, #0
    1b6e:	2001      	movs	r0, #1
    1b70:	4798      	blx	r3
    1b72:	e79d      	b.n	1ab0 <USB_Handler+0x60>
	if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1b74:	06cb      	lsls	r3, r1, #27
    1b76:	d407      	bmi.n	1b88 <USB_Handler+0x138>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b78:	064b      	lsls	r3, r1, #25
    1b7a:	d408      	bmi.n	1b8e <USB_Handler+0x13e>
	} else if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1b7c:	068b      	lsls	r3, r1, #26
    1b7e:	d52e      	bpl.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    1b80:	2100      	movs	r1, #0
    1b82:	4b3e      	ldr	r3, [pc, #248]	; (1c7c <USB_Handler+0x22c>)
    1b84:	4798      	blx	r3
    1b86:	e02a      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_setup(ept);
    1b88:	4b3d      	ldr	r3, [pc, #244]	; (1c80 <USB_Handler+0x230>)
    1b8a:	4798      	blx	r3
    1b8c:	e027      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    1b8e:	2101      	movs	r1, #1
    1b90:	4b3a      	ldr	r3, [pc, #232]	; (1c7c <USB_Handler+0x22c>)
    1b92:	4798      	blx	r3
    1b94:	e023      	b.n	1bde <USB_Handler+0x18e>
	if (flags & USB_DEVICE_EPINTFLAG_STALL1) {
    1b96:	064b      	lsls	r3, r1, #25
    1b98:	d40e      	bmi.n	1bb8 <USB_Handler+0x168>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1b9a:	070b      	lsls	r3, r1, #28
    1b9c:	d410      	bmi.n	1bc0 <USB_Handler+0x170>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT1) {
    1b9e:	078b      	lsls	r3, r1, #30
    1ba0:	d412      	bmi.n	1bc8 <USB_Handler+0x178>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1ba2:	2307      	movs	r3, #7
    1ba4:	401a      	ands	r2, r3
    1ba6:	2a01      	cmp	r2, #1
    1ba8:	d119      	bne.n	1bde <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1baa:	074b      	lsls	r3, r1, #29
    1bac:	d410      	bmi.n	1bd0 <USB_Handler+0x180>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1bae:	06cb      	lsls	r3, r1, #27
    1bb0:	d515      	bpl.n	1bde <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    1bb2:	4b33      	ldr	r3, [pc, #204]	; (1c80 <USB_Handler+0x230>)
    1bb4:	4798      	blx	r3
    1bb6:	e012      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 1);
    1bb8:	2101      	movs	r1, #1
    1bba:	4b30      	ldr	r3, [pc, #192]	; (1c7c <USB_Handler+0x22c>)
    1bbc:	4798      	blx	r3
    1bbe:	e00e      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 1);
    1bc0:	2101      	movs	r1, #1
    1bc2:	4b30      	ldr	r3, [pc, #192]	; (1c84 <USB_Handler+0x234>)
    1bc4:	4798      	blx	r3
    1bc6:	e00a      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_in_next(ept, true);
    1bc8:	2101      	movs	r1, #1
    1bca:	4b2f      	ldr	r3, [pc, #188]	; (1c88 <USB_Handler+0x238>)
    1bcc:	4798      	blx	r3
    1bce:	e006      	b.n	1bde <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 0);
    1bd0:	2100      	movs	r1, #0
    1bd2:	4b2c      	ldr	r3, [pc, #176]	; (1c84 <USB_Handler+0x234>)
    1bd4:	4798      	blx	r3
    1bd6:	e002      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_stall(ept, 0);
    1bd8:	2100      	movs	r1, #0
    1bda:	4b28      	ldr	r3, [pc, #160]	; (1c7c <USB_Handler+0x22c>)
    1bdc:	4798      	blx	r3
    1bde:	3501      	adds	r5, #1
    1be0:	3414      	adds	r4, #20
	for (i = 0; i < USB_D_N_EP; i++) {
    1be2:	2d09      	cmp	r5, #9
    1be4:	d100      	bne.n	1be8 <USB_Handler+0x198>
    1be6:	e763      	b.n	1ab0 <USB_Handler+0x60>
    1be8:	0020      	movs	r0, r4
		if (ept->ep == 0xFF) {
    1bea:	7ca1      	ldrb	r1, [r4, #18]
    1bec:	29ff      	cmp	r1, #255	; 0xff
    1bee:	d0f6      	beq.n	1bde <USB_Handler+0x18e>
	if (!(epint & (1u << epn))) {
    1bf0:	230f      	movs	r3, #15
    1bf2:	400b      	ands	r3, r1
    1bf4:	2101      	movs	r1, #1
    1bf6:	4099      	lsls	r1, r3
    1bf8:	420e      	tst	r6, r1
    1bfa:	d0f0      	beq.n	1bde <USB_Handler+0x18e>
	flags = hw->DEVICE.DeviceEndpoint[epn].EPINTFLAG.reg;
    1bfc:	0159      	lsls	r1, r3, #5
    1bfe:	4f23      	ldr	r7, [pc, #140]	; (1c8c <USB_Handler+0x23c>)
    1c00:	46bc      	mov	ip, r7
    1c02:	4461      	add	r1, ip
    1c04:	79c9      	ldrb	r1, [r1, #7]
	mask  = hw->DEVICE.DeviceEndpoint[epn].EPINTENSET.reg;
    1c06:	015b      	lsls	r3, r3, #5
    1c08:	4f21      	ldr	r7, [pc, #132]	; (1c90 <USB_Handler+0x240>)
    1c0a:	46bc      	mov	ip, r7
    1c0c:	4463      	add	r3, ip
    1c0e:	781b      	ldrb	r3, [r3, #0]
	flags &= mask;
    1c10:	4019      	ands	r1, r3
	if (flags) {
    1c12:	d0e4      	beq.n	1bde <USB_Handler+0x18e>
		if ((ept->flags.bits.eptype == 0x1) && !_usb_d_dev_ep_is_busy(ept)) {
    1c14:	00ab      	lsls	r3, r5, #2
    1c16:	195a      	adds	r2, r3, r5
    1c18:	0092      	lsls	r2, r2, #2
    1c1a:	4b14      	ldr	r3, [pc, #80]	; (1c6c <USB_Handler+0x21c>)
    1c1c:	469c      	mov	ip, r3
    1c1e:	4462      	add	r2, ip
    1c20:	3270      	adds	r2, #112	; 0x70
    1c22:	7dd2      	ldrb	r2, [r2, #23]
    1c24:	2347      	movs	r3, #71	; 0x47
    1c26:	4013      	ands	r3, r2
    1c28:	2b01      	cmp	r3, #1
    1c2a:	d0a3      	beq.n	1b74 <USB_Handler+0x124>
		} else if (_usb_d_dev_ep_is_in(ept)) {
    1c2c:	b253      	sxtb	r3, r2
    1c2e:	2b00      	cmp	r3, #0
    1c30:	dbb1      	blt.n	1b96 <USB_Handler+0x146>
	if (flags & USB_DEVICE_EPINTFLAG_STALL0) {
    1c32:	068b      	lsls	r3, r1, #26
    1c34:	d4d0      	bmi.n	1bd8 <USB_Handler+0x188>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    1c36:	074b      	lsls	r3, r1, #29
    1c38:	d40c      	bmi.n	1c54 <USB_Handler+0x204>
	} else if (flags & USB_DEVICE_EPINTFLAG_TRCPT0) {
    1c3a:	07cb      	lsls	r3, r1, #31
    1c3c:	d40e      	bmi.n	1c5c <USB_Handler+0x20c>
	} else if (_usb_d_dev_ep_is_ctrl(ept)) {
    1c3e:	2307      	movs	r3, #7
    1c40:	401a      	ands	r2, r3
    1c42:	2a01      	cmp	r2, #1
    1c44:	d1cb      	bne.n	1bde <USB_Handler+0x18e>
		if (flags & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    1c46:	070b      	lsls	r3, r1, #28
    1c48:	d40c      	bmi.n	1c64 <USB_Handler+0x214>
		} else if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    1c4a:	06cb      	lsls	r3, r1, #27
    1c4c:	d5c7      	bpl.n	1bde <USB_Handler+0x18e>
			_usb_d_dev_handle_setup(ept);
    1c4e:	4b0c      	ldr	r3, [pc, #48]	; (1c80 <USB_Handler+0x230>)
    1c50:	4798      	blx	r3
    1c52:	e7c4      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_handle_trfail(ept, 0);
    1c54:	2100      	movs	r1, #0
    1c56:	4b0b      	ldr	r3, [pc, #44]	; (1c84 <USB_Handler+0x234>)
    1c58:	4798      	blx	r3
    1c5a:	e7c0      	b.n	1bde <USB_Handler+0x18e>
		_usb_d_dev_out_next(ept, true);
    1c5c:	2101      	movs	r1, #1
    1c5e:	4b0d      	ldr	r3, [pc, #52]	; (1c94 <USB_Handler+0x244>)
    1c60:	4798      	blx	r3
    1c62:	e7bc      	b.n	1bde <USB_Handler+0x18e>
			_usb_d_dev_handle_trfail(ept, 1);
    1c64:	2101      	movs	r1, #1
    1c66:	4b07      	ldr	r3, [pc, #28]	; (1c84 <USB_Handler+0x234>)
    1c68:	4798      	blx	r3
    1c6a:	e7b8      	b.n	1bde <USB_Handler+0x18e>
    1c6c:	200000ec 	.word	0x200000ec
    1c70:	00000201 	.word	0x00000201
    1c74:	40000c00 	.word	0x40000c00
    1c78:	00000c25 	.word	0x00000c25
    1c7c:	00000a61 	.word	0x00000a61
    1c80:	000009d5 	.word	0x000009d5
    1c84:	00000b25 	.word	0x00000b25
    1c88:	00000c69 	.word	0x00000c69
    1c8c:	41000100 	.word	0x41000100
    1c90:	41000109 	.word	0x41000109
    1c94:	00000e11 	.word	0x00000e11

00001c98 <main>:
#include <atmel_start.h>

int main(void)
{
    1c98:	b510      	push	{r4, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1c9a:	4b01      	ldr	r3, [pc, #4]	; (1ca0 <main+0x8>)
    1c9c:	4798      	blx	r3
    1c9e:	e7fe      	b.n	1c9e <main+0x6>
    1ca0:	00000115 	.word	0x00000115

00001ca4 <mscdf_request_sense>:
 * \brief USB MSC Request Sense
 * \param[in] err_codes Error code
 */
static void mscdf_request_sense(int32_t err_codes)
{
	switch (err_codes) {
    1ca4:	0003      	movs	r3, r0
    1ca6:	330e      	adds	r3, #14
    1ca8:	d01b      	beq.n	1ce2 <mscdf_request_sense+0x3e>
    1caa:	0003      	movs	r3, r0
    1cac:	330e      	adds	r3, #14
    1cae:	dd0a      	ble.n	1cc6 <mscdf_request_sense+0x22>
    1cb0:	0003      	movs	r3, r0
    1cb2:	330a      	adds	r3, #10
    1cb4:	d00f      	beq.n	1cd6 <mscdf_request_sense+0x32>
    1cb6:	1d03      	adds	r3, r0, #4
    1cb8:	d119      	bne.n	1cee <mscdf_request_sense+0x4a>
		mscdf_sense_data.sense_flag_key = SCSI_SK_NOT_READY;
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_MEDIUM_NOT_PRESENT);
		break;

	case ERR_BUSY:
		mscdf_sense_data.sense_flag_key = SCSI_SK_UNIT_ATTENTION;
    1cba:	4b10      	ldr	r3, [pc, #64]	; (1cfc <mscdf_request_sense+0x58>)
    1cbc:	2206      	movs	r2, #6
    1cbe:	709a      	strb	r2, [r3, #2]
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_NOT_READY_TO_READY_CHANGE);
    1cc0:	3222      	adds	r2, #34	; 0x22
    1cc2:	819a      	strh	r2, [r3, #12]
		break;
    1cc4:	e00c      	b.n	1ce0 <mscdf_request_sense+0x3c>
	switch (err_codes) {
    1cc6:	3011      	adds	r0, #17
    1cc8:	d111      	bne.n	1cee <mscdf_request_sense+0x4a>

	case ERR_DENIED:
		mscdf_sense_data.sense_flag_key = SCSI_SK_DATA_PROTECT;
    1cca:	4b0c      	ldr	r3, [pc, #48]	; (1cfc <mscdf_request_sense+0x58>)
    1ccc:	2207      	movs	r2, #7
    1cce:	709a      	strb	r2, [r3, #2]
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_WRITE_PROTECTED);
    1cd0:	3220      	adds	r2, #32
    1cd2:	819a      	strh	r2, [r3, #12]
		break;
    1cd4:	e004      	b.n	1ce0 <mscdf_request_sense+0x3c>
		mscdf_sense_data.sense_flag_key = SCSI_SK_NOT_READY;
    1cd6:	4b09      	ldr	r3, [pc, #36]	; (1cfc <mscdf_request_sense+0x58>)
    1cd8:	2202      	movs	r2, #2
    1cda:	709a      	strb	r2, [r3, #2]
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_MEDIUM_NOT_PRESENT);
    1cdc:	3238      	adds	r2, #56	; 0x38
    1cde:	819a      	strh	r2, [r3, #12]
	default:
		mscdf_sense_data.sense_flag_key = SCSI_SK_ILLEGAL_REQUEST;
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_INVALID_COMMAND_OPERATION_CODE);
		break;
	}
}
    1ce0:	4770      	bx	lr
		mscdf_sense_data.sense_flag_key = SCSI_SK_ILLEGAL_REQUEST;
    1ce2:	4b06      	ldr	r3, [pc, #24]	; (1cfc <mscdf_request_sense+0x58>)
    1ce4:	2205      	movs	r2, #5
    1ce6:	709a      	strb	r2, [r3, #2]
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_LBA_OUT_OF_RANGE);
    1ce8:	321c      	adds	r2, #28
    1cea:	819a      	strh	r2, [r3, #12]
		break;
    1cec:	e7f8      	b.n	1ce0 <mscdf_request_sense+0x3c>
		mscdf_sense_data.sense_flag_key = SCSI_SK_ILLEGAL_REQUEST;
    1cee:	4b03      	ldr	r3, [pc, #12]	; (1cfc <mscdf_request_sense+0x58>)
    1cf0:	2205      	movs	r2, #5
    1cf2:	709a      	strb	r2, [r3, #2]
		mscdf_sense_data.AddSense       = BE16(SCSI_ASC_INVALID_COMMAND_OPERATION_CODE);
    1cf4:	321b      	adds	r2, #27
    1cf6:	819a      	strh	r2, [r3, #12]
}
    1cf8:	e7f2      	b.n	1ce0 <mscdf_request_sense+0x3c>
    1cfa:	46c0      	nop			; (mov r8, r8)
    1cfc:	20000000 	.word	0x20000000

00001d00 <mscdf_send_csw>:
{
    1d00:	b510      	push	{r4, lr}
	_mscdf_funcd.xfer_stage = MSCDF_STATUS_STAGE;
    1d02:	4b07      	ldr	r3, [pc, #28]	; (1d20 <mscdf_send_csw+0x20>)
    1d04:	2202      	movs	r2, #2
    1d06:	741a      	strb	r2, [r3, #16]
	return ERR_NONE == usbdc_xfer(_mscdf_funcd.func_ep_in, (uint8_t *)&mscdf_csw, sizeof(struct usb_msc_csw), false);
    1d08:	7858      	ldrb	r0, [r3, #1]
    1d0a:	2300      	movs	r3, #0
    1d0c:	320b      	adds	r2, #11
    1d0e:	4905      	ldr	r1, [pc, #20]	; (1d24 <mscdf_send_csw+0x24>)
    1d10:	3114      	adds	r1, #20
    1d12:	4c05      	ldr	r4, [pc, #20]	; (1d28 <mscdf_send_csw+0x28>)
    1d14:	47a0      	blx	r4
    1d16:	4243      	negs	r3, r0
    1d18:	4158      	adcs	r0, r3
    1d1a:	b2c0      	uxtb	r0, r0
}
    1d1c:	bd10      	pop	{r4, pc}
    1d1e:	46c0      	nop			; (mov r8, r8)
    1d20:	200002d4 	.word	0x200002d4
    1d24:	20000000 	.word	0x20000000
    1d28:	000026fd 	.word	0x000026fd

00001d2c <mscdf_wait_cbw>:
{
    1d2c:	b510      	push	{r4, lr}
	_mscdf_funcd.xfer_stage = MSCDF_CMD_STAGE;
    1d2e:	4b07      	ldr	r3, [pc, #28]	; (1d4c <mscdf_wait_cbw+0x20>)
    1d30:	2200      	movs	r2, #0
    1d32:	741a      	strb	r2, [r3, #16]
	return ERR_NONE == usbdc_xfer(_mscdf_funcd.func_ep_out, (uint8_t *)&mscdf_cbw, 32, false);
    1d34:	0019      	movs	r1, r3
    1d36:	3114      	adds	r1, #20
    1d38:	7898      	ldrb	r0, [r3, #2]
    1d3a:	2300      	movs	r3, #0
    1d3c:	3220      	adds	r2, #32
    1d3e:	4c04      	ldr	r4, [pc, #16]	; (1d50 <mscdf_wait_cbw+0x24>)
    1d40:	47a0      	blx	r4
    1d42:	4243      	negs	r3, r0
    1d44:	4158      	adcs	r0, r3
    1d46:	b2c0      	uxtb	r0, r0
}
    1d48:	bd10      	pop	{r4, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	200002d4 	.word	0x200002d4
    1d50:	000026fd 	.word	0x000026fd

00001d54 <mscdf_req>:
 * \param[in] req Pointer to the request.
 * \param[in] stage USB control transfer stages.
 * \return Operation status.
 */
static int32_t mscdf_req(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    1d54:	b570      	push	{r4, r5, r6, lr}
	if (0x01 != ((req->bmRequestType >> 5) & 0x03)) { /* class request */
    1d56:	780c      	ldrb	r4, [r1, #0]
    1d58:	0663      	lsls	r3, r4, #25
    1d5a:	0f9b      	lsrs	r3, r3, #30
    1d5c:	2b01      	cmp	r3, #1
    1d5e:	d142      	bne.n	1de6 <mscdf_req+0x92>
		return ERR_NOT_FOUND;
	}
	if (req->wIndex == _mscdf_funcd.func_iface) {
    1d60:	790e      	ldrb	r6, [r1, #4]
    1d62:	794b      	ldrb	r3, [r1, #5]
    1d64:	021b      	lsls	r3, r3, #8
    1d66:	4d2d      	ldr	r5, [pc, #180]	; (1e1c <mscdf_req+0xc8>)
    1d68:	782d      	ldrb	r5, [r5, #0]
    1d6a:	4333      	orrs	r3, r6
    1d6c:	429d      	cmp	r5, r3
    1d6e:	d13d      	bne.n	1dec <mscdf_req+0x98>
		if (req->bmRequestType & USB_EP_DIR_IN) {
    1d70:	b264      	sxtb	r4, r4
    1d72:	2c00      	cmp	r4, #0
    1d74:	db1c      	blt.n	1db0 <mscdf_req+0x5c>
	switch (req->bRequest) {
    1d76:	784b      	ldrb	r3, [r1, #1]
    1d78:	2bff      	cmp	r3, #255	; 0xff
    1d7a:	d145      	bne.n	1e08 <mscdf_req+0xb4>
		if (req->wValue != 0 || req->wLength != 0) {
    1d7c:	788a      	ldrb	r2, [r1, #2]
    1d7e:	78cb      	ldrb	r3, [r1, #3]
    1d80:	021b      	lsls	r3, r3, #8
    1d82:	4313      	orrs	r3, r2
    1d84:	d143      	bne.n	1e0e <mscdf_req+0xba>
    1d86:	798a      	ldrb	r2, [r1, #6]
    1d88:	79cb      	ldrb	r3, [r1, #7]
    1d8a:	021b      	lsls	r3, r3, #8
    1d8c:	4313      	orrs	r3, r2
    1d8e:	d141      	bne.n	1e14 <mscdf_req+0xc0>
		_mscdf_funcd.xfer_stage = MSCDF_CMD_STAGE;
    1d90:	4c22      	ldr	r4, [pc, #136]	; (1e1c <mscdf_req+0xc8>)
    1d92:	7423      	strb	r3, [r4, #16]
		usb_d_ep_halt(_mscdf_funcd.func_ep_in, USB_EP_HALT_SET);
    1d94:	7860      	ldrb	r0, [r4, #1]
    1d96:	2101      	movs	r1, #1
    1d98:	4d21      	ldr	r5, [pc, #132]	; (1e20 <mscdf_req+0xcc>)
    1d9a:	47a8      	blx	r5
		usb_d_ep_halt(_mscdf_funcd.func_ep_out, USB_EP_HALT_SET);
    1d9c:	78a0      	ldrb	r0, [r4, #2]
    1d9e:	2101      	movs	r1, #1
    1da0:	47a8      	blx	r5
		return usbdc_xfer(0, NULL, 0, 0);
    1da2:	2300      	movs	r3, #0
    1da4:	2200      	movs	r2, #0
    1da6:	2100      	movs	r1, #0
    1da8:	2000      	movs	r0, #0
    1daa:	4c1e      	ldr	r4, [pc, #120]	; (1e24 <mscdf_req+0xd0>)
    1dac:	47a0      	blx	r4
			return mscdf_set_req(ep, req);
		}
	} else {
		return ERR_NOT_FOUND;
	}
}
    1dae:	bd70      	pop	{r4, r5, r6, pc}
	if (USB_DATA_STAGE == stage) {
    1db0:	2a01      	cmp	r2, #1
    1db2:	d01e      	beq.n	1df2 <mscdf_req+0x9e>
	switch (req->bRequest) {
    1db4:	784b      	ldrb	r3, [r1, #1]
    1db6:	2bfe      	cmp	r3, #254	; 0xfe
    1db8:	d11d      	bne.n	1df6 <mscdf_req+0xa2>
		if (req->wValue != 0 || len == 0) {
    1dba:	788a      	ldrb	r2, [r1, #2]
    1dbc:	78cb      	ldrb	r3, [r1, #3]
    1dbe:	021b      	lsls	r3, r3, #8
    1dc0:	4313      	orrs	r3, r2
    1dc2:	d11b      	bne.n	1dfc <mscdf_req+0xa8>
	uint16_t len = req->wLength;
    1dc4:	798a      	ldrb	r2, [r1, #6]
    1dc6:	79cb      	ldrb	r3, [r1, #7]
    1dc8:	021b      	lsls	r3, r3, #8
    1dca:	4313      	orrs	r3, r2
		if (req->wValue != 0 || len == 0) {
    1dcc:	d019      	beq.n	1e02 <mscdf_req+0xae>
		return usbdc_xfer(ep, &_mscdf_funcd.func_max_lun, len, false);
    1dce:	1c1a      	adds	r2, r3, #0
    1dd0:	b21b      	sxth	r3, r3
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	d000      	beq.n	1dd8 <mscdf_req+0x84>
    1dd6:	2201      	movs	r2, #1
    1dd8:	b292      	uxth	r2, r2
    1dda:	2300      	movs	r3, #0
    1ddc:	490f      	ldr	r1, [pc, #60]	; (1e1c <mscdf_req+0xc8>)
    1dde:	3103      	adds	r1, #3
    1de0:	4c10      	ldr	r4, [pc, #64]	; (1e24 <mscdf_req+0xd0>)
    1de2:	47a0      	blx	r4
    1de4:	e7e3      	b.n	1dae <mscdf_req+0x5a>
		return ERR_NOT_FOUND;
    1de6:	200a      	movs	r0, #10
    1de8:	4240      	negs	r0, r0
    1dea:	e7e0      	b.n	1dae <mscdf_req+0x5a>
		return ERR_NOT_FOUND;
    1dec:	200a      	movs	r0, #10
    1dee:	4240      	negs	r0, r0
    1df0:	e7dd      	b.n	1dae <mscdf_req+0x5a>
		return ERR_NONE;
    1df2:	2000      	movs	r0, #0
    1df4:	e7db      	b.n	1dae <mscdf_req+0x5a>
		return ERR_INVALID_ARG;
    1df6:	200d      	movs	r0, #13
    1df8:	4240      	negs	r0, r0
    1dfa:	e7d8      	b.n	1dae <mscdf_req+0x5a>
			return ERR_INVALID_ARG;
    1dfc:	200d      	movs	r0, #13
    1dfe:	4240      	negs	r0, r0
    1e00:	e7d5      	b.n	1dae <mscdf_req+0x5a>
    1e02:	200d      	movs	r0, #13
    1e04:	4240      	negs	r0, r0
    1e06:	e7d2      	b.n	1dae <mscdf_req+0x5a>
		return ERR_INVALID_ARG;
    1e08:	200d      	movs	r0, #13
    1e0a:	4240      	negs	r0, r0
    1e0c:	e7cf      	b.n	1dae <mscdf_req+0x5a>
			return ERR_INVALID_ARG;
    1e0e:	200d      	movs	r0, #13
    1e10:	4240      	negs	r0, r0
    1e12:	e7cc      	b.n	1dae <mscdf_req+0x5a>
    1e14:	200d      	movs	r0, #13
    1e16:	4240      	negs	r0, r0
    1e18:	e7c9      	b.n	1dae <mscdf_req+0x5a>
    1e1a:	46c0      	nop			; (mov r8, r8)
    1e1c:	200002d4 	.word	0x200002d4
    1e20:	000007b5 	.word	0x000007b5
    1e24:	000026fd 	.word	0x000026fd

00001e28 <mscdf_invalid_cmd>:
{
    1e28:	b510      	push	{r4, lr}
	pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    1e2a:	2420      	movs	r4, #32
    1e2c:	2201      	movs	r2, #1
    1e2e:	4b15      	ldr	r3, [pc, #84]	; (1e84 <mscdf_invalid_cmd+0x5c>)
    1e30:	551a      	strb	r2, [r3, r4]
	mscdf_request_sense(rc);
    1e32:	4b15      	ldr	r3, [pc, #84]	; (1e88 <mscdf_invalid_cmd+0x60>)
    1e34:	4798      	blx	r3
	if (pcbw->bmCBWFlags & 0x80) {
    1e36:	4b15      	ldr	r3, [pc, #84]	; (1e8c <mscdf_invalid_cmd+0x64>)
    1e38:	5d1b      	ldrb	r3, [r3, r4]
    1e3a:	2b7f      	cmp	r3, #127	; 0x7f
    1e3c:	d806      	bhi.n	1e4c <mscdf_invalid_cmd+0x24>
	} else if (pcsw->dCSWDataResidue) {
    1e3e:	4b11      	ldr	r3, [pc, #68]	; (1e84 <mscdf_invalid_cmd+0x5c>)
    1e40:	69db      	ldr	r3, [r3, #28]
    1e42:	2b00      	cmp	r3, #0
    1e44:	d114      	bne.n	1e70 <mscdf_invalid_cmd+0x48>
		return mscdf_send_csw();
    1e46:	4b12      	ldr	r3, [pc, #72]	; (1e90 <mscdf_invalid_cmd+0x68>)
    1e48:	4798      	blx	r3
}
    1e4a:	bd10      	pop	{r4, pc}
		if (pcsw->dCSWDataResidue) {
    1e4c:	4b0d      	ldr	r3, [pc, #52]	; (1e84 <mscdf_invalid_cmd+0x5c>)
    1e4e:	69db      	ldr	r3, [r3, #28]
    1e50:	2b00      	cmp	r3, #0
    1e52:	d00a      	beq.n	1e6a <mscdf_invalid_cmd+0x42>
			_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    1e54:	4b0d      	ldr	r3, [pc, #52]	; (1e8c <mscdf_invalid_cmd+0x64>)
    1e56:	2201      	movs	r2, #1
    1e58:	741a      	strb	r2, [r3, #16]
	return ERR_NONE == usb_d_ep_halt(_mscdf_funcd.func_ep_in, USB_EP_HALT_SET);
    1e5a:	7858      	ldrb	r0, [r3, #1]
    1e5c:	2101      	movs	r1, #1
    1e5e:	4b0d      	ldr	r3, [pc, #52]	; (1e94 <mscdf_invalid_cmd+0x6c>)
    1e60:	4798      	blx	r3
    1e62:	4243      	negs	r3, r0
    1e64:	4158      	adcs	r0, r3
    1e66:	b2c0      	uxtb	r0, r0
			return mscdf_terminate_in();
    1e68:	e7ef      	b.n	1e4a <mscdf_invalid_cmd+0x22>
			return mscdf_send_csw();
    1e6a:	4b09      	ldr	r3, [pc, #36]	; (1e90 <mscdf_invalid_cmd+0x68>)
    1e6c:	4798      	blx	r3
    1e6e:	e7ec      	b.n	1e4a <mscdf_invalid_cmd+0x22>
		_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    1e70:	4b06      	ldr	r3, [pc, #24]	; (1e8c <mscdf_invalid_cmd+0x64>)
    1e72:	2201      	movs	r2, #1
    1e74:	741a      	strb	r2, [r3, #16]
		usb_d_ep_halt(_mscdf_funcd.func_ep_out, USB_EP_HALT_SET);
    1e76:	7898      	ldrb	r0, [r3, #2]
    1e78:	2101      	movs	r1, #1
    1e7a:	4b06      	ldr	r3, [pc, #24]	; (1e94 <mscdf_invalid_cmd+0x6c>)
    1e7c:	4798      	blx	r3
	return true;
    1e7e:	2001      	movs	r0, #1
    1e80:	e7e3      	b.n	1e4a <mscdf_invalid_cmd+0x22>
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	20000000 	.word	0x20000000
    1e88:	00001ca5 	.word	0x00001ca5
    1e8c:	200002d4 	.word	0x200002d4
    1e90:	00001d01 	.word	0x00001d01
    1e94:	000007b5 	.word	0x000007b5

00001e98 <mscdf_cmd_error>:
{
    1e98:	b510      	push	{r4, lr}
	bool                dir  = pcbw->bmCBWFlags & 0x80;
    1e9a:	2320      	movs	r3, #32
    1e9c:	4a07      	ldr	r2, [pc, #28]	; (1ebc <mscdf_cmd_error+0x24>)
    1e9e:	5cd3      	ldrb	r3, [r2, r3]
	if (dir == dir_expect && pcbw->dCBWDataTransferLength == len_expect) {
    1ea0:	09db      	lsrs	r3, r3, #7
    1ea2:	4283      	cmp	r3, r0
    1ea4:	d004      	beq.n	1eb0 <mscdf_cmd_error+0x18>
	return mscdf_invalid_cmd(ERR_INVALID_ARG);
    1ea6:	200d      	movs	r0, #13
    1ea8:	4240      	negs	r0, r0
    1eaa:	4b05      	ldr	r3, [pc, #20]	; (1ec0 <mscdf_cmd_error+0x28>)
    1eac:	4798      	blx	r3
}
    1eae:	bd10      	pop	{r4, pc}
	if (dir == dir_expect && pcbw->dCBWDataTransferLength == len_expect) {
    1eb0:	69d3      	ldr	r3, [r2, #28]
    1eb2:	428b      	cmp	r3, r1
    1eb4:	d1f7      	bne.n	1ea6 <mscdf_cmd_error+0xe>
		return false;
    1eb6:	2000      	movs	r0, #0
    1eb8:	e7f9      	b.n	1eae <mscdf_cmd_error+0x16>
    1eba:	46c0      	nop			; (mov r8, r8)
    1ebc:	200002d4 	.word	0x200002d4
    1ec0:	00001e29 	.word	0x00001e29

00001ec4 <mscdf_read_write>:
{
    1ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ec6:	46ce      	mov	lr, r9
    1ec8:	4647      	mov	r7, r8
    1eca:	b580      	push	{r7, lr}
	if (_mscdf_funcd.xfer_stage == MSCDF_CMD_STAGE) {
    1ecc:	4b4f      	ldr	r3, [pc, #316]	; (200c <mscdf_read_write+0x148>)
    1ece:	7c1b      	ldrb	r3, [r3, #16]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d007      	beq.n	1ee4 <mscdf_read_write+0x20>
		return true;
    1ed4:	2401      	movs	r4, #1
	} else if (_mscdf_funcd.xfer_stage == MSCDF_DATA_STAGE) {
    1ed6:	2b01      	cmp	r3, #1
    1ed8:	d04c      	beq.n	1f74 <mscdf_read_write+0xb0>
}
    1eda:	0020      	movs	r0, r4
    1edc:	bc0c      	pop	{r2, r3}
    1ede:	4690      	mov	r8, r2
    1ee0:	4699      	mov	r9, r3
    1ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		address = (uint32_t)(pcbw->CDB[2] << 24) + (uint32_t)(pcbw->CDB[3] << 16) + (uint32_t)(pcbw->CDB[4] << 8)
    1ee4:	4b49      	ldr	r3, [pc, #292]	; (200c <mscdf_read_write+0x148>)
    1ee6:	2225      	movs	r2, #37	; 0x25
    1ee8:	5c9e      	ldrb	r6, [r3, r2]
    1eea:	3201      	adds	r2, #1
    1eec:	5c9a      	ldrb	r2, [r3, r2]
    1eee:	4690      	mov	r8, r2
    1ef0:	2227      	movs	r2, #39	; 0x27
    1ef2:	5c9f      	ldrb	r7, [r3, r2]
		          + pcbw->CDB[5];
    1ef4:	3201      	adds	r2, #1
    1ef6:	5c9a      	ldrb	r2, [r3, r2]
    1ef8:	4691      	mov	r9, r2
		nblocks = (uint32_t)(pcbw->CDB[7] << 8) + pcbw->CDB[8];
    1efa:	222a      	movs	r2, #42	; 0x2a
    1efc:	5c9d      	ldrb	r5, [r3, r2]
    1efe:	022d      	lsls	r5, r5, #8
    1f00:	3201      	adds	r2, #1
    1f02:	5c9a      	ldrb	r2, [r3, r2]
    1f04:	18ad      	adds	r5, r5, r2
		if (mscdf_cmd_error(pcbw->CDB[0] == SBC_READ10, nblocks << 9)) {
    1f06:	0269      	lsls	r1, r5, #9
    1f08:	2223      	movs	r2, #35	; 0x23
    1f0a:	5c98      	ldrb	r0, [r3, r2]
    1f0c:	3828      	subs	r0, #40	; 0x28
    1f0e:	4242      	negs	r2, r0
    1f10:	4142      	adcs	r2, r0
    1f12:	b2d0      	uxtb	r0, r2
    1f14:	4b3e      	ldr	r3, [pc, #248]	; (2010 <mscdf_read_write+0x14c>)
    1f16:	4798      	blx	r3
    1f18:	1e04      	subs	r4, r0, #0
    1f1a:	d1de      	bne.n	1eda <mscdf_read_write+0x16>
		address = (uint32_t)(pcbw->CDB[2] << 24) + (uint32_t)(pcbw->CDB[3] << 16) + (uint32_t)(pcbw->CDB[4] << 8)
    1f1c:	0631      	lsls	r1, r6, #24
    1f1e:	4643      	mov	r3, r8
    1f20:	041e      	lsls	r6, r3, #16
    1f22:	1989      	adds	r1, r1, r6
    1f24:	4449      	add	r1, r9
    1f26:	023f      	lsls	r7, r7, #8
    1f28:	19c9      	adds	r1, r1, r7
		if (pcbw->CDB[0] == SBC_READ10) {
    1f2a:	2323      	movs	r3, #35	; 0x23
    1f2c:	4a37      	ldr	r2, [pc, #220]	; (200c <mscdf_read_write+0x148>)
    1f2e:	5cd3      	ldrb	r3, [r2, r3]
    1f30:	2b28      	cmp	r3, #40	; 0x28
    1f32:	d007      	beq.n	1f44 <mscdf_read_write+0x80>
		} else if (pcbw->CDB[0] == SBC_WRITE10) {
    1f34:	2b2a      	cmp	r3, #42	; 0x2a
    1f36:	d013      	beq.n	1f60 <mscdf_read_write+0x9c>
	int32_t             ret  = ERR_UNSUPPORTED_OP;
    1f38:	201b      	movs	r0, #27
    1f3a:	4240      	negs	r0, r0
		return mscdf_invalid_cmd(ret);
    1f3c:	4b35      	ldr	r3, [pc, #212]	; (2014 <mscdf_read_write+0x150>)
    1f3e:	4798      	blx	r3
    1f40:	0004      	movs	r4, r0
    1f42:	e7ca      	b.n	1eda <mscdf_read_write+0x16>
			if (NULL != mscdf_read_disk) {
    1f44:	6b53      	ldr	r3, [r2, #52]	; 0x34
    1f46:	2b00      	cmp	r3, #0
    1f48:	d05a      	beq.n	2000 <mscdf_read_write+0x13c>
				ret = mscdf_read_disk(pcbw->bCBWLUN, address, nblocks);
    1f4a:	2221      	movs	r2, #33	; 0x21
    1f4c:	482f      	ldr	r0, [pc, #188]	; (200c <mscdf_read_write+0x148>)
    1f4e:	5c80      	ldrb	r0, [r0, r2]
    1f50:	002a      	movs	r2, r5
    1f52:	4798      	blx	r3
		if (ERR_NONE == ret) {
    1f54:	2800      	cmp	r0, #0
    1f56:	d1f1      	bne.n	1f3c <mscdf_read_write+0x78>
			_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    1f58:	2201      	movs	r2, #1
    1f5a:	4b2c      	ldr	r3, [pc, #176]	; (200c <mscdf_read_write+0x148>)
    1f5c:	741a      	strb	r2, [r3, #16]
			return false;
    1f5e:	e7bc      	b.n	1eda <mscdf_read_write+0x16>
			if (NULL != mscdf_write_disk) {
    1f60:	4b2a      	ldr	r3, [pc, #168]	; (200c <mscdf_read_write+0x148>)
    1f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1f64:	2b00      	cmp	r3, #0
    1f66:	d04e      	beq.n	2006 <mscdf_read_write+0x142>
				ret = mscdf_write_disk(pcbw->bCBWLUN, address, nblocks);
    1f68:	2221      	movs	r2, #33	; 0x21
    1f6a:	4828      	ldr	r0, [pc, #160]	; (200c <mscdf_read_write+0x148>)
    1f6c:	5c80      	ldrb	r0, [r0, r2]
    1f6e:	002a      	movs	r2, r5
    1f70:	4798      	blx	r3
    1f72:	e7ef      	b.n	1f54 <mscdf_read_write+0x90>
		if (count == 0) {
    1f74:	2800      	cmp	r0, #0
    1f76:	d02b      	beq.n	1fd0 <mscdf_read_write+0x10c>
		if (pcsw->dCSWDataResidue < count || _mscdf_funcd.xfer_tot_bytes < count) {
    1f78:	4b27      	ldr	r3, [pc, #156]	; (2018 <mscdf_read_write+0x154>)
    1f7a:	69db      	ldr	r3, [r3, #28]
			return true;
    1f7c:	2401      	movs	r4, #1
		if (pcsw->dCSWDataResidue < count || _mscdf_funcd.xfer_tot_bytes < count) {
    1f7e:	4298      	cmp	r0, r3
    1f80:	d8ab      	bhi.n	1eda <mscdf_read_write+0x16>
    1f82:	4a22      	ldr	r2, [pc, #136]	; (200c <mscdf_read_write+0x148>)
    1f84:	68d2      	ldr	r2, [r2, #12]
    1f86:	4290      	cmp	r0, r2
    1f88:	d8a7      	bhi.n	1eda <mscdf_read_write+0x16>
		pcsw->dCSWDataResidue -= count;
    1f8a:	1a1b      	subs	r3, r3, r0
    1f8c:	4922      	ldr	r1, [pc, #136]	; (2018 <mscdf_read_write+0x154>)
    1f8e:	61cb      	str	r3, [r1, #28]
		_mscdf_funcd.xfer_tot_bytes -= count;
    1f90:	1a12      	subs	r2, r2, r0
    1f92:	4b1e      	ldr	r3, [pc, #120]	; (200c <mscdf_read_write+0x148>)
    1f94:	60da      	str	r2, [r3, #12]
		if (_mscdf_funcd.xfer_tot_bytes == 0) {
    1f96:	d11f      	bne.n	1fd8 <mscdf_read_write+0x114>
			_mscdf_funcd.xfer_busy = false;
    1f98:	745a      	strb	r2, [r3, #17]
			if (NULL != mscdf_xfer_blocks_done) {
    1f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d003      	beq.n	1fa8 <mscdf_read_write+0xe4>
				mscdf_xfer_blocks_done(pcbw->bCBWLUN);
    1fa0:	3221      	adds	r2, #33	; 0x21
    1fa2:	491a      	ldr	r1, [pc, #104]	; (200c <mscdf_read_write+0x148>)
    1fa4:	5c88      	ldrb	r0, [r1, r2]
    1fa6:	4798      	blx	r3
			if (pcsw->dCSWDataResidue == 0 && pcbw->CDB[0] == SBC_READ10) {
    1fa8:	4b1b      	ldr	r3, [pc, #108]	; (2018 <mscdf_read_write+0x154>)
    1faa:	69db      	ldr	r3, [r3, #28]
				return false;
    1fac:	2400      	movs	r4, #0
			if (pcsw->dCSWDataResidue == 0 && pcbw->CDB[0] == SBC_READ10) {
    1fae:	2b00      	cmp	r3, #0
    1fb0:	d000      	beq.n	1fb4 <mscdf_read_write+0xf0>
    1fb2:	e792      	b.n	1eda <mscdf_read_write+0x16>
    1fb4:	3323      	adds	r3, #35	; 0x23
    1fb6:	4a15      	ldr	r2, [pc, #84]	; (200c <mscdf_read_write+0x148>)
    1fb8:	5cd3      	ldrb	r3, [r2, r3]
    1fba:	2b28      	cmp	r3, #40	; 0x28
    1fbc:	d000      	beq.n	1fc0 <mscdf_read_write+0xfc>
    1fbe:	e78c      	b.n	1eda <mscdf_read_write+0x16>
				pcsw->bCSWStatus = USB_CSW_STATUS_PASS;
    1fc0:	2100      	movs	r1, #0
    1fc2:	3b08      	subs	r3, #8
    1fc4:	4a14      	ldr	r2, [pc, #80]	; (2018 <mscdf_read_write+0x154>)
    1fc6:	54d1      	strb	r1, [r2, r3]
				return mscdf_send_csw();
    1fc8:	4b14      	ldr	r3, [pc, #80]	; (201c <mscdf_read_write+0x158>)
    1fca:	4798      	blx	r3
    1fcc:	0004      	movs	r4, r0
    1fce:	e784      	b.n	1eda <mscdf_read_write+0x16>
			return mscdf_send_csw();
    1fd0:	4b12      	ldr	r3, [pc, #72]	; (201c <mscdf_read_write+0x158>)
    1fd2:	4798      	blx	r3
    1fd4:	0004      	movs	r4, r0
    1fd6:	e780      	b.n	1eda <mscdf_read_write+0x16>
			_mscdf_funcd.xfer_blk_addr += count;
    1fd8:	4b0c      	ldr	r3, [pc, #48]	; (200c <mscdf_read_write+0x148>)
    1fda:	6859      	ldr	r1, [r3, #4]
    1fdc:	1809      	adds	r1, r1, r0
    1fde:	6059      	str	r1, [r3, #4]
			if (pcbw->CDB[0] == SBC_READ10) {
    1fe0:	2023      	movs	r0, #35	; 0x23
    1fe2:	5c1b      	ldrb	r3, [r3, r0]
    1fe4:	2b28      	cmp	r3, #40	; 0x28
    1fe6:	d008      	beq.n	1ffa <mscdf_read_write+0x136>
				ep = _mscdf_funcd.func_ep_out;
    1fe8:	4b08      	ldr	r3, [pc, #32]	; (200c <mscdf_read_write+0x148>)
    1fea:	7898      	ldrb	r0, [r3, #2]
			return usbdc_xfer(ep, _mscdf_funcd.xfer_blk_addr, _mscdf_funcd.xfer_tot_bytes, false);
    1fec:	2300      	movs	r3, #0
    1fee:	4c0c      	ldr	r4, [pc, #48]	; (2020 <mscdf_read_write+0x15c>)
    1ff0:	47a0      	blx	r4
    1ff2:	1e44      	subs	r4, r0, #1
    1ff4:	41a0      	sbcs	r0, r4
    1ff6:	b2c4      	uxtb	r4, r0
    1ff8:	e76f      	b.n	1eda <mscdf_read_write+0x16>
				ep = _mscdf_funcd.func_ep_in;
    1ffa:	4b04      	ldr	r3, [pc, #16]	; (200c <mscdf_read_write+0x148>)
    1ffc:	7858      	ldrb	r0, [r3, #1]
    1ffe:	e7f5      	b.n	1fec <mscdf_read_write+0x128>
				ret = ERR_NOT_FOUND;
    2000:	200a      	movs	r0, #10
    2002:	4240      	negs	r0, r0
    2004:	e79a      	b.n	1f3c <mscdf_read_write+0x78>
				ret = ERR_NOT_FOUND;
    2006:	200a      	movs	r0, #10
    2008:	4240      	negs	r0, r0
    200a:	e797      	b.n	1f3c <mscdf_read_write+0x78>
    200c:	200002d4 	.word	0x200002d4
    2010:	00001e99 	.word	0x00001e99
    2014:	00001e29 	.word	0x00001e29
    2018:	20000000 	.word	0x20000000
    201c:	00001d01 	.word	0x00001d01
    2020:	000026fd 	.word	0x000026fd

00002024 <mscdf_cb_ep_bulk_in>:
{
    2024:	b510      	push	{r4, lr}
	if (rc == USB_XFER_RESET) {
    2026:	2905      	cmp	r1, #5
    2028:	d027      	beq.n	207a <mscdf_cb_ep_bulk_in+0x56>
	} else if (rc == USB_XFER_UNHALT) {
    202a:	2903      	cmp	r1, #3
    202c:	d007      	beq.n	203e <mscdf_cb_ep_bulk_in+0x1a>
	if (_mscdf_funcd.xfer_stage == MSCDF_DATA_STAGE) {
    202e:	4b14      	ldr	r3, [pc, #80]	; (2080 <mscdf_cb_ep_bulk_in+0x5c>)
    2030:	7c1b      	ldrb	r3, [r3, #16]
    2032:	2b01      	cmp	r3, #1
    2034:	d012      	beq.n	205c <mscdf_cb_ep_bulk_in+0x38>
		return true;
    2036:	2001      	movs	r0, #1
	} else if (_mscdf_funcd.xfer_stage == MSCDF_STATUS_STAGE) {
    2038:	2b02      	cmp	r3, #2
    203a:	d01b      	beq.n	2074 <mscdf_cb_ep_bulk_in+0x50>
}
    203c:	bd10      	pop	{r4, pc}
		if (_mscdf_funcd.xfer_stage == MSCDF_ERROR_STAGE) {
    203e:	4b10      	ldr	r3, [pc, #64]	; (2080 <mscdf_cb_ep_bulk_in+0x5c>)
    2040:	7c1b      	ldrb	r3, [r3, #16]
    2042:	2b03      	cmp	r3, #3
    2044:	d005      	beq.n	2052 <mscdf_cb_ep_bulk_in+0x2e>
		return true;
    2046:	2001      	movs	r0, #1
		} else if (_mscdf_funcd.xfer_stage != MSCDF_CMD_STAGE) {
    2048:	2b00      	cmp	r3, #0
    204a:	d0f7      	beq.n	203c <mscdf_cb_ep_bulk_in+0x18>
			return mscdf_send_csw();
    204c:	4b0d      	ldr	r3, [pc, #52]	; (2084 <mscdf_cb_ep_bulk_in+0x60>)
    204e:	4798      	blx	r3
    2050:	e7f4      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
			usb_d_ep_halt(ep, USB_EP_HALT_SET);
    2052:	3902      	subs	r1, #2
    2054:	4b0c      	ldr	r3, [pc, #48]	; (2088 <mscdf_cb_ep_bulk_in+0x64>)
    2056:	4798      	blx	r3
			return true;
    2058:	2001      	movs	r0, #1
    205a:	e7ef      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
		if (pcbw->CDB[0] == SBC_READ10) {
    205c:	3322      	adds	r3, #34	; 0x22
    205e:	4908      	ldr	r1, [pc, #32]	; (2080 <mscdf_cb_ep_bulk_in+0x5c>)
    2060:	5ccb      	ldrb	r3, [r1, r3]
    2062:	2b28      	cmp	r3, #40	; 0x28
    2064:	d002      	beq.n	206c <mscdf_cb_ep_bulk_in+0x48>
			return mscdf_send_csw();
    2066:	4b07      	ldr	r3, [pc, #28]	; (2084 <mscdf_cb_ep_bulk_in+0x60>)
    2068:	4798      	blx	r3
    206a:	e7e7      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
			return mscdf_read_write(count);
    206c:	0010      	movs	r0, r2
    206e:	4b07      	ldr	r3, [pc, #28]	; (208c <mscdf_cb_ep_bulk_in+0x68>)
    2070:	4798      	blx	r3
    2072:	e7e3      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
		return mscdf_wait_cbw();
    2074:	4b06      	ldr	r3, [pc, #24]	; (2090 <mscdf_cb_ep_bulk_in+0x6c>)
    2076:	4798      	blx	r3
    2078:	e7e0      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
		return true;
    207a:	2001      	movs	r0, #1
    207c:	e7de      	b.n	203c <mscdf_cb_ep_bulk_in+0x18>
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	200002d4 	.word	0x200002d4
    2084:	00001d01 	.word	0x00001d01
    2088:	000007b5 	.word	0x000007b5
    208c:	00001ec5 	.word	0x00001ec5
    2090:	00001d2d 	.word	0x00001d2d

00002094 <mscdf_ctrl>:
{
    2094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2096:	46ce      	mov	lr, r9
    2098:	4647      	mov	r7, r8
    209a:	b580      	push	{r7, lr}
    209c:	0016      	movs	r6, r2
	switch (ctrl) {
    209e:	2901      	cmp	r1, #1
    20a0:	d051      	beq.n	2146 <mscdf_ctrl+0xb2>
    20a2:	2900      	cmp	r1, #0
    20a4:	d008      	beq.n	20b8 <mscdf_ctrl+0x24>
    20a6:	2902      	cmp	r1, #2
    20a8:	d100      	bne.n	20ac <mscdf_ctrl+0x18>
    20aa:	e06c      	b.n	2186 <mscdf_ctrl+0xf2>
		return ERR_INVALID_ARG;
    20ac:	200d      	movs	r0, #13
    20ae:	4240      	negs	r0, r0
}
    20b0:	bc0c      	pop	{r2, r3}
    20b2:	4690      	mov	r8, r2
    20b4:	4699      	mov	r9, r3
    20b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	struct mscdf_func_data *func_data = (struct mscdf_func_data *)(drv->func_data);
    20b8:	6887      	ldr	r7, [r0, #8]
	ifc = desc->sod;
    20ba:	6810      	ldr	r0, [r2, #0]
	if (NULL == ifc) {
    20bc:	2800      	cmp	r0, #0
    20be:	d065      	beq.n	218c <mscdf_ctrl+0xf8>
	ifc_desc.bInterfaceNumber = ifc[2];
    20c0:	7882      	ldrb	r2, [r0, #2]
	if (MSC_CLASS == ifc_desc.bInterfaceClass) {
    20c2:	7943      	ldrb	r3, [r0, #5]
    20c4:	2b08      	cmp	r3, #8
    20c6:	d164      	bne.n	2192 <mscdf_ctrl+0xfe>
		if (func_data->func_iface == ifc_desc.bInterfaceNumber) { /* Initialized */
    20c8:	783b      	ldrb	r3, [r7, #0]
    20ca:	429a      	cmp	r2, r3
    20cc:	d064      	beq.n	2198 <mscdf_ctrl+0x104>
		} else if (func_data->func_iface != 0xFF) { /* Occupied */
    20ce:	2bff      	cmp	r3, #255	; 0xff
    20d0:	d165      	bne.n	219e <mscdf_ctrl+0x10a>
			func_data->func_iface = ifc_desc.bInterfaceNumber;
    20d2:	703a      	strb	r2, [r7, #0]
	ep = usb_find_desc(ifc, desc->eod, USB_DT_ENDPOINT);
    20d4:	2205      	movs	r2, #5
    20d6:	6871      	ldr	r1, [r6, #4]
    20d8:	4b35      	ldr	r3, [pc, #212]	; (21b0 <mscdf_ctrl+0x11c>)
    20da:	4798      	blx	r3
    20dc:	1e04      	subs	r4, r0, #0
	while (NULL != ep) {
    20de:	d02c      	beq.n	213a <mscdf_ctrl+0xa6>
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    20e0:	4b34      	ldr	r3, [pc, #208]	; (21b4 <mscdf_ctrl+0x120>)
    20e2:	4698      	mov	r8, r3
			usb_d_ep_enable(func_data->func_ep_out);
    20e4:	4b34      	ldr	r3, [pc, #208]	; (21b8 <mscdf_ctrl+0x124>)
    20e6:	4699      	mov	r9, r3
    20e8:	e010      	b.n	210c <mscdf_ctrl+0x78>
			func_data->func_ep_in = ep_desc.bEndpointAddress;
    20ea:	707d      	strb	r5, [r7, #1]
			usb_d_ep_enable(func_data->func_ep_in);
    20ec:	0028      	movs	r0, r5
    20ee:	4b32      	ldr	r3, [pc, #200]	; (21b8 <mscdf_ctrl+0x124>)
    20f0:	4798      	blx	r3
			usb_d_ep_register_callback(func_data->func_ep_in, USB_D_EP_CB_XFER, (FUNC_PTR)mscdf_cb_ep_bulk_in);
    20f2:	7878      	ldrb	r0, [r7, #1]
    20f4:	4a31      	ldr	r2, [pc, #196]	; (21bc <mscdf_ctrl+0x128>)
    20f6:	2102      	movs	r1, #2
    20f8:	4b31      	ldr	r3, [pc, #196]	; (21c0 <mscdf_ctrl+0x12c>)
    20fa:	4798      	blx	r3
		desc->sod = ep;
    20fc:	6034      	str	r4, [r6, #0]
 *  \param[in] desc Byte pointer to the descriptor start address
 *  \return Byte pointer to the next descriptor
 */
static inline uint8_t *usb_desc_next(uint8_t *desc)
{
	return (desc + usb_desc_len(desc));
    20fe:	7820      	ldrb	r0, [r4, #0]
    2100:	1820      	adds	r0, r4, r0
		ep        = usb_find_ep_desc(usb_desc_next(desc->sod), desc->eod);
    2102:	6871      	ldr	r1, [r6, #4]
    2104:	4b2f      	ldr	r3, [pc, #188]	; (21c4 <mscdf_ctrl+0x130>)
    2106:	4798      	blx	r3
    2108:	1e04      	subs	r4, r0, #0
	while (NULL != ep) {
    210a:	d016      	beq.n	213a <mscdf_ctrl+0xa6>
		ep_desc.bEndpointAddress = ep[2];
    210c:	78a5      	ldrb	r5, [r4, #2]
	return (ptr[0] + (ptr[1] << 8));
    210e:	7963      	ldrb	r3, [r4, #5]
    2110:	021b      	lsls	r3, r3, #8
    2112:	7922      	ldrb	r2, [r4, #4]
    2114:	18d2      	adds	r2, r2, r3
		if (usb_d_ep_init(ep_desc.bEndpointAddress, ep_desc.bmAttributes, ep_desc.wMaxPacketSize)) {
    2116:	b292      	uxth	r2, r2
    2118:	78e1      	ldrb	r1, [r4, #3]
    211a:	0028      	movs	r0, r5
    211c:	47c0      	blx	r8
    211e:	2800      	cmp	r0, #0
    2120:	d140      	bne.n	21a4 <mscdf_ctrl+0x110>
		if (ep_desc.bEndpointAddress & USB_EP_DIR_IN) {
    2122:	b26b      	sxtb	r3, r5
    2124:	2b00      	cmp	r3, #0
    2126:	dbe0      	blt.n	20ea <mscdf_ctrl+0x56>
			func_data->func_ep_out = ep_desc.bEndpointAddress;
    2128:	70bd      	strb	r5, [r7, #2]
			usb_d_ep_enable(func_data->func_ep_out);
    212a:	0028      	movs	r0, r5
    212c:	47c8      	blx	r9
			usb_d_ep_register_callback(func_data->func_ep_out, USB_D_EP_CB_XFER, (FUNC_PTR)mscdf_cb_ep_bulk_out);
    212e:	78b8      	ldrb	r0, [r7, #2]
    2130:	4a25      	ldr	r2, [pc, #148]	; (21c8 <mscdf_ctrl+0x134>)
    2132:	2102      	movs	r1, #2
    2134:	4b22      	ldr	r3, [pc, #136]	; (21c0 <mscdf_ctrl+0x12c>)
    2136:	4798      	blx	r3
    2138:	e7e0      	b.n	20fc <mscdf_ctrl+0x68>
	_mscdf_funcd.enabled = true;
    213a:	2201      	movs	r2, #1
    213c:	4b23      	ldr	r3, [pc, #140]	; (21cc <mscdf_ctrl+0x138>)
    213e:	749a      	strb	r2, [r3, #18]
	return mscdf_wait_cbw();
    2140:	4b23      	ldr	r3, [pc, #140]	; (21d0 <mscdf_ctrl+0x13c>)
    2142:	4798      	blx	r3
    2144:	e7b4      	b.n	20b0 <mscdf_ctrl+0x1c>
	struct mscdf_func_data *func_data = (struct mscdf_func_data *)(drv->func_data);
    2146:	6884      	ldr	r4, [r0, #8]
	if (desc) {
    2148:	2a00      	cmp	r2, #0
    214a:	d003      	beq.n	2154 <mscdf_ctrl+0xc0>
		ifc_desc.bInterfaceClass = desc->sod[5];
    214c:	6813      	ldr	r3, [r2, #0]
		if (ifc_desc.bInterfaceClass != MSC_CLASS) {
    214e:	795b      	ldrb	r3, [r3, #5]
    2150:	2b08      	cmp	r3, #8
    2152:	d12a      	bne.n	21aa <mscdf_ctrl+0x116>
	if (func_data->func_iface != 0xFF) {
    2154:	7823      	ldrb	r3, [r4, #0]
    2156:	2bff      	cmp	r3, #255	; 0xff
    2158:	d001      	beq.n	215e <mscdf_ctrl+0xca>
		func_data->func_iface = 0xFF;
    215a:	23ff      	movs	r3, #255	; 0xff
    215c:	7023      	strb	r3, [r4, #0]
	if (func_data->func_ep_in != 0xFF) {
    215e:	7860      	ldrb	r0, [r4, #1]
    2160:	28ff      	cmp	r0, #255	; 0xff
    2162:	d003      	beq.n	216c <mscdf_ctrl+0xd8>
		usb_d_ep_deinit(func_data->func_ep_in);
    2164:	4b1b      	ldr	r3, [pc, #108]	; (21d4 <mscdf_ctrl+0x140>)
    2166:	4798      	blx	r3
		func_data->func_ep_in = 0xFF;
    2168:	23ff      	movs	r3, #255	; 0xff
    216a:	7063      	strb	r3, [r4, #1]
	if (func_data->func_ep_out != 0xFF) {
    216c:	78a0      	ldrb	r0, [r4, #2]
    216e:	28ff      	cmp	r0, #255	; 0xff
    2170:	d003      	beq.n	217a <mscdf_ctrl+0xe6>
		usb_d_ep_deinit(func_data->func_ep_out);
    2172:	4b18      	ldr	r3, [pc, #96]	; (21d4 <mscdf_ctrl+0x140>)
    2174:	4798      	blx	r3
		func_data->func_ep_out = 0xFF;
    2176:	23ff      	movs	r3, #255	; 0xff
    2178:	70a3      	strb	r3, [r4, #2]
	func_data->xfer_stage = MSCDF_CMD_STAGE;
    217a:	2300      	movs	r3, #0
    217c:	7423      	strb	r3, [r4, #16]
	func_data->xfer_busy  = false;
    217e:	7463      	strb	r3, [r4, #17]
	func_data->enabled    = false;
    2180:	74a3      	strb	r3, [r4, #18]
	return ERR_NONE;
    2182:	2000      	movs	r0, #0
    2184:	e794      	b.n	20b0 <mscdf_ctrl+0x1c>
		return ERR_UNSUPPORTED_OP;
    2186:	201b      	movs	r0, #27
    2188:	4240      	negs	r0, r0
    218a:	e791      	b.n	20b0 <mscdf_ctrl+0x1c>
		return ERR_NOT_FOUND;
    218c:	200a      	movs	r0, #10
    218e:	4240      	negs	r0, r0
    2190:	e78e      	b.n	20b0 <mscdf_ctrl+0x1c>
		return ERR_NOT_FOUND;
    2192:	200a      	movs	r0, #10
    2194:	4240      	negs	r0, r0
    2196:	e78b      	b.n	20b0 <mscdf_ctrl+0x1c>
			return ERR_ALREADY_INITIALIZED;
    2198:	2012      	movs	r0, #18
    219a:	4240      	negs	r0, r0
    219c:	e788      	b.n	20b0 <mscdf_ctrl+0x1c>
			return ERR_NO_RESOURCE;
    219e:	201c      	movs	r0, #28
    21a0:	4240      	negs	r0, r0
    21a2:	e785      	b.n	20b0 <mscdf_ctrl+0x1c>
			return ERR_NOT_INITIALIZED;
    21a4:	2014      	movs	r0, #20
    21a6:	4240      	negs	r0, r0
    21a8:	e782      	b.n	20b0 <mscdf_ctrl+0x1c>
			return ERR_NOT_FOUND;
    21aa:	200a      	movs	r0, #10
    21ac:	4240      	negs	r0, r0
    21ae:	e77f      	b.n	20b0 <mscdf_ctrl+0x1c>
    21b0:	00002c19 	.word	0x00002c19
    21b4:	000005ad 	.word	0x000005ad
    21b8:	00000641 	.word	0x00000641
    21bc:	00002025 	.word	0x00002025
    21c0:	0000081d 	.word	0x0000081d
    21c4:	00002c4f 	.word	0x00002c4f
    21c8:	000021d9 	.word	0x000021d9
    21cc:	200002d4 	.word	0x200002d4
    21d0:	00001d2d 	.word	0x00001d2d
    21d4:	00000615 	.word	0x00000615

000021d8 <mscdf_cb_ep_bulk_out>:
{
    21d8:	b570      	push	{r4, r5, r6, lr}
	if (rc == USB_XFER_RESET) {
    21da:	2905      	cmp	r1, #5
    21dc:	d100      	bne.n	21e0 <mscdf_cb_ep_bulk_out+0x8>
    21de:	e152      	b.n	2486 <mscdf_cb_ep_bulk_out+0x2ae>
	} else if (rc == USB_XFER_UNHALT) {
    21e0:	2903      	cmp	r1, #3
    21e2:	d01f      	beq.n	2224 <mscdf_cb_ep_bulk_out+0x4c>
	if (_mscdf_funcd.xfer_stage == MSCDF_CMD_STAGE) {
    21e4:	4ba9      	ldr	r3, [pc, #676]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    21e6:	7c1b      	ldrb	r3, [r3, #16]
    21e8:	2b00      	cmp	r3, #0
    21ea:	d000      	beq.n	21ee <mscdf_cb_ep_bulk_out+0x16>
    21ec:	e143      	b.n	2476 <mscdf_cb_ep_bulk_out+0x29e>
		if (count == 31 && pcbw->dCBWSignature == USB_CBW_SIGNATURE) {
    21ee:	2a1f      	cmp	r2, #31
    21f0:	d104      	bne.n	21fc <mscdf_cb_ep_bulk_out+0x24>
    21f2:	4ba7      	ldr	r3, [pc, #668]	; (2490 <mscdf_cb_ep_bulk_out+0x2b8>)
    21f4:	4aa5      	ldr	r2, [pc, #660]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    21f6:	6952      	ldr	r2, [r2, #20]
    21f8:	429a      	cmp	r2, r3
    21fa:	d024      	beq.n	2246 <mscdf_cb_ep_bulk_out+0x6e>
			_mscdf_funcd.xfer_stage = MSCDF_ERROR_STAGE;
    21fc:	4ca3      	ldr	r4, [pc, #652]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    21fe:	2303      	movs	r3, #3
    2200:	7423      	strb	r3, [r4, #16]
			pcsw->bCSWStatus        = USB_CSW_STATUS_FAIL;
    2202:	2101      	movs	r1, #1
    2204:	331d      	adds	r3, #29
    2206:	4aa3      	ldr	r2, [pc, #652]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    2208:	54d1      	strb	r1, [r2, r3]
			mscdf_request_sense(ERR_INVALID_ARG);
    220a:	200d      	movs	r0, #13
    220c:	4240      	negs	r0, r0
    220e:	4ba2      	ldr	r3, [pc, #648]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    2210:	4798      	blx	r3
			usb_d_ep_halt(_mscdf_funcd.func_ep_in, USB_EP_HALT_SET);
    2212:	7860      	ldrb	r0, [r4, #1]
    2214:	2101      	movs	r1, #1
    2216:	4da1      	ldr	r5, [pc, #644]	; (249c <mscdf_cb_ep_bulk_out+0x2c4>)
    2218:	47a8      	blx	r5
			usb_d_ep_halt(_mscdf_funcd.func_ep_out, USB_EP_HALT_SET);
    221a:	78a0      	ldrb	r0, [r4, #2]
    221c:	2101      	movs	r1, #1
    221e:	47a8      	blx	r5
			return true;
    2220:	2001      	movs	r0, #1
    2222:	e12b      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
		if (_mscdf_funcd.xfer_stage == MSCDF_ERROR_STAGE) {
    2224:	4b99      	ldr	r3, [pc, #612]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2226:	7c1b      	ldrb	r3, [r3, #16]
    2228:	2b03      	cmp	r3, #3
    222a:	d004      	beq.n	2236 <mscdf_cb_ep_bulk_out+0x5e>
		} else if (_mscdf_funcd.xfer_stage == MSCDF_CMD_STAGE) {
    222c:	2b00      	cmp	r3, #0
    222e:	d107      	bne.n	2240 <mscdf_cb_ep_bulk_out+0x68>
			return mscdf_wait_cbw();
    2230:	4b9b      	ldr	r3, [pc, #620]	; (24a0 <mscdf_cb_ep_bulk_out+0x2c8>)
    2232:	4798      	blx	r3
    2234:	e122      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
			usb_d_ep_halt(ep, USB_EP_HALT_SET);
    2236:	3902      	subs	r1, #2
    2238:	4b98      	ldr	r3, [pc, #608]	; (249c <mscdf_cb_ep_bulk_out+0x2c4>)
    223a:	4798      	blx	r3
			return true;
    223c:	2001      	movs	r0, #1
    223e:	e11d      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
			return mscdf_send_csw();
    2240:	4b98      	ldr	r3, [pc, #608]	; (24a4 <mscdf_cb_ep_bulk_out+0x2cc>)
    2242:	4798      	blx	r3
    2244:	e11a      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
			pcsw->dCSWTag         = pcbw->dCBWTag;
    2246:	4a93      	ldr	r2, [pc, #588]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    2248:	4b90      	ldr	r3, [pc, #576]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    224a:	6999      	ldr	r1, [r3, #24]
    224c:	6191      	str	r1, [r2, #24]
			pcsw->dCSWDataResidue = pcbw->dCBWDataTransferLength;
    224e:	69d8      	ldr	r0, [r3, #28]
    2250:	61d0      	str	r0, [r2, #28]
			switch (pcbw->CDB[0]) {
    2252:	2223      	movs	r2, #35	; 0x23
    2254:	5c99      	ldrb	r1, [r3, r2]
    2256:	292a      	cmp	r1, #42	; 0x2a
    2258:	d900      	bls.n	225c <mscdf_cb_ep_bulk_out+0x84>
    225a:	e088      	b.n	236e <mscdf_cb_ep_bulk_out+0x196>
    225c:	008b      	lsls	r3, r1, #2
    225e:	4a92      	ldr	r2, [pc, #584]	; (24a8 <mscdf_cb_ep_bulk_out+0x2d0>)
    2260:	58d3      	ldr	r3, [r2, r3]
    2262:	469f      	mov	pc, r3
				if (!(pcbw->bmCBWFlags & 0x80)) {
    2264:	2320      	movs	r3, #32
    2266:	4a89      	ldr	r2, [pc, #548]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2268:	5cd3      	ldrb	r3, [r2, r3]
    226a:	2b7f      	cmp	r3, #127	; 0x7f
    226c:	d924      	bls.n	22b8 <mscdf_cb_ep_bulk_out+0xe0>
				if (NULL != mscdf_inquiry_disk) {
    226e:	4b87      	ldr	r3, [pc, #540]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2272:	2b00      	cmp	r3, #0
    2274:	d028      	beq.n	22c8 <mscdf_cb_ep_bulk_out+0xf0>
					pbuf = mscdf_inquiry_disk(pcbw->bCBWLUN);
    2276:	2221      	movs	r2, #33	; 0x21
    2278:	4984      	ldr	r1, [pc, #528]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    227a:	5c88      	ldrb	r0, [r1, r2]
    227c:	4798      	blx	r3
    227e:	1e01      	subs	r1, r0, #0
				if (NULL == pbuf) {
    2280:	d01f      	beq.n	22c2 <mscdf_cb_ep_bulk_out+0xea>
				_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    2282:	4b82      	ldr	r3, [pc, #520]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2284:	2201      	movs	r2, #1
    2286:	741a      	strb	r2, [r3, #16]
				pcsw->bCSWStatus        = USB_CSW_STATUS_PASS;
    2288:	2400      	movs	r4, #0
    228a:	321f      	adds	r2, #31
    228c:	4881      	ldr	r0, [pc, #516]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    228e:	5484      	strb	r4, [r0, r2]
				if (pcbw->dCBWDataTransferLength > 36) {
    2290:	69db      	ldr	r3, [r3, #28]
    2292:	2b24      	cmp	r3, #36	; 0x24
    2294:	d902      	bls.n	229c <mscdf_cb_ep_bulk_out+0xc4>
					pcbw->dCBWDataTransferLength = 36;
    2296:	3204      	adds	r2, #4
    2298:	4b7c      	ldr	r3, [pc, #496]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    229a:	61da      	str	r2, [r3, #28]
				pcsw->dCSWDataResidue -= pcbw->dCBWDataTransferLength;
    229c:	487b      	ldr	r0, [pc, #492]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    229e:	69c2      	ldr	r2, [r0, #28]
    22a0:	4c7c      	ldr	r4, [pc, #496]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    22a2:	69e3      	ldr	r3, [r4, #28]
    22a4:	1a9b      	subs	r3, r3, r2
    22a6:	61e3      	str	r3, [r4, #28]
				return usbdc_xfer(_mscdf_funcd.func_ep_in, pbuf, pcbw->dCBWDataTransferLength, false);
    22a8:	7840      	ldrb	r0, [r0, #1]
    22aa:	2300      	movs	r3, #0
    22ac:	4c7f      	ldr	r4, [pc, #508]	; (24ac <mscdf_cb_ep_bulk_out+0x2d4>)
    22ae:	47a0      	blx	r4
    22b0:	1e43      	subs	r3, r0, #1
    22b2:	4198      	sbcs	r0, r3
    22b4:	b2c0      	uxtb	r0, r0
    22b6:	e0e1      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
					return mscdf_invalid_cmd(ERR_INVALID_ARG);
    22b8:	200d      	movs	r0, #13
    22ba:	4240      	negs	r0, r0
    22bc:	4b7c      	ldr	r3, [pc, #496]	; (24b0 <mscdf_cb_ep_bulk_out+0x2d8>)
    22be:	4798      	blx	r3
    22c0:	e0dc      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
					pbuf = (uint8_t *)&_inquiry_default;
    22c2:	4974      	ldr	r1, [pc, #464]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    22c4:	3124      	adds	r1, #36	; 0x24
    22c6:	e7dc      	b.n	2282 <mscdf_cb_ep_bulk_out+0xaa>
    22c8:	4972      	ldr	r1, [pc, #456]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    22ca:	3124      	adds	r1, #36	; 0x24
    22cc:	e7d9      	b.n	2282 <mscdf_cb_ep_bulk_out+0xaa>
				if (mscdf_cmd_error(true, 8)) {
    22ce:	2108      	movs	r1, #8
    22d0:	2001      	movs	r0, #1
    22d2:	4b78      	ldr	r3, [pc, #480]	; (24b4 <mscdf_cb_ep_bulk_out+0x2dc>)
    22d4:	4798      	blx	r3
    22d6:	2800      	cmp	r0, #0
    22d8:	d000      	beq.n	22dc <mscdf_cb_ep_bulk_out+0x104>
    22da:	e0cf      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (NULL != mscdf_get_disk_capacity) {
    22dc:	4b6b      	ldr	r3, [pc, #428]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    22de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    22e0:	2b00      	cmp	r3, #0
    22e2:	d021      	beq.n	2328 <mscdf_cb_ep_bulk_out+0x150>
					pbuf = mscdf_get_disk_capacity(pcbw->bCBWLUN);
    22e4:	2221      	movs	r2, #33	; 0x21
    22e6:	4969      	ldr	r1, [pc, #420]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    22e8:	5c88      	ldrb	r0, [r1, r2]
    22ea:	4798      	blx	r3
    22ec:	1e01      	subs	r1, r0, #0
				if (NULL != pbuf) {
    22ee:	d01b      	beq.n	2328 <mscdf_cb_ep_bulk_out+0x150>
					_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    22f0:	4a66      	ldr	r2, [pc, #408]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    22f2:	2301      	movs	r3, #1
    22f4:	7413      	strb	r3, [r2, #16]
					    = (uint32_t)(pbuf[4] << 24) + (uint32_t)(pbuf[5] << 16) + (uint32_t)(pbuf[6] << 8) + pbuf[7];
    22f6:	7903      	ldrb	r3, [r0, #4]
    22f8:	061b      	lsls	r3, r3, #24
    22fa:	7940      	ldrb	r0, [r0, #5]
    22fc:	0400      	lsls	r0, r0, #16
    22fe:	181b      	adds	r3, r3, r0
    2300:	79c8      	ldrb	r0, [r1, #7]
    2302:	181b      	adds	r3, r3, r0
    2304:	7988      	ldrb	r0, [r1, #6]
    2306:	0200      	lsls	r0, r0, #8
    2308:	181b      	adds	r3, r3, r0
    230a:	6093      	str	r3, [r2, #8]
					pcsw->bCSWStatus      = USB_CSW_STATUS_PASS;
    230c:	4b61      	ldr	r3, [pc, #388]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    230e:	2000      	movs	r0, #0
    2310:	2420      	movs	r4, #32
    2312:	5518      	strb	r0, [r3, r4]
					pcsw->dCSWDataResidue = 0;
    2314:	61d8      	str	r0, [r3, #28]
					return usbdc_xfer(_mscdf_funcd.func_ep_in, pbuf, 8, false);
    2316:	7850      	ldrb	r0, [r2, #1]
    2318:	2300      	movs	r3, #0
    231a:	2208      	movs	r2, #8
    231c:	4c63      	ldr	r4, [pc, #396]	; (24ac <mscdf_cb_ep_bulk_out+0x2d4>)
    231e:	47a0      	blx	r4
    2320:	1e43      	subs	r3, r0, #1
    2322:	4198      	sbcs	r0, r3
    2324:	b2c0      	uxtb	r0, r0
    2326:	e0a9      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
					pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    2328:	2401      	movs	r4, #1
    232a:	2320      	movs	r3, #32
    232c:	4a59      	ldr	r2, [pc, #356]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    232e:	54d4      	strb	r4, [r2, r3]
					mscdf_request_sense(ERR_NOT_FOUND);
    2330:	200a      	movs	r0, #10
    2332:	4240      	negs	r0, r0
    2334:	4b58      	ldr	r3, [pc, #352]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    2336:	4798      	blx	r3
	_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    2338:	4b54      	ldr	r3, [pc, #336]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    233a:	741c      	strb	r4, [r3, #16]
	return ERR_NONE == usb_d_ep_halt(_mscdf_funcd.func_ep_in, USB_EP_HALT_SET);
    233c:	7858      	ldrb	r0, [r3, #1]
    233e:	0021      	movs	r1, r4
    2340:	4b56      	ldr	r3, [pc, #344]	; (249c <mscdf_cb_ep_bulk_out+0x2c4>)
    2342:	4798      	blx	r3
    2344:	0003      	movs	r3, r0
    2346:	4258      	negs	r0, r3
    2348:	4158      	adcs	r0, r3
    234a:	b2c0      	uxtb	r0, r0
					return mscdf_terminate_in();
    234c:	e096      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				return mscdf_read_write(count);
    234e:	201f      	movs	r0, #31
    2350:	4b59      	ldr	r3, [pc, #356]	; (24b8 <mscdf_cb_ep_bulk_out+0x2e0>)
    2352:	4798      	blx	r3
    2354:	e092      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (mscdf_cmd_error(false, 0)) {
    2356:	2100      	movs	r1, #0
    2358:	2000      	movs	r0, #0
    235a:	4b56      	ldr	r3, [pc, #344]	; (24b4 <mscdf_cb_ep_bulk_out+0x2dc>)
    235c:	4798      	blx	r3
    235e:	2800      	cmp	r0, #0
    2360:	d000      	beq.n	2364 <mscdf_cb_ep_bulk_out+0x18c>
    2362:	e08b      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (0x00 == pcbw->CDB[4]) {
    2364:	2327      	movs	r3, #39	; 0x27
    2366:	4a49      	ldr	r2, [pc, #292]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2368:	5cd3      	ldrb	r3, [r2, r3]
    236a:	2b00      	cmp	r3, #0
    236c:	d004      	beq.n	2378 <mscdf_cb_ep_bulk_out+0x1a0>
			return mscdf_invalid_cmd(ERR_UNSUPPORTED_OP);
    236e:	201b      	movs	r0, #27
    2370:	4240      	negs	r0, r0
    2372:	4b4f      	ldr	r3, [pc, #316]	; (24b0 <mscdf_cb_ep_bulk_out+0x2d8>)
    2374:	4798      	blx	r3
    2376:	e081      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
					pcsw->bCSWStatus      = USB_CSW_STATUS_PASS;
    2378:	4b46      	ldr	r3, [pc, #280]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    237a:	2200      	movs	r2, #0
    237c:	2120      	movs	r1, #32
    237e:	545a      	strb	r2, [r3, r1]
					pcsw->dCSWDataResidue = 0;
    2380:	61da      	str	r2, [r3, #28]
					return mscdf_send_csw();
    2382:	4b48      	ldr	r3, [pc, #288]	; (24a4 <mscdf_cb_ep_bulk_out+0x2cc>)
    2384:	4798      	blx	r3
    2386:	e079      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (mscdf_cmd_error(false, 0)) {
    2388:	2100      	movs	r1, #0
    238a:	2000      	movs	r0, #0
    238c:	4b49      	ldr	r3, [pc, #292]	; (24b4 <mscdf_cb_ep_bulk_out+0x2dc>)
    238e:	4798      	blx	r3
    2390:	2800      	cmp	r0, #0
    2392:	d173      	bne.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (0x02 == pcbw->CDB[4]) {
    2394:	2327      	movs	r3, #39	; 0x27
    2396:	4a3d      	ldr	r2, [pc, #244]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2398:	5cd3      	ldrb	r3, [r2, r3]
    239a:	2b02      	cmp	r3, #2
    239c:	d1e7      	bne.n	236e <mscdf_cb_ep_bulk_out+0x196>
					if (NULL != mscdf_eject_disk) {
    239e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    23a0:	2b00      	cmp	r3, #0
    23a2:	d014      	beq.n	23ce <mscdf_cb_ep_bulk_out+0x1f6>
						ret = mscdf_eject_disk(pcbw->bCBWLUN);
    23a4:	2221      	movs	r2, #33	; 0x21
    23a6:	4939      	ldr	r1, [pc, #228]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    23a8:	5c88      	ldrb	r0, [r1, r2]
    23aa:	4798      	blx	r3
						if (ERR_NONE == ret) {
    23ac:	2800      	cmp	r0, #0
    23ae:	d107      	bne.n	23c0 <mscdf_cb_ep_bulk_out+0x1e8>
							pcsw->bCSWStatus      = USB_CSW_STATUS_PASS;
    23b0:	4b38      	ldr	r3, [pc, #224]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    23b2:	2200      	movs	r2, #0
    23b4:	2120      	movs	r1, #32
    23b6:	545a      	strb	r2, [r3, r1]
							pcsw->dCSWDataResidue = 0;
    23b8:	61da      	str	r2, [r3, #28]
					return mscdf_send_csw();
    23ba:	4b3a      	ldr	r3, [pc, #232]	; (24a4 <mscdf_cb_ep_bulk_out+0x2cc>)
    23bc:	4798      	blx	r3
    23be:	e05d      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
							pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    23c0:	2101      	movs	r1, #1
    23c2:	2320      	movs	r3, #32
    23c4:	4a33      	ldr	r2, [pc, #204]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    23c6:	54d1      	strb	r1, [r2, r3]
							mscdf_request_sense(ret);
    23c8:	4b33      	ldr	r3, [pc, #204]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    23ca:	4798      	blx	r3
    23cc:	e7f5      	b.n	23ba <mscdf_cb_ep_bulk_out+0x1e2>
						pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    23ce:	2101      	movs	r1, #1
    23d0:	2320      	movs	r3, #32
    23d2:	4a30      	ldr	r2, [pc, #192]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    23d4:	54d1      	strb	r1, [r2, r3]
						mscdf_request_sense(ERR_NOT_FOUND);
    23d6:	200a      	movs	r0, #10
    23d8:	4240      	negs	r0, r0
    23da:	4b2f      	ldr	r3, [pc, #188]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    23dc:	4798      	blx	r3
    23de:	e7ec      	b.n	23ba <mscdf_cb_ep_bulk_out+0x1e2>
				if (!(pcbw->bmCBWFlags & 0x80)) {
    23e0:	2320      	movs	r3, #32
    23e2:	4a2a      	ldr	r2, [pc, #168]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    23e4:	5cd3      	ldrb	r3, [r2, r3]
    23e6:	2b7f      	cmp	r3, #127	; 0x7f
    23e8:	d918      	bls.n	241c <mscdf_cb_ep_bulk_out+0x244>
				_mscdf_funcd.xfer_stage = MSCDF_DATA_STAGE;
    23ea:	2201      	movs	r2, #1
    23ec:	4b27      	ldr	r3, [pc, #156]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    23ee:	741a      	strb	r2, [r3, #16]
				pcsw->bCSWStatus        = USB_CSW_STATUS_PASS;
    23f0:	2100      	movs	r1, #0
    23f2:	2320      	movs	r3, #32
    23f4:	4a27      	ldr	r2, [pc, #156]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    23f6:	54d1      	strb	r1, [r2, r3]
				if (pcbw->dCBWDataTransferLength > sizeof(struct scsi_request_sense_data)) {
    23f8:	2812      	cmp	r0, #18
    23fa:	d902      	bls.n	2402 <mscdf_cb_ep_bulk_out+0x22a>
					pcbw->dCBWDataTransferLength = sizeof(struct scsi_request_sense_data);
    23fc:	2212      	movs	r2, #18
    23fe:	4b23      	ldr	r3, [pc, #140]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2400:	61da      	str	r2, [r3, #28]
				pcsw->dCSWDataResidue -= pcbw->dCBWDataTransferLength;
    2402:	4b22      	ldr	r3, [pc, #136]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2404:	69da      	ldr	r2, [r3, #28]
    2406:	4923      	ldr	r1, [pc, #140]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    2408:	1a80      	subs	r0, r0, r2
    240a:	61c8      	str	r0, [r1, #28]
				return usbdc_xfer(
    240c:	7858      	ldrb	r0, [r3, #1]
    240e:	2300      	movs	r3, #0
    2410:	4c26      	ldr	r4, [pc, #152]	; (24ac <mscdf_cb_ep_bulk_out+0x2d4>)
    2412:	47a0      	blx	r4
    2414:	1e43      	subs	r3, r0, #1
    2416:	4198      	sbcs	r0, r3
    2418:	b2c0      	uxtb	r0, r0
    241a:	e02f      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
					return mscdf_invalid_cmd(ERR_INVALID_ARG);
    241c:	200d      	movs	r0, #13
    241e:	4240      	negs	r0, r0
    2420:	4b23      	ldr	r3, [pc, #140]	; (24b0 <mscdf_cb_ep_bulk_out+0x2d8>)
    2422:	4798      	blx	r3
    2424:	e02a      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (mscdf_cmd_error(false, 0)) {
    2426:	2100      	movs	r1, #0
    2428:	2000      	movs	r0, #0
    242a:	4b22      	ldr	r3, [pc, #136]	; (24b4 <mscdf_cb_ep_bulk_out+0x2dc>)
    242c:	4798      	blx	r3
    242e:	2800      	cmp	r0, #0
    2430:	d124      	bne.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
				if (NULL != mscdf_test_disk_ready) {
    2432:	4b16      	ldr	r3, [pc, #88]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    2434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    2436:	2b00      	cmp	r3, #0
    2438:	d014      	beq.n	2464 <mscdf_cb_ep_bulk_out+0x28c>
					ret = mscdf_test_disk_ready(pcbw->bCBWLUN);
    243a:	2221      	movs	r2, #33	; 0x21
    243c:	4913      	ldr	r1, [pc, #76]	; (248c <mscdf_cb_ep_bulk_out+0x2b4>)
    243e:	5c88      	ldrb	r0, [r1, r2]
    2440:	4798      	blx	r3
					if (ERR_NONE == ret) {
    2442:	2800      	cmp	r0, #0
    2444:	d107      	bne.n	2456 <mscdf_cb_ep_bulk_out+0x27e>
						pcsw->bCSWStatus      = USB_CSW_STATUS_PASS;
    2446:	4b13      	ldr	r3, [pc, #76]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    2448:	2200      	movs	r2, #0
    244a:	2120      	movs	r1, #32
    244c:	545a      	strb	r2, [r3, r1]
						pcsw->dCSWDataResidue = 0;
    244e:	61da      	str	r2, [r3, #28]
				return mscdf_send_csw();
    2450:	4b14      	ldr	r3, [pc, #80]	; (24a4 <mscdf_cb_ep_bulk_out+0x2cc>)
    2452:	4798      	blx	r3
    2454:	e012      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
						pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    2456:	2101      	movs	r1, #1
    2458:	2320      	movs	r3, #32
    245a:	4a0e      	ldr	r2, [pc, #56]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    245c:	54d1      	strb	r1, [r2, r3]
						mscdf_request_sense(ret);
    245e:	4b0e      	ldr	r3, [pc, #56]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    2460:	4798      	blx	r3
    2462:	e7f5      	b.n	2450 <mscdf_cb_ep_bulk_out+0x278>
					pcsw->bCSWStatus = USB_CSW_STATUS_FAIL;
    2464:	2101      	movs	r1, #1
    2466:	2320      	movs	r3, #32
    2468:	4a0a      	ldr	r2, [pc, #40]	; (2494 <mscdf_cb_ep_bulk_out+0x2bc>)
    246a:	54d1      	strb	r1, [r2, r3]
					mscdf_request_sense(ERR_NOT_FOUND);
    246c:	200a      	movs	r0, #10
    246e:	4240      	negs	r0, r0
    2470:	4b09      	ldr	r3, [pc, #36]	; (2498 <mscdf_cb_ep_bulk_out+0x2c0>)
    2472:	4798      	blx	r3
    2474:	e7ec      	b.n	2450 <mscdf_cb_ep_bulk_out+0x278>
		return true;
    2476:	2001      	movs	r0, #1
	} else if (_mscdf_funcd.xfer_stage == MSCDF_DATA_STAGE) {
    2478:	2b01      	cmp	r3, #1
    247a:	d000      	beq.n	247e <mscdf_cb_ep_bulk_out+0x2a6>
}
    247c:	bd70      	pop	{r4, r5, r6, pc}
		return mscdf_read_write(count);
    247e:	0010      	movs	r0, r2
    2480:	4b0d      	ldr	r3, [pc, #52]	; (24b8 <mscdf_cb_ep_bulk_out+0x2e0>)
    2482:	4798      	blx	r3
    2484:	e7fa      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
		return true;
    2486:	2001      	movs	r0, #1
    2488:	e7f8      	b.n	247c <mscdf_cb_ep_bulk_out+0x2a4>
    248a:	46c0      	nop			; (mov r8, r8)
    248c:	200002d4 	.word	0x200002d4
    2490:	43425355 	.word	0x43425355
    2494:	20000000 	.word	0x20000000
    2498:	00001ca5 	.word	0x00001ca5
    249c:	000007b5 	.word	0x000007b5
    24a0:	00001d2d 	.word	0x00001d2d
    24a4:	00001d01 	.word	0x00001d01
    24a8:	00002e14 	.word	0x00002e14
    24ac:	000026fd 	.word	0x000026fd
    24b0:	00001e29 	.word	0x00001e29
    24b4:	00001e99 	.word	0x00001e99
    24b8:	00001ec5 	.word	0x00001ec5

000024bc <mscdf_init>:

/**
 * \brief Initialize the USB MSC Function Driver
 */
int32_t mscdf_init(uint8_t max_lun)
{
    24bc:	b510      	push	{r4, lr}
    24be:	0004      	movs	r4, r0
	if (usbdc_get_state() > USBD_S_POWER) {
    24c0:	4b0a      	ldr	r3, [pc, #40]	; (24ec <mscdf_init+0x30>)
    24c2:	4798      	blx	r3
    24c4:	2801      	cmp	r0, #1
    24c6:	d80e      	bhi.n	24e6 <mscdf_init+0x2a>
		return ERR_DENIED;
	}

	_mscdf.ctrl               = mscdf_ctrl;
    24c8:	4809      	ldr	r0, [pc, #36]	; (24f0 <mscdf_init+0x34>)
    24ca:	4b0a      	ldr	r3, [pc, #40]	; (24f4 <mscdf_init+0x38>)
    24cc:	6543      	str	r3, [r0, #84]	; 0x54
	_mscdf.func_data          = &_mscdf_funcd;
    24ce:	6580      	str	r0, [r0, #88]	; 0x58
	_mscdf_funcd.func_max_lun = max_lun;
    24d0:	70c4      	strb	r4, [r0, #3]

	usbdc_register_function(&_mscdf);
    24d2:	3050      	adds	r0, #80	; 0x50
    24d4:	4b08      	ldr	r3, [pc, #32]	; (24f8 <mscdf_init+0x3c>)
    24d6:	4798      	blx	r3
	usbdc_register_handler(USBDC_HDL_REQ, &mscdf_req_h);
    24d8:	4908      	ldr	r1, [pc, #32]	; (24fc <mscdf_init+0x40>)
    24da:	3148      	adds	r1, #72	; 0x48
    24dc:	2001      	movs	r0, #1
    24de:	4b08      	ldr	r3, [pc, #32]	; (2500 <mscdf_init+0x44>)
    24e0:	4798      	blx	r3
	return ERR_NONE;
    24e2:	2000      	movs	r0, #0
}
    24e4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    24e6:	2011      	movs	r0, #17
    24e8:	4240      	negs	r0, r0
    24ea:	e7fb      	b.n	24e4 <mscdf_init+0x28>
    24ec:	00002c09 	.word	0x00002c09
    24f0:	200002d4 	.word	0x200002d4
    24f4:	00002095 	.word	0x00002095
    24f8:	00002bf1 	.word	0x00002bf1
    24fc:	20000000 	.word	0x20000000
    2500:	00002b59 	.word	0x00002b59

00002504 <mscdf_register_callback>:
/**
 * \brief USB MSC Function Register Callback
 */
int32_t mscdf_register_callback(enum mscdf_cb_type cb_type, FUNC_PTR func)
{
	switch (cb_type) {
    2504:	2806      	cmp	r0, #6
    2506:	d81f      	bhi.n	2548 <mscdf_register_callback+0x44>
    2508:	0080      	lsls	r0, r0, #2
    250a:	4b11      	ldr	r3, [pc, #68]	; (2550 <mscdf_register_callback+0x4c>)
    250c:	581b      	ldr	r3, [r3, r0]
    250e:	469f      	mov	pc, r3
	case MSCDF_CB_INQUIRY_DISK:
		mscdf_inquiry_disk = (mscdf_inquiry_disk_t)func;
    2510:	4b10      	ldr	r3, [pc, #64]	; (2554 <mscdf_register_callback+0x50>)
    2512:	6419      	str	r1, [r3, #64]	; 0x40
		mscdf_xfer_blocks_done = (mscdf_xfer_blocks_done_t)func;
		break;
	default:
		return ERR_INVALID_ARG;
	}
	return ERR_NONE;
    2514:	2000      	movs	r0, #0
}
    2516:	4770      	bx	lr
		mscdf_get_disk_capacity = (mscdf_get_disk_capacity_t)func;
    2518:	4b0e      	ldr	r3, [pc, #56]	; (2554 <mscdf_register_callback+0x50>)
    251a:	6459      	str	r1, [r3, #68]	; 0x44
	return ERR_NONE;
    251c:	2000      	movs	r0, #0
		break;
    251e:	e7fa      	b.n	2516 <mscdf_register_callback+0x12>
		mscdf_eject_disk = (mscdf_eject_disk_t)func;
    2520:	4b0c      	ldr	r3, [pc, #48]	; (2554 <mscdf_register_callback+0x50>)
    2522:	6499      	str	r1, [r3, #72]	; 0x48
	return ERR_NONE;
    2524:	2000      	movs	r0, #0
		break;
    2526:	e7f6      	b.n	2516 <mscdf_register_callback+0x12>
		mscdf_read_disk = (mscdf_start_read_disk_t)func;
    2528:	4b0a      	ldr	r3, [pc, #40]	; (2554 <mscdf_register_callback+0x50>)
    252a:	6359      	str	r1, [r3, #52]	; 0x34
	return ERR_NONE;
    252c:	2000      	movs	r0, #0
		break;
    252e:	e7f2      	b.n	2516 <mscdf_register_callback+0x12>
		mscdf_write_disk = (mscdf_start_write_disk_t)func;
    2530:	4b08      	ldr	r3, [pc, #32]	; (2554 <mscdf_register_callback+0x50>)
    2532:	6399      	str	r1, [r3, #56]	; 0x38
	return ERR_NONE;
    2534:	2000      	movs	r0, #0
		break;
    2536:	e7ee      	b.n	2516 <mscdf_register_callback+0x12>
		mscdf_test_disk_ready = (mscdf_test_disk_ready_t)func;
    2538:	4b06      	ldr	r3, [pc, #24]	; (2554 <mscdf_register_callback+0x50>)
    253a:	64d9      	str	r1, [r3, #76]	; 0x4c
	return ERR_NONE;
    253c:	2000      	movs	r0, #0
		break;
    253e:	e7ea      	b.n	2516 <mscdf_register_callback+0x12>
		mscdf_xfer_blocks_done = (mscdf_xfer_blocks_done_t)func;
    2540:	4b04      	ldr	r3, [pc, #16]	; (2554 <mscdf_register_callback+0x50>)
    2542:	63d9      	str	r1, [r3, #60]	; 0x3c
	return ERR_NONE;
    2544:	2000      	movs	r0, #0
		break;
    2546:	e7e6      	b.n	2516 <mscdf_register_callback+0x12>
		return ERR_INVALID_ARG;
    2548:	200d      	movs	r0, #13
    254a:	4240      	negs	r0, r0
    254c:	e7e3      	b.n	2516 <mscdf_register_callback+0x12>
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	00002ec0 	.word	0x00002ec0
    2554:	200002d4 	.word	0x200002d4

00002558 <usbdc_unconfig>:

/**
 * \brief Unconfig, close all interfaces
 */
static void usbdc_unconfig(void)
{
    2558:	b510      	push	{r4, lr}
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    255a:	4b06      	ldr	r3, [pc, #24]	; (2574 <usbdc_unconfig+0x1c>)
    255c:	691c      	ldr	r4, [r3, #16]
	while (NULL != func) {
    255e:	2c00      	cmp	r4, #0
    2560:	d007      	beq.n	2572 <usbdc_unconfig+0x1a>
		func->ctrl(func, USBDF_DISABLE, NULL);
    2562:	2200      	movs	r2, #0
    2564:	2101      	movs	r1, #1
    2566:	0020      	movs	r0, r4
    2568:	6863      	ldr	r3, [r4, #4]
    256a:	4798      	blx	r3
		func = func->next;
    256c:	6824      	ldr	r4, [r4, #0]
	while (NULL != func) {
    256e:	2c00      	cmp	r4, #0
    2570:	d1f7      	bne.n	2562 <usbdc_unconfig+0xa>
	}
}
    2572:	bd10      	pop	{r4, pc}
    2574:	20000330 	.word	0x20000330

00002578 <usbdc_change_notify>:
	}
}

/** Invoke all registered Change notification callbacks. */
static void usbdc_change_notify(enum usbdc_change_type change, uint32_t value)
{
    2578:	b570      	push	{r4, r5, r6, lr}
    257a:	0006      	movs	r6, r0
    257c:	000d      	movs	r5, r1
	struct usbdc_change_handler *cg = (struct usbdc_change_handler *)usbdc.handlers.change_list.head;
    257e:	4b07      	ldr	r3, [pc, #28]	; (259c <usbdc_change_notify+0x24>)
    2580:	68dc      	ldr	r4, [r3, #12]

	while (cg != NULL) {
    2582:	2c00      	cmp	r4, #0
    2584:	d103      	bne.n	258e <usbdc_change_notify+0x16>
		if (NULL != cg->cb) {
			cg->cb(change, value);
		}
		cg = cg->next;
	}
}
    2586:	bd70      	pop	{r4, r5, r6, pc}
		cg = cg->next;
    2588:	6824      	ldr	r4, [r4, #0]
	while (cg != NULL) {
    258a:	2c00      	cmp	r4, #0
    258c:	d0fb      	beq.n	2586 <usbdc_change_notify+0xe>
		if (NULL != cg->cb) {
    258e:	6863      	ldr	r3, [r4, #4]
    2590:	2b00      	cmp	r3, #0
    2592:	d0f9      	beq.n	2588 <usbdc_change_notify+0x10>
			cg->cb(change, value);
    2594:	0029      	movs	r1, r5
    2596:	0030      	movs	r0, r6
    2598:	4798      	blx	r3
    259a:	e7f5      	b.n	2588 <usbdc_change_notify+0x10>
    259c:	20000330 	.word	0x20000330

000025a0 <usbdc_request_handler>:

/** Invoke all registered request callbacks until request handled. */
static int32_t usbdc_request_handler(uint8_t ep, struct usb_req *req, enum usb_ctrl_stage stage)
{
    25a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25a2:	0007      	movs	r7, r0
    25a4:	000e      	movs	r6, r1
    25a6:	0015      	movs	r5, r2
	struct usbdc_req_handler *h = (struct usbdc_req_handler *)usbdc.handlers.req_list.head;
    25a8:	4b0d      	ldr	r3, [pc, #52]	; (25e0 <usbdc_request_handler+0x40>)
    25aa:	689c      	ldr	r4, [r3, #8]
	int32_t                   rc;

	while (h != NULL) {
    25ac:	2c00      	cmp	r4, #0
    25ae:	d104      	bne.n	25ba <usbdc_request_handler+0x1a>
				return -1;
			}
		}
		h = h->next;
	}
	return false;
    25b0:	2000      	movs	r0, #0
    25b2:	e011      	b.n	25d8 <usbdc_request_handler+0x38>
		h = h->next;
    25b4:	6824      	ldr	r4, [r4, #0]
	while (h != NULL) {
    25b6:	2c00      	cmp	r4, #0
    25b8:	d00d      	beq.n	25d6 <usbdc_request_handler+0x36>
		if (NULL != h->cb) {
    25ba:	6863      	ldr	r3, [r4, #4]
    25bc:	2b00      	cmp	r3, #0
    25be:	d0f9      	beq.n	25b4 <usbdc_request_handler+0x14>
			rc = h->cb(ep, req, stage);
    25c0:	002a      	movs	r2, r5
    25c2:	0031      	movs	r1, r6
    25c4:	0038      	movs	r0, r7
    25c6:	4798      	blx	r3
			if (0 == rc) {
    25c8:	2800      	cmp	r0, #0
    25ca:	d006      	beq.n	25da <usbdc_request_handler+0x3a>
			} else if (ERR_NOT_FOUND != rc) {
    25cc:	300a      	adds	r0, #10
    25ce:	d0f1      	beq.n	25b4 <usbdc_request_handler+0x14>
				return -1;
    25d0:	2001      	movs	r0, #1
    25d2:	4240      	negs	r0, r0
    25d4:	e000      	b.n	25d8 <usbdc_request_handler+0x38>
	return false;
    25d6:	2000      	movs	r0, #0
}
    25d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return true;
    25da:	2001      	movs	r0, #1
    25dc:	e7fc      	b.n	25d8 <usbdc_request_handler+0x38>
    25de:	46c0      	nop			; (mov r8, r8)
    25e0:	20000330 	.word	0x20000330

000025e4 <usbd_sof_cb>:

/**
 * \brief Callback invoked on USB device SOF
 */
static void usbd_sof_cb(void)
{
    25e4:	b510      	push	{r4, lr}
	struct usbdc_sof_handler *sof = (struct usbdc_sof_handler *)usbdc.handlers.sof_list.head;
    25e6:	4b06      	ldr	r3, [pc, #24]	; (2600 <usbd_sof_cb+0x1c>)
    25e8:	685c      	ldr	r4, [r3, #4]
	while (sof != NULL) {
    25ea:	2c00      	cmp	r4, #0
    25ec:	d103      	bne.n	25f6 <usbd_sof_cb+0x12>
	usbdc_sof_notify();
}
    25ee:	bd10      	pop	{r4, pc}
		sof = sof->next;
    25f0:	6824      	ldr	r4, [r4, #0]
	while (sof != NULL) {
    25f2:	2c00      	cmp	r4, #0
    25f4:	d0fb      	beq.n	25ee <usbd_sof_cb+0xa>
		if (NULL != sof->cb) {
    25f6:	6863      	ldr	r3, [r4, #4]
    25f8:	2b00      	cmp	r3, #0
    25fa:	d0f9      	beq.n	25f0 <usbd_sof_cb+0xc>
			sof->cb();
    25fc:	4798      	blx	r3
    25fe:	e7f7      	b.n	25f0 <usbd_sof_cb+0xc>
    2600:	20000330 	.word	0x20000330

00002604 <usbdc_cb_ctl_done>:
 * \return Data has error or not.
 * \retval true There is data error, protocol error.
 * \retval false There is no data error.
 */
static bool usbdc_cb_ctl_done(const uint8_t ep, const enum usb_xfer_code code, struct usb_req *req)
{
    2604:	b510      	push	{r4, lr}
    2606:	0014      	movs	r4, r2
	(void)ep;

	switch (code) {
    2608:	2900      	cmp	r1, #0
    260a:	d003      	beq.n	2614 <usbdc_cb_ctl_done+0x10>
    260c:	2901      	cmp	r1, #1
    260e:	d029      	beq.n	2664 <usbdc_cb_ctl_done+0x60>
		return usbdc_ctrl_data_end(req);
	default:
		break;
	}
	return false;
}
    2610:	2000      	movs	r0, #0
    2612:	bd10      	pop	{r4, pc}
	if (req->bmRequestType != USB_REQT_TYPE_STANDARD) {
    2614:	7813      	ldrb	r3, [r2, #0]
    2616:	2b00      	cmp	r3, #0
    2618:	d1fa      	bne.n	2610 <usbdc_cb_ctl_done+0xc>
	switch (req->bRequest) {
    261a:	7853      	ldrb	r3, [r2, #1]
    261c:	2b05      	cmp	r3, #5
    261e:	d011      	beq.n	2644 <usbdc_cb_ctl_done+0x40>
    2620:	2b09      	cmp	r3, #9
    2622:	d1f5      	bne.n	2610 <usbdc_cb_ctl_done+0xc>
		usbdc.cfg_value = req->wValue;
    2624:	7892      	ldrb	r2, [r2, #2]
    2626:	4b12      	ldr	r3, [pc, #72]	; (2670 <usbdc_cb_ctl_done+0x6c>)
    2628:	76da      	strb	r2, [r3, #27]
		usbdc.state     = req->wValue ? USBD_S_CONFIG : USBD_S_ADDRESS;
    262a:	78a3      	ldrb	r3, [r4, #2]
    262c:	78e1      	ldrb	r1, [r4, #3]
    262e:	0209      	lsls	r1, r1, #8
    2630:	4319      	orrs	r1, r3
    2632:	1e4b      	subs	r3, r1, #1
    2634:	4199      	sbcs	r1, r3
    2636:	3103      	adds	r1, #3
    2638:	4b0d      	ldr	r3, [pc, #52]	; (2670 <usbdc_cb_ctl_done+0x6c>)
    263a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    263c:	2001      	movs	r0, #1
    263e:	4b0d      	ldr	r3, [pc, #52]	; (2674 <usbdc_cb_ctl_done+0x70>)
    2640:	4798      	blx	r3
    2642:	e7e5      	b.n	2610 <usbdc_cb_ctl_done+0xc>
	usb_d_set_address(addr);
    2644:	7890      	ldrb	r0, [r2, #2]
    2646:	4b0c      	ldr	r3, [pc, #48]	; (2678 <usbdc_cb_ctl_done+0x74>)
    2648:	4798      	blx	r3
		usbdc.state = req->wValue ? USBD_S_ADDRESS : USBD_S_DEFAULT;
    264a:	78a3      	ldrb	r3, [r4, #2]
    264c:	78e1      	ldrb	r1, [r4, #3]
    264e:	0209      	lsls	r1, r1, #8
    2650:	4319      	orrs	r1, r3
    2652:	1e4b      	subs	r3, r1, #1
    2654:	4199      	sbcs	r1, r3
    2656:	3102      	adds	r1, #2
    2658:	4b05      	ldr	r3, [pc, #20]	; (2670 <usbdc_cb_ctl_done+0x6c>)
    265a:	7699      	strb	r1, [r3, #26]
		usbdc_change_notify(USBDC_C_STATE, usbdc.state);
    265c:	2001      	movs	r0, #1
    265e:	4b05      	ldr	r3, [pc, #20]	; (2674 <usbdc_cb_ctl_done+0x70>)
    2660:	4798      	blx	r3
    2662:	e7d5      	b.n	2610 <usbdc_cb_ctl_done+0xc>
	usbdc_request_handler(0, req, USB_DATA_STAGE);
    2664:	2201      	movs	r2, #1
    2666:	0021      	movs	r1, r4
    2668:	2000      	movs	r0, #0
    266a:	4b04      	ldr	r3, [pc, #16]	; (267c <usbdc_cb_ctl_done+0x78>)
    266c:	4798      	blx	r3
		return usbdc_ctrl_data_end(req);
    266e:	e7cf      	b.n	2610 <usbdc_cb_ctl_done+0xc>
    2670:	20000330 	.word	0x20000330
    2674:	00002579 	.word	0x00002579
    2678:	000005a1 	.word	0x000005a1
    267c:	000025a1 	.word	0x000025a1

00002680 <usbdc_reset>:

/**
 * \brief USB Device Core Reset
 */
void usbdc_reset(void)
{
    2680:	b510      	push	{r4, lr}
	usbdc_unconfig();
    2682:	4b0d      	ldr	r3, [pc, #52]	; (26b8 <usbdc_reset+0x38>)
    2684:	4798      	blx	r3

	usbdc.state       = USBD_S_DEFAULT;
    2686:	4c0d      	ldr	r4, [pc, #52]	; (26bc <usbdc_reset+0x3c>)
    2688:	2302      	movs	r3, #2
    268a:	76a3      	strb	r3, [r4, #26]
	usbdc.cfg_value   = 0;
    268c:	2300      	movs	r3, #0
    268e:	76e3      	strb	r3, [r4, #27]
	usbdc.ifc_alt_map = 0;
    2690:	7763      	strb	r3, [r4, #29]

	// Setup EP0
	usb_d_ep_deinit(0);
    2692:	2000      	movs	r0, #0
    2694:	4b0a      	ldr	r3, [pc, #40]	; (26c0 <usbdc_reset+0x40>)
    2696:	4798      	blx	r3
	usb_d_ep0_init(usbdc.ctrl_size);
    2698:	7f20      	ldrb	r0, [r4, #28]
    269a:	4b0a      	ldr	r3, [pc, #40]	; (26c4 <usbdc_reset+0x44>)
    269c:	4798      	blx	r3
	usb_d_ep_register_callback(0, USB_D_EP_CB_SETUP, (FUNC_PTR)usbdc_cb_ctl_req);
    269e:	4a0a      	ldr	r2, [pc, #40]	; (26c8 <usbdc_reset+0x48>)
    26a0:	2100      	movs	r1, #0
    26a2:	2000      	movs	r0, #0
    26a4:	4c09      	ldr	r4, [pc, #36]	; (26cc <usbdc_reset+0x4c>)
    26a6:	47a0      	blx	r4
	usb_d_ep_register_callback(0, USB_D_EP_CB_XFER, (FUNC_PTR)usbdc_cb_ctl_done);
    26a8:	4a09      	ldr	r2, [pc, #36]	; (26d0 <usbdc_reset+0x50>)
    26aa:	2102      	movs	r1, #2
    26ac:	2000      	movs	r0, #0
    26ae:	47a0      	blx	r4
	usb_d_ep_enable(0);
    26b0:	2000      	movs	r0, #0
    26b2:	4b08      	ldr	r3, [pc, #32]	; (26d4 <usbdc_reset+0x54>)
    26b4:	4798      	blx	r3
}
    26b6:	bd10      	pop	{r4, pc}
    26b8:	00002559 	.word	0x00002559
    26bc:	20000330 	.word	0x20000330
    26c0:	00000615 	.word	0x00000615
    26c4:	00000601 	.word	0x00000601
    26c8:	00002719 	.word	0x00002719
    26cc:	0000081d 	.word	0x0000081d
    26d0:	00002605 	.word	0x00002605
    26d4:	00000641 	.word	0x00000641

000026d8 <usbd_event_cb>:
 * \brief Callback invoked on USB device events
 * \param[in] ev Event code.
 * \param[in] param Event parameter for event handling.
 */
static void usbd_event_cb(const enum usb_event ev, const uint32_t param)
{
    26d8:	b510      	push	{r4, lr}
	(void)param;

	switch (ev) {
    26da:	2800      	cmp	r0, #0
    26dc:	d002      	beq.n	26e4 <usbd_event_cb+0xc>
    26de:	2801      	cmp	r0, #1
    26e0:	d004      	beq.n	26ec <usbd_event_cb+0x14>
		break;

	default:
		break;
	}
}
    26e2:	bd10      	pop	{r4, pc}
		usbdc_change_notify(USBDC_C_CONN, param);
    26e4:	2000      	movs	r0, #0
    26e6:	4b03      	ldr	r3, [pc, #12]	; (26f4 <usbd_event_cb+0x1c>)
    26e8:	4798      	blx	r3
		break;
    26ea:	e7fa      	b.n	26e2 <usbd_event_cb+0xa>
		usbdc_reset();
    26ec:	4b02      	ldr	r3, [pc, #8]	; (26f8 <usbd_event_cb+0x20>)
    26ee:	4798      	blx	r3
}
    26f0:	e7f7      	b.n	26e2 <usbd_event_cb+0xa>
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	00002579 	.word	0x00002579
    26f8:	00002681 	.word	0x00002681

000026fc <usbdc_xfer>:

/**
 * \brief Issue USB device transfer
 */
int32_t usbdc_xfer(uint8_t ep, uint8_t *buf, uint32_t size, bool zlp)
{
    26fc:	b510      	push	{r4, lr}
    26fe:	b084      	sub	sp, #16
	struct usb_d_transfer xfer = {(uint8_t *)buf, size, ep, zlp};
    2700:	ac01      	add	r4, sp, #4
    2702:	9101      	str	r1, [sp, #4]
    2704:	9202      	str	r2, [sp, #8]
    2706:	7220      	strb	r0, [r4, #8]
    2708:	7263      	strb	r3, [r4, #9]
	return usb_d_ep_transfer(&xfer);
    270a:	0020      	movs	r0, r4
    270c:	4b01      	ldr	r3, [pc, #4]	; (2714 <usbdc_xfer+0x18>)
    270e:	4798      	blx	r3
}
    2710:	b004      	add	sp, #16
    2712:	bd10      	pop	{r4, pc}
    2714:	0000068d 	.word	0x0000068d

00002718 <usbdc_cb_ctl_req>:
{
    2718:	b5f0      	push	{r4, r5, r6, r7, lr}
    271a:	46c6      	mov	lr, r8
    271c:	b500      	push	{lr}
    271e:	b084      	sub	sp, #16
    2720:	0005      	movs	r5, r0
    2722:	000c      	movs	r4, r1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2724:	2200      	movs	r2, #0
    2726:	4bb5      	ldr	r3, [pc, #724]	; (29fc <usbdc_cb_ctl_req+0x2e4>)
    2728:	4798      	blx	r3
    272a:	1c43      	adds	r3, r0, #1
    272c:	d00d      	beq.n	274a <usbdc_cb_ctl_req+0x32>
		return true;
    272e:	2301      	movs	r3, #1
	switch (usbdc_request_handler(ep, req, USB_SETUP_STAGE)) {
    2730:	2801      	cmp	r0, #1
    2732:	d00b      	beq.n	274c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & (USB_REQT_TYPE_MASK | USB_REQT_DIR_IN)) {
    2734:	7822      	ldrb	r2, [r4, #0]
    2736:	231f      	movs	r3, #31
    2738:	0011      	movs	r1, r2
    273a:	4399      	bics	r1, r3
    273c:	d00b      	beq.n	2756 <usbdc_cb_ctl_req+0x3e>
    273e:	b2cb      	uxtb	r3, r1
    2740:	2b80      	cmp	r3, #128	; 0x80
    2742:	d100      	bne.n	2746 <usbdc_cb_ctl_req+0x2e>
    2744:	e0f8      	b.n	2938 <usbdc_cb_ctl_req+0x220>
		return false;
    2746:	2300      	movs	r3, #0
    2748:	e000      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    274a:	2300      	movs	r3, #0
}
    274c:	0018      	movs	r0, r3
    274e:	b004      	add	sp, #16
    2750:	bc04      	pop	{r2}
    2752:	4690      	mov	r8, r2
    2754:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (req->bRequest) {
    2756:	7863      	ldrb	r3, [r4, #1]
    2758:	2b0b      	cmp	r3, #11
    275a:	d900      	bls.n	275e <usbdc_cb_ctl_req+0x46>
    275c:	e1e4      	b.n	2b28 <usbdc_cb_ctl_req+0x410>
    275e:	009b      	lsls	r3, r3, #2
    2760:	49a7      	ldr	r1, [pc, #668]	; (2a00 <usbdc_cb_ctl_req+0x2e8>)
    2762:	58cb      	ldr	r3, [r1, r3]
    2764:	469f      	mov	pc, r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    2766:	2301      	movs	r3, #1
    2768:	2200      	movs	r2, #0
    276a:	2100      	movs	r1, #0
    276c:	0028      	movs	r0, r5
    276e:	4ca5      	ldr	r4, [pc, #660]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    2770:	47a0      	blx	r4
    2772:	4243      	negs	r3, r0
    2774:	4143      	adcs	r3, r0
    2776:	b2db      	uxtb	r3, r3
    2778:	e7e8      	b.n	274c <usbdc_cb_ctl_req+0x34>
		if (!usbdc_set_config(req->wValue)) {
    277a:	78a2      	ldrb	r2, [r4, #2]
	if (cfg_value == 0) {
    277c:	2a00      	cmp	r2, #0
    277e:	d01a      	beq.n	27b6 <usbdc_cb_ctl_req+0x9e>
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, cfg_value);
    2780:	4ba1      	ldr	r3, [pc, #644]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    2782:	681b      	ldr	r3, [r3, #0]
    2784:	6859      	ldr	r1, [r3, #4]
    2786:	6818      	ldr	r0, [r3, #0]
    2788:	4ba0      	ldr	r3, [pc, #640]	; (2a0c <usbdc_cb_ctl_req+0x2f4>)
    278a:	4798      	blx	r3
	if (NULL == cfg_desc) {
    278c:	2800      	cmp	r0, #0
    278e:	d100      	bne.n	2792 <usbdc_cb_ctl_req+0x7a>
    2790:	e1d4      	b.n	2b3c <usbdc_cb_ctl_req+0x424>
    2792:	78c3      	ldrb	r3, [r0, #3]
    2794:	021b      	lsls	r3, r3, #8
    2796:	7881      	ldrb	r1, [r0, #2]
    2798:	18c9      	adds	r1, r1, r3
	desc.eod  = cfg_desc + total_len;
    279a:	b289      	uxth	r1, r1
    279c:	1841      	adds	r1, r0, r1
    279e:	9103      	str	r1, [sp, #12]
	desc.sod  = usb_find_desc(cfg_desc, desc.eod, USB_DT_INTERFACE);
    27a0:	2204      	movs	r2, #4
    27a2:	4b9b      	ldr	r3, [pc, #620]	; (2a10 <usbdc_cb_ctl_req+0x2f8>)
    27a4:	4798      	blx	r3
    27a6:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    27a8:	2800      	cmp	r0, #0
    27aa:	d006      	beq.n	27ba <usbdc_cb_ctl_req+0xa2>
    27ac:	24ff      	movs	r4, #255	; 0xff
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    27ae:	4f96      	ldr	r7, [pc, #600]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    27b0:	4b97      	ldr	r3, [pc, #604]	; (2a10 <usbdc_cb_ctl_req+0x2f8>)
    27b2:	4698      	mov	r8, r3
    27b4:	e01a      	b.n	27ec <usbdc_cb_ctl_req+0xd4>
		usbdc_unconfig();
    27b6:	4b97      	ldr	r3, [pc, #604]	; (2a14 <usbdc_cb_ctl_req+0x2fc>)
    27b8:	4798      	blx	r3
		return (ERR_NONE == usbdc_xfer(ep, NULL, 0, true));
    27ba:	2301      	movs	r3, #1
    27bc:	2200      	movs	r2, #0
    27be:	2100      	movs	r1, #0
    27c0:	0028      	movs	r0, r5
    27c2:	4c90      	ldr	r4, [pc, #576]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    27c4:	47a0      	blx	r4
    27c6:	4243      	negs	r3, r0
    27c8:	4143      	adcs	r3, r0
    27ca:	b2db      	uxtb	r3, r3
    27cc:	e7be      	b.n	274c <usbdc_cb_ctl_req+0x34>
			last_iface = desc.sod[2];
    27ce:	0034      	movs	r4, r6
    27d0:	e000      	b.n	27d4 <usbdc_cb_ctl_req+0xbc>
    27d2:	0034      	movs	r4, r6
		desc.sod = usb_desc_next(desc.sod);
    27d4:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    27d6:	7803      	ldrb	r3, [r0, #0]
    27d8:	18c0      	adds	r0, r0, r3
    27da:	9002      	str	r0, [sp, #8]
		desc.sod = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    27dc:	9b03      	ldr	r3, [sp, #12]
    27de:	9301      	str	r3, [sp, #4]
    27e0:	2204      	movs	r2, #4
    27e2:	0019      	movs	r1, r3
    27e4:	47c0      	blx	r8
    27e6:	9002      	str	r0, [sp, #8]
	while (NULL != desc.sod) {
    27e8:	2800      	cmp	r0, #0
    27ea:	d0e6      	beq.n	27ba <usbdc_cb_ctl_req+0xa2>
		if (last_iface != desc.sod[2] /* bInterfaceNumber */) {
    27ec:	7886      	ldrb	r6, [r0, #2]
    27ee:	42a6      	cmp	r6, r4
    27f0:	d0f0      	beq.n	27d4 <usbdc_cb_ctl_req+0xbc>
			func       = (struct usbdf_driver *)usbdc.func_list.head;
    27f2:	693c      	ldr	r4, [r7, #16]
			while (NULL != func) {
    27f4:	2c00      	cmp	r4, #0
    27f6:	d0ea      	beq.n	27ce <usbdc_cb_ctl_req+0xb6>
				if (func->ctrl(func, USBDF_ENABLE, &desc)) {
    27f8:	aa02      	add	r2, sp, #8
    27fa:	2100      	movs	r1, #0
    27fc:	0020      	movs	r0, r4
    27fe:	6863      	ldr	r3, [r4, #4]
    2800:	4798      	blx	r3
    2802:	2800      	cmp	r0, #0
    2804:	d0e5      	beq.n	27d2 <usbdc_cb_ctl_req+0xba>
					func = func->next;
    2806:	6824      	ldr	r4, [r4, #0]
			while (NULL != func) {
    2808:	2c00      	cmp	r4, #0
    280a:	d1f5      	bne.n	27f8 <usbdc_cb_ctl_req+0xe0>
			last_iface = desc.sod[2];
    280c:	0034      	movs	r4, r6
    280e:	e7e1      	b.n	27d4 <usbdc_cb_ctl_req+0xbc>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2810:	231f      	movs	r3, #31
    2812:	401a      	ands	r2, r3
		return false;
    2814:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2816:	2a02      	cmp	r2, #2
    2818:	d198      	bne.n	274c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    281a:	79a3      	ldrb	r3, [r4, #6]
    281c:	79e2      	ldrb	r2, [r4, #7]
    281e:	0212      	lsls	r2, r2, #8
    2820:	431a      	orrs	r2, r3
			return false;
    2822:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2824:	2a00      	cmp	r2, #0
    2826:	d000      	beq.n	282a <usbdc_cb_ctl_req+0x112>
    2828:	e790      	b.n	274c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_CLR);
    282a:	7920      	ldrb	r0, [r4, #4]
    282c:	2100      	movs	r1, #0
    282e:	4b7a      	ldr	r3, [pc, #488]	; (2a18 <usbdc_cb_ctl_req+0x300>)
    2830:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2832:	2301      	movs	r3, #1
    2834:	2200      	movs	r2, #0
    2836:	2100      	movs	r1, #0
    2838:	0028      	movs	r0, r5
    283a:	4c72      	ldr	r4, [pc, #456]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    283c:	47a0      	blx	r4
		return true;
    283e:	2301      	movs	r3, #1
    2840:	e784      	b.n	274c <usbdc_cb_ctl_req+0x34>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2842:	231f      	movs	r3, #31
    2844:	401a      	ands	r2, r3
		return false;
    2846:	2300      	movs	r3, #0
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2848:	2a02      	cmp	r2, #2
    284a:	d000      	beq.n	284e <usbdc_cb_ctl_req+0x136>
    284c:	e77e      	b.n	274c <usbdc_cb_ctl_req+0x34>
		if (req->wLength != 0) {
    284e:	79a3      	ldrb	r3, [r4, #6]
    2850:	79e2      	ldrb	r2, [r4, #7]
    2852:	0212      	lsls	r2, r2, #8
    2854:	431a      	orrs	r2, r3
			return false;
    2856:	2300      	movs	r3, #0
		if (req->wLength != 0) {
    2858:	2a00      	cmp	r2, #0
    285a:	d000      	beq.n	285e <usbdc_cb_ctl_req+0x146>
    285c:	e776      	b.n	274c <usbdc_cb_ctl_req+0x34>
		usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_SET);
    285e:	7920      	ldrb	r0, [r4, #4]
    2860:	2101      	movs	r1, #1
    2862:	4b6d      	ldr	r3, [pc, #436]	; (2a18 <usbdc_cb_ctl_req+0x300>)
    2864:	4798      	blx	r3
		usbdc_xfer(ep, NULL, 0, true);
    2866:	2301      	movs	r3, #1
    2868:	2200      	movs	r2, #0
    286a:	2100      	movs	r1, #0
    286c:	0028      	movs	r0, r5
    286e:	4c65      	ldr	r4, [pc, #404]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    2870:	47a0      	blx	r4
		return true;
    2872:	2301      	movs	r3, #1
    2874:	e76a      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return usbdc_set_interface(req->wValue, req->wIndex);
    2876:	78a3      	ldrb	r3, [r4, #2]
    2878:	78e5      	ldrb	r5, [r4, #3]
    287a:	022d      	lsls	r5, r5, #8
    287c:	431d      	orrs	r5, r3
    287e:	7923      	ldrb	r3, [r4, #4]
    2880:	7964      	ldrb	r4, [r4, #5]
    2882:	0224      	lsls	r4, r4, #8
    2884:	431c      	orrs	r4, r3
		ifc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, usbdc.cfg_value);
    2886:	4a60      	ldr	r2, [pc, #384]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    2888:	6813      	ldr	r3, [r2, #0]
    288a:	7ed2      	ldrb	r2, [r2, #27]
    288c:	6859      	ldr	r1, [r3, #4]
    288e:	6818      	ldr	r0, [r3, #0]
    2890:	4b5e      	ldr	r3, [pc, #376]	; (2a0c <usbdc_cb_ctl_req+0x2f4>)
    2892:	4798      	blx	r3
	if (NULL == ifc) {
    2894:	2800      	cmp	r0, #0
    2896:	d047      	beq.n	2928 <usbdc_cb_ctl_req+0x210>
	desc.sod = ifc;
    2898:	9002      	str	r0, [sp, #8]
	return (ptr[0] + (ptr[1] << 8));
    289a:	78c3      	ldrb	r3, [r0, #3]
    289c:	021b      	lsls	r3, r3, #8
    289e:	7881      	ldrb	r1, [r0, #2]
    28a0:	18c9      	adds	r1, r1, r3
	desc.eod = ifc + usb_cfg_desc_total_len(ifc);
    28a2:	b289      	uxth	r1, r1
    28a4:	1841      	adds	r1, r0, r1
    28a6:	9103      	str	r1, [sp, #12]
	if (NULL == (ifc = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE))) {
    28a8:	2204      	movs	r2, #4
    28aa:	4b59      	ldr	r3, [pc, #356]	; (2a10 <usbdc_cb_ctl_req+0x2f8>)
    28ac:	4798      	blx	r3
    28ae:	2800      	cmp	r0, #0
    28b0:	d03c      	beq.n	292c <usbdc_cb_ctl_req+0x214>
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    28b2:	4e57      	ldr	r6, [pc, #348]	; (2a10 <usbdc_cb_ctl_req+0x2f8>)
    28b4:	e008      	b.n	28c8 <usbdc_cb_ctl_req+0x1b0>
		desc.sod = usb_desc_next(desc.sod);
    28b6:	9802      	ldr	r0, [sp, #8]
	return (desc + usb_desc_len(desc));
    28b8:	7803      	ldrb	r3, [r0, #0]
    28ba:	18c0      	adds	r0, r0, r3
    28bc:	9002      	str	r0, [sp, #8]
		ifc      = usb_find_desc(desc.sod, desc.eod, USB_DT_INTERFACE);
    28be:	2204      	movs	r2, #4
    28c0:	9903      	ldr	r1, [sp, #12]
    28c2:	47b0      	blx	r6
		if (NULL == ifc) {
    28c4:	2800      	cmp	r0, #0
    28c6:	d033      	beq.n	2930 <usbdc_cb_ctl_req+0x218>
	while (ifc[2] != ifc_id || ifc[3] != alt_set) {
    28c8:	7883      	ldrb	r3, [r0, #2]
    28ca:	42a3      	cmp	r3, r4
    28cc:	d1f3      	bne.n	28b6 <usbdc_cb_ctl_req+0x19e>
    28ce:	78c3      	ldrb	r3, [r0, #3]
    28d0:	42ab      	cmp	r3, r5
    28d2:	d1f0      	bne.n	28b6 <usbdc_cb_ctl_req+0x19e>
	desc.sod = ifc;
    28d4:	9002      	str	r0, [sp, #8]
	func     = (struct usbdf_driver *)usbdc.func_list.head;
    28d6:	4b4c      	ldr	r3, [pc, #304]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    28d8:	691e      	ldr	r6, [r3, #16]
	while (NULL != func) {
    28da:	2e00      	cmp	r6, #0
    28dc:	d02a      	beq.n	2934 <usbdc_cb_ctl_req+0x21c>
		if (func->ctrl(func, USBDF_DISABLE, &desc)) {
    28de:	aa02      	add	r2, sp, #8
    28e0:	2101      	movs	r1, #1
    28e2:	0030      	movs	r0, r6
    28e4:	6873      	ldr	r3, [r6, #4]
    28e6:	4798      	blx	r3
    28e8:	2800      	cmp	r0, #0
    28ea:	d004      	beq.n	28f6 <usbdc_cb_ctl_req+0x1de>
			func = func->next;
    28ec:	6836      	ldr	r6, [r6, #0]
	while (NULL != func) {
    28ee:	2e00      	cmp	r6, #0
    28f0:	d1f5      	bne.n	28de <usbdc_cb_ctl_req+0x1c6>
	return false;
    28f2:	2300      	movs	r3, #0
    28f4:	e72a      	b.n	274c <usbdc_cb_ctl_req+0x34>
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    28f6:	6873      	ldr	r3, [r6, #4]
    28f8:	aa02      	add	r2, sp, #8
    28fa:	2100      	movs	r1, #0
    28fc:	0030      	movs	r0, r6
    28fe:	4798      	blx	r3
			return false;
    2900:	2300      	movs	r3, #0
		} else if (ERR_NONE == func->ctrl(func, USBDF_ENABLE, &desc)) {
    2902:	2800      	cmp	r0, #0
    2904:	d000      	beq.n	2908 <usbdc_cb_ctl_req+0x1f0>
    2906:	e721      	b.n	274c <usbdc_cb_ctl_req+0x34>
			if (alt_set) {
    2908:	2d00      	cmp	r5, #0
    290a:	d005      	beq.n	2918 <usbdc_cb_ctl_req+0x200>
				usbdc.ifc_alt_map |= 1 << ifc_id;
    290c:	493e      	ldr	r1, [pc, #248]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    290e:	2201      	movs	r2, #1
    2910:	40a2      	lsls	r2, r4
    2912:	7f4b      	ldrb	r3, [r1, #29]
    2914:	4313      	orrs	r3, r2
    2916:	774b      	strb	r3, [r1, #29]
			usbdc_xfer(0, NULL, 0, 0);
    2918:	2300      	movs	r3, #0
    291a:	2200      	movs	r2, #0
    291c:	2100      	movs	r1, #0
    291e:	2000      	movs	r0, #0
    2920:	4c38      	ldr	r4, [pc, #224]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    2922:	47a0      	blx	r4
			return true;
    2924:	2301      	movs	r3, #1
    2926:	e711      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2928:	2300      	movs	r3, #0
    292a:	e70f      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    292c:	2300      	movs	r3, #0
    292e:	e70d      	b.n	274c <usbdc_cb_ctl_req+0x34>
			return false;
    2930:	2300      	movs	r3, #0
    2932:	e70b      	b.n	274c <usbdc_cb_ctl_req+0x34>
	return false;
    2934:	2300      	movs	r3, #0
    2936:	e709      	b.n	274c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    2938:	7863      	ldrb	r3, [r4, #1]
    293a:	2b06      	cmp	r3, #6
    293c:	d033      	beq.n	29a6 <usbdc_cb_ctl_req+0x28e>
    293e:	b2d9      	uxtb	r1, r3
    2940:	2906      	cmp	r1, #6
    2942:	d922      	bls.n	298a <usbdc_cb_ctl_req+0x272>
    2944:	2b08      	cmp	r3, #8
    2946:	d100      	bne.n	294a <usbdc_cb_ctl_req+0x232>
    2948:	e0af      	b.n	2aaa <usbdc_cb_ctl_req+0x392>
    294a:	2b0a      	cmp	r3, #10
    294c:	d000      	beq.n	2950 <usbdc_cb_ctl_req+0x238>
    294e:	e0ed      	b.n	2b2c <usbdc_cb_ctl_req+0x414>
	if (!(usbdc.ifc_alt_map & (1 << req->wIndex))) {
    2950:	4b2d      	ldr	r3, [pc, #180]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    2952:	7f5a      	ldrb	r2, [r3, #29]
    2954:	7921      	ldrb	r1, [r4, #4]
    2956:	7963      	ldrb	r3, [r4, #5]
    2958:	021b      	lsls	r3, r3, #8
    295a:	430b      	orrs	r3, r1
    295c:	411a      	asrs	r2, r3
    295e:	07d3      	lsls	r3, r2, #31
    2960:	d400      	bmi.n	2964 <usbdc_cb_ctl_req+0x24c>
    2962:	e0ca      	b.n	2afa <usbdc_cb_ctl_req+0x3e2>
	struct usbdf_driver *func = (struct usbdf_driver *)usbdc.func_list.head;
    2964:	4b28      	ldr	r3, [pc, #160]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    2966:	691d      	ldr	r5, [r3, #16]
	return false;
    2968:	2300      	movs	r3, #0
	while (NULL != func) {
    296a:	2d00      	cmp	r5, #0
    296c:	d100      	bne.n	2970 <usbdc_cb_ctl_req+0x258>
    296e:	e6ed      	b.n	274c <usbdc_cb_ctl_req+0x34>
		if (0 > (rc = func->ctrl(func, USBDF_GET_IFACE, req))) {
    2970:	0022      	movs	r2, r4
    2972:	2102      	movs	r1, #2
    2974:	0028      	movs	r0, r5
    2976:	686b      	ldr	r3, [r5, #4]
    2978:	4798      	blx	r3
    297a:	2800      	cmp	r0, #0
    297c:	db00      	blt.n	2980 <usbdc_cb_ctl_req+0x268>
    297e:	e0c8      	b.n	2b12 <usbdc_cb_ctl_req+0x3fa>
			func = func->next;
    2980:	682d      	ldr	r5, [r5, #0]
	while (NULL != func) {
    2982:	2d00      	cmp	r5, #0
    2984:	d1f4      	bne.n	2970 <usbdc_cb_ctl_req+0x258>
	return false;
    2986:	2300      	movs	r3, #0
    2988:	e6e0      	b.n	274c <usbdc_cb_ctl_req+0x34>
	switch (req->bRequest) {
    298a:	2b00      	cmp	r3, #0
    298c:	d000      	beq.n	2990 <usbdc_cb_ctl_req+0x278>
    298e:	e0cd      	b.n	2b2c <usbdc_cb_ctl_req+0x414>
	switch (req->bmRequestType & USB_REQT_RECIP_MASK) {
    2990:	231f      	movs	r3, #31
    2992:	401a      	ands	r2, r3
    2994:	b2d3      	uxtb	r3, r2
    2996:	2b01      	cmp	r3, #1
    2998:	d800      	bhi.n	299c <usbdc_cb_ctl_req+0x284>
    299a:	e092      	b.n	2ac2 <usbdc_cb_ctl_req+0x3aa>
    299c:	2a02      	cmp	r2, #2
    299e:	d100      	bne.n	29a2 <usbdc_cb_ctl_req+0x28a>
    29a0:	e09f      	b.n	2ae2 <usbdc_cb_ctl_req+0x3ca>
		return false;
    29a2:	2300      	movs	r3, #0
    29a4:	e6d2      	b.n	274c <usbdc_cb_ctl_req+0x34>
	uint8_t type = (uint8_t)(req->wValue >> 8);
    29a6:	78a3      	ldrb	r3, [r4, #2]
    29a8:	78e2      	ldrb	r2, [r4, #3]
    29aa:	0212      	lsls	r2, r2, #8
    29ac:	431a      	orrs	r2, r3
    29ae:	0a13      	lsrs	r3, r2, #8
	switch (type) {
    29b0:	2b02      	cmp	r3, #2
    29b2:	d033      	beq.n	2a1c <usbdc_cb_ctl_req+0x304>
    29b4:	2b03      	cmp	r3, #3
    29b6:	d056      	beq.n	2a66 <usbdc_cb_ctl_req+0x34e>
    29b8:	2b01      	cmp	r3, #1
    29ba:	d001      	beq.n	29c0 <usbdc_cb_ctl_req+0x2a8>
	return false;
    29bc:	2300      	movs	r3, #0
    29be:	e6c5      	b.n	274c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    29c0:	79a2      	ldrb	r2, [r4, #6]
    29c2:	79e3      	ldrb	r3, [r4, #7]
    29c4:	021b      	lsls	r3, r3, #8
    29c6:	4313      	orrs	r3, r2
    29c8:	1c1a      	adds	r2, r3, #0
    29ca:	2b12      	cmp	r3, #18
    29cc:	d900      	bls.n	29d0 <usbdc_cb_ctl_req+0x2b8>
    29ce:	2212      	movs	r2, #18
    29d0:	b294      	uxth	r4, r2
		dev_desc = usb_find_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, USB_DT_DEVICE);
    29d2:	4b0d      	ldr	r3, [pc, #52]	; (2a08 <usbdc_cb_ctl_req+0x2f0>)
    29d4:	681b      	ldr	r3, [r3, #0]
    29d6:	6859      	ldr	r1, [r3, #4]
    29d8:	6818      	ldr	r0, [r3, #0]
    29da:	2201      	movs	r2, #1
    29dc:	4b0c      	ldr	r3, [pc, #48]	; (2a10 <usbdc_cb_ctl_req+0x2f8>)
    29de:	4798      	blx	r3
	if (!dev_desc) {
    29e0:	2800      	cmp	r0, #0
    29e2:	d100      	bne.n	29e6 <usbdc_cb_ctl_req+0x2ce>
    29e4:	e0a4      	b.n	2b30 <usbdc_cb_ctl_req+0x418>
	if (ERR_NONE != usbdc_xfer(ep, dev_desc, length, false)) {
    29e6:	2300      	movs	r3, #0
    29e8:	0022      	movs	r2, r4
    29ea:	0001      	movs	r1, r0
    29ec:	0028      	movs	r0, r5
    29ee:	4c05      	ldr	r4, [pc, #20]	; (2a04 <usbdc_cb_ctl_req+0x2ec>)
    29f0:	47a0      	blx	r4
    29f2:	4243      	negs	r3, r0
    29f4:	4143      	adcs	r3, r0
    29f6:	b2db      	uxtb	r3, r3
    29f8:	e6a8      	b.n	274c <usbdc_cb_ctl_req+0x34>
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	000025a1 	.word	0x000025a1
    2a00:	00002edc 	.word	0x00002edc
    2a04:	000026fd 	.word	0x000026fd
    2a08:	20000330 	.word	0x20000330
    2a0c:	00002c95 	.word	0x00002c95
    2a10:	00002c19 	.word	0x00002c19
    2a14:	00002559 	.word	0x00002559
    2a18:	000007b5 	.word	0x000007b5
	uint16_t length   = req->wLength;
    2a1c:	79a3      	ldrb	r3, [r4, #6]
    2a1e:	79e6      	ldrb	r6, [r4, #7]
    2a20:	0236      	lsls	r6, r6, #8
    2a22:	431e      	orrs	r6, r3
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a24:	4b46      	ldr	r3, [pc, #280]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2a26:	7f1f      	ldrb	r7, [r3, #28]
		cfg_desc = usb_find_cfg_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index + 1);
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	3201      	adds	r2, #1
    2a2c:	b2d2      	uxtb	r2, r2
    2a2e:	6859      	ldr	r1, [r3, #4]
    2a30:	6818      	ldr	r0, [r3, #0]
    2a32:	4b44      	ldr	r3, [pc, #272]	; (2b44 <usbdc_cb_ctl_req+0x42c>)
    2a34:	4798      	blx	r3
    2a36:	1e01      	subs	r1, r0, #0
	if (NULL == cfg_desc) {
    2a38:	d07c      	beq.n	2b34 <usbdc_cb_ctl_req+0x41c>
	return (ptr[0] + (ptr[1] << 8));
    2a3a:	78c3      	ldrb	r3, [r0, #3]
    2a3c:	021b      	lsls	r3, r3, #8
    2a3e:	7884      	ldrb	r4, [r0, #2]
    2a40:	18e4      	adds	r4, r4, r3
    2a42:	b2a4      	uxth	r4, r4
		need_zlp = false;
    2a44:	2300      	movs	r3, #0
	if (length <= total_len) {
    2a46:	42a6      	cmp	r6, r4
    2a48:	d905      	bls.n	2a56 <usbdc_cb_ctl_req+0x33e>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a4a:	3f01      	subs	r7, #1
    2a4c:	403e      	ands	r6, r7
    2a4e:	4273      	negs	r3, r6
    2a50:	4173      	adcs	r3, r6
    2a52:	b2db      	uxtb	r3, r3
		length = total_len;
    2a54:	0026      	movs	r6, r4
	if (ERR_NONE != usbdc_xfer(ep, cfg_desc, length, need_zlp)) {
    2a56:	0032      	movs	r2, r6
    2a58:	0028      	movs	r0, r5
    2a5a:	4c3b      	ldr	r4, [pc, #236]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2a5c:	47a0      	blx	r4
    2a5e:	4243      	negs	r3, r0
    2a60:	4143      	adcs	r3, r0
    2a62:	b2db      	uxtb	r3, r3
    2a64:	e672      	b.n	274c <usbdc_cb_ctl_req+0x34>
	uint16_t length   = req->wLength;
    2a66:	79a3      	ldrb	r3, [r4, #6]
    2a68:	79e1      	ldrb	r1, [r4, #7]
    2a6a:	0209      	lsls	r1, r1, #8
    2a6c:	4319      	orrs	r1, r3
    2a6e:	000c      	movs	r4, r1
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a70:	4b33      	ldr	r3, [pc, #204]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2a72:	7f1e      	ldrb	r6, [r3, #28]
	str_desc = usb_find_str_desc(usbdc.desces.ls_fs->sod, usbdc.desces.ls_fs->eod, index);
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	b2d2      	uxtb	r2, r2
    2a78:	6859      	ldr	r1, [r3, #4]
    2a7a:	6818      	ldr	r0, [r3, #0]
    2a7c:	4b33      	ldr	r3, [pc, #204]	; (2b4c <usbdc_cb_ctl_req+0x434>)
    2a7e:	4798      	blx	r3
    2a80:	1e01      	subs	r1, r0, #0
	if (NULL == str_desc) {
    2a82:	d059      	beq.n	2b38 <usbdc_cb_ctl_req+0x420>
	if (length <= str_desc[0]) {
    2a84:	7802      	ldrb	r2, [r0, #0]
		need_zlp = false;
    2a86:	2300      	movs	r3, #0
	if (length <= str_desc[0]) {
    2a88:	4294      	cmp	r4, r2
    2a8a:	d906      	bls.n	2a9a <usbdc_cb_ctl_req+0x382>
	bool     need_zlp = !(length & (usbdc.ctrl_size - 1));
    2a8c:	1e73      	subs	r3, r6, #1
    2a8e:	4023      	ands	r3, r4
    2a90:	0018      	movs	r0, r3
    2a92:	4243      	negs	r3, r0
    2a94:	4143      	adcs	r3, r0
    2a96:	b2db      	uxtb	r3, r3
		length = str_desc[0];
    2a98:	0014      	movs	r4, r2
	if (ERR_NONE != usbdc_xfer(ep, str_desc, length, need_zlp)) {
    2a9a:	0022      	movs	r2, r4
    2a9c:	0028      	movs	r0, r5
    2a9e:	4c2a      	ldr	r4, [pc, #168]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2aa0:	47a0      	blx	r4
    2aa2:	4243      	negs	r3, r0
    2aa4:	4143      	adcs	r3, r0
    2aa6:	b2db      	uxtb	r3, r3
    2aa8:	e650      	b.n	274c <usbdc_cb_ctl_req+0x34>
		*(uint8_t *)usbdc.ctrl_buf = usbdc.cfg_value;
    2aaa:	4b25      	ldr	r3, [pc, #148]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2aac:	7eda      	ldrb	r2, [r3, #27]
    2aae:	6959      	ldr	r1, [r3, #20]
    2ab0:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(ep, usbdc.ctrl_buf, 1, false);
    2ab2:	6959      	ldr	r1, [r3, #20]
    2ab4:	2300      	movs	r3, #0
    2ab6:	2201      	movs	r2, #1
    2ab8:	0028      	movs	r0, r5
    2aba:	4c23      	ldr	r4, [pc, #140]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2abc:	47a0      	blx	r4
		return true;
    2abe:	2301      	movs	r3, #1
    2ac0:	e644      	b.n	274c <usbdc_cb_ctl_req+0x34>
		st = 0;
    2ac2:	2300      	movs	r3, #0
    2ac4:	9302      	str	r3, [sp, #8]
	memcpy(usbdc.ctrl_buf, &st, 2);
    2ac6:	4c1e      	ldr	r4, [pc, #120]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2ac8:	2202      	movs	r2, #2
    2aca:	a902      	add	r1, sp, #8
    2acc:	6960      	ldr	r0, [r4, #20]
    2ace:	4b20      	ldr	r3, [pc, #128]	; (2b50 <usbdc_cb_ctl_req+0x438>)
    2ad0:	4798      	blx	r3
	usbdc_xfer(ep, usbdc.ctrl_buf, 2, false);
    2ad2:	6961      	ldr	r1, [r4, #20]
    2ad4:	2300      	movs	r3, #0
    2ad6:	2202      	movs	r2, #2
    2ad8:	0028      	movs	r0, r5
    2ada:	4c1b      	ldr	r4, [pc, #108]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2adc:	47a0      	blx	r4
	return true;
    2ade:	2301      	movs	r3, #1
    2ae0:	e634      	b.n	274c <usbdc_cb_ctl_req+0x34>
		st = usb_d_ep_halt(req->wIndex & 0xFF, USB_EP_HALT_GET);
    2ae2:	7920      	ldrb	r0, [r4, #4]
    2ae4:	2102      	movs	r1, #2
    2ae6:	4b1b      	ldr	r3, [pc, #108]	; (2b54 <usbdc_cb_ctl_req+0x43c>)
    2ae8:	4798      	blx	r3
		if (st < 0) {
    2aea:	2800      	cmp	r0, #0
    2aec:	db03      	blt.n	2af6 <usbdc_cb_ctl_req+0x3de>
		st = st & 0x1;
    2aee:	2301      	movs	r3, #1
    2af0:	4018      	ands	r0, r3
    2af2:	9002      	str	r0, [sp, #8]
    2af4:	e7e7      	b.n	2ac6 <usbdc_cb_ctl_req+0x3ae>
			return false;
    2af6:	2300      	movs	r3, #0
    2af8:	e628      	b.n	274c <usbdc_cb_ctl_req+0x34>
		usbdc.ctrl_buf[0] = 0;
    2afa:	4b11      	ldr	r3, [pc, #68]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2afc:	2200      	movs	r2, #0
    2afe:	6959      	ldr	r1, [r3, #20]
    2b00:	700a      	strb	r2, [r1, #0]
		usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2b02:	6959      	ldr	r1, [r3, #20]
    2b04:	2300      	movs	r3, #0
    2b06:	3201      	adds	r2, #1
    2b08:	2000      	movs	r0, #0
    2b0a:	4c0f      	ldr	r4, [pc, #60]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2b0c:	47a0      	blx	r4
		return true;
    2b0e:	2301      	movs	r3, #1
    2b10:	e61c      	b.n	274c <usbdc_cb_ctl_req+0x34>
			usbdc.ctrl_buf[0] = (uint8_t)rc;
    2b12:	4b0b      	ldr	r3, [pc, #44]	; (2b40 <usbdc_cb_ctl_req+0x428>)
    2b14:	695a      	ldr	r2, [r3, #20]
    2b16:	7010      	strb	r0, [r2, #0]
			usbdc_xfer(0, usbdc.ctrl_buf, 1, false);
    2b18:	6959      	ldr	r1, [r3, #20]
    2b1a:	2300      	movs	r3, #0
    2b1c:	2201      	movs	r2, #1
    2b1e:	2000      	movs	r0, #0
    2b20:	4c09      	ldr	r4, [pc, #36]	; (2b48 <usbdc_cb_ctl_req+0x430>)
    2b22:	47a0      	blx	r4
			return true;
    2b24:	2301      	movs	r3, #1
    2b26:	e611      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2b28:	2300      	movs	r3, #0
    2b2a:	e60f      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2b2c:	2300      	movs	r3, #0
    2b2e:	e60d      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2b30:	2300      	movs	r3, #0
    2b32:	e60b      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2b34:	2300      	movs	r3, #0
    2b36:	e609      	b.n	274c <usbdc_cb_ctl_req+0x34>
		return false;
    2b38:	2300      	movs	r3, #0
    2b3a:	e607      	b.n	274c <usbdc_cb_ctl_req+0x34>
			return false;
    2b3c:	2300      	movs	r3, #0
    2b3e:	e605      	b.n	274c <usbdc_cb_ctl_req+0x34>
    2b40:	20000330 	.word	0x20000330
    2b44:	00002c95 	.word	0x00002c95
    2b48:	000026fd 	.word	0x000026fd
    2b4c:	00002cfd 	.word	0x00002cfd
    2b50:	00002dad 	.word	0x00002dad
    2b54:	000007b5 	.word	0x000007b5

00002b58 <usbdc_register_handler>:

/**
 * \brief Register the handler
 */
void usbdc_register_handler(enum usbdc_handler_type type, const struct usbdc_handler *h)
{
    2b58:	b510      	push	{r4, lr}
	switch (type) {
    2b5a:	2801      	cmp	r0, #1
    2b5c:	d009      	beq.n	2b72 <usbdc_register_handler+0x1a>
    2b5e:	2800      	cmp	r0, #0
    2b60:	d002      	beq.n	2b68 <usbdc_register_handler+0x10>
    2b62:	2802      	cmp	r0, #2
    2b64:	d00a      	beq.n	2b7c <usbdc_register_handler+0x24>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
		break;
	default:
		break;
	}
}
    2b66:	bd10      	pop	{r4, pc}
		list_insert_at_end(&usbdc.handlers.sof_list, (void *)h);
    2b68:	4807      	ldr	r0, [pc, #28]	; (2b88 <usbdc_register_handler+0x30>)
    2b6a:	3004      	adds	r0, #4
    2b6c:	4b07      	ldr	r3, [pc, #28]	; (2b8c <usbdc_register_handler+0x34>)
    2b6e:	4798      	blx	r3
		break;
    2b70:	e7f9      	b.n	2b66 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.req_list, (void *)h);
    2b72:	4805      	ldr	r0, [pc, #20]	; (2b88 <usbdc_register_handler+0x30>)
    2b74:	3008      	adds	r0, #8
    2b76:	4b05      	ldr	r3, [pc, #20]	; (2b8c <usbdc_register_handler+0x34>)
    2b78:	4798      	blx	r3
		break;
    2b7a:	e7f4      	b.n	2b66 <usbdc_register_handler+0xe>
		list_insert_at_end(&usbdc.handlers.change_list, (void *)h);
    2b7c:	4802      	ldr	r0, [pc, #8]	; (2b88 <usbdc_register_handler+0x30>)
    2b7e:	300c      	adds	r0, #12
    2b80:	4b02      	ldr	r3, [pc, #8]	; (2b8c <usbdc_register_handler+0x34>)
    2b82:	4798      	blx	r3
}
    2b84:	e7ef      	b.n	2b66 <usbdc_register_handler+0xe>
    2b86:	46c0      	nop			; (mov r8, r8)
    2b88:	20000330 	.word	0x20000330
    2b8c:	00000899 	.word	0x00000899

00002b90 <usbdc_init>:

/**
 * \brief Initialize the USB device core driver
 */
int32_t usbdc_init(uint8_t *ctrl_buf)
{
    2b90:	b570      	push	{r4, r5, r6, lr}
    2b92:	0004      	movs	r4, r0
	ASSERT(ctrl_buf);
    2b94:	1e43      	subs	r3, r0, #1
    2b96:	4198      	sbcs	r0, r3
    2b98:	b2c0      	uxtb	r0, r0
    2b9a:	4a0c      	ldr	r2, [pc, #48]	; (2bcc <usbdc_init+0x3c>)
    2b9c:	490c      	ldr	r1, [pc, #48]	; (2bd0 <usbdc_init+0x40>)
    2b9e:	4b0d      	ldr	r3, [pc, #52]	; (2bd4 <usbdc_init+0x44>)
    2ba0:	4798      	blx	r3

	int32_t rc;

	rc = usb_d_init();
    2ba2:	4b0d      	ldr	r3, [pc, #52]	; (2bd8 <usbdc_init+0x48>)
    2ba4:	4798      	blx	r3
	if (rc < 0) {
    2ba6:	2800      	cmp	r0, #0
    2ba8:	db0e      	blt.n	2bc8 <usbdc_init+0x38>
		return rc;
	}

	memset(&usbdc, 0, sizeof(usbdc));
    2baa:	4d0c      	ldr	r5, [pc, #48]	; (2bdc <usbdc_init+0x4c>)
    2bac:	2220      	movs	r2, #32
    2bae:	2100      	movs	r1, #0
    2bb0:	0028      	movs	r0, r5
    2bb2:	4b0b      	ldr	r3, [pc, #44]	; (2be0 <usbdc_init+0x50>)
    2bb4:	4798      	blx	r3
	usbdc.ctrl_buf = ctrl_buf;
    2bb6:	616c      	str	r4, [r5, #20]
	usb_d_register_callback(USB_D_CB_SOF, (FUNC_PTR)usbd_sof_cb);
    2bb8:	490a      	ldr	r1, [pc, #40]	; (2be4 <usbdc_init+0x54>)
    2bba:	2000      	movs	r0, #0
    2bbc:	4c0a      	ldr	r4, [pc, #40]	; (2be8 <usbdc_init+0x58>)
    2bbe:	47a0      	blx	r4
	usb_d_register_callback(USB_D_CB_EVENT, (FUNC_PTR)usbd_event_cb);
    2bc0:	490a      	ldr	r1, [pc, #40]	; (2bec <usbdc_init+0x5c>)
    2bc2:	2001      	movs	r0, #1
    2bc4:	47a0      	blx	r4

	return 0;
    2bc6:	2000      	movs	r0, #0
}
    2bc8:	bd70      	pop	{r4, r5, r6, pc}
    2bca:	46c0      	nop			; (mov r8, r8)
    2bcc:	00000355 	.word	0x00000355
    2bd0:	00002f0c 	.word	0x00002f0c
    2bd4:	0000086d 	.word	0x0000086d
    2bd8:	00000531 	.word	0x00000531
    2bdc:	20000330 	.word	0x20000330
    2be0:	00002dbf 	.word	0x00002dbf
    2be4:	000025e5 	.word	0x000025e5
    2be8:	00000595 	.word	0x00000595
    2bec:	000026d9 	.word	0x000026d9

00002bf0 <usbdc_register_function>:
 * \brief Register/unregister function support of a USB device function
 *
 * Must be invoked when USB device is stopped.
 */
void usbdc_register_function(struct usbdf_driver *func)
{
    2bf0:	b510      	push	{r4, lr}
    2bf2:	0001      	movs	r1, r0
	list_insert_at_end(&usbdc.func_list, func);
    2bf4:	4802      	ldr	r0, [pc, #8]	; (2c00 <usbdc_register_function+0x10>)
    2bf6:	3010      	adds	r0, #16
    2bf8:	4b02      	ldr	r3, [pc, #8]	; (2c04 <usbdc_register_function+0x14>)
    2bfa:	4798      	blx	r3
}
    2bfc:	bd10      	pop	{r4, pc}
    2bfe:	46c0      	nop			; (mov r8, r8)
    2c00:	20000330 	.word	0x20000330
    2c04:	00000899 	.word	0x00000899

00002c08 <usbdc_get_state>:
/**
 * \brief Return current USB state
 */
uint8_t usbdc_get_state(void)
{
	if (usbdc.state & USBD_S_SUSPEND) {
    2c08:	4b02      	ldr	r3, [pc, #8]	; (2c14 <usbdc_get_state+0xc>)
    2c0a:	7e98      	ldrb	r0, [r3, #26]
    2c0c:	06c3      	lsls	r3, r0, #27
    2c0e:	d500      	bpl.n	2c12 <usbdc_get_state+0xa>
		return USBD_S_SUSPEND;
    2c10:	2010      	movs	r0, #16
	}
	return usbdc.state;
}
    2c12:	4770      	bx	lr
    2c14:	20000330 	.word	0x20000330

00002c18 <usb_find_desc>:
#define _param_error_check(cond) ASSERT(cond)
#define _desc_len_check() ASSERT(usb_desc_len(desc) >= 2)
#endif

uint8_t *usb_find_desc(uint8_t *desc, uint8_t *eof, uint8_t type)
{
    2c18:	b510      	push	{r4, lr}
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2c1a:	4288      	cmp	r0, r1
    2c1c:	d211      	bcs.n	2c42 <usb_find_desc+0x2a>
	return desc[0];
    2c1e:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2c20:	2b01      	cmp	r3, #1
    2c22:	d910      	bls.n	2c46 <usb_find_desc+0x2e>
		if (type == usb_desc_type(desc)) {
    2c24:	7844      	ldrb	r4, [r0, #1]
    2c26:	4294      	cmp	r4, r2
    2c28:	d00a      	beq.n	2c40 <usb_find_desc+0x28>
	return (desc + usb_desc_len(desc));
    2c2a:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2c2c:	4281      	cmp	r1, r0
    2c2e:	d906      	bls.n	2c3e <usb_find_desc+0x26>
	return desc[0];
    2c30:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2c32:	2b01      	cmp	r3, #1
    2c34:	d909      	bls.n	2c4a <usb_find_desc+0x32>
	return desc[1];
    2c36:	7844      	ldrb	r4, [r0, #1]
		if (type == usb_desc_type(desc)) {
    2c38:	4294      	cmp	r4, r2
    2c3a:	d1f6      	bne.n	2c2a <usb_find_desc+0x12>
    2c3c:	e000      	b.n	2c40 <usb_find_desc+0x28>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2c3e:	2000      	movs	r0, #0
}
    2c40:	bd10      	pop	{r4, pc}
	return NULL;
    2c42:	2000      	movs	r0, #0
    2c44:	e7fc      	b.n	2c40 <usb_find_desc+0x28>
		_desc_len_check();
    2c46:	2000      	movs	r0, #0
    2c48:	e7fa      	b.n	2c40 <usb_find_desc+0x28>
    2c4a:	2000      	movs	r0, #0
    2c4c:	e7f8      	b.n	2c40 <usb_find_desc+0x28>

00002c4e <usb_find_ep_desc>:

uint8_t *usb_find_ep_desc(uint8_t *desc, uint8_t *eof)
{
	_param_error_check(desc && eof && (desc < eof));

	while (desc < eof) {
    2c4e:	4288      	cmp	r0, r1
    2c50:	d215      	bcs.n	2c7e <usb_find_ep_desc+0x30>
	return desc[0];
    2c52:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2c54:	2b01      	cmp	r3, #1
    2c56:	d914      	bls.n	2c82 <usb_find_ep_desc+0x34>
	return desc[1];
    2c58:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2c5a:	2a04      	cmp	r2, #4
    2c5c:	d013      	beq.n	2c86 <usb_find_ep_desc+0x38>
			break;
		}
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2c5e:	2a05      	cmp	r2, #5
    2c60:	d00c      	beq.n	2c7c <usb_find_ep_desc+0x2e>
	return (desc + usb_desc_len(desc));
    2c62:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2c64:	4281      	cmp	r1, r0
    2c66:	d908      	bls.n	2c7a <usb_find_ep_desc+0x2c>
	return desc[0];
    2c68:	7803      	ldrb	r3, [r0, #0]
		_desc_len_check();
    2c6a:	2b01      	cmp	r3, #1
    2c6c:	d90d      	bls.n	2c8a <usb_find_ep_desc+0x3c>
	return desc[1];
    2c6e:	7842      	ldrb	r2, [r0, #1]
		if (USB_DT_INTERFACE == usb_desc_type(desc)) {
    2c70:	2a04      	cmp	r2, #4
    2c72:	d00c      	beq.n	2c8e <usb_find_ep_desc+0x40>
		if (USB_DT_ENDPOINT == usb_desc_type(desc)) {
    2c74:	2a05      	cmp	r2, #5
    2c76:	d1f4      	bne.n	2c62 <usb_find_ep_desc+0x14>
    2c78:	e000      	b.n	2c7c <usb_find_ep_desc+0x2e>
			return desc;
		}
		desc = usb_desc_next(desc);
	}
	return NULL;
    2c7a:	2000      	movs	r0, #0
}
    2c7c:	4770      	bx	lr
	return NULL;
    2c7e:	2000      	movs	r0, #0
    2c80:	e7fc      	b.n	2c7c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2c82:	2000      	movs	r0, #0
    2c84:	e7fa      	b.n	2c7c <usb_find_ep_desc+0x2e>
	return NULL;
    2c86:	2000      	movs	r0, #0
    2c88:	e7f8      	b.n	2c7c <usb_find_ep_desc+0x2e>
		_desc_len_check();
    2c8a:	2000      	movs	r0, #0
    2c8c:	e7f6      	b.n	2c7c <usb_find_ep_desc+0x2e>
	return NULL;
    2c8e:	2000      	movs	r0, #0
    2c90:	e7f4      	b.n	2c7c <usb_find_ep_desc+0x2e>
	...

00002c94 <usb_find_cfg_desc>:

uint8_t *usb_find_cfg_desc(uint8_t *desc, uint8_t *eof, uint8_t cfg_value)
{
    2c94:	b570      	push	{r4, r5, r6, lr}
    2c96:	000c      	movs	r4, r1
    2c98:	0015      	movs	r5, r2
	_param_error_check(desc && eof && (desc < eof));

	desc = usb_find_desc(desc, eof, USB_DT_CONFIG);
    2c9a:	2202      	movs	r2, #2
    2c9c:	4b16      	ldr	r3, [pc, #88]	; (2cf8 <usb_find_cfg_desc+0x64>)
    2c9e:	4798      	blx	r3
	if (!desc) {
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d01d      	beq.n	2ce0 <usb_find_cfg_desc+0x4c>
		return NULL;
	}
	while (desc < eof) {
    2ca4:	4284      	cmp	r4, r0
    2ca6:	d91c      	bls.n	2ce2 <usb_find_cfg_desc+0x4e>
		_desc_len_check();
    2ca8:	7803      	ldrb	r3, [r0, #0]
    2caa:	2b01      	cmp	r3, #1
    2cac:	d91b      	bls.n	2ce6 <usb_find_cfg_desc+0x52>
		if (desc[1] != USB_DT_CONFIG) {
    2cae:	7843      	ldrb	r3, [r0, #1]
    2cb0:	2b02      	cmp	r3, #2
    2cb2:	d11a      	bne.n	2cea <usb_find_cfg_desc+0x56>
			break;
		}
		if (desc[5] == cfg_value) {
    2cb4:	7943      	ldrb	r3, [r0, #5]
    2cb6:	42ab      	cmp	r3, r5
    2cb8:	d012      	beq.n	2ce0 <usb_find_cfg_desc+0x4c>
	return (ptr[0] + (ptr[1] << 8));
    2cba:	78c2      	ldrb	r2, [r0, #3]
    2cbc:	0212      	lsls	r2, r2, #8
    2cbe:	7883      	ldrb	r3, [r0, #2]
    2cc0:	189b      	adds	r3, r3, r2
 *  \param[in] cfg_desc Byte pointer to the descriptor start address
 *  \return Byte pointer to descriptor after configuration end
 */
static inline uint8_t *usb_cfg_desc_next(uint8_t *cfg_desc)
{
	return (cfg_desc + usb_cfg_desc_total_len(cfg_desc));
    2cc2:	b29b      	uxth	r3, r3
    2cc4:	18c0      	adds	r0, r0, r3
	while (desc < eof) {
    2cc6:	4284      	cmp	r4, r0
    2cc8:	d909      	bls.n	2cde <usb_find_cfg_desc+0x4a>
		_desc_len_check();
    2cca:	7803      	ldrb	r3, [r0, #0]
    2ccc:	2b01      	cmp	r3, #1
    2cce:	d90e      	bls.n	2cee <usb_find_cfg_desc+0x5a>
		if (desc[1] != USB_DT_CONFIG) {
    2cd0:	7843      	ldrb	r3, [r0, #1]
    2cd2:	2b02      	cmp	r3, #2
    2cd4:	d10d      	bne.n	2cf2 <usb_find_cfg_desc+0x5e>
		if (desc[5] == cfg_value) {
    2cd6:	7943      	ldrb	r3, [r0, #5]
    2cd8:	42ab      	cmp	r3, r5
    2cda:	d1ee      	bne.n	2cba <usb_find_cfg_desc+0x26>
    2cdc:	e000      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
			return desc;
		}
		desc = usb_cfg_desc_next(desc);
	}
	return NULL;
    2cde:	2000      	movs	r0, #0
}
    2ce0:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
    2ce2:	2000      	movs	r0, #0
    2ce4:	e7fc      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2ce6:	2000      	movs	r0, #0
    2ce8:	e7fa      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
	return NULL;
    2cea:	2000      	movs	r0, #0
    2cec:	e7f8      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
		_desc_len_check();
    2cee:	2000      	movs	r0, #0
    2cf0:	e7f6      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
	return NULL;
    2cf2:	2000      	movs	r0, #0
    2cf4:	e7f4      	b.n	2ce0 <usb_find_cfg_desc+0x4c>
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	00002c19 	.word	0x00002c19

00002cfc <usb_find_str_desc>:
	}
	return NULL;
}

uint8_t *usb_find_str_desc(uint8_t *desc, uint8_t *eof, uint8_t str_index)
{
    2cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cfe:	000d      	movs	r5, r1
    2d00:	0017      	movs	r7, r2
	uint8_t i;

	_param_error_check(desc && eof && (desc < eof));

	for (i = 0; desc < eof;) {
    2d02:	4288      	cmp	r0, r1
    2d04:	d212      	bcs.n	2d2c <usb_find_str_desc+0x30>
    2d06:	2400      	movs	r4, #0
		desc = usb_find_desc(desc, eof, USB_DT_STRING);
    2d08:	4e0a      	ldr	r6, [pc, #40]	; (2d34 <usb_find_str_desc+0x38>)
    2d0a:	2203      	movs	r2, #3
    2d0c:	0029      	movs	r1, r5
    2d0e:	47b0      	blx	r6
		if (desc) {
    2d10:	2800      	cmp	r0, #0
    2d12:	d00e      	beq.n	2d32 <usb_find_str_desc+0x36>
	return desc[0];
    2d14:	7803      	ldrb	r3, [r0, #0]
			_desc_len_check();
    2d16:	2b01      	cmp	r3, #1
    2d18:	d90a      	bls.n	2d30 <usb_find_str_desc+0x34>
			if (i == str_index) {
    2d1a:	42a7      	cmp	r7, r4
    2d1c:	d009      	beq.n	2d32 <usb_find_str_desc+0x36>
				return desc;
			}
			i++;
    2d1e:	3401      	adds	r4, #1
    2d20:	b2e4      	uxtb	r4, r4
	return (desc + usb_desc_len(desc));
    2d22:	18c0      	adds	r0, r0, r3
	for (i = 0; desc < eof;) {
    2d24:	4285      	cmp	r5, r0
    2d26:	d8f0      	bhi.n	2d0a <usb_find_str_desc+0xe>
			desc = usb_desc_next(desc);
		} else {
			return NULL;
		}
	}
	return NULL;
    2d28:	2000      	movs	r0, #0
    2d2a:	e002      	b.n	2d32 <usb_find_str_desc+0x36>
    2d2c:	2000      	movs	r0, #0
    2d2e:	e000      	b.n	2d32 <usb_find_str_desc+0x36>
			_desc_len_check();
    2d30:	2000      	movs	r0, #0
}
    2d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d34:	00002c19 	.word	0x00002c19

00002d38 <usbd_msc_init>:

/**
 * \brief USB MSC Init
 */
void usbd_msc_init(void)
{
    2d38:	b510      	push	{r4, lr}
	/* usb stack init */
	usbdc_init(ctrl_buffer);
    2d3a:	4804      	ldr	r0, [pc, #16]	; (2d4c <usbd_msc_init+0x14>)
    2d3c:	3014      	adds	r0, #20
    2d3e:	4b04      	ldr	r3, [pc, #16]	; (2d50 <usbd_msc_init+0x18>)
    2d40:	4798      	blx	r3

	/* usbdc_register_funcion inside */
	mscdf_init(CONF_USB_MSC_MAX_LUN);
    2d42:	2000      	movs	r0, #0
    2d44:	4b03      	ldr	r3, [pc, #12]	; (2d54 <usbd_msc_init+0x1c>)
    2d46:	4798      	blx	r3
}
    2d48:	bd10      	pop	{r4, pc}
    2d4a:	46c0      	nop			; (mov r8, r8)
    2d4c:	20000350 	.word	0x20000350
    2d50:	00002b91 	.word	0x00002b91
    2d54:	000024bd 	.word	0x000024bd

00002d58 <usb_init>:
#endif
	}
}

void usb_init(void)
{
    2d58:	b510      	push	{r4, lr}

	usbd_msc_init();
    2d5a:	4b01      	ldr	r3, [pc, #4]	; (2d60 <usb_init+0x8>)
    2d5c:	4798      	blx	r3
}
    2d5e:	bd10      	pop	{r4, pc}
    2d60:	00002d39 	.word	0x00002d39

00002d64 <__libc_init_array>:
    2d64:	b570      	push	{r4, r5, r6, lr}
    2d66:	2600      	movs	r6, #0
    2d68:	4d0c      	ldr	r5, [pc, #48]	; (2d9c <__libc_init_array+0x38>)
    2d6a:	4c0d      	ldr	r4, [pc, #52]	; (2da0 <__libc_init_array+0x3c>)
    2d6c:	1b64      	subs	r4, r4, r5
    2d6e:	10a4      	asrs	r4, r4, #2
    2d70:	42a6      	cmp	r6, r4
    2d72:	d109      	bne.n	2d88 <__libc_init_array+0x24>
    2d74:	2600      	movs	r6, #0
    2d76:	f000 f8d5 	bl	2f24 <_init>
    2d7a:	4d0a      	ldr	r5, [pc, #40]	; (2da4 <__libc_init_array+0x40>)
    2d7c:	4c0a      	ldr	r4, [pc, #40]	; (2da8 <__libc_init_array+0x44>)
    2d7e:	1b64      	subs	r4, r4, r5
    2d80:	10a4      	asrs	r4, r4, #2
    2d82:	42a6      	cmp	r6, r4
    2d84:	d105      	bne.n	2d92 <__libc_init_array+0x2e>
    2d86:	bd70      	pop	{r4, r5, r6, pc}
    2d88:	00b3      	lsls	r3, r6, #2
    2d8a:	58eb      	ldr	r3, [r5, r3]
    2d8c:	4798      	blx	r3
    2d8e:	3601      	adds	r6, #1
    2d90:	e7ee      	b.n	2d70 <__libc_init_array+0xc>
    2d92:	00b3      	lsls	r3, r6, #2
    2d94:	58eb      	ldr	r3, [r5, r3]
    2d96:	4798      	blx	r3
    2d98:	3601      	adds	r6, #1
    2d9a:	e7f2      	b.n	2d82 <__libc_init_array+0x1e>
    2d9c:	00002f30 	.word	0x00002f30
    2da0:	00002f30 	.word	0x00002f30
    2da4:	00002f30 	.word	0x00002f30
    2da8:	00002f34 	.word	0x00002f34

00002dac <memcpy>:
    2dac:	2300      	movs	r3, #0
    2dae:	b510      	push	{r4, lr}
    2db0:	429a      	cmp	r2, r3
    2db2:	d100      	bne.n	2db6 <memcpy+0xa>
    2db4:	bd10      	pop	{r4, pc}
    2db6:	5ccc      	ldrb	r4, [r1, r3]
    2db8:	54c4      	strb	r4, [r0, r3]
    2dba:	3301      	adds	r3, #1
    2dbc:	e7f8      	b.n	2db0 <memcpy+0x4>

00002dbe <memset>:
    2dbe:	0003      	movs	r3, r0
    2dc0:	1882      	adds	r2, r0, r2
    2dc2:	4293      	cmp	r3, r2
    2dc4:	d100      	bne.n	2dc8 <memset+0xa>
    2dc6:	4770      	bx	lr
    2dc8:	7019      	strb	r1, [r3, #0]
    2dca:	3301      	adds	r3, #1
    2dcc:	e7f9      	b.n	2dc2 <memset+0x4>
    2dce:	0000      	movs	r0, r0
    2dd0:	682f2e2e 	.word	0x682f2e2e
    2dd4:	752f6c61 	.word	0x752f6c61
    2dd8:	736c6974 	.word	0x736c6974
    2ddc:	6372732f 	.word	0x6372732f
    2de0:	6974752f 	.word	0x6974752f
    2de4:	6c5f736c 	.word	0x6c5f736c
    2de8:	2e747369 	.word	0x2e747369
    2dec:	0063      	.short	0x0063
    2dee:	2000      	.short	0x2000

00002df0 <_usb_ep_cfgs>:
    2df0:	0294 2000 0000 0000 0040 0000 0254 2000     ... ....@...T.. 
    2e00:	0000 0000 0040 0000 0214 2000 0000 0000     ....@...... ....
    2e10:	0040 0000 2426 0000 236e 0000 236e 0000     @...&$..n#..n#..
    2e20:	23e0 0000 236e 0000 236e 0000 236e 0000     .#..n#..n#..n#..
    2e30:	236e 0000 236e 0000 236e 0000 236e 0000     n#..n#..n#..n#..
    2e40:	236e 0000 236e 0000 236e 0000 236e 0000     n#..n#..n#..n#..
    2e50:	236e 0000 236e 0000 236e 0000 2264 0000     n#..n#..n#..d"..
    2e60:	236e 0000 236e 0000 236e 0000 236e 0000     n#..n#..n#..n#..
    2e70:	236e 0000 236e 0000 236e 0000 236e 0000     n#..n#..n#..n#..
    2e80:	2388 0000 236e 0000 236e 0000 2356 0000     .#..n#..n#..V#..
    2e90:	236e 0000 236e 0000 236e 0000 236e 0000     n#..n#..n#..n#..
    2ea0:	236e 0000 236e 0000 22ce 0000 236e 0000     n#..n#..."..n#..
    2eb0:	236e 0000 234e 0000 236e 0000 234e 0000     n#..N#..n#..N#..
    2ec0:	2510 0000 2518 0000 2528 0000 2530 0000     .%...%..(%..0%..
    2ed0:	2520 0000 2538 0000 2540 0000 2b28 0000      %..8%..@%..(+..
    2ee0:	2810 0000 2b28 0000 2842 0000 2b28 0000     .(..(+..B(..(+..
    2ef0:	2766 0000 2b28 0000 2b28 0000 2b28 0000     f'..(+..(+..(+..
    2f00:	277a 0000 2b28 0000 2876 0000 2e2e 752f     z'..(+..v(..../u
    2f10:	6273 642f 7665 6369 2f65 7375 6462 2e63     sb/device/usbdc.
    2f20:	0063 0000                                   c...

00002f24 <_init>:
    2f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f2a:	bc08      	pop	{r3}
    2f2c:	469e      	mov	lr, r3
    2f2e:	4770      	bx	lr

00002f30 <__init_array_start>:
    2f30:	000000dd 	.word	0x000000dd

00002f34 <_fini>:
    2f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f36:	46c0      	nop			; (mov r8, r8)
    2f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f3a:	bc08      	pop	{r3}
    2f3c:	469e      	mov	lr, r3
    2f3e:	4770      	bx	lr

00002f40 <__fini_array_start>:
    2f40:	000000b5 	.word	0x000000b5
