
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010d9c  2**0
                  CONTENTS
  2 .lpram        00000000  30000000  30000000  00010d9c  2**0
                  CONTENTS
  3 .bss          00000040  20000000  20000000  00020000  2**2
                  ALLOC
  4 .stack        00000800  20000040  20000040  00020000  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00010d9c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014adc  00000000  00000000  00010e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000203d  00000000  00000000  000258f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000919c  00000000  00000000  00027936  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000820  00000000  00000000  00030ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c80  00000000  00000000  000312f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a406  00000000  00000000  00031f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000d37f  00000000  00000000  0004c378  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0008d54f  00000000  00000000  000596f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000013e0  00000000  00000000  000e6c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	40 08 00 20 25 01 00 00 21 01 00 00 21 01 00 00     @.. %...!...!...
	...
  2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
  3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  6c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  8c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
  ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000000 	.word	0x20000000
  d4:	00000000 	.word	0x00000000
  d8:	00000d9c 	.word	0x00000d9c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000004 	.word	0x20000004
 108:	00000d9c 	.word	0x00000d9c
 10c:	00000d9c 	.word	0x00000d9c
 110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 114:	b510      	push	{r4, lr}
	system_init();
 116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
 118:	4798      	blx	r3
}
 11a:	bd10      	pop	{r4, pc}
 11c:	0000026d 	.word	0x0000026d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
 124:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 126:	4a1a      	ldr	r2, [pc, #104]	; (190 <Reset_Handler+0x6c>)
 128:	4b1a      	ldr	r3, [pc, #104]	; (194 <Reset_Handler+0x70>)
 12a:	429a      	cmp	r2, r3
 12c:	d011      	beq.n	152 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 12e:	001a      	movs	r2, r3
 130:	4b19      	ldr	r3, [pc, #100]	; (198 <Reset_Handler+0x74>)
 132:	429a      	cmp	r2, r3
 134:	d20d      	bcs.n	152 <Reset_Handler+0x2e>
 136:	4a19      	ldr	r2, [pc, #100]	; (19c <Reset_Handler+0x78>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4813      	ldr	r0, [pc, #76]	; (194 <Reset_Handler+0x70>)
 146:	4912      	ldr	r1, [pc, #72]	; (190 <Reset_Handler+0x6c>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 152:	4a13      	ldr	r2, [pc, #76]	; (1a0 <Reset_Handler+0x7c>)
 154:	4b13      	ldr	r3, [pc, #76]	; (1a4 <Reset_Handler+0x80>)
 156:	429a      	cmp	r2, r3
 158:	d20a      	bcs.n	170 <Reset_Handler+0x4c>
 15a:	43d3      	mvns	r3, r2
 15c:	4911      	ldr	r1, [pc, #68]	; (1a4 <Reset_Handler+0x80>)
 15e:	185b      	adds	r3, r3, r1
 160:	2103      	movs	r1, #3
 162:	438b      	bics	r3, r1
 164:	3304      	adds	r3, #4
 166:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 168:	2100      	movs	r1, #0
 16a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 16c:	4293      	cmp	r3, r2
 16e:	d1fc      	bne.n	16a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 170:	4a0d      	ldr	r2, [pc, #52]	; (1a8 <Reset_Handler+0x84>)
 172:	21ff      	movs	r1, #255	; 0xff
 174:	4b0d      	ldr	r3, [pc, #52]	; (1ac <Reset_Handler+0x88>)
 176:	438b      	bics	r3, r1
 178:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
 17a:	4a0d      	ldr	r2, [pc, #52]	; (1b0 <Reset_Handler+0x8c>)
 17c:	6853      	ldr	r3, [r2, #4]
 17e:	397f      	subs	r1, #127	; 0x7f
 180:	430b      	orrs	r3, r1
 182:	6053      	str	r3, [r2, #4]
        __libc_init_array();
 184:	4b0b      	ldr	r3, [pc, #44]	; (1b4 <Reset_Handler+0x90>)
 186:	4798      	blx	r3
        main();
 188:	4b0b      	ldr	r3, [pc, #44]	; (1b8 <Reset_Handler+0x94>)
 18a:	4798      	blx	r3
 18c:	e7fe      	b.n	18c <Reset_Handler+0x68>
 18e:	46c0      	nop			; (mov r8, r8)
 190:	00000d9c 	.word	0x00000d9c
 194:	20000000 	.word	0x20000000
 198:	20000000 	.word	0x20000000
 19c:	20000004 	.word	0x20000004
 1a0:	20000000 	.word	0x20000000
 1a4:	20000040 	.word	0x20000040
 1a8:	e000ed00 	.word	0xe000ed00
 1ac:	00000000 	.word	0x00000000
 1b0:	41004000 	.word	0x41004000
 1b4:	00000cd1 	.word	0x00000cd1
 1b8:	00000c59 	.word	0x00000c59

000001bc <I2C_0_PORT_init>:
#include <hal_init.h>

struct i2c_m_sync_desc I2C_0;

void I2C_0_PORT_init(void)
{
 1bc:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 1be:	4b12      	ldr	r3, [pc, #72]	; (208 <I2C_0_PORT_init+0x4c>)
 1c0:	20de      	movs	r0, #222	; 0xde
 1c2:	5c19      	ldrb	r1, [r3, r0]
 1c4:	2204      	movs	r2, #4
 1c6:	4391      	bics	r1, r2
 1c8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1ca:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1cc:	2501      	movs	r5, #1
 1ce:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1d0:	2401      	movs	r4, #1
 1d2:	4321      	orrs	r1, r4
 1d4:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1d6:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1d8:	381f      	subs	r0, #31
 1da:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1dc:	260f      	movs	r6, #15
 1de:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
 1e0:	3e0c      	subs	r6, #12
 1e2:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1e4:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
 1e6:	21df      	movs	r1, #223	; 0xdf
 1e8:	5c5e      	ldrb	r6, [r3, r1]
 1ea:	4396      	bics	r6, r2
 1ec:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1ee:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1f0:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1f2:	4322      	orrs	r2, r4
 1f4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1f6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1f8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 1fa:	39d0      	subs	r1, #208	; 0xd0
 1fc:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 1fe:	3121      	adds	r1, #33	; 0x21
 200:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 202:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB31, PINMUX_PB31D_SERCOM5_PAD1);
}
 204:	bd70      	pop	{r4, r5, r6, pc}
 206:	46c0      	nop			; (mov r8, r8)
 208:	40002800 	.word	0x40002800

0000020c <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 20c:	4b06      	ldr	r3, [pc, #24]	; (228 <I2C_0_CLOCK_init+0x1c>)
 20e:	2140      	movs	r1, #64	; 0x40
 210:	22e0      	movs	r2, #224	; 0xe0
 212:	5099      	str	r1, [r3, r2]
 214:	3103      	adds	r1, #3
 216:	3a04      	subs	r2, #4
 218:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBDMASK_SERCOM5_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
 21a:	4a04      	ldr	r2, [pc, #16]	; (22c <I2C_0_CLOCK_init+0x20>)
 21c:	6a13      	ldr	r3, [r2, #32]
 21e:	3941      	subs	r1, #65	; 0x41
 220:	430b      	orrs	r3, r1
 222:	6213      	str	r3, [r2, #32]
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
 224:	4770      	bx	lr
 226:	46c0      	nop			; (mov r8, r8)
 228:	40001800 	.word	0x40001800
 22c:	40000400 	.word	0x40000400

00000230 <I2C_0_init>:

void I2C_0_init(void)
{
 230:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
 232:	4b04      	ldr	r3, [pc, #16]	; (244 <I2C_0_init+0x14>)
 234:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM5);
 236:	4904      	ldr	r1, [pc, #16]	; (248 <I2C_0_init+0x18>)
 238:	4804      	ldr	r0, [pc, #16]	; (24c <I2C_0_init+0x1c>)
 23a:	4b05      	ldr	r3, [pc, #20]	; (250 <I2C_0_init+0x20>)
 23c:	4798      	blx	r3
	I2C_0_PORT_init();
 23e:	4b05      	ldr	r3, [pc, #20]	; (254 <I2C_0_init+0x24>)
 240:	4798      	blx	r3
}
 242:	bd10      	pop	{r4, pc}
 244:	0000020d 	.word	0x0000020d
 248:	43000400 	.word	0x43000400
 24c:	20000020 	.word	0x20000020
 250:	0000031d 	.word	0x0000031d
 254:	000001bd 	.word	0x000001bd

00000258 <delay_driver_init>:

void delay_driver_init(void)
{
 258:	b510      	push	{r4, lr}
	delay_init(SysTick);
 25a:	4802      	ldr	r0, [pc, #8]	; (264 <delay_driver_init+0xc>)
 25c:	4b02      	ldr	r3, [pc, #8]	; (268 <delay_driver_init+0x10>)
 25e:	4798      	blx	r3
}
 260:	bd10      	pop	{r4, pc}
 262:	46c0      	nop			; (mov r8, r8)
 264:	e000e010 	.word	0xe000e010
 268:	00000289 	.word	0x00000289

0000026c <system_init>:

void system_init(void)
{
 26c:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 26e:	4b03      	ldr	r3, [pc, #12]	; (27c <system_init+0x10>)
 270:	4798      	blx	r3
	init_mcu();

	I2C_0_init();
 272:	4b03      	ldr	r3, [pc, #12]	; (280 <system_init+0x14>)
 274:	4798      	blx	r3

	delay_driver_init();
 276:	4b03      	ldr	r3, [pc, #12]	; (284 <system_init+0x18>)
 278:	4798      	blx	r3
}
 27a:	bd10      	pop	{r4, pc}
 27c:	000003fd 	.word	0x000003fd
 280:	00000231 	.word	0x00000231
 284:	00000259 	.word	0x00000259

00000288 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
 288:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
 28a:	4b02      	ldr	r3, [pc, #8]	; (294 <delay_init+0xc>)
 28c:	6018      	str	r0, [r3, #0]
 28e:	4b02      	ldr	r3, [pc, #8]	; (298 <delay_init+0x10>)
 290:	4798      	blx	r3
}
 292:	bd10      	pop	{r4, pc}
 294:	2000001c 	.word	0x2000001c
 298:	00000bf1 	.word	0x00000bf1

0000029c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
 29c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
 29e:	4b04      	ldr	r3, [pc, #16]	; (2b0 <delay_ms+0x14>)
 2a0:	681c      	ldr	r4, [r3, #0]
 2a2:	4b04      	ldr	r3, [pc, #16]	; (2b4 <delay_ms+0x18>)
 2a4:	4798      	blx	r3
 2a6:	0001      	movs	r1, r0
 2a8:	0020      	movs	r0, r4
 2aa:	4b03      	ldr	r3, [pc, #12]	; (2b8 <delay_ms+0x1c>)
 2ac:	4798      	blx	r3
}
 2ae:	bd10      	pop	{r4, pc}
 2b0:	2000001c 	.word	0x2000001c
 2b4:	000003f5 	.word	0x000003f5
 2b8:	00000c05 	.word	0x00000c05

000002bc <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
 2bc:	b510      	push	{r4, lr}
 2be:	b084      	sub	sp, #16
 2c0:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
 2c2:	ab01      	add	r3, sp, #4
 2c4:	3814      	subs	r0, #20
 2c6:	8b82      	ldrh	r2, [r0, #28]
 2c8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
 2ca:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
 2cc:	4a05      	ldr	r2, [pc, #20]	; (2e4 <i2c_m_sync_write+0x28>)
 2ce:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
 2d0:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
 2d2:	0019      	movs	r1, r3
 2d4:	4b04      	ldr	r3, [pc, #16]	; (2e8 <i2c_m_sync_write+0x2c>)
 2d6:	4798      	blx	r3

	if (ret) {
 2d8:	2800      	cmp	r0, #0
 2da:	d100      	bne.n	2de <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
 2dc:	0020      	movs	r0, r4
}
 2de:	b004      	add	sp, #16
 2e0:	bd10      	pop	{r4, pc}
 2e2:	46c0      	nop			; (mov r8, r8)
 2e4:	ffff8000 	.word	0xffff8000
 2e8:	000006b9 	.word	0x000006b9

000002ec <i2c_m_sync_read>:
{
 2ec:	b510      	push	{r4, lr}
 2ee:	b084      	sub	sp, #16
 2f0:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
 2f2:	ab01      	add	r3, sp, #4
 2f4:	3814      	subs	r0, #20
 2f6:	8b82      	ldrh	r2, [r0, #28]
 2f8:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
 2fa:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
 2fc:	4a05      	ldr	r2, [pc, #20]	; (314 <i2c_m_sync_read+0x28>)
 2fe:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
 300:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
 302:	0019      	movs	r1, r3
 304:	4b04      	ldr	r3, [pc, #16]	; (318 <i2c_m_sync_read+0x2c>)
 306:	4798      	blx	r3
	if (ret) {
 308:	2800      	cmp	r0, #0
 30a:	d100      	bne.n	30e <i2c_m_sync_read+0x22>
	return n;
 30c:	0020      	movs	r0, r4
}
 30e:	b004      	add	sp, #16
 310:	bd10      	pop	{r4, pc}
 312:	46c0      	nop			; (mov r8, r8)
 314:	ffff8001 	.word	0xffff8001
 318:	000006b9 	.word	0x000006b9

0000031c <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
 31c:	b570      	push	{r4, r5, r6, lr}
 31e:	0004      	movs	r4, r0
 320:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
 322:	1e43      	subs	r3, r0, #1
 324:	4198      	sbcs	r0, r3
 326:	b2c0      	uxtb	r0, r0
 328:	225e      	movs	r2, #94	; 0x5e
 32a:	4907      	ldr	r1, [pc, #28]	; (348 <i2c_m_sync_init+0x2c>)
 32c:	4b07      	ldr	r3, [pc, #28]	; (34c <i2c_m_sync_init+0x30>)
 32e:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
 330:	0029      	movs	r1, r5
 332:	0020      	movs	r0, r4
 334:	4b06      	ldr	r3, [pc, #24]	; (350 <i2c_m_sync_init+0x34>)
 336:	4798      	blx	r3
	if (init_status) {
 338:	2800      	cmp	r0, #0
 33a:	d103      	bne.n	344 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
 33c:	4b05      	ldr	r3, [pc, #20]	; (354 <i2c_m_sync_init+0x38>)
 33e:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
 340:	4b05      	ldr	r3, [pc, #20]	; (358 <i2c_m_sync_init+0x3c>)
 342:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
 344:	bd70      	pop	{r4, r5, r6, pc}
 346:	46c0      	nop			; (mov r8, r8)
 348:	00000d18 	.word	0x00000d18
 34c:	000003ed 	.word	0x000003ed
 350:	00000605 	.word	0x00000605
 354:	000002ed 	.word	0x000002ed
 358:	000002bd 	.word	0x000002bd

0000035c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
 35c:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
 35e:	4b01      	ldr	r3, [pc, #4]	; (364 <i2c_m_sync_enable+0x8>)
 360:	4798      	blx	r3
}
 362:	bd10      	pop	{r4, pc}
 364:	00000635 	.word	0x00000635

00000368 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
 368:	0589      	lsls	r1, r1, #22
 36a:	0d89      	lsrs	r1, r1, #22
 36c:	2380      	movs	r3, #128	; 0x80
 36e:	00db      	lsls	r3, r3, #3
 370:	401a      	ands	r2, r3
 372:	430a      	orrs	r2, r1
 374:	8382      	strh	r2, [r0, #28]
}
 376:	0010      	movs	r0, r2
 378:	4770      	bx	lr

0000037a <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
 37a:	3014      	adds	r0, #20
 37c:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
 37e:	2000      	movs	r0, #0
 380:	4770      	bx	lr
	...

00000384 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 384:	b570      	push	{r4, r5, r6, lr}
 386:	0006      	movs	r6, r0
 388:	000c      	movs	r4, r1
 38a:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 38c:	2800      	cmp	r0, #0
 38e:	d00d      	beq.n	3ac <io_write+0x28>
 390:	0008      	movs	r0, r1
 392:	1e43      	subs	r3, r0, #1
 394:	4198      	sbcs	r0, r3
 396:	b2c0      	uxtb	r0, r0
 398:	2234      	movs	r2, #52	; 0x34
 39a:	4905      	ldr	r1, [pc, #20]	; (3b0 <io_write+0x2c>)
 39c:	4b05      	ldr	r3, [pc, #20]	; (3b4 <io_write+0x30>)
 39e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
 3a0:	6833      	ldr	r3, [r6, #0]
 3a2:	002a      	movs	r2, r5
 3a4:	0021      	movs	r1, r4
 3a6:	0030      	movs	r0, r6
 3a8:	4798      	blx	r3
}
 3aa:	bd70      	pop	{r4, r5, r6, pc}
 3ac:	2000      	movs	r0, #0
 3ae:	e7f3      	b.n	398 <io_write+0x14>
 3b0:	00000d34 	.word	0x00000d34
 3b4:	000003ed 	.word	0x000003ed

000003b8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
 3b8:	b570      	push	{r4, r5, r6, lr}
 3ba:	0006      	movs	r6, r0
 3bc:	000c      	movs	r4, r1
 3be:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 3c0:	2800      	cmp	r0, #0
 3c2:	d00d      	beq.n	3e0 <io_read+0x28>
 3c4:	0008      	movs	r0, r1
 3c6:	1e43      	subs	r3, r0, #1
 3c8:	4198      	sbcs	r0, r3
 3ca:	b2c0      	uxtb	r0, r0
 3cc:	223d      	movs	r2, #61	; 0x3d
 3ce:	4905      	ldr	r1, [pc, #20]	; (3e4 <io_read+0x2c>)
 3d0:	4b05      	ldr	r3, [pc, #20]	; (3e8 <io_read+0x30>)
 3d2:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
 3d4:	6873      	ldr	r3, [r6, #4]
 3d6:	002a      	movs	r2, r5
 3d8:	0021      	movs	r1, r4
 3da:	0030      	movs	r0, r6
 3dc:	4798      	blx	r3
}
 3de:	bd70      	pop	{r4, r5, r6, pc}
 3e0:	2000      	movs	r0, #0
 3e2:	e7f3      	b.n	3cc <io_read+0x14>
 3e4:	00000d34 	.word	0x00000d34
 3e8:	000003ed 	.word	0x000003ed

000003ec <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 3ec:	2800      	cmp	r0, #0
 3ee:	d100      	bne.n	3f2 <assert+0x6>
		__asm("BKPT #0");
 3f0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 3f2:	4770      	bx	lr

000003f4 <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
 3f4:	23fa      	movs	r3, #250	; 0xfa
 3f6:	011b      	lsls	r3, r3, #4
 3f8:	4358      	muls	r0, r3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
 3fa:	4770      	bx	lr

000003fc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 3fc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 3fe:	4b09      	ldr	r3, [pc, #36]	; (424 <_init_chip+0x28>)
 400:	685a      	ldr	r2, [r3, #4]
 402:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(2);
 404:	2002      	movs	r0, #2
 406:	4b08      	ldr	r3, [pc, #32]	; (428 <_init_chip+0x2c>)
 408:	4798      	blx	r3

	_osc32kctrl_init_sources();
 40a:	4b08      	ldr	r3, [pc, #32]	; (42c <_init_chip+0x30>)
 40c:	4798      	blx	r3
	_oscctrl_init_sources();
 40e:	4b08      	ldr	r3, [pc, #32]	; (430 <_init_chip+0x34>)
 410:	4798      	blx	r3
	_mclk_init();
 412:	4b08      	ldr	r3, [pc, #32]	; (434 <_init_chip+0x38>)
 414:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 416:	4b08      	ldr	r3, [pc, #32]	; (438 <_init_chip+0x3c>)
 418:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 41a:	20ff      	movs	r0, #255	; 0xff
 41c:	4b07      	ldr	r3, [pc, #28]	; (43c <_init_chip+0x40>)
 41e:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 420:	bd10      	pop	{r4, pc}
 422:	46c0      	nop			; (mov r8, r8)
 424:	41004000 	.word	0x41004000
 428:	000004cb 	.word	0x000004cb
 42c:	00000479 	.word	0x00000479
 430:	00000491 	.word	0x00000491
 434:	00000465 	.word	0x00000465
 438:	000004c9 	.word	0x000004c9
 43c:	00000441 	.word	0x00000441

00000440 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 440:	07c3      	lsls	r3, r0, #31
 442:	d507      	bpl.n	454 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 444:	4a04      	ldr	r2, [pc, #16]	; (458 <_gclk_init_generators_by_fref+0x18>)
 446:	4b05      	ldr	r3, [pc, #20]	; (45c <_gclk_init_generators_by_fref+0x1c>)
 448:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 44a:	0019      	movs	r1, r3
 44c:	4a04      	ldr	r2, [pc, #16]	; (460 <_gclk_init_generators_by_fref+0x20>)
 44e:	684b      	ldr	r3, [r1, #4]
 450:	4213      	tst	r3, r2
 452:	d1fc      	bne.n	44e <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 454:	4770      	bx	lr
 456:	46c0      	nop			; (mov r8, r8)
 458:	00010106 	.word	0x00010106
 45c:	40001800 	.word	0x40001800
 460:	000007fd 	.word	0x000007fd

00000464 <_mclk_init>:
	((Mclk *)hw)->BUPDIV.reg = data;
 464:	4b03      	ldr	r3, [pc, #12]	; (474 <_mclk_init+0x10>)
 466:	2208      	movs	r2, #8
 468:	719a      	strb	r2, [r3, #6]
	((Mclk *)hw)->LPDIV.reg = data;
 46a:	3a04      	subs	r2, #4
 46c:	715a      	strb	r2, [r3, #5]
	((Mclk *)hw)->CPUDIV.reg = data;
 46e:	3a03      	subs	r2, #3
 470:	711a      	strb	r2, [r3, #4]
{
	void *hw = (void *)MCLK;
	hri_mclk_write_BUPDIV_reg(hw, MCLK_BUPDIV_BUPDIV(CONF_MCLK_BUPDIV));
	hri_mclk_write_LPDIV_reg(hw, MCLK_LPDIV_LPDIV(CONF_MCLK_LPDIV));
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 472:	4770      	bx	lr
 474:	40000400 	.word	0x40000400

00000478 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 478:	4b04      	ldr	r3, [pc, #16]	; (48c <_osc32kctrl_init_sources+0x14>)
 47a:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 47c:	21f8      	movs	r1, #248	; 0xf8
 47e:	0149      	lsls	r1, r1, #5
 480:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 482:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 484:	2201      	movs	r2, #1
 486:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 488:	4770      	bx	lr
 48a:	46c0      	nop			; (mov r8, r8)
 48c:	40001000 	.word	0x40001000

00000490 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 490:	2282      	movs	r2, #130	; 0x82
 492:	4b0c      	ldr	r3, [pc, #48]	; (4c4 <_oscctrl_init_sources+0x34>)
 494:	751a      	strb	r2, [r3, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 496:	0018      	movs	r0, r3
 498:	2138      	movs	r1, #56	; 0x38
 49a:	3a80      	subs	r2, #128	; 0x80
 49c:	5c43      	ldrb	r3, [r0, r1]
 49e:	4213      	tst	r3, r2
 4a0:	d1fc      	bne.n	49c <_oscctrl_init_sources+0xc>
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 4a2:	4908      	ldr	r1, [pc, #32]	; (4c4 <_oscctrl_init_sources+0x34>)
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 4a4:	2210      	movs	r2, #16
 4a6:	68cb      	ldr	r3, [r1, #12]
 4a8:	421a      	tst	r2, r3
 4aa:	d0fc      	beq.n	4a6 <_oscctrl_init_sources+0x16>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND;
 4ac:	4a05      	ldr	r2, [pc, #20]	; (4c4 <_oscctrl_init_sources+0x34>)
 4ae:	7d13      	ldrb	r3, [r2, #20]
 4b0:	2180      	movs	r1, #128	; 0x80
 4b2:	430b      	orrs	r3, r1
 4b4:	7513      	strb	r3, [r2, #20]
	while (((Oscctrl *)hw)->DPLLSYNCBUSY.reg & reg) {
 4b6:	0010      	movs	r0, r2
 4b8:	3948      	subs	r1, #72	; 0x48
 4ba:	220e      	movs	r2, #14
 4bc:	5c43      	ldrb	r3, [r0, r1]
 4be:	4213      	tst	r3, r2
 4c0:	d1fc      	bne.n	4bc <_oscctrl_init_sources+0x2c>
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 4c2:	4770      	bx	lr
 4c4:	40000c00 	.word	0x40000c00

000004c8 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 4c8:	4770      	bx	lr

000004ca <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 4ca:	2380      	movs	r3, #128	; 0x80
 4cc:	05db      	lsls	r3, r3, #23
 4ce:	789b      	ldrb	r3, [r3, #2]
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 4d0:	2203      	movs	r2, #3
 4d2:	4013      	ands	r3, r2
 4d4:	4298      	cmp	r0, r3
 4d6:	d00c      	beq.n	4f2 <_set_performance_level+0x28>
	((Pm *)hw)->INTFLAG.reg = mask;
 4d8:	2280      	movs	r2, #128	; 0x80
 4da:	05d2      	lsls	r2, r2, #23
 4dc:	23ff      	movs	r3, #255	; 0xff
 4de:	7193      	strb	r3, [r2, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 4e0:	7893      	ldrb	r3, [r2, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 4e2:	2103      	movs	r1, #3
 4e4:	438b      	bics	r3, r1
	tmp |= PM_PLCFG_PLSEL(data);
 4e6:	4008      	ands	r0, r1
 4e8:	4318      	orrs	r0, r3
	((Pm *)hw)->PLCFG.reg = tmp;
 4ea:	7090      	strb	r0, [r2, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 4ec:	7993      	ldrb	r3, [r2, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 4ee:	2b00      	cmp	r3, #0
 4f0:	d0fc      	beq.n	4ec <_set_performance_level+0x22>
			;
	}
}
 4f2:	4770      	bx	lr

000004f4 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
 4f4:	b510      	push	{r4, lr}
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
 4f6:	4a08      	ldr	r2, [pc, #32]	; (518 <_get_i2cm_index+0x24>)
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
			return i;
 4f8:	2300      	movs	r3, #0
	if ((uint32_t)SERCOM5 == (uint32_t)hw) {
 4fa:	4290      	cmp	r0, r2
 4fc:	d00a      	beq.n	514 <_get_i2cm_index+0x20>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 4fe:	0380      	lsls	r0, r0, #14
		if (_i2cms[i].number == sercom_offset) {
 500:	0e00      	lsrs	r0, r0, #24
 502:	2805      	cmp	r0, #5
 504:	d006      	beq.n	514 <_get_i2cm_index+0x20>
		}
	}

	ASSERT(false);
 506:	4a05      	ldr	r2, [pc, #20]	; (51c <_get_i2cm_index+0x28>)
 508:	4905      	ldr	r1, [pc, #20]	; (520 <_get_i2cm_index+0x2c>)
 50a:	2000      	movs	r0, #0
 50c:	4b05      	ldr	r3, [pc, #20]	; (524 <_get_i2cm_index+0x30>)
 50e:	4798      	blx	r3
	return -1;
 510:	2301      	movs	r3, #1
 512:	425b      	negs	r3, r3
}
 514:	0018      	movs	r0, r3
 516:	bd10      	pop	{r4, pc}
 518:	43000400 	.word	0x43000400
 51c:	0000039b 	.word	0x0000039b
 520:	00000d60 	.word	0x00000d60
 524:	000003ed 	.word	0x000003ed

00000528 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
 528:	b570      	push	{r4, r5, r6, lr}
 52a:	0005      	movs	r5, r0
 52c:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
 52e:	0008      	movs	r0, r1
 530:	4b31      	ldr	r3, [pc, #196]	; (5f8 <_i2c_m_sync_init_impl+0xd0>)
 532:	4798      	blx	r3
 534:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
 536:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
 538:	07db      	lsls	r3, r3, #31
 53a:	d421      	bmi.n	580 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
 53c:	0043      	lsls	r3, r0, #1
 53e:	181b      	adds	r3, r3, r0
 540:	00db      	lsls	r3, r3, #3
 542:	4a2e      	ldr	r2, [pc, #184]	; (5fc <_i2c_m_sync_init_impl+0xd4>)
 544:	18d3      	adds	r3, r2, r3
 546:	6859      	ldr	r1, [r3, #4]
 548:	231c      	movs	r3, #28
 54a:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 54c:	2203      	movs	r2, #3
 54e:	69e3      	ldr	r3, [r4, #28]
 550:	421a      	tst	r2, r3
 552:	d1fc      	bne.n	54e <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
 554:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
 556:	079b      	lsls	r3, r3, #30
 558:	d50b      	bpl.n	572 <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
 55a:	6823      	ldr	r3, [r4, #0]
 55c:	2202      	movs	r2, #2
 55e:	4393      	bics	r3, r2
 560:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 562:	3201      	adds	r2, #1
 564:	69e3      	ldr	r3, [r4, #28]
 566:	421a      	tst	r2, r3
 568:	d1fc      	bne.n	564 <_i2c_m_sync_init_impl+0x3c>
 56a:	2202      	movs	r2, #2
 56c:	69e3      	ldr	r3, [r4, #28]
 56e:	421a      	tst	r2, r3
 570:	d1fc      	bne.n	56c <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
 572:	2301      	movs	r3, #1
 574:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
 576:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 578:	2203      	movs	r2, #3
 57a:	69e3      	ldr	r3, [r4, #28]
 57c:	421a      	tst	r2, r3
 57e:	d1fc      	bne.n	57a <_i2c_m_sync_init_impl+0x52>
 580:	2201      	movs	r2, #1
 582:	69e3      	ldr	r3, [r4, #28]
 584:	421a      	tst	r2, r3
 586:	d1fc      	bne.n	582 <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
 588:	0043      	lsls	r3, r0, #1
 58a:	181b      	adds	r3, r3, r0
 58c:	00db      	lsls	r3, r3, #3
 58e:	4a1b      	ldr	r2, [pc, #108]	; (5fc <_i2c_m_sync_init_impl+0xd4>)
 590:	18d3      	adds	r3, r2, r3
 592:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
 594:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 596:	2203      	movs	r2, #3
 598:	69e3      	ldr	r3, [r4, #28]
 59a:	421a      	tst	r2, r3
 59c:	d1fc      	bne.n	598 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
 59e:	0043      	lsls	r3, r0, #1
 5a0:	181b      	adds	r3, r3, r0
 5a2:	00db      	lsls	r3, r3, #3
 5a4:	4a15      	ldr	r2, [pc, #84]	; (5fc <_i2c_m_sync_init_impl+0xd4>)
 5a6:	18d3      	adds	r3, r2, r3
 5a8:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
 5aa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 5ac:	2204      	movs	r2, #4
 5ae:	69e3      	ldr	r3, [r4, #28]
 5b0:	421a      	tst	r2, r3
 5b2:	d1fc      	bne.n	5ae <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
 5b4:	0043      	lsls	r3, r0, #1
 5b6:	181b      	adds	r3, r3, r0
 5b8:	00db      	lsls	r3, r3, #3
 5ba:	4a10      	ldr	r2, [pc, #64]	; (5fc <_i2c_m_sync_init_impl+0xd4>)
 5bc:	18d3      	adds	r3, r2, r3
 5be:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
 5c0:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
 5c2:	0189      	lsls	r1, r1, #6
 5c4:	0f89      	lsrs	r1, r1, #30
 5c6:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
 5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
 5ca:	4e0d      	ldr	r6, [pc, #52]	; (600 <_i2c_m_sync_init_impl+0xd8>)
 5cc:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
 5ce:	2301      	movs	r3, #1
 5d0:	428b      	cmp	r3, r1
 5d2:	419b      	sbcs	r3, r3
 5d4:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
 5d6:	039b      	lsls	r3, r3, #14
 5d8:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
 5da:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 5dc:	2204      	movs	r2, #4
 5de:	69e3      	ldr	r3, [r4, #28]
 5e0:	421a      	tst	r2, r3
 5e2:	d1fc      	bne.n	5de <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
 5e4:	0043      	lsls	r3, r0, #1
 5e6:	1818      	adds	r0, r3, r0
 5e8:	00c0      	lsls	r0, r0, #3
 5ea:	4b04      	ldr	r3, [pc, #16]	; (5fc <_i2c_m_sync_init_impl+0xd4>)
 5ec:	1818      	adds	r0, r3, r0
 5ee:	8a43      	ldrh	r3, [r0, #18]
 5f0:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
 5f2:	2000      	movs	r0, #0
 5f4:	bd70      	pop	{r4, r5, r6, pc}
 5f6:	46c0      	nop			; (mov r8, r8)
 5f8:	000004f5 	.word	0x000004f5
 5fc:	00000d48 	.word	0x00000d48
 600:	ffffbfff 	.word	0xffffbfff

00000604 <_i2c_m_sync_init>:
{
 604:	b570      	push	{r4, r5, r6, lr}
 606:	0004      	movs	r4, r0
 608:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
 60a:	1e43      	subs	r3, r0, #1
 60c:	4198      	sbcs	r0, r3
 60e:	b2c0      	uxtb	r0, r0
 610:	4a04      	ldr	r2, [pc, #16]	; (624 <_i2c_m_sync_init+0x20>)
 612:	4905      	ldr	r1, [pc, #20]	; (628 <_i2c_m_sync_init+0x24>)
 614:	4b05      	ldr	r3, [pc, #20]	; (62c <_i2c_m_sync_init+0x28>)
 616:	4798      	blx	r3
	i2c_dev->hw = hw;
 618:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
 61a:	0029      	movs	r1, r5
 61c:	0020      	movs	r0, r4
 61e:	4b04      	ldr	r3, [pc, #16]	; (630 <_i2c_m_sync_init+0x2c>)
 620:	4798      	blx	r3
}
 622:	bd70      	pop	{r4, r5, r6, pc}
 624:	0000050a 	.word	0x0000050a
 628:	00000d60 	.word	0x00000d60
 62c:	000003ed 	.word	0x000003ed
 630:	00000529 	.word	0x00000529

00000634 <_i2c_m_sync_enable>:
{
 634:	b570      	push	{r4, r5, r6, lr}
 636:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
 638:	4d1a      	ldr	r5, [pc, #104]	; (6a4 <_i2c_m_sync_enable+0x70>)
 63a:	1e43      	subs	r3, r0, #1
 63c:	4198      	sbcs	r0, r3
 63e:	b2c0      	uxtb	r0, r0
 640:	4a19      	ldr	r2, [pc, #100]	; (6a8 <_i2c_m_sync_enable+0x74>)
 642:	0029      	movs	r1, r5
 644:	4e19      	ldr	r6, [pc, #100]	; (6ac <_i2c_m_sync_enable+0x78>)
 646:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
 648:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
 64a:	0020      	movs	r0, r4
 64c:	1e43      	subs	r3, r0, #1
 64e:	4198      	sbcs	r0, r3
 650:	b2c0      	uxtb	r0, r0
 652:	4a17      	ldr	r2, [pc, #92]	; (6b0 <_i2c_m_sync_enable+0x7c>)
 654:	0029      	movs	r1, r5
 656:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
 658:	6823      	ldr	r3, [r4, #0]
 65a:	2202      	movs	r2, #2
 65c:	4313      	orrs	r3, r2
 65e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 660:	3201      	adds	r2, #1
 662:	69e3      	ldr	r3, [r4, #28]
 664:	421a      	tst	r2, r3
 666:	d1fc      	bne.n	662 <_i2c_m_sync_enable+0x2e>
 668:	2504      	movs	r5, #4
 66a:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
 66c:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
 66e:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 670:	4910      	ldr	r1, [pc, #64]	; (6b4 <_i2c_m_sync_enable+0x80>)
 672:	69e3      	ldr	r3, [r4, #28]
 674:	421a      	tst	r2, r3
 676:	d1fc      	bne.n	672 <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
 678:	8b63      	ldrh	r3, [r4, #26]
 67a:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
 67c:	4003      	ands	r3, r0
 67e:	2b01      	cmp	r3, #1
 680:	d00a      	beq.n	698 <_i2c_m_sync_enable+0x64>
 682:	3901      	subs	r1, #1
		if (timeout <= 0) {
 684:	2900      	cmp	r1, #0
 686:	d1f4      	bne.n	672 <_i2c_m_sync_enable+0x3e>
 688:	3d01      	subs	r5, #1
			if (--timeout_attempt)
 68a:	2d00      	cmp	r5, #0
 68c:	d006      	beq.n	69c <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
 68e:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 690:	69e3      	ldr	r3, [r4, #28]
 692:	421a      	tst	r2, r3
 694:	d1fc      	bne.n	690 <_i2c_m_sync_enable+0x5c>
 696:	e7eb      	b.n	670 <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
 698:	2000      	movs	r0, #0
}
 69a:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
 69c:	2006      	movs	r0, #6
 69e:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
 6a0:	e7fb      	b.n	69a <_i2c_m_sync_enable+0x66>
 6a2:	46c0      	nop			; (mov r8, r8)
 6a4:	00000d60 	.word	0x00000d60
 6a8:	00000527 	.word	0x00000527
 6ac:	000003ed 	.word	0x000003ed
 6b0:	000005f7 	.word	0x000005f7
 6b4:	0000ffff 	.word	0x0000ffff

000006b8 <_i2c_m_sync_transfer>:
{
 6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 6ba:	46de      	mov	lr, fp
 6bc:	4657      	mov	r7, sl
 6be:	464e      	mov	r6, r9
 6c0:	4645      	mov	r5, r8
 6c2:	b5e0      	push	{r5, r6, r7, lr}
 6c4:	b083      	sub	sp, #12
 6c6:	0005      	movs	r5, r0
 6c8:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
 6ca:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
 6cc:	0006      	movs	r6, r0
 6ce:	1e73      	subs	r3, r6, #1
 6d0:	419e      	sbcs	r6, r3
 6d2:	b2f3      	uxtb	r3, r6
 6d4:	9301      	str	r3, [sp, #4]
 6d6:	4fb3      	ldr	r7, [pc, #716]	; (9a4 <STACK_SIZE+0x1a4>)
 6d8:	4ab3      	ldr	r2, [pc, #716]	; (9a8 <STACK_SIZE+0x1a8>)
 6da:	0039      	movs	r1, r7
 6dc:	0018      	movs	r0, r3
 6de:	4eb3      	ldr	r6, [pc, #716]	; (9ac <STACK_SIZE+0x1ac>)
 6e0:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
 6e2:	6928      	ldr	r0, [r5, #16]
 6e4:	1e43      	subs	r3, r0, #1
 6e6:	4198      	sbcs	r0, r3
 6e8:	b2c0      	uxtb	r0, r0
 6ea:	4ab1      	ldr	r2, [pc, #708]	; (9b0 <STACK_SIZE+0x1b0>)
 6ec:	0039      	movs	r1, r7
 6ee:	47b0      	blx	r6
	ASSERT(msg);
 6f0:	4640      	mov	r0, r8
 6f2:	1e43      	subs	r3, r0, #1
 6f4:	4198      	sbcs	r0, r3
 6f6:	b2c0      	uxtb	r0, r0
 6f8:	4aae      	ldr	r2, [pc, #696]	; (9b4 <STACK_SIZE+0x1b4>)
 6fa:	0039      	movs	r1, r7
 6fc:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
 6fe:	886b      	ldrh	r3, [r5, #2]
 700:	05db      	lsls	r3, r3, #23
 702:	d500      	bpl.n	706 <_i2c_m_sync_transfer+0x4e>
 704:	e225      	b.n	b52 <STACK_SIZE+0x352>
	msg->flags |= I2C_M_BUSY;
 706:	4643      	mov	r3, r8
 708:	885a      	ldrh	r2, [r3, #2]
 70a:	2380      	movs	r3, #128	; 0x80
 70c:	005b      	lsls	r3, r3, #1
 70e:	431a      	orrs	r2, r3
 710:	4641      	mov	r1, r8
 712:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
 714:	002a      	movs	r2, r5
 716:	c9c1      	ldmia	r1!, {r0, r6, r7}
 718:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
 71a:	6862      	ldr	r2, [r4, #4]
 71c:	4313      	orrs	r3, r2
 71e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 720:	2204      	movs	r2, #4
 722:	69e3      	ldr	r3, [r4, #28]
 724:	421a      	tst	r2, r3
 726:	d1fc      	bne.n	722 <_i2c_m_sync_transfer+0x6a>
	void *             hw    = i2c_dev->hw;
 728:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
 72a:	683b      	ldr	r3, [r7, #0]
 72c:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
 72e:	4aa2      	ldr	r2, [pc, #648]	; (9b8 <STACK_SIZE+0x1b8>)
 730:	499c      	ldr	r1, [pc, #624]	; (9a4 <STACK_SIZE+0x1a4>)
 732:	9801      	ldr	r0, [sp, #4]
 734:	4b9d      	ldr	r3, [pc, #628]	; (9ac <STACK_SIZE+0x1ac>)
 736:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
 738:	686b      	ldr	r3, [r5, #4]
 73a:	2b01      	cmp	r3, #1
 73c:	d05a      	beq.n	7f4 <_i2c_m_sync_transfer+0x13c>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
 73e:	687b      	ldr	r3, [r7, #4]
 740:	4a9e      	ldr	r2, [pc, #632]	; (9bc <STACK_SIZE+0x1bc>)
 742:	4013      	ands	r3, r2
 744:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 746:	2204      	movs	r2, #4
 748:	69fb      	ldr	r3, [r7, #28]
 74a:	421a      	tst	r2, r3
 74c:	d1fc      	bne.n	748 <_i2c_m_sync_transfer+0x90>
	if (msg->addr & I2C_M_TEN) {
 74e:	882b      	ldrh	r3, [r5, #0]
 750:	055a      	lsls	r2, r3, #21
 752:	d55c      	bpl.n	80e <STACK_SIZE+0xe>
		if (msg->flags & I2C_M_RD) {
 754:	886a      	ldrh	r2, [r5, #2]
 756:	07d2      	lsls	r2, r2, #31
 758:	d504      	bpl.n	764 <_i2c_m_sync_transfer+0xac>
			msg->flags |= I2C_M_TEN;
 75a:	886a      	ldrh	r2, [r5, #2]
 75c:	2180      	movs	r1, #128	; 0x80
 75e:	00c9      	lsls	r1, r1, #3
 760:	430a      	orrs	r2, r1
 762:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
 764:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
 766:	4996      	ldr	r1, [pc, #600]	; (9c0 <STACK_SIZE+0x1c0>)
 768:	4019      	ands	r1, r3
 76a:	2204      	movs	r2, #4
 76c:	69fb      	ldr	r3, [r7, #28]
 76e:	421a      	tst	r2, r3
 770:	d1fc      	bne.n	76c <_i2c_m_sync_transfer+0xb4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
 772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 774:	2280      	movs	r2, #128	; 0x80
 776:	01d2      	lsls	r2, r2, #7
 778:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
 77a:	2380      	movs	r3, #128	; 0x80
 77c:	021b      	lsls	r3, r3, #8
 77e:	4313      	orrs	r3, r2
 780:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
 782:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 784:	2204      	movs	r2, #4
 786:	69fb      	ldr	r3, [r7, #28]
 788:	421a      	tst	r2, r3
 78a:	d1fc      	bne.n	786 <_i2c_m_sync_transfer+0xce>
	void *   hw      = i2c_dev->hw;
 78c:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
 78e:	7e0b      	ldrb	r3, [r1, #24]
 790:	b2db      	uxtb	r3, r3
 792:	4a8c      	ldr	r2, [pc, #560]	; (9c4 <STACK_SIZE+0x1c4>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
 794:	2003      	movs	r0, #3
 796:	4218      	tst	r0, r3
 798:	d104      	bne.n	7a4 <_i2c_m_sync_transfer+0xec>
 79a:	7e0b      	ldrb	r3, [r1, #24]
 79c:	b2db      	uxtb	r3, r3
 79e:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
 7a0:	2a00      	cmp	r2, #0
 7a2:	d1f8      	bne.n	796 <_i2c_m_sync_transfer+0xde>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
 7a4:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 7a6:	2104      	movs	r1, #4
 7a8:	69fa      	ldr	r2, [r7, #28]
 7aa:	4211      	tst	r1, r2
 7ac:	d1fc      	bne.n	7a8 <_i2c_m_sync_transfer+0xf0>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
 7ae:	8b7a      	ldrh	r2, [r7, #26]
 7b0:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
 7b2:	07d9      	lsls	r1, r3, #31
 7b4:	d400      	bmi.n	7b8 <_i2c_m_sync_transfer+0x100>
 7b6:	e0a0      	b.n	8fa <STACK_SIZE+0xfa>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
 7b8:	0793      	lsls	r3, r2, #30
 7ba:	d53e      	bpl.n	83a <STACK_SIZE+0x3a>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
 7bc:	2301      	movs	r3, #1
 7be:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
 7c0:	886b      	ldrh	r3, [r5, #2]
 7c2:	2180      	movs	r1, #128	; 0x80
 7c4:	0149      	lsls	r1, r1, #5
 7c6:	430b      	orrs	r3, r1
 7c8:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
 7ca:	886b      	ldrh	r3, [r5, #2]
 7cc:	497e      	ldr	r1, [pc, #504]	; (9c8 <STACK_SIZE+0x1c8>)
 7ce:	400b      	ands	r3, r1
 7d0:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
 7d2:	2001      	movs	r0, #1
 7d4:	0003      	movs	r3, r0
 7d6:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
 7d8:	4258      	negs	r0, r3
 7da:	4158      	adcs	r0, r3
 7dc:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
 7de:	886b      	ldrh	r3, [r5, #2]
 7e0:	4a79      	ldr	r2, [pc, #484]	; (9c8 <STACK_SIZE+0x1c8>)
 7e2:	4013      	ands	r3, r2
 7e4:	806b      	strh	r3, [r5, #2]
}
 7e6:	b003      	add	sp, #12
 7e8:	bc3c      	pop	{r2, r3, r4, r5}
 7ea:	4690      	mov	r8, r2
 7ec:	4699      	mov	r9, r3
 7ee:	46a2      	mov	sl, r4
 7f0:	46ab      	mov	fp, r5
 7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
 7f4:	464b      	mov	r3, r9
 7f6:	011b      	lsls	r3, r3, #4
 7f8:	d5a1      	bpl.n	73e <_i2c_m_sync_transfer+0x86>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 7fa:	687a      	ldr	r2, [r7, #4]
 7fc:	2380      	movs	r3, #128	; 0x80
 7fe:	02db      	lsls	r3, r3, #11
 800:	4313      	orrs	r3, r2
 802:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 804:	2204      	movs	r2, #4
 806:	69fb      	ldr	r3, [r7, #28]
 808:	421a      	tst	r2, r3
 80a:	d1fc      	bne.n	806 <STACK_SIZE+0x6>
 80c:	e79f      	b.n	74e <_i2c_m_sync_transfer+0x96>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
 80e:	886a      	ldrh	r2, [r5, #2]
 810:	005b      	lsls	r3, r3, #1
 812:	21ff      	movs	r1, #255	; 0xff
 814:	400b      	ands	r3, r1
 816:	39fe      	subs	r1, #254	; 0xfe
 818:	4011      	ands	r1, r2
 81a:	4319      	orrs	r1, r3
 81c:	2204      	movs	r2, #4
 81e:	69fb      	ldr	r3, [r7, #28]
 820:	421a      	tst	r2, r3
 822:	d1fc      	bne.n	81e <STACK_SIZE+0x1e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
 824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
 826:	2280      	movs	r2, #128	; 0x80
 828:	01d2      	lsls	r2, r2, #7
 82a:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
 82c:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
 82e:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 830:	2204      	movs	r2, #4
 832:	69fb      	ldr	r3, [r7, #28]
 834:	421a      	tst	r2, r3
 836:	d1fc      	bne.n	832 <STACK_SIZE+0x32>
 838:	e7a8      	b.n	78c <_i2c_m_sync_transfer+0xd4>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
 83a:	0753      	lsls	r3, r2, #29
 83c:	d41b      	bmi.n	876 <STACK_SIZE+0x76>
			if (msg->flags & I2C_M_TEN) {
 83e:	886b      	ldrh	r3, [r5, #2]
 840:	055b      	lsls	r3, r3, #21
 842:	d535      	bpl.n	8b0 <STACK_SIZE+0xb0>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
 844:	882b      	ldrh	r3, [r5, #0]
 846:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
 848:	2106      	movs	r1, #6
 84a:	4019      	ands	r1, r3
 84c:	2204      	movs	r2, #4
 84e:	69fb      	ldr	r3, [r7, #28]
 850:	421a      	tst	r2, r3
 852:	d1fc      	bne.n	84e <STACK_SIZE+0x4e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
 854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 856:	2280      	movs	r2, #128	; 0x80
 858:	01d2      	lsls	r2, r2, #7
 85a:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
 85c:	22f1      	movs	r2, #241	; 0xf1
 85e:	4313      	orrs	r3, r2
 860:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
 862:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 864:	3aed      	subs	r2, #237	; 0xed
 866:	69fb      	ldr	r3, [r7, #28]
 868:	421a      	tst	r2, r3
 86a:	d1fc      	bne.n	866 <STACK_SIZE+0x66>
				msg->flags &= ~I2C_M_TEN;
 86c:	886b      	ldrh	r3, [r5, #2]
 86e:	4a57      	ldr	r2, [pc, #348]	; (9cc <STACK_SIZE+0x1cc>)
 870:	4013      	ands	r3, r2
 872:	806b      	strh	r3, [r5, #2]
 874:	e066      	b.n	944 <STACK_SIZE+0x144>
				if (msg->len > 0) {
 876:	686b      	ldr	r3, [r5, #4]
 878:	2b00      	cmp	r3, #0
 87a:	dd04      	ble.n	886 <STACK_SIZE+0x86>
					msg->flags |= I2C_M_FAIL;
 87c:	886b      	ldrh	r3, [r5, #2]
 87e:	2280      	movs	r2, #128	; 0x80
 880:	0152      	lsls	r2, r2, #5
 882:	4313      	orrs	r3, r2
 884:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
 886:	886b      	ldrh	r3, [r5, #2]
 888:	b21b      	sxth	r3, r3
 88a:	2b00      	cmp	r3, #0
 88c:	db06      	blt.n	89c <STACK_SIZE+0x9c>
				msg->flags &= ~I2C_M_BUSY;
 88e:	886b      	ldrh	r3, [r5, #2]
 890:	4a4d      	ldr	r2, [pc, #308]	; (9c8 <STACK_SIZE+0x1c8>)
 892:	4013      	ands	r3, r2
 894:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
 896:	2002      	movs	r0, #2
 898:	4240      	negs	r0, r0
 89a:	e7a0      	b.n	7de <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 89c:	687a      	ldr	r2, [r7, #4]
 89e:	23c0      	movs	r3, #192	; 0xc0
 8a0:	029b      	lsls	r3, r3, #10
 8a2:	4313      	orrs	r3, r2
 8a4:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 8a6:	2304      	movs	r3, #4
 8a8:	69fa      	ldr	r2, [r7, #28]
 8aa:	4213      	tst	r3, r2
 8ac:	d1fc      	bne.n	8a8 <STACK_SIZE+0xa8>
 8ae:	e7ee      	b.n	88e <STACK_SIZE+0x8e>
			if (msg->len == 0) {
 8b0:	686b      	ldr	r3, [r5, #4]
 8b2:	2b00      	cmp	r3, #0
 8b4:	d112      	bne.n	8dc <STACK_SIZE+0xdc>
				if (msg->flags & I2C_M_STOP) {
 8b6:	886b      	ldrh	r3, [r5, #2]
 8b8:	b21b      	sxth	r3, r3
 8ba:	2b00      	cmp	r3, #0
 8bc:	db04      	blt.n	8c8 <STACK_SIZE+0xc8>
				msg->flags &= ~I2C_M_BUSY;
 8be:	886b      	ldrh	r3, [r5, #2]
 8c0:	4a41      	ldr	r2, [pc, #260]	; (9c8 <STACK_SIZE+0x1c8>)
 8c2:	4013      	ands	r3, r2
 8c4:	806b      	strh	r3, [r5, #2]
 8c6:	e03d      	b.n	944 <STACK_SIZE+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 8c8:	687a      	ldr	r2, [r7, #4]
 8ca:	23c0      	movs	r3, #192	; 0xc0
 8cc:	029b      	lsls	r3, r3, #10
 8ce:	4313      	orrs	r3, r2
 8d0:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 8d2:	2204      	movs	r2, #4
 8d4:	69fb      	ldr	r3, [r7, #28]
 8d6:	421a      	tst	r2, r3
 8d8:	d1fc      	bne.n	8d4 <STACK_SIZE+0xd4>
 8da:	e7f0      	b.n	8be <STACK_SIZE+0xbe>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
 8dc:	68ab      	ldr	r3, [r5, #8]
 8de:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
 8e0:	2328      	movs	r3, #40	; 0x28
 8e2:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 8e4:	2204      	movs	r2, #4
 8e6:	69fb      	ldr	r3, [r7, #28]
 8e8:	421a      	tst	r2, r3
 8ea:	d1fc      	bne.n	8e6 <STACK_SIZE+0xe6>
				msg->buffer++;
 8ec:	68ab      	ldr	r3, [r5, #8]
 8ee:	3301      	adds	r3, #1
 8f0:	60ab      	str	r3, [r5, #8]
				msg->len--;
 8f2:	686b      	ldr	r3, [r5, #4]
 8f4:	3b01      	subs	r3, #1
 8f6:	606b      	str	r3, [r5, #4]
 8f8:	e024      	b.n	944 <STACK_SIZE+0x144>
	} else if (flags & SB_FLAG) {
 8fa:	079b      	lsls	r3, r3, #30
 8fc:	d522      	bpl.n	944 <STACK_SIZE+0x144>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
 8fe:	686b      	ldr	r3, [r5, #4]
 900:	2b00      	cmp	r3, #0
 902:	d040      	beq.n	986 <STACK_SIZE+0x186>
 904:	0752      	lsls	r2, r2, #29
 906:	d43e      	bmi.n	986 <STACK_SIZE+0x186>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
 908:	0136      	lsls	r6, r6, #4
 90a:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
 90c:	3b01      	subs	r3, #1
 90e:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
 910:	2b00      	cmp	r3, #0
 912:	d000      	beq.n	916 <STACK_SIZE+0x116>
 914:	e120      	b.n	b58 <STACK_SIZE+0x358>
 916:	2e00      	cmp	r6, #0
 918:	d100      	bne.n	91c <STACK_SIZE+0x11c>
 91a:	e123      	b.n	b64 <STACK_SIZE+0x364>
				if (msg->flags & I2C_M_STOP) {
 91c:	886b      	ldrh	r3, [r5, #2]
 91e:	b21b      	sxth	r3, r3
 920:	2b00      	cmp	r3, #0
 922:	db1d      	blt.n	960 <STACK_SIZE+0x160>
				msg->flags &= ~I2C_M_BUSY;
 924:	886b      	ldrh	r3, [r5, #2]
 926:	4a28      	ldr	r2, [pc, #160]	; (9c8 <STACK_SIZE+0x1c8>)
 928:	4013      	ands	r3, r2
 92a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
 92c:	68a9      	ldr	r1, [r5, #8]
 92e:	1c4b      	adds	r3, r1, #1
 930:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 932:	2204      	movs	r2, #4
 934:	69fb      	ldr	r3, [r7, #28]
 936:	421a      	tst	r2, r3
 938:	d1fc      	bne.n	934 <STACK_SIZE+0x134>
	return ((Sercom *)hw)->I2CM.DATA.reg;
 93a:	2328      	movs	r3, #40	; 0x28
 93c:	5cfb      	ldrb	r3, [r7, r3]
 93e:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
 940:	2302      	movs	r3, #2
 942:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
 944:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
 946:	2380      	movs	r3, #128	; 0x80
 948:	005b      	lsls	r3, r3, #1
 94a:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
 94c:	2103      	movs	r1, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 94e:	2204      	movs	r2, #4
	if (flags & MB_FLAG) {
 950:	3bff      	subs	r3, #255	; 0xff
 952:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
 954:	3301      	adds	r3, #1
 956:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
 958:	3326      	adds	r3, #38	; 0x26
 95a:	469b      	mov	fp, r3
 95c:	9601      	str	r6, [sp, #4]
 95e:	e0c3      	b.n	ae8 <STACK_SIZE+0x2e8>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
 960:	687b      	ldr	r3, [r7, #4]
 962:	4a19      	ldr	r2, [pc, #100]	; (9c8 <STACK_SIZE+0x1c8>)
 964:	4013      	ands	r3, r2
 966:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 968:	3206      	adds	r2, #6
 96a:	32ff      	adds	r2, #255	; 0xff
 96c:	69fb      	ldr	r3, [r7, #28]
 96e:	421a      	tst	r2, r3
 970:	d1fc      	bne.n	96c <STACK_SIZE+0x16c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 972:	687a      	ldr	r2, [r7, #4]
 974:	23c0      	movs	r3, #192	; 0xc0
 976:	029b      	lsls	r3, r3, #10
 978:	4313      	orrs	r3, r2
 97a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 97c:	2204      	movs	r2, #4
 97e:	69fb      	ldr	r3, [r7, #28]
 980:	421a      	tst	r2, r3
 982:	d1fc      	bne.n	97e <STACK_SIZE+0x17e>
 984:	e7ce      	b.n	924 <STACK_SIZE+0x124>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
 986:	2302      	movs	r3, #2
 988:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
 98a:	2002      	movs	r0, #2
 98c:	4240      	negs	r0, r0
 98e:	e726      	b.n	7de <_i2c_m_sync_transfer+0x126>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 990:	6862      	ldr	r2, [r4, #4]
 992:	23c0      	movs	r3, #192	; 0xc0
 994:	029b      	lsls	r3, r3, #10
 996:	4313      	orrs	r3, r2
 998:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 99a:	2204      	movs	r2, #4
 99c:	69e3      	ldr	r3, [r4, #28]
 99e:	421a      	tst	r2, r3
 9a0:	d1fc      	bne.n	99c <STACK_SIZE+0x19c>
 9a2:	e0b6      	b.n	b12 <STACK_SIZE+0x312>
 9a4:	00000d60 	.word	0x00000d60
 9a8:	000005c2 	.word	0x000005c2
 9ac:	000003ed 	.word	0x000003ed
 9b0:	000005c3 	.word	0x000005c3
 9b4:	000005c4 	.word	0x000005c4
 9b8:	00000597 	.word	0x00000597
 9bc:	fffbffff 	.word	0xfffbffff
 9c0:	000007fe 	.word	0x000007fe
 9c4:	0000ffff 	.word	0x0000ffff
 9c8:	fffffeff 	.word	0xfffffeff
 9cc:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
 9d0:	4202      	tst	r2, r0
 9d2:	d11b      	bne.n	a0c <STACK_SIZE+0x20c>
			if (msg->flags & I2C_M_TEN) {
 9d4:	886b      	ldrh	r3, [r5, #2]
 9d6:	055b      	lsls	r3, r3, #21
 9d8:	d535      	bpl.n	a46 <STACK_SIZE+0x246>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
 9da:	882b      	ldrh	r3, [r5, #0]
 9dc:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
 9de:	2006      	movs	r0, #6
 9e0:	4018      	ands	r0, r3
 9e2:	69e3      	ldr	r3, [r4, #28]
 9e4:	421a      	tst	r2, r3
 9e6:	d1fc      	bne.n	9e2 <STACK_SIZE+0x1e2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
 9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 9ea:	2680      	movs	r6, #128	; 0x80
 9ec:	01f6      	lsls	r6, r6, #7
 9ee:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
 9f0:	26f1      	movs	r6, #241	; 0xf1
 9f2:	4333      	orrs	r3, r6
 9f4:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
 9f6:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 9f8:	69e3      	ldr	r3, [r4, #28]
 9fa:	421a      	tst	r2, r3
 9fc:	d1fc      	bne.n	9f8 <STACK_SIZE+0x1f8>
				msg->flags &= ~I2C_M_TEN;
 9fe:	886b      	ldrh	r3, [r5, #2]
 a00:	4878      	ldr	r0, [pc, #480]	; (be4 <STACK_SIZE+0x3e4>)
 a02:	4003      	ands	r3, r0
 a04:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
 a06:	2300      	movs	r3, #0
 a08:	9301      	str	r3, [sp, #4]
 a0a:	e06d      	b.n	ae8 <STACK_SIZE+0x2e8>
				if (msg->len > 0) {
 a0c:	686b      	ldr	r3, [r5, #4]
 a0e:	2b00      	cmp	r3, #0
 a10:	dd04      	ble.n	a1c <STACK_SIZE+0x21c>
					msg->flags |= I2C_M_FAIL;
 a12:	886b      	ldrh	r3, [r5, #2]
 a14:	2080      	movs	r0, #128	; 0x80
 a16:	0140      	lsls	r0, r0, #5
 a18:	4303      	orrs	r3, r0
 a1a:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
 a1c:	886b      	ldrh	r3, [r5, #2]
 a1e:	b21b      	sxth	r3, r3
 a20:	2b00      	cmp	r3, #0
 a22:	db07      	blt.n	a34 <STACK_SIZE+0x234>
				msg->flags &= ~I2C_M_BUSY;
 a24:	886b      	ldrh	r3, [r5, #2]
 a26:	4870      	ldr	r0, [pc, #448]	; (be8 <STACK_SIZE+0x3e8>)
 a28:	4003      	ands	r3, r0
 a2a:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
 a2c:	2302      	movs	r3, #2
 a2e:	425b      	negs	r3, r3
 a30:	9301      	str	r3, [sp, #4]
 a32:	e059      	b.n	ae8 <STACK_SIZE+0x2e8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 a34:	6860      	ldr	r0, [r4, #4]
 a36:	23c0      	movs	r3, #192	; 0xc0
 a38:	029b      	lsls	r3, r3, #10
 a3a:	4303      	orrs	r3, r0
 a3c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 a3e:	69e3      	ldr	r3, [r4, #28]
 a40:	421a      	tst	r2, r3
 a42:	d1fc      	bne.n	a3e <STACK_SIZE+0x23e>
 a44:	e7ee      	b.n	a24 <STACK_SIZE+0x224>
			if (msg->len == 0) {
 a46:	686b      	ldr	r3, [r5, #4]
 a48:	2b00      	cmp	r3, #0
 a4a:	d113      	bne.n	a74 <STACK_SIZE+0x274>
				if (msg->flags & I2C_M_STOP) {
 a4c:	886b      	ldrh	r3, [r5, #2]
 a4e:	b21b      	sxth	r3, r3
 a50:	2b00      	cmp	r3, #0
 a52:	db06      	blt.n	a62 <STACK_SIZE+0x262>
				msg->flags &= ~I2C_M_BUSY;
 a54:	886b      	ldrh	r3, [r5, #2]
 a56:	4864      	ldr	r0, [pc, #400]	; (be8 <STACK_SIZE+0x3e8>)
 a58:	4003      	ands	r3, r0
 a5a:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
 a5c:	2300      	movs	r3, #0
 a5e:	9301      	str	r3, [sp, #4]
 a60:	e042      	b.n	ae8 <STACK_SIZE+0x2e8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 a62:	6860      	ldr	r0, [r4, #4]
 a64:	23c0      	movs	r3, #192	; 0xc0
 a66:	029b      	lsls	r3, r3, #10
 a68:	4303      	orrs	r3, r0
 a6a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 a6c:	69e3      	ldr	r3, [r4, #28]
 a6e:	421a      	tst	r2, r3
 a70:	d1fc      	bne.n	a6c <STACK_SIZE+0x26c>
 a72:	e7ef      	b.n	a54 <STACK_SIZE+0x254>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
 a74:	68ab      	ldr	r3, [r5, #8]
 a76:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
 a78:	4658      	mov	r0, fp
 a7a:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 a7c:	69e3      	ldr	r3, [r4, #28]
 a7e:	421a      	tst	r2, r3
 a80:	d1fc      	bne.n	a7c <STACK_SIZE+0x27c>
				msg->buffer++;
 a82:	68ab      	ldr	r3, [r5, #8]
 a84:	3301      	adds	r3, #1
 a86:	60ab      	str	r3, [r5, #8]
				msg->len--;
 a88:	686b      	ldr	r3, [r5, #4]
 a8a:	3b01      	subs	r3, #1
 a8c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
 a8e:	2300      	movs	r3, #0
 a90:	9301      	str	r3, [sp, #4]
 a92:	e029      	b.n	ae8 <STACK_SIZE+0x2e8>
	return I2C_OK;
 a94:	2600      	movs	r6, #0
 a96:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
 a98:	464e      	mov	r6, r9
 a9a:	421e      	tst	r6, r3
 a9c:	d024      	beq.n	ae8 <STACK_SIZE+0x2e8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
 a9e:	686b      	ldr	r3, [r5, #4]
 aa0:	2b00      	cmp	r3, #0
 aa2:	d04d      	beq.n	b40 <STACK_SIZE+0x340>
 aa4:	4202      	tst	r2, r0
 aa6:	d14b      	bne.n	b40 <STACK_SIZE+0x340>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
 aa8:	0eff      	lsrs	r7, r7, #27
 aaa:	4660      	mov	r0, ip
 aac:	4007      	ands	r7, r0
			msg->len--;
 aae:	3b01      	subs	r3, #1
 ab0:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
 ab2:	2b00      	cmp	r3, #0
 ab4:	d000      	beq.n	ab8 <STACK_SIZE+0x2b8>
 ab6:	e082      	b.n	bbe <STACK_SIZE+0x3be>
 ab8:	2f00      	cmp	r7, #0
 aba:	d100      	bne.n	abe <STACK_SIZE+0x2be>
 abc:	e085      	b.n	bca <STACK_SIZE+0x3ca>
				if (msg->flags & I2C_M_STOP) {
 abe:	886b      	ldrh	r3, [r5, #2]
 ac0:	b21b      	sxth	r3, r3
 ac2:	2b00      	cmp	r3, #0
 ac4:	db2c      	blt.n	b20 <STACK_SIZE+0x320>
				msg->flags &= ~I2C_M_BUSY;
 ac6:	886b      	ldrh	r3, [r5, #2]
 ac8:	4847      	ldr	r0, [pc, #284]	; (be8 <STACK_SIZE+0x3e8>)
 aca:	4003      	ands	r3, r0
 acc:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
 ace:	68a8      	ldr	r0, [r5, #8]
 ad0:	1c43      	adds	r3, r0, #1
 ad2:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 ad4:	69e3      	ldr	r3, [r4, #28]
 ad6:	421a      	tst	r2, r3
 ad8:	d1fc      	bne.n	ad4 <STACK_SIZE+0x2d4>
	return ((Sercom *)hw)->I2CM.DATA.reg;
 ada:	465b      	mov	r3, fp
 adc:	5ce3      	ldrb	r3, [r4, r3]
 ade:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
 ae0:	464b      	mov	r3, r9
 ae2:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
 ae4:	2300      	movs	r3, #0
 ae6:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
 ae8:	886b      	ldrh	r3, [r5, #2]
 aea:	4650      	mov	r0, sl
 aec:	4203      	tst	r3, r0
 aee:	d02d      	beq.n	b4c <STACK_SIZE+0x34c>
	void *   hw      = i2c_dev->hw;
 af0:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
 af2:	7e33      	ldrb	r3, [r6, #24]
 af4:	b2db      	uxtb	r3, r3
 af6:	483d      	ldr	r0, [pc, #244]	; (bec <STACK_SIZE+0x3ec>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
 af8:	4219      	tst	r1, r3
 afa:	d141      	bne.n	b80 <STACK_SIZE+0x380>
 afc:	7e33      	ldrb	r3, [r6, #24]
 afe:	b2db      	uxtb	r3, r3
 b00:	3801      	subs	r0, #1
		if (timeout-- == 0) {
 b02:	2800      	cmp	r0, #0
 b04:	d1f8      	bne.n	af8 <STACK_SIZE+0x2f8>
			if (msg->flags & I2C_M_STOP) {
 b06:	4643      	mov	r3, r8
 b08:	885b      	ldrh	r3, [r3, #2]
 b0a:	b21b      	sxth	r3, r3
 b0c:	2b00      	cmp	r3, #0
 b0e:	da00      	bge.n	b12 <STACK_SIZE+0x312>
 b10:	e73e      	b.n	990 <STACK_SIZE+0x190>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
 b12:	886b      	ldrh	r3, [r5, #2]
 b14:	4a34      	ldr	r2, [pc, #208]	; (be8 <STACK_SIZE+0x3e8>)
 b16:	4013      	ands	r3, r2
 b18:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
 b1a:	2005      	movs	r0, #5
 b1c:	4240      	negs	r0, r0
			return ret;
 b1e:	e662      	b.n	7e6 <_i2c_m_sync_transfer+0x12e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
 b20:	6863      	ldr	r3, [r4, #4]
 b22:	4831      	ldr	r0, [pc, #196]	; (be8 <STACK_SIZE+0x3e8>)
 b24:	4003      	ands	r3, r0
 b26:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 b28:	69e3      	ldr	r3, [r4, #28]
 b2a:	421a      	tst	r2, r3
 b2c:	d1fc      	bne.n	b28 <STACK_SIZE+0x328>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
 b2e:	6860      	ldr	r0, [r4, #4]
 b30:	23c0      	movs	r3, #192	; 0xc0
 b32:	029b      	lsls	r3, r3, #10
 b34:	4303      	orrs	r3, r0
 b36:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 b38:	69e3      	ldr	r3, [r4, #28]
 b3a:	421a      	tst	r2, r3
 b3c:	d1fc      	bne.n	b38 <STACK_SIZE+0x338>
 b3e:	e7c2      	b.n	ac6 <STACK_SIZE+0x2c6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
 b40:	464b      	mov	r3, r9
 b42:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
 b44:	2302      	movs	r3, #2
 b46:	425b      	negs	r3, r3
 b48:	9301      	str	r3, [sp, #4]
 b4a:	e7cd      	b.n	ae8 <STACK_SIZE+0x2e8>
 b4c:	9e01      	ldr	r6, [sp, #4]
 b4e:	0030      	movs	r0, r6
 b50:	e649      	b.n	7e6 <_i2c_m_sync_transfer+0x12e>
		return I2C_ERR_BUSY;
 b52:	2006      	movs	r0, #6
 b54:	4240      	negs	r0, r0
 b56:	e646      	b.n	7e6 <_i2c_m_sync_transfer+0x12e>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
 b58:	2b01      	cmp	r3, #1
 b5a:	d000      	beq.n	b5e <STACK_SIZE+0x35e>
 b5c:	e6e6      	b.n	92c <STACK_SIZE+0x12c>
 b5e:	2e00      	cmp	r6, #0
 b60:	d100      	bne.n	b64 <STACK_SIZE+0x364>
 b62:	e6e3      	b.n	92c <STACK_SIZE+0x12c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 b64:	687a      	ldr	r2, [r7, #4]
 b66:	2380      	movs	r3, #128	; 0x80
 b68:	02db      	lsls	r3, r3, #11
 b6a:	4313      	orrs	r3, r2
 b6c:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 b6e:	2204      	movs	r2, #4
 b70:	69fb      	ldr	r3, [r7, #28]
 b72:	421a      	tst	r2, r3
 b74:	d1fc      	bne.n	b70 <STACK_SIZE+0x370>
			if (msg->len == 0) {
 b76:	686b      	ldr	r3, [r5, #4]
 b78:	2b00      	cmp	r3, #0
 b7a:	d100      	bne.n	b7e <STACK_SIZE+0x37e>
 b7c:	e6ce      	b.n	91c <STACK_SIZE+0x11c>
 b7e:	e6d5      	b.n	92c <STACK_SIZE+0x12c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
 b80:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 b82:	69e0      	ldr	r0, [r4, #28]
 b84:	4202      	tst	r2, r0
 b86:	d1fc      	bne.n	b82 <STACK_SIZE+0x382>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
 b88:	8b60      	ldrh	r0, [r4, #26]
 b8a:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
 b8c:	4666      	mov	r6, ip
 b8e:	421e      	tst	r6, r3
 b90:	d100      	bne.n	b94 <STACK_SIZE+0x394>
 b92:	e77f      	b.n	a94 <STACK_SIZE+0x294>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
 b94:	464b      	mov	r3, r9
 b96:	4203      	tst	r3, r0
 b98:	d100      	bne.n	b9c <STACK_SIZE+0x39c>
 b9a:	e719      	b.n	9d0 <STACK_SIZE+0x1d0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
 b9c:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
 b9e:	886b      	ldrh	r3, [r5, #2]
 ba0:	2680      	movs	r6, #128	; 0x80
 ba2:	0176      	lsls	r6, r6, #5
 ba4:	4333      	orrs	r3, r6
 ba6:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
 ba8:	886b      	ldrh	r3, [r5, #2]
 baa:	4e0f      	ldr	r6, [pc, #60]	; (be8 <STACK_SIZE+0x3e8>)
 bac:	4033      	ands	r3, r6
 bae:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
 bb0:	4663      	mov	r3, ip
 bb2:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
 bb4:	4246      	negs	r6, r0
 bb6:	4146      	adcs	r6, r0
 bb8:	1f73      	subs	r3, r6, #5
 bba:	9301      	str	r3, [sp, #4]
 bbc:	e794      	b.n	ae8 <STACK_SIZE+0x2e8>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
 bbe:	2b01      	cmp	r3, #1
 bc0:	d000      	beq.n	bc4 <STACK_SIZE+0x3c4>
 bc2:	e784      	b.n	ace <STACK_SIZE+0x2ce>
 bc4:	2f00      	cmp	r7, #0
 bc6:	d100      	bne.n	bca <STACK_SIZE+0x3ca>
 bc8:	e781      	b.n	ace <STACK_SIZE+0x2ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
 bca:	6860      	ldr	r0, [r4, #4]
 bcc:	2380      	movs	r3, #128	; 0x80
 bce:	02db      	lsls	r3, r3, #11
 bd0:	4303      	orrs	r3, r0
 bd2:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
 bd4:	69e3      	ldr	r3, [r4, #28]
 bd6:	421a      	tst	r2, r3
 bd8:	d1fc      	bne.n	bd4 <STACK_SIZE+0x3d4>
			if (msg->len == 0) {
 bda:	686b      	ldr	r3, [r5, #4]
 bdc:	2b00      	cmp	r3, #0
 bde:	d100      	bne.n	be2 <STACK_SIZE+0x3e2>
 be0:	e76d      	b.n	abe <STACK_SIZE+0x2be>
 be2:	e774      	b.n	ace <STACK_SIZE+0x2ce>
 be4:	fffffbff 	.word	0xfffffbff
 be8:	fffffeff 	.word	0xfffffeff
 bec:	0000ffff 	.word	0x0000ffff

00000bf0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
 bf0:	4b02      	ldr	r3, [pc, #8]	; (bfc <_delay_init+0xc>)
 bf2:	4a03      	ldr	r2, [pc, #12]	; (c00 <_delay_init+0x10>)
 bf4:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
 bf6:	2205      	movs	r2, #5
 bf8:	601a      	str	r2, [r3, #0]
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
	_system_time_init(hw);
}
 bfa:	4770      	bx	lr
 bfc:	e000e010 	.word	0xe000e010
 c00:	00ffffff 	.word	0x00ffffff

00000c04 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
 c04:	b570      	push	{r4, r5, r6, lr}
	(void)hw;
	uint8_t  n   = cycles >> 24;
 c06:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
 c08:	1e5e      	subs	r6, r3, #1
 c0a:	b2f6      	uxtb	r6, r6
 c0c:	2b00      	cmp	r3, #0
 c0e:	d013      	beq.n	c38 <_delay_cycles+0x34>
 c10:	0034      	movs	r4, r6
		SysTick->LOAD = 0xFFFFFF;
 c12:	4a0e      	ldr	r2, [pc, #56]	; (c4c <_delay_cycles+0x48>)
 c14:	4d0e      	ldr	r5, [pc, #56]	; (c50 <_delay_cycles+0x4c>)
		SysTick->VAL  = 0xFFFFFF;
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 c16:	2080      	movs	r0, #128	; 0x80
 c18:	0240      	lsls	r0, r0, #9
		SysTick->LOAD = 0xFFFFFF;
 c1a:	6055      	str	r5, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
 c1c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 c1e:	6813      	ldr	r3, [r2, #0]
 c20:	4203      	tst	r3, r0
 c22:	d0fc      	beq.n	c1e <_delay_cycles+0x1a>
	while (n--) {
 c24:	3c01      	subs	r4, #1
 c26:	b2e4      	uxtb	r4, r4
 c28:	2cff      	cmp	r4, #255	; 0xff
 c2a:	d1f6      	bne.n	c1a <_delay_cycles+0x16>
 c2c:	0633      	lsls	r3, r6, #24
 c2e:	1af6      	subs	r6, r6, r3
 c30:	4b08      	ldr	r3, [pc, #32]	; (c54 <_delay_cycles+0x50>)
 c32:	469c      	mov	ip, r3
 c34:	4461      	add	r1, ip
 c36:	1871      	adds	r1, r6, r1
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
 c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <_delay_cycles+0x48>)
 c3a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
 c3c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 c3e:	0019      	movs	r1, r3
 c40:	2280      	movs	r2, #128	; 0x80
 c42:	0252      	lsls	r2, r2, #9
 c44:	680b      	ldr	r3, [r1, #0]
 c46:	4213      	tst	r3, r2
 c48:	d0fc      	beq.n	c44 <_delay_cycles+0x40>
		;
}
 c4a:	bd70      	pop	{r4, r5, r6, pc}
 c4c:	e000e010 	.word	0xe000e010
 c50:	00ffffff 	.word	0x00ffffff
 c54:	ff000001 	.word	0xff000001

00000c58 <main>:
#include "driver_examples.h"
#include "driver_init.h"
#include "utils.h"

int main(void)
{
 c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 c5a:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 c5c:	4b14      	ldr	r3, [pc, #80]	; (cb0 <main+0x58>)
 c5e:	4798      	blx	r3

	/* Replace with your application code */
	while (1) {
			struct io_descriptor *I2C_0_io;

			i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
 c60:	4d14      	ldr	r5, [pc, #80]	; (cb4 <main+0x5c>)
 c62:	4f15      	ldr	r7, [pc, #84]	; (cb8 <main+0x60>)
			i2c_m_sync_enable(&I2C_0);
 c64:	4e15      	ldr	r6, [pc, #84]	; (cbc <main+0x64>)
			i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
 c66:	a901      	add	r1, sp, #4
 c68:	0028      	movs	r0, r5
 c6a:	47b8      	blx	r7
			i2c_m_sync_enable(&I2C_0);
 c6c:	0028      	movs	r0, r5
 c6e:	47b0      	blx	r6
			i2c_m_sync_set_slaveaddr(&I2C_0, 0x6B, I2C_M_SEVEN);//IC address; BQ25155: 
 c70:	2280      	movs	r2, #128	; 0x80
 c72:	0112      	lsls	r2, r2, #4
 c74:	216b      	movs	r1, #107	; 0x6b
 c76:	0028      	movs	r0, r5
 c78:	4b11      	ldr	r3, [pc, #68]	; (cc0 <main+0x68>)
 c7a:	4798      	blx	r3
			//io_write(I2C_0_io, (uint8_t *)"Hello World!", 12);
			
			uint8_t reg_addr = 0x6F;
 c7c:	466b      	mov	r3, sp
 c7e:	1c99      	adds	r1, r3, #2
 c80:	236f      	movs	r3, #111	; 0x6f
 c82:	700b      	strb	r3, [r1, #0]
			uint8_t reg_value = 0x00; //expect 0x35 on reset (53 dec)
 c84:	466b      	mov	r3, sp
 c86:	1cdc      	adds	r4, r3, #3
 c88:	2300      	movs	r3, #0
 c8a:	7023      	strb	r3, [r4, #0]
			
			// https://github.com/tinic/Pendant2019/blob/master/sdd1306.cpp
			io_write(I2C_0_io, &reg_addr, 1);//send the register address to read from
 c8c:	2201      	movs	r2, #1
 c8e:	9801      	ldr	r0, [sp, #4]
 c90:	4b0c      	ldr	r3, [pc, #48]	; (cc4 <main+0x6c>)
 c92:	4798      	blx	r3
			io_read(I2C_0_io, &reg_value, 1); //read one byte
 c94:	2201      	movs	r2, #1
 c96:	0021      	movs	r1, r4
 c98:	9801      	ldr	r0, [sp, #4]
 c9a:	4b0b      	ldr	r3, [pc, #44]	; (cc8 <main+0x70>)
 c9c:	4798      	blx	r3
			
			delay_ms(1000+reg_value);
 c9e:	7820      	ldrb	r0, [r4, #0]
 ca0:	23fa      	movs	r3, #250	; 0xfa
 ca2:	009b      	lsls	r3, r3, #2
 ca4:	469c      	mov	ip, r3
 ca6:	4460      	add	r0, ip
 ca8:	4b08      	ldr	r3, [pc, #32]	; (ccc <main+0x74>)
 caa:	4798      	blx	r3
 cac:	e7db      	b.n	c66 <main+0xe>
 cae:	46c0      	nop			; (mov r8, r8)
 cb0:	00000115 	.word	0x00000115
 cb4:	20000020 	.word	0x20000020
 cb8:	0000037b 	.word	0x0000037b
 cbc:	0000035d 	.word	0x0000035d
 cc0:	00000369 	.word	0x00000369
 cc4:	00000385 	.word	0x00000385
 cc8:	000003b9 	.word	0x000003b9
 ccc:	0000029d 	.word	0x0000029d

00000cd0 <__libc_init_array>:
 cd0:	b570      	push	{r4, r5, r6, lr}
 cd2:	2600      	movs	r6, #0
 cd4:	4d0c      	ldr	r5, [pc, #48]	; (d08 <__libc_init_array+0x38>)
 cd6:	4c0d      	ldr	r4, [pc, #52]	; (d0c <__libc_init_array+0x3c>)
 cd8:	1b64      	subs	r4, r4, r5
 cda:	10a4      	asrs	r4, r4, #2
 cdc:	42a6      	cmp	r6, r4
 cde:	d109      	bne.n	cf4 <__libc_init_array+0x24>
 ce0:	2600      	movs	r6, #0
 ce2:	f000 f84b 	bl	d7c <_init>
 ce6:	4d0a      	ldr	r5, [pc, #40]	; (d10 <__libc_init_array+0x40>)
 ce8:	4c0a      	ldr	r4, [pc, #40]	; (d14 <__libc_init_array+0x44>)
 cea:	1b64      	subs	r4, r4, r5
 cec:	10a4      	asrs	r4, r4, #2
 cee:	42a6      	cmp	r6, r4
 cf0:	d105      	bne.n	cfe <__libc_init_array+0x2e>
 cf2:	bd70      	pop	{r4, r5, r6, pc}
 cf4:	00b3      	lsls	r3, r6, #2
 cf6:	58eb      	ldr	r3, [r5, r3]
 cf8:	4798      	blx	r3
 cfa:	3601      	adds	r6, #1
 cfc:	e7ee      	b.n	cdc <__libc_init_array+0xc>
 cfe:	00b3      	lsls	r3, r6, #2
 d00:	58eb      	ldr	r3, [r5, r3]
 d02:	4798      	blx	r3
 d04:	3601      	adds	r6, #1
 d06:	e7f2      	b.n	cee <__libc_init_array+0x1e>
 d08:	00000d88 	.word	0x00000d88
 d0c:	00000d88 	.word	0x00000d88
 d10:	00000d88 	.word	0x00000d88
 d14:	00000d8c 	.word	0x00000d8c
 d18:	682f2e2e 	.word	0x682f2e2e
 d1c:	732f6c61 	.word	0x732f6c61
 d20:	682f6372 	.word	0x682f6372
 d24:	695f6c61 	.word	0x695f6c61
 d28:	6d5f6332 	.word	0x6d5f6332
 d2c:	6e79735f 	.word	0x6e79735f
 d30:	00632e63 	.word	0x00632e63
 d34:	682f2e2e 	.word	0x682f2e2e
 d38:	732f6c61 	.word	0x732f6c61
 d3c:	682f6372 	.word	0x682f6372
 d40:	695f6c61 	.word	0x695f6c61
 d44:	00632e6f 	.word	0x00632e6f

00000d48 <_i2cms>:
 d48:	00000005 00200014 00000100 00000f0e     ...... .........
 d58:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
 d68:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
 d78:	0000632e                                .c..

00000d7c <_init>:
 d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d7e:	46c0      	nop			; (mov r8, r8)
 d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d82:	bc08      	pop	{r3}
 d84:	469e      	mov	lr, r3
 d86:	4770      	bx	lr

00000d88 <__init_array_start>:
 d88:	000000dd 	.word	0x000000dd

00000d8c <_fini>:
 d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d8e:	46c0      	nop			; (mov r8, r8)
 d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d92:	bc08      	pop	{r3}
 d94:	469e      	mov	lr, r3
 d96:	4770      	bx	lr

00000d98 <__fini_array_start>:
 d98:	000000b5 	.word	0x000000b5
