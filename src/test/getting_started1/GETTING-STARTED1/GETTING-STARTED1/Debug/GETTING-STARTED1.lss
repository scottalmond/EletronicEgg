
GETTING-STARTED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004580  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000001dc  20000000  00004580  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .lpram        00000000  30000000  30000000  000201dc  2**0
                  CONTENTS
  3 .bss          00000118  200001dc  0000475c  000201dc  2**2
                  ALLOC
  4 .stack        00002004  200002f4  00004874  000201dc  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  7 .debug_info   000284cd  00000000  00000000  0002025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041ee  00000000  00000000  0004872a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004cea  00000000  00000000  0004c918  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000005a8  00000000  00000000  00051602  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006e8  00000000  00000000  00051baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f925  00000000  00000000  00052292  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e7e5  00000000  00000000  00071bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009dc18  00000000  00000000  0008039c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001b60  00000000  00000000  0011dfb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	f8 22 00 20 25 16 00 00 21 16 00 00 21 16 00 00     .". %...!...!...
	...
      2c:	21 16 00 00 00 00 00 00 00 00 00 00 21 16 00 00     !...........!...
      3c:	21 16 00 00 21 16 00 00 21 16 00 00 21 16 00 00     !...!...!...!...
      4c:	ad 05 00 00 21 16 00 00 21 16 00 00 21 16 00 00     ....!...!...!...
      5c:	21 16 00 00 a5 0a 00 00 b5 0a 00 00 c5 0a 00 00     !...............
      6c:	d5 0a 00 00 e5 0a 00 00 f5 0a 00 00 21 16 00 00     ............!...
      7c:	21 16 00 00 21 16 00 00 d1 15 00 00 e1 15 00 00     !...!...........
      8c:	f1 15 00 00 01 16 00 00 11 16 00 00 21 16 00 00     ............!...
      9c:	21 16 00 00 21 16 00 00 21 16 00 00 21 16 00 00     !...!...!...!...
      ac:	21 16 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200001dc 	.word	0x200001dc
      d4:	00000000 	.word	0x00000000
      d8:	00004580 	.word	0x00004580

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200001e0 	.word	0x200001e0
     108:	00004580 	.word	0x00004580
     10c:	00004580 	.word	0x00004580
     110:	00000000 	.word	0x00000000

00000114 <print_home>:
//specify number of bytes to write...?
int i2c_write(int i2c_device_address,int i2c_message_address,int i2c_message_payload)
{ return i2c_command_custom(true,i2c_device_address,i2c_message_address,i2c_message_payload); }

void print_home(void)
{
     114:	b510      	push	{r4, lr}
	printf("-- Help Menu --\r\n");
     116:	4808      	ldr	r0, [pc, #32]	; (138 <print_home+0x24>)
     118:	4c08      	ldr	r4, [pc, #32]	; (13c <print_home+0x28>)
     11a:	47a0      	blx	r4
	printf("Note: Terminate user commands with new line character\r\n");
     11c:	4808      	ldr	r0, [pc, #32]	; (140 <print_home+0x2c>)
     11e:	47a0      	blx	r4
	printf("h - Print this menu\r\n");
     120:	4808      	ldr	r0, [pc, #32]	; (144 <print_home+0x30>)
     122:	47a0      	blx	r4
	printf("a - Information about this device\r\n");
     124:	4808      	ldr	r0, [pc, #32]	; (148 <print_home+0x34>)
     126:	47a0      	blx	r4
	//what is this device, where more info can be found
	printf("i - I2C command\r\n");
     128:	4808      	ldr	r0, [pc, #32]	; (14c <print_home+0x38>)
     12a:	47a0      	blx	r4
	printf("q - Return to main menu at any time\r\n");
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <print_home+0x3c>)
     12e:	47a0      	blx	r4
	printf("\r\n");
     130:	4808      	ldr	r0, [pc, #32]	; (154 <print_home+0x40>)
     132:	47a0      	blx	r4
}
     134:	bd10      	pop	{r4, pc}
     136:	46c0      	nop			; (mov r8, r8)
     138:	00004184 	.word	0x00004184
     13c:	00001c01 	.word	0x00001c01
     140:	00004198 	.word	0x00004198
     144:	000041d0 	.word	0x000041d0
     148:	000041e8 	.word	0x000041e8
     14c:	0000420c 	.word	0x0000420c
     150:	00004220 	.word	0x00004220
     154:	000040bc 	.word	0x000040bc

00000158 <print_about>:

void print_about(void)
{
     158:	b510      	push	{r4, lr}
	printf("-- About --\r\n");
     15a:	480e      	ldr	r0, [pc, #56]	; (194 <print_about+0x3c>)
     15c:	4c0e      	ldr	r4, [pc, #56]	; (198 <print_about+0x40>)
     15e:	47a0      	blx	r4
	printf("Project: \r\n");
     160:	480e      	ldr	r0, [pc, #56]	; (19c <print_about+0x44>)
     162:	47a0      	blx	r4
	printf("Version: 1.0.0\r\n");
     164:	480e      	ldr	r0, [pc, #56]	; (1a0 <print_about+0x48>)
     166:	47a0      	blx	r4
	printf("Author: \r\n");
     168:	480e      	ldr	r0, [pc, #56]	; (1a4 <print_about+0x4c>)
     16a:	47a0      	blx	r4
	printf("Date: \r\n");
     16c:	480e      	ldr	r0, [pc, #56]	; (1a8 <print_about+0x50>)
     16e:	47a0      	blx	r4
	printf("More Info: \r\n");
     170:	480e      	ldr	r0, [pc, #56]	; (1ac <print_about+0x54>)
     172:	47a0      	blx	r4
	printf("Hardware\r\n");
     174:	480e      	ldr	r0, [pc, #56]	; (1b0 <print_about+0x58>)
     176:	47a0      	blx	r4
	printf("  Microprocessor: SAML21J18B\r\n");
     178:	480e      	ldr	r0, [pc, #56]	; (1b4 <print_about+0x5c>)
     17a:	47a0      	blx	r4
	printf("  PMIC/LDO: BQ25155\r\n");
     17c:	480e      	ldr	r0, [pc, #56]	; (1b8 <print_about+0x60>)
     17e:	47a0      	blx	r4
	printf("  Accelerometer: H3LIS200DLTR\r\n");
     180:	480e      	ldr	r0, [pc, #56]	; (1bc <print_about+0x64>)
     182:	47a0      	blx	r4
	printf("  Screen: VI-321-DP-RC-S\r\n");
     184:	480e      	ldr	r0, [pc, #56]	; (1c0 <print_about+0x68>)
     186:	47a0      	blx	r4
	printf("  Battery: 502535 400mAh (Sparkfun/13851)\r\n");
     188:	480e      	ldr	r0, [pc, #56]	; (1c4 <print_about+0x6c>)
     18a:	47a0      	blx	r4
	printf("\r\n");
     18c:	480e      	ldr	r0, [pc, #56]	; (1c8 <print_about+0x70>)
     18e:	47a0      	blx	r4
}
     190:	bd10      	pop	{r4, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	00004088 	.word	0x00004088
     198:	00001c01 	.word	0x00001c01
     19c:	00004098 	.word	0x00004098
     1a0:	000040a4 	.word	0x000040a4
     1a4:	000040b4 	.word	0x000040b4
     1a8:	000040c0 	.word	0x000040c0
     1ac:	000040c8 	.word	0x000040c8
     1b0:	000040d8 	.word	0x000040d8
     1b4:	000040e4 	.word	0x000040e4
     1b8:	00004104 	.word	0x00004104
     1bc:	0000411c 	.word	0x0000411c
     1c0:	0000413c 	.word	0x0000413c
     1c4:	00004158 	.word	0x00004158
     1c8:	000040bc 	.word	0x000040bc

000001cc <prompt_response>:

//return true if user input is 'q', otherwise dump response into the 'response' character array
//will only extract <response_length> characters from the terminal buffer
bool prompt_response(char* prompt,char* response,int response_length)
{
     1cc:	b570      	push	{r4, r5, r6, lr}
     1ce:	b082      	sub	sp, #8
     1d0:	000c      	movs	r4, r1
     1d2:	0015      	movs	r5, r2
	char temp[8];
	printf(prompt);
     1d4:	4e0b      	ldr	r6, [pc, #44]	; (204 <prompt_response+0x38>)
     1d6:	47b0      	blx	r6
	sprintf(temp,"%%%is",response_length-1); // parameterized "%63s"
     1d8:	1e6a      	subs	r2, r5, #1
     1da:	490b      	ldr	r1, [pc, #44]	; (208 <prompt_response+0x3c>)
     1dc:	4668      	mov	r0, sp
     1de:	4b0b      	ldr	r3, [pc, #44]	; (20c <prompt_response+0x40>)
     1e0:	4798      	blx	r3
	scanf(temp,response);
     1e2:	0021      	movs	r1, r4
     1e4:	4668      	mov	r0, sp
     1e6:	4b0a      	ldr	r3, [pc, #40]	; (210 <prompt_response+0x44>)
     1e8:	4798      	blx	r3
	printf("%s\r\n",response);
     1ea:	0021      	movs	r1, r4
     1ec:	4809      	ldr	r0, [pc, #36]	; (214 <prompt_response+0x48>)
     1ee:	47b0      	blx	r6
	return response[0]=='q' || response[0]=='\0';
     1f0:	7820      	ldrb	r0, [r4, #0]
     1f2:	2871      	cmp	r0, #113	; 0x71
     1f4:	d004      	beq.n	200 <prompt_response+0x34>
     1f6:	4243      	negs	r3, r0
     1f8:	4158      	adcs	r0, r3
     1fa:	b2c0      	uxtb	r0, r0
}
     1fc:	b002      	add	sp, #8
     1fe:	bd70      	pop	{r4, r5, r6, pc}
     200:	2001      	movs	r0, #1
     202:	e7fb      	b.n	1fc <prompt_response+0x30>
     204:	00001b0d 	.word	0x00001b0d
     208:	00004348 	.word	0x00004348
     20c:	00001e19 	.word	0x00001e19
     210:	00001c15 	.word	0x00001c15
     214:	00004350 	.word	0x00004350

00000218 <prompt_menu>:

//prompt the user for action to perform through terminal
//use one-letter commands for simplicity
void prompt_menu(void)
{
     218:	b5f0      	push	{r4, r5, r6, r7, lr}
     21a:	46de      	mov	lr, fp
     21c:	4657      	mov	r7, sl
     21e:	464e      	mov	r6, r9
     220:	4645      	mov	r5, r8
     222:	b5e0      	push	{r5, r6, r7, lr}
     224:	b0ad      	sub	sp, #180	; 0xb4
     226:	af06      	add	r7, sp, #24
     228:	466b      	mov	r3, sp
     22a:	607b      	str	r3, [r7, #4]
	//todo: timeout?
	const int buff_length=64;
	char buff[buff_length];
	bool is_error=false;
     22c:	2300      	movs	r3, #0
     22e:	469a      	mov	sl, r3
				bool is_read=false;
				do{
					if(prompt_response("I2C >> Is read or write? [r/w/q]: ",buff,buff_length)) break;
					is_write=buff[0]=='w';
					is_read=buff[0]=='r';
					unsigned char write_str[]="write";
     230:	4b82      	ldr	r3, [pc, #520]	; (43c <prompt_menu+0x224>)
     232:	4698      	mov	r8, r3
     234:	e0e4      	b.n	400 <prompt_menu+0x1e8>
			case 'h': print_home(); break;
     236:	4b82      	ldr	r3, [pc, #520]	; (440 <prompt_menu+0x228>)
     238:	4798      	blx	r3
			} break;
			default:
				is_error=true;
			break;
		}
		if(is_error) printf("Invalid user input\r\n");
     23a:	4653      	mov	r3, sl
     23c:	2b00      	cmp	r3, #0
     23e:	d000      	beq.n	242 <prompt_menu+0x2a>
     240:	e0db      	b.n	3fa <prompt_menu+0x1e2>
     242:	687b      	ldr	r3, [r7, #4]
     244:	469d      	mov	sp, r3
	}while(is_error);
}
     246:	46bd      	mov	sp, r7
     248:	b027      	add	sp, #156	; 0x9c
     24a:	bc3c      	pop	{r2, r3, r4, r5}
     24c:	4690      	mov	r8, r2
     24e:	4699      	mov	r9, r3
     250:	46a2      	mov	sl, r4
     252:	46ab      	mov	fp, r5
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
			case 'a': print_about(); break;
     256:	4b7b      	ldr	r3, [pc, #492]	; (444 <prompt_menu+0x22c>)
     258:	4798      	blx	r3
     25a:	e7ee      	b.n	23a <prompt_menu+0x22>
					if(is_read) strncpy(write_str, "read", sizeof(write_str));
     25c:	2206      	movs	r2, #6
     25e:	497a      	ldr	r1, [pc, #488]	; (448 <prompt_menu+0x230>)
     260:	3b6a      	subs	r3, #106	; 0x6a
     262:	4660      	mov	r0, ip
     264:	18c0      	adds	r0, r0, r3
     266:	4b79      	ldr	r3, [pc, #484]	; (44c <prompt_menu+0x234>)
     268:	4798      	blx	r3
     26a:	e0bf      	b.n	3ec <prompt_menu+0x1d4>
							if(i2c_device_address>=0)
     26c:	2b00      	cmp	r3, #0
     26e:	da00      	bge.n	272 <prompt_menu+0x5a>
     270:	e087      	b.n	382 <prompt_menu+0x16a>
								int i2c_message_address=-1;
     272:	2301      	movs	r3, #1
     274:	425b      	negs	r3, r3
     276:	60fb      	str	r3, [r7, #12]
									snprintf(prompt_str,sizeof(prompt_str),"%s%s%s%02x%s","I2C(",
     278:	4d75      	ldr	r5, [pc, #468]	; (450 <prompt_menu+0x238>)
     27a:	4e76      	ldr	r6, [pc, #472]	; (454 <prompt_menu+0x23c>)
     27c:	e01b      	b.n	2b6 <prompt_menu+0x9e>
									if(i2c_message_address>=0)
     27e:	2b00      	cmp	r3, #0
     280:	db4a      	blt.n	318 <prompt_menu+0x100>
										if(!is_write)
     282:	464a      	mov	r2, r9
     284:	2a77      	cmp	r2, #119	; 0x77
     286:	d04b      	beq.n	320 <prompt_menu+0x108>
											printf("%s","%s%s%s%02x%s%02x%s%02x","I2C(",
     288:	2241      	movs	r2, #65	; 0x41
     28a:	9205      	str	r2, [sp, #20]
     28c:	4a72      	ldr	r2, [pc, #456]	; (458 <prompt_menu+0x240>)
     28e:	9204      	str	r2, [sp, #16]
     290:	9303      	str	r3, [sp, #12]
     292:	4b72      	ldr	r3, [pc, #456]	; (45c <prompt_menu+0x244>)
     294:	9302      	str	r3, [sp, #8]
     296:	68ba      	ldr	r2, [r7, #8]
     298:	9201      	str	r2, [sp, #4]
     29a:	9300      	str	r3, [sp, #0]
     29c:	2308      	movs	r3, #8
     29e:	2208      	movs	r2, #8
     2a0:	4694      	mov	ip, r2
     2a2:	44bc      	add	ip, r7
     2a4:	4463      	add	r3, ip
     2a6:	4a6a      	ldr	r2, [pc, #424]	; (450 <prompt_menu+0x238>)
     2a8:	496d      	ldr	r1, [pc, #436]	; (460 <prompt_menu+0x248>)
     2aa:	486e      	ldr	r0, [pc, #440]	; (464 <prompt_menu+0x24c>)
     2ac:	4c6e      	ldr	r4, [pc, #440]	; (468 <prompt_menu+0x250>)
     2ae:	47a0      	blx	r4
								}while(i2c_message_address<0);
     2b0:	68fb      	ldr	r3, [r7, #12]
     2b2:	2b00      	cmp	r3, #0
     2b4:	da35      	bge.n	322 <prompt_menu+0x10a>
									snprintf(prompt_str,sizeof(prompt_str),"%s%s%s%02x%s","I2C(",
     2b6:	9603      	str	r6, [sp, #12]
     2b8:	68bb      	ldr	r3, [r7, #8]
     2ba:	9302      	str	r3, [sp, #8]
     2bc:	4b67      	ldr	r3, [pc, #412]	; (45c <prompt_menu+0x244>)
     2be:	9301      	str	r3, [sp, #4]
     2c0:	2308      	movs	r3, #8
     2c2:	2208      	movs	r2, #8
     2c4:	4694      	mov	ip, r2
     2c6:	44bc      	add	ip, r7
     2c8:	4463      	add	r3, ip
     2ca:	9300      	str	r3, [sp, #0]
     2cc:	002b      	movs	r3, r5
     2ce:	4a67      	ldr	r2, [pc, #412]	; (46c <prompt_menu+0x254>)
     2d0:	2140      	movs	r1, #64	; 0x40
     2d2:	2010      	movs	r0, #16
     2d4:	2408      	movs	r4, #8
     2d6:	46a4      	mov	ip, r4
     2d8:	44bc      	add	ip, r7
     2da:	4460      	add	r0, ip
     2dc:	4c64      	ldr	r4, [pc, #400]	; (470 <prompt_menu+0x258>)
     2de:	47a0      	blx	r4
									if(prompt_response(prompt_str,buff,buff_length)) break;
     2e0:	2240      	movs	r2, #64	; 0x40
     2e2:	2350      	movs	r3, #80	; 0x50
     2e4:	2108      	movs	r1, #8
     2e6:	1879      	adds	r1, r7, r1
     2e8:	18c9      	adds	r1, r1, r3
     2ea:	3b40      	subs	r3, #64	; 0x40
     2ec:	2008      	movs	r0, #8
     2ee:	1838      	adds	r0, r7, r0
     2f0:	18c0      	adds	r0, r0, r3
     2f2:	4b60      	ldr	r3, [pc, #384]	; (474 <prompt_menu+0x25c>)
     2f4:	4798      	blx	r3
     2f6:	2800      	cmp	r0, #0
     2f8:	d113      	bne.n	322 <prompt_menu+0x10a>
									sscanf(buff,"%x",&i2c_message_address);
     2fa:	230c      	movs	r3, #12
     2fc:	18fa      	adds	r2, r7, r3
     2fe:	495e      	ldr	r1, [pc, #376]	; (478 <prompt_menu+0x260>)
     300:	3344      	adds	r3, #68	; 0x44
     302:	3008      	adds	r0, #8
     304:	1838      	adds	r0, r7, r0
     306:	18c0      	adds	r0, r0, r3
     308:	4b5c      	ldr	r3, [pc, #368]	; (47c <prompt_menu+0x264>)
     30a:	4798      	blx	r3
									if(i2c_message_address>=256) i2c_message_address=-1;
     30c:	68fb      	ldr	r3, [r7, #12]
     30e:	2bff      	cmp	r3, #255	; 0xff
     310:	ddb5      	ble.n	27e <prompt_menu+0x66>
     312:	2301      	movs	r3, #1
     314:	425b      	negs	r3, r3
     316:	60fb      	str	r3, [r7, #12]
									}else printf("Invalid user input\r\n");
     318:	4859      	ldr	r0, [pc, #356]	; (480 <prompt_menu+0x268>)
     31a:	4b5a      	ldr	r3, [pc, #360]	; (484 <prompt_menu+0x26c>)
     31c:	4798      	blx	r3
     31e:	e7c7      	b.n	2b0 <prompt_menu+0x98>
     320:	4691      	mov	r9, r2
						}while(i2c_device_address<0);
     322:	68bb      	ldr	r3, [r7, #8]
     324:	2b00      	cmp	r3, #0
     326:	da30      	bge.n	38a <prompt_menu+0x172>
							snprintf(prompt_str,sizeof(prompt_str),"%s%s%s","I2C(",
     328:	465b      	mov	r3, fp
     32a:	9301      	str	r3, [sp, #4]
     32c:	2308      	movs	r3, #8
     32e:	2208      	movs	r2, #8
     330:	4694      	mov	ip, r2
     332:	44bc      	add	ip, r7
     334:	4463      	add	r3, ip
     336:	9300      	str	r3, [sp, #0]
     338:	4b45      	ldr	r3, [pc, #276]	; (450 <prompt_menu+0x238>)
     33a:	4a53      	ldr	r2, [pc, #332]	; (488 <prompt_menu+0x270>)
     33c:	2140      	movs	r1, #64	; 0x40
     33e:	2010      	movs	r0, #16
     340:	2408      	movs	r4, #8
     342:	46a4      	mov	ip, r4
     344:	44bc      	add	ip, r7
     346:	4460      	add	r0, ip
     348:	4c49      	ldr	r4, [pc, #292]	; (470 <prompt_menu+0x258>)
     34a:	47a0      	blx	r4
							if(prompt_response(prompt_str,buff,buff_length)) break;
     34c:	2240      	movs	r2, #64	; 0x40
     34e:	2350      	movs	r3, #80	; 0x50
     350:	2108      	movs	r1, #8
     352:	1879      	adds	r1, r7, r1
     354:	18c9      	adds	r1, r1, r3
     356:	3b40      	subs	r3, #64	; 0x40
     358:	2008      	movs	r0, #8
     35a:	1838      	adds	r0, r7, r0
     35c:	18c0      	adds	r0, r0, r3
     35e:	4b45      	ldr	r3, [pc, #276]	; (474 <prompt_menu+0x25c>)
     360:	4798      	blx	r3
     362:	2800      	cmp	r0, #0
     364:	d117      	bne.n	396 <prompt_menu+0x17e>
							sscanf(buff,"%x",&i2c_device_address);
     366:	2308      	movs	r3, #8
     368:	18fa      	adds	r2, r7, r3
     36a:	4943      	ldr	r1, [pc, #268]	; (478 <prompt_menu+0x260>)
     36c:	3348      	adds	r3, #72	; 0x48
     36e:	18d0      	adds	r0, r2, r3
     370:	4b42      	ldr	r3, [pc, #264]	; (47c <prompt_menu+0x264>)
     372:	4798      	blx	r3
							if(i2c_device_address>=128) i2c_device_address=-1;//address too big
     374:	68bb      	ldr	r3, [r7, #8]
     376:	2b7f      	cmp	r3, #127	; 0x7f
     378:	dc00      	bgt.n	37c <prompt_menu+0x164>
     37a:	e777      	b.n	26c <prompt_menu+0x54>
     37c:	2301      	movs	r3, #1
     37e:	425b      	negs	r3, r3
     380:	60bb      	str	r3, [r7, #8]
							}else printf("Invalid user input\r\n");
     382:	483f      	ldr	r0, [pc, #252]	; (480 <prompt_menu+0x268>)
     384:	4b3f      	ldr	r3, [pc, #252]	; (484 <prompt_menu+0x26c>)
     386:	4798      	blx	r3
     388:	e7cb      	b.n	322 <prompt_menu+0x10a>
     38a:	464c      	mov	r4, r9
     38c:	e004      	b.n	398 <prompt_menu+0x180>
					}else printf("Invalid user input\r\n");
     38e:	483c      	ldr	r0, [pc, #240]	; (480 <prompt_menu+0x268>)
     390:	4b3c      	ldr	r3, [pc, #240]	; (484 <prompt_menu+0x26c>)
     392:	4798      	blx	r3
     394:	e000      	b.n	398 <prompt_menu+0x180>
     396:	464c      	mov	r4, r9
				}while(!is_write&&!is_read);
     398:	2c77      	cmp	r4, #119	; 0x77
     39a:	d100      	bne.n	39e <prompt_menu+0x186>
     39c:	e74d      	b.n	23a <prompt_menu+0x22>
     39e:	2c72      	cmp	r4, #114	; 0x72
     3a0:	d100      	bne.n	3a4 <prompt_menu+0x18c>
     3a2:	e74a      	b.n	23a <prompt_menu+0x22>
					if(prompt_response("I2C >> Is read or write? [r/w/q]: ",buff,buff_length)) break;
     3a4:	2240      	movs	r2, #64	; 0x40
     3a6:	2350      	movs	r3, #80	; 0x50
     3a8:	2108      	movs	r1, #8
     3aa:	1879      	adds	r1, r7, r1
     3ac:	18c9      	adds	r1, r1, r3
     3ae:	4837      	ldr	r0, [pc, #220]	; (48c <prompt_menu+0x274>)
     3b0:	4b30      	ldr	r3, [pc, #192]	; (474 <prompt_menu+0x25c>)
     3b2:	4798      	blx	r3
     3b4:	2800      	cmp	r0, #0
     3b6:	d000      	beq.n	3ba <prompt_menu+0x1a2>
     3b8:	e73f      	b.n	23a <prompt_menu+0x22>
					is_write=buff[0]=='w';
     3ba:	2350      	movs	r3, #80	; 0x50
     3bc:	2208      	movs	r2, #8
     3be:	4694      	mov	ip, r2
     3c0:	44bc      	add	ip, r7
     3c2:	4463      	add	r3, ip
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	0019      	movs	r1, r3
     3c8:	001c      	movs	r4, r3
					unsigned char write_str[]="write";
     3ca:	4643      	mov	r3, r8
     3cc:	681b      	ldr	r3, [r3, #0]
     3ce:	613b      	str	r3, [r7, #16]
     3d0:	4643      	mov	r3, r8
     3d2:	889a      	ldrh	r2, [r3, #4]
     3d4:	2308      	movs	r3, #8
     3d6:	3008      	adds	r0, #8
     3d8:	4684      	mov	ip, r0
     3da:	44bc      	add	ip, r7
     3dc:	4463      	add	r3, ip
     3de:	809a      	strh	r2, [r3, #4]
					if(is_read) strncpy(write_str, "read", sizeof(write_str));
     3e0:	000b      	movs	r3, r1
     3e2:	2972      	cmp	r1, #114	; 0x72
     3e4:	d100      	bne.n	3e8 <prompt_menu+0x1d0>
     3e6:	e739      	b.n	25c <prompt_menu+0x44>
					if(is_write||is_read)
     3e8:	2977      	cmp	r1, #119	; 0x77
     3ea:	d1d0      	bne.n	38e <prompt_menu+0x176>
						int i2c_device_address=-1;
     3ec:	2301      	movs	r3, #1
     3ee:	425b      	negs	r3, r3
     3f0:	60bb      	str	r3, [r7, #8]
							snprintf(prompt_str,sizeof(prompt_str),"%s%s%s","I2C(",
     3f2:	4b27      	ldr	r3, [pc, #156]	; (490 <prompt_menu+0x278>)
     3f4:	469b      	mov	fp, r3
     3f6:	46a1      	mov	r9, r4
     3f8:	e796      	b.n	328 <prompt_menu+0x110>
		if(is_error) printf("Invalid user input\r\n");
     3fa:	4821      	ldr	r0, [pc, #132]	; (480 <prompt_menu+0x268>)
     3fc:	4b21      	ldr	r3, [pc, #132]	; (484 <prompt_menu+0x26c>)
     3fe:	4798      	blx	r3
		if(prompt_response("Main menu >> user input [h/q]: ",buff,buff_length)) return;
     400:	2240      	movs	r2, #64	; 0x40
     402:	2350      	movs	r3, #80	; 0x50
     404:	2108      	movs	r1, #8
     406:	1879      	adds	r1, r7, r1
     408:	18c9      	adds	r1, r1, r3
     40a:	4822      	ldr	r0, [pc, #136]	; (494 <prompt_menu+0x27c>)
     40c:	4b19      	ldr	r3, [pc, #100]	; (474 <prompt_menu+0x25c>)
     40e:	4798      	blx	r3
     410:	2800      	cmp	r0, #0
     412:	d110      	bne.n	436 <prompt_menu+0x21e>
		switch(buff[0])
     414:	2350      	movs	r3, #80	; 0x50
     416:	2208      	movs	r2, #8
     418:	4694      	mov	ip, r2
     41a:	44bc      	add	ip, r7
     41c:	4463      	add	r3, ip
     41e:	781b      	ldrb	r3, [r3, #0]
     420:	2b68      	cmp	r3, #104	; 0x68
     422:	d100      	bne.n	426 <prompt_menu+0x20e>
     424:	e707      	b.n	236 <prompt_menu+0x1e>
     426:	2b69      	cmp	r3, #105	; 0x69
     428:	d0bc      	beq.n	3a4 <prompt_menu+0x18c>
     42a:	2b61      	cmp	r3, #97	; 0x61
     42c:	d100      	bne.n	430 <prompt_menu+0x218>
     42e:	e712      	b.n	256 <prompt_menu+0x3e>
				is_error=true;
     430:	2301      	movs	r3, #1
     432:	469a      	mov	sl, r3
     434:	e701      	b.n	23a <prompt_menu+0x22>
     436:	687b      	ldr	r3, [r7, #4]
     438:	469d      	mov	sp, r3
     43a:	e704      	b.n	246 <prompt_menu+0x2e>
     43c:	00004340 	.word	0x00004340
     440:	00000115 	.word	0x00000115
     444:	00000159 	.word	0x00000159
     448:	0000428c 	.word	0x0000428c
     44c:	00001f57 	.word	0x00001f57
     450:	00004294 	.word	0x00004294
     454:	000042d4 	.word	0x000042d4
     458:	00004314 	.word	0x00004314
     45c:	000042f4 	.word	0x000042f4
     460:	000042fc 	.word	0x000042fc
     464:	000042a0 	.word	0x000042a0
     468:	00001b0d 	.word	0x00001b0d
     46c:	000042c4 	.word	0x000042c4
     470:	00001db5 	.word	0x00001db5
     474:	000001cd 	.word	0x000001cd
     478:	000042c0 	.word	0x000042c0
     47c:	00001e5d 	.word	0x00001e5d
     480:	0000432c 	.word	0x0000432c
     484:	00001c01 	.word	0x00001c01
     488:	0000429c 	.word	0x0000429c
     48c:	00004268 	.word	0x00004268
     490:	000042a4 	.word	0x000042a4
     494:	00004248 	.word	0x00004248

00000498 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     498:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     49a:	2000      	movs	r0, #0
     49c:	4b08      	ldr	r3, [pc, #32]	; (4c0 <delay_init+0x28>)
     49e:	4798      	blx	r3
     4a0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     4a2:	4c08      	ldr	r4, [pc, #32]	; (4c4 <delay_init+0x2c>)
     4a4:	21fa      	movs	r1, #250	; 0xfa
     4a6:	0089      	lsls	r1, r1, #2
     4a8:	47a0      	blx	r4
     4aa:	4b07      	ldr	r3, [pc, #28]	; (4c8 <delay_init+0x30>)
     4ac:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4ae:	4907      	ldr	r1, [pc, #28]	; (4cc <delay_init+0x34>)
     4b0:	0028      	movs	r0, r5
     4b2:	47a0      	blx	r4
     4b4:	4b06      	ldr	r3, [pc, #24]	; (4d0 <delay_init+0x38>)
     4b6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     4b8:	2205      	movs	r2, #5
     4ba:	4b06      	ldr	r3, [pc, #24]	; (4d4 <delay_init+0x3c>)
     4bc:	601a      	str	r2, [r3, #0]
}
     4be:	bd70      	pop	{r4, r5, r6, pc}
     4c0:	00001335 	.word	0x00001335
     4c4:	00001949 	.word	0x00001949
     4c8:	20000000 	.word	0x20000000
     4cc:	000f4240 	.word	0x000f4240
     4d0:	20000004 	.word	0x20000004
     4d4:	e000e010 	.word	0xe000e010

000004d8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     4d8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     4da:	4b08      	ldr	r3, [pc, #32]	; (4fc <delay_cycles_ms+0x24>)
     4dc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     4de:	4a08      	ldr	r2, [pc, #32]	; (500 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     4e0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     4e2:	2180      	movs	r1, #128	; 0x80
     4e4:	0249      	lsls	r1, r1, #9
	while (n--) {
     4e6:	3801      	subs	r0, #1
     4e8:	d307      	bcc.n	4fa <delay_cycles_ms+0x22>
	if (n > 0) {
     4ea:	2c00      	cmp	r4, #0
     4ec:	d0fb      	beq.n	4e6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     4ee:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     4f0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     4f2:	6813      	ldr	r3, [r2, #0]
     4f4:	420b      	tst	r3, r1
     4f6:	d0fc      	beq.n	4f2 <delay_cycles_ms+0x1a>
     4f8:	e7f5      	b.n	4e6 <delay_cycles_ms+0xe>
	}
}
     4fa:	bd30      	pop	{r4, r5, pc}
     4fc:	20000000 	.word	0x20000000
     500:	e000e010 	.word	0xe000e010

00000504 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     504:	4b0c      	ldr	r3, [pc, #48]	; (538 <cpu_irq_enter_critical+0x34>)
     506:	681b      	ldr	r3, [r3, #0]
     508:	2b00      	cmp	r3, #0
     50a:	d106      	bne.n	51a <cpu_irq_enter_critical+0x16>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     50c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     510:	2b00      	cmp	r3, #0
     512:	d007      	beq.n	524 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     514:	2200      	movs	r2, #0
     516:	4b09      	ldr	r3, [pc, #36]	; (53c <cpu_irq_enter_critical+0x38>)
     518:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     51a:	4a07      	ldr	r2, [pc, #28]	; (538 <cpu_irq_enter_critical+0x34>)
     51c:	6813      	ldr	r3, [r2, #0]
     51e:	3301      	adds	r3, #1
     520:	6013      	str	r3, [r2, #0]
}
     522:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     524:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     526:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     52a:	2200      	movs	r2, #0
     52c:	4b04      	ldr	r3, [pc, #16]	; (540 <cpu_irq_enter_critical+0x3c>)
     52e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     530:	3201      	adds	r2, #1
     532:	4b02      	ldr	r3, [pc, #8]	; (53c <cpu_irq_enter_critical+0x38>)
     534:	701a      	strb	r2, [r3, #0]
     536:	e7f0      	b.n	51a <cpu_irq_enter_critical+0x16>
     538:	200001f8 	.word	0x200001f8
     53c:	200001fc 	.word	0x200001fc
     540:	20000008 	.word	0x20000008

00000544 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     544:	4b08      	ldr	r3, [pc, #32]	; (568 <cpu_irq_leave_critical+0x24>)
     546:	681a      	ldr	r2, [r3, #0]
     548:	3a01      	subs	r2, #1
     54a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     54c:	681b      	ldr	r3, [r3, #0]
     54e:	2b00      	cmp	r3, #0
     550:	d109      	bne.n	566 <cpu_irq_leave_critical+0x22>
     552:	4b06      	ldr	r3, [pc, #24]	; (56c <cpu_irq_leave_critical+0x28>)
     554:	781b      	ldrb	r3, [r3, #0]
     556:	2b00      	cmp	r3, #0
     558:	d005      	beq.n	566 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     55a:	2201      	movs	r2, #1
     55c:	4b04      	ldr	r3, [pc, #16]	; (570 <cpu_irq_leave_critical+0x2c>)
     55e:	701a      	strb	r2, [r3, #0]
     560:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     564:	b662      	cpsie	i
	}
}
     566:	4770      	bx	lr
     568:	200001f8 	.word	0x200001f8
     56c:	200001fc 	.word	0x200001fc
     570:	20000008 	.word	0x20000008

00000574 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     574:	b5f0      	push	{r4, r5, r6, r7, lr}
     576:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     578:	ac01      	add	r4, sp, #4
     57a:	2501      	movs	r5, #1
     57c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     57e:	2700      	movs	r7, #0
     580:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     582:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     584:	0021      	movs	r1, r4
     586:	202a      	movs	r0, #42	; 0x2a
     588:	4e06      	ldr	r6, [pc, #24]	; (5a4 <system_board_init+0x30>)
     58a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     58c:	2280      	movs	r2, #128	; 0x80
     58e:	00d2      	lsls	r2, r2, #3
     590:	4b05      	ldr	r3, [pc, #20]	; (5a8 <system_board_init+0x34>)
     592:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

 	/* Set buttons as inputs */
	 pin_conf.direction  = PORT_PIN_DIR_INPUT;
     594:	7027      	strb	r7, [r4, #0]
     pin_conf.input_pull = PORT_PIN_PULL_UP;
     596:	7065      	strb	r5, [r4, #1]
     port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     598:	0021      	movs	r1, r4
     59a:	2002      	movs	r0, #2
     59c:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     59e:	b003      	add	sp, #12
     5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	000006a1 	.word	0x000006a1
     5a8:	40002880 	.word	0x40002880

000005ac <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     5ac:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5ae:	2200      	movs	r2, #0
     5b0:	4b10      	ldr	r3, [pc, #64]	; (5f4 <EIC_Handler+0x48>)
     5b2:	701a      	strb	r2, [r3, #0]
     5b4:	2300      	movs	r3, #0

	if (eic_index < EIC_INST_NUM) {
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
     5b6:	4910      	ldr	r1, [pc, #64]	; (5f8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     5b8:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     5ba:	4e10      	ldr	r6, [pc, #64]	; (5fc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     5bc:	4c0d      	ldr	r4, [pc, #52]	; (5f4 <EIC_Handler+0x48>)
     5be:	e00a      	b.n	5d6 <EIC_Handler+0x2a>
		return eics[eic_index];
     5c0:	490d      	ldr	r1, [pc, #52]	; (5f8 <EIC_Handler+0x4c>)
     5c2:	e008      	b.n	5d6 <EIC_Handler+0x2a>
     5c4:	7823      	ldrb	r3, [r4, #0]
     5c6:	3301      	adds	r3, #1
     5c8:	b2db      	uxtb	r3, r3
     5ca:	7023      	strb	r3, [r4, #0]
     5cc:	2b0f      	cmp	r3, #15
     5ce:	d810      	bhi.n	5f2 <EIC_Handler+0x46>
		return NULL;
     5d0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     5d2:	2b1f      	cmp	r3, #31
     5d4:	d9f4      	bls.n	5c0 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     5d6:	0028      	movs	r0, r5
     5d8:	4018      	ands	r0, r3
     5da:	2201      	movs	r2, #1
     5dc:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     5de:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     5e0:	4210      	tst	r0, r2
     5e2:	d0ef      	beq.n	5c4 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     5e4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     5e6:	009b      	lsls	r3, r3, #2
     5e8:	599b      	ldr	r3, [r3, r6]
     5ea:	2b00      	cmp	r3, #0
     5ec:	d0ea      	beq.n	5c4 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     5ee:	4798      	blx	r3
     5f0:	e7e8      	b.n	5c4 <EIC_Handler+0x18>
			}
		}
	}
}
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	20000274 	.word	0x20000274
     5f8:	40002400 	.word	0x40002400
     5fc:	20000278 	.word	0x20000278

00000600 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     600:	4a06      	ldr	r2, [pc, #24]	; (61c <_extint_enable+0x1c>)
     602:	7813      	ldrb	r3, [r2, #0]
     604:	2102      	movs	r1, #2
     606:	430b      	orrs	r3, r1
     608:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     60a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     60c:	6853      	ldr	r3, [r2, #4]
     60e:	4219      	tst	r1, r3
     610:	d1fc      	bne.n	60c <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     612:	6853      	ldr	r3, [r2, #4]
     614:	4218      	tst	r0, r3
     616:	d1f9      	bne.n	60c <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     618:	4770      	bx	lr
     61a:	46c0      	nop			; (mov r8, r8)
     61c:	40002400 	.word	0x40002400

00000620 <_system_extint_init>:
{
     620:	b500      	push	{lr}
     622:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			MCLK->APBAMASK.reg |= mask;
     624:	4a17      	ldr	r2, [pc, #92]	; (684 <_system_extint_init+0x64>)
     626:	6951      	ldr	r1, [r2, #20]
     628:	2380      	movs	r3, #128	; 0x80
     62a:	009b      	lsls	r3, r3, #2
     62c:	430b      	orrs	r3, r1
     62e:	6153      	str	r3, [r2, #20]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     630:	a901      	add	r1, sp, #4
     632:	2300      	movs	r3, #0
     634:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     636:	2003      	movs	r0, #3
     638:	4b13      	ldr	r3, [pc, #76]	; (688 <_system_extint_init+0x68>)
     63a:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     63c:	2003      	movs	r0, #3
     63e:	4b13      	ldr	r3, [pc, #76]	; (68c <_system_extint_init+0x6c>)
     640:	4798      	blx	r3
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     642:	4a13      	ldr	r2, [pc, #76]	; (690 <_system_extint_init+0x70>)
     644:	7813      	ldrb	r3, [r2, #0]
     646:	2101      	movs	r1, #1
     648:	430b      	orrs	r3, r1
     64a:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     64c:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     64e:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     650:	6853      	ldr	r3, [r2, #4]
     652:	4219      	tst	r1, r3
     654:	d1fc      	bne.n	650 <_system_extint_init+0x30>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     656:	6853      	ldr	r3, [r2, #4]
     658:	4218      	tst	r0, r3
     65a:	d1f9      	bne.n	650 <_system_extint_init+0x30>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_GCLK;
     65c:	4a0c      	ldr	r2, [pc, #48]	; (690 <_system_extint_init+0x70>)
     65e:	7813      	ldrb	r3, [r2, #0]
     660:	2110      	movs	r1, #16
     662:	438b      	bics	r3, r1
     664:	7013      	strb	r3, [r2, #0]
     666:	4b0b      	ldr	r3, [pc, #44]	; (694 <_system_extint_init+0x74>)
     668:	0019      	movs	r1, r3
     66a:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     66c:	2200      	movs	r2, #0
     66e:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     670:	428b      	cmp	r3, r1
     672:	d1fc      	bne.n	66e <_system_extint_init+0x4e>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     674:	2208      	movs	r2, #8
     676:	4b08      	ldr	r3, [pc, #32]	; (698 <_system_extint_init+0x78>)
     678:	601a      	str	r2, [r3, #0]
	_extint_enable();
     67a:	4b08      	ldr	r3, [pc, #32]	; (69c <_system_extint_init+0x7c>)
     67c:	4798      	blx	r3
}
     67e:	b003      	add	sp, #12
     680:	bd00      	pop	{pc}
     682:	46c0      	nop			; (mov r8, r8)
     684:	40000400 	.word	0x40000400
     688:	00001411 	.word	0x00001411
     68c:	000013a1 	.word	0x000013a1
     690:	40002400 	.word	0x40002400
     694:	20000278 	.word	0x20000278
     698:	e000e100 	.word	0xe000e100
     69c:	00000601 	.word	0x00000601

000006a0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     6a0:	b500      	push	{lr}
     6a2:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     6a4:	ab01      	add	r3, sp, #4
     6a6:	2280      	movs	r2, #128	; 0x80
     6a8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     6aa:	780a      	ldrb	r2, [r1, #0]
     6ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     6ae:	784a      	ldrb	r2, [r1, #1]
     6b0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     6b2:	788a      	ldrb	r2, [r1, #2]
     6b4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     6b6:	0019      	movs	r1, r3
     6b8:	4b01      	ldr	r3, [pc, #4]	; (6c0 <port_pin_set_config+0x20>)
     6ba:	4798      	blx	r3
}
     6bc:	b003      	add	sp, #12
     6be:	bd00      	pop	{pc}
     6c0:	0000150d 	.word	0x0000150d

000006c4 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6c6:	46de      	mov	lr, fp
     6c8:	4657      	mov	r7, sl
     6ca:	464e      	mov	r6, r9
     6cc:	4645      	mov	r5, r8
     6ce:	b5e0      	push	{r5, r6, r7, lr}
     6d0:	b087      	sub	sp, #28
     6d2:	4680      	mov	r8, r0
     6d4:	9104      	str	r1, [sp, #16]
     6d6:	0016      	movs	r6, r2
     6d8:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6da:	2200      	movs	r2, #0
     6dc:	2300      	movs	r3, #0
     6de:	2100      	movs	r1, #0
     6e0:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     6e2:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6e4:	2001      	movs	r0, #1
     6e6:	0021      	movs	r1, r4
     6e8:	9600      	str	r6, [sp, #0]
     6ea:	9701      	str	r7, [sp, #4]
     6ec:	465c      	mov	r4, fp
     6ee:	9403      	str	r4, [sp, #12]
     6f0:	4644      	mov	r4, r8
     6f2:	9405      	str	r4, [sp, #20]
     6f4:	e013      	b.n	71e <long_division+0x5a>
     6f6:	2420      	movs	r4, #32
     6f8:	1a64      	subs	r4, r4, r1
     6fa:	0005      	movs	r5, r0
     6fc:	40e5      	lsrs	r5, r4
     6fe:	46a8      	mov	r8, r5
     700:	e014      	b.n	72c <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     702:	9c00      	ldr	r4, [sp, #0]
     704:	9d01      	ldr	r5, [sp, #4]
     706:	1b12      	subs	r2, r2, r4
     708:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     70a:	465c      	mov	r4, fp
     70c:	464d      	mov	r5, r9
     70e:	432c      	orrs	r4, r5
     710:	46a3      	mov	fp, r4
     712:	9c03      	ldr	r4, [sp, #12]
     714:	4645      	mov	r5, r8
     716:	432c      	orrs	r4, r5
     718:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     71a:	3901      	subs	r1, #1
     71c:	d325      	bcc.n	76a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     71e:	2420      	movs	r4, #32
     720:	4264      	negs	r4, r4
     722:	190c      	adds	r4, r1, r4
     724:	d4e7      	bmi.n	6f6 <long_division+0x32>
     726:	0005      	movs	r5, r0
     728:	40a5      	lsls	r5, r4
     72a:	46a8      	mov	r8, r5
     72c:	0004      	movs	r4, r0
     72e:	408c      	lsls	r4, r1
     730:	46a1      	mov	r9, r4
		r = r << 1;
     732:	1892      	adds	r2, r2, r2
     734:	415b      	adcs	r3, r3
     736:	0014      	movs	r4, r2
     738:	001d      	movs	r5, r3
		if (n & bit_shift) {
     73a:	9e05      	ldr	r6, [sp, #20]
     73c:	464f      	mov	r7, r9
     73e:	403e      	ands	r6, r7
     740:	46b4      	mov	ip, r6
     742:	9e04      	ldr	r6, [sp, #16]
     744:	4647      	mov	r7, r8
     746:	403e      	ands	r6, r7
     748:	46b2      	mov	sl, r6
     74a:	4666      	mov	r6, ip
     74c:	4657      	mov	r7, sl
     74e:	433e      	orrs	r6, r7
     750:	d003      	beq.n	75a <long_division+0x96>
			r |= 0x01;
     752:	0006      	movs	r6, r0
     754:	4326      	orrs	r6, r4
     756:	0032      	movs	r2, r6
     758:	002b      	movs	r3, r5
		if (r >= d) {
     75a:	9c00      	ldr	r4, [sp, #0]
     75c:	9d01      	ldr	r5, [sp, #4]
     75e:	429d      	cmp	r5, r3
     760:	d8db      	bhi.n	71a <long_division+0x56>
     762:	d1ce      	bne.n	702 <long_division+0x3e>
     764:	4294      	cmp	r4, r2
     766:	d8d8      	bhi.n	71a <long_division+0x56>
     768:	e7cb      	b.n	702 <long_division+0x3e>
     76a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     76c:	4658      	mov	r0, fp
     76e:	0019      	movs	r1, r3
     770:	b007      	add	sp, #28
     772:	bc3c      	pop	{r2, r3, r4, r5}
     774:	4690      	mov	r8, r2
     776:	4699      	mov	r9, r3
     778:	46a2      	mov	sl, r4
     77a:	46ab      	mov	fp, r5
     77c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000077e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     77e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     780:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     782:	2340      	movs	r3, #64	; 0x40
     784:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     786:	4281      	cmp	r1, r0
     788:	d202      	bcs.n	790 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     78a:	0018      	movs	r0, r3
     78c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     78e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     790:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     792:	1c63      	adds	r3, r4, #1
     794:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     796:	4288      	cmp	r0, r1
     798:	d9f9      	bls.n	78e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     79a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     79c:	2cff      	cmp	r4, #255	; 0xff
     79e:	d8f4      	bhi.n	78a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     7a0:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     7a2:	2300      	movs	r3, #0
     7a4:	e7f1      	b.n	78a <_sercom_get_sync_baud_val+0xc>
	...

000007a8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7aa:	b083      	sub	sp, #12
     7ac:	000f      	movs	r7, r1
     7ae:	0016      	movs	r6, r2
     7b0:	aa08      	add	r2, sp, #32
     7b2:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     7b4:	0004      	movs	r4, r0
     7b6:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7b8:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     7ba:	42bc      	cmp	r4, r7
     7bc:	d902      	bls.n	7c4 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7be:	0010      	movs	r0, r2
     7c0:	b003      	add	sp, #12
     7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7c4:	2b00      	cmp	r3, #0
     7c6:	d114      	bne.n	7f2 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7c8:	0002      	movs	r2, r0
     7ca:	0008      	movs	r0, r1
     7cc:	2100      	movs	r1, #0
     7ce:	4c19      	ldr	r4, [pc, #100]	; (834 <_sercom_get_async_baud_val+0x8c>)
     7d0:	47a0      	blx	r4
     7d2:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7d4:	003a      	movs	r2, r7
     7d6:	2300      	movs	r3, #0
     7d8:	2000      	movs	r0, #0
     7da:	4c17      	ldr	r4, [pc, #92]	; (838 <_sercom_get_async_baud_val+0x90>)
     7dc:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7de:	2200      	movs	r2, #0
     7e0:	2301      	movs	r3, #1
     7e2:	1a12      	subs	r2, r2, r0
     7e4:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7e6:	0c12      	lsrs	r2, r2, #16
     7e8:	041b      	lsls	r3, r3, #16
     7ea:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     7ec:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     7ee:	2200      	movs	r2, #0
     7f0:	e7e5      	b.n	7be <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     7f2:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7f4:	2b01      	cmp	r3, #1
     7f6:	d1f9      	bne.n	7ec <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     7f8:	000a      	movs	r2, r1
     7fa:	2300      	movs	r3, #0
     7fc:	2100      	movs	r1, #0
     7fe:	4c0d      	ldr	r4, [pc, #52]	; (834 <_sercom_get_async_baud_val+0x8c>)
     800:	47a0      	blx	r4
     802:	0002      	movs	r2, r0
     804:	000b      	movs	r3, r1
     806:	9200      	str	r2, [sp, #0]
     808:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     80a:	0038      	movs	r0, r7
     80c:	2100      	movs	r1, #0
     80e:	4c0a      	ldr	r4, [pc, #40]	; (838 <_sercom_get_async_baud_val+0x90>)
     810:	47a0      	blx	r4
     812:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     814:	2380      	movs	r3, #128	; 0x80
     816:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     818:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     81a:	4298      	cmp	r0, r3
     81c:	d8cf      	bhi.n	7be <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     81e:	0f79      	lsrs	r1, r7, #29
     820:	00f8      	lsls	r0, r7, #3
     822:	9a00      	ldr	r2, [sp, #0]
     824:	9b01      	ldr	r3, [sp, #4]
     826:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     828:	00ea      	lsls	r2, r5, #3
     82a:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     82c:	b2d2      	uxtb	r2, r2
     82e:	0352      	lsls	r2, r2, #13
     830:	432a      	orrs	r2, r5
     832:	e7db      	b.n	7ec <_sercom_get_async_baud_val+0x44>
     834:	00001a61 	.word	0x00001a61
     838:	000006c5 	.word	0x000006c5

0000083c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     83c:	b510      	push	{r4, lr}
     83e:	b082      	sub	sp, #8
     840:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     842:	4b0e      	ldr	r3, [pc, #56]	; (87c <sercom_set_gclk_generator+0x40>)
     844:	781b      	ldrb	r3, [r3, #0]
     846:	2b00      	cmp	r3, #0
     848:	d007      	beq.n	85a <sercom_set_gclk_generator+0x1e>
     84a:	2900      	cmp	r1, #0
     84c:	d105      	bne.n	85a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     84e:	4b0b      	ldr	r3, [pc, #44]	; (87c <sercom_set_gclk_generator+0x40>)
     850:	785b      	ldrb	r3, [r3, #1]
     852:	4283      	cmp	r3, r0
     854:	d010      	beq.n	878 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     856:	201d      	movs	r0, #29
     858:	e00c      	b.n	874 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     85a:	a901      	add	r1, sp, #4
     85c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     85e:	2011      	movs	r0, #17
     860:	4b07      	ldr	r3, [pc, #28]	; (880 <sercom_set_gclk_generator+0x44>)
     862:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     864:	2011      	movs	r0, #17
     866:	4b07      	ldr	r3, [pc, #28]	; (884 <sercom_set_gclk_generator+0x48>)
     868:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     86a:	4b04      	ldr	r3, [pc, #16]	; (87c <sercom_set_gclk_generator+0x40>)
     86c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     86e:	2201      	movs	r2, #1
     870:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     872:	2000      	movs	r0, #0
}
     874:	b002      	add	sp, #8
     876:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     878:	2000      	movs	r0, #0
     87a:	e7fb      	b.n	874 <sercom_set_gclk_generator+0x38>
     87c:	20000200 	.word	0x20000200
     880:	00001411 	.word	0x00001411
     884:	000013a1 	.word	0x000013a1

00000888 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     888:	4b40      	ldr	r3, [pc, #256]	; (98c <_sercom_get_default_pad+0x104>)
     88a:	4298      	cmp	r0, r3
     88c:	d032      	beq.n	8f4 <_sercom_get_default_pad+0x6c>
     88e:	d90a      	bls.n	8a6 <_sercom_get_default_pad+0x1e>
     890:	4b3f      	ldr	r3, [pc, #252]	; (990 <_sercom_get_default_pad+0x108>)
     892:	4298      	cmp	r0, r3
     894:	d04e      	beq.n	934 <_sercom_get_default_pad+0xac>
     896:	4b3f      	ldr	r3, [pc, #252]	; (994 <_sercom_get_default_pad+0x10c>)
     898:	4298      	cmp	r0, r3
     89a:	d05b      	beq.n	954 <_sercom_get_default_pad+0xcc>
     89c:	4b3e      	ldr	r3, [pc, #248]	; (998 <_sercom_get_default_pad+0x110>)
     89e:	4298      	cmp	r0, r3
     8a0:	d038      	beq.n	914 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     8a2:	2000      	movs	r0, #0
}
     8a4:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     8a6:	2384      	movs	r3, #132	; 0x84
     8a8:	05db      	lsls	r3, r3, #23
     8aa:	4298      	cmp	r0, r3
     8ac:	d00c      	beq.n	8c8 <_sercom_get_default_pad+0x40>
     8ae:	4b3b      	ldr	r3, [pc, #236]	; (99c <_sercom_get_default_pad+0x114>)
     8b0:	4298      	cmp	r0, r3
     8b2:	d1f6      	bne.n	8a2 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8b4:	2901      	cmp	r1, #1
     8b6:	d017      	beq.n	8e8 <_sercom_get_default_pad+0x60>
     8b8:	2900      	cmp	r1, #0
     8ba:	d05d      	beq.n	978 <_sercom_get_default_pad+0xf0>
     8bc:	2902      	cmp	r1, #2
     8be:	d015      	beq.n	8ec <_sercom_get_default_pad+0x64>
     8c0:	2903      	cmp	r1, #3
     8c2:	d015      	beq.n	8f0 <_sercom_get_default_pad+0x68>
	return 0;
     8c4:	2000      	movs	r0, #0
     8c6:	e7ed      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c8:	2901      	cmp	r1, #1
     8ca:	d007      	beq.n	8dc <_sercom_get_default_pad+0x54>
     8cc:	2900      	cmp	r1, #0
     8ce:	d051      	beq.n	974 <_sercom_get_default_pad+0xec>
     8d0:	2902      	cmp	r1, #2
     8d2:	d005      	beq.n	8e0 <_sercom_get_default_pad+0x58>
     8d4:	2903      	cmp	r1, #3
     8d6:	d005      	beq.n	8e4 <_sercom_get_default_pad+0x5c>
	return 0;
     8d8:	2000      	movs	r0, #0
     8da:	e7e3      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8dc:	4830      	ldr	r0, [pc, #192]	; (9a0 <_sercom_get_default_pad+0x118>)
     8de:	e7e1      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8e0:	4830      	ldr	r0, [pc, #192]	; (9a4 <_sercom_get_default_pad+0x11c>)
     8e2:	e7df      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8e4:	4830      	ldr	r0, [pc, #192]	; (9a8 <_sercom_get_default_pad+0x120>)
     8e6:	e7dd      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8e8:	4830      	ldr	r0, [pc, #192]	; (9ac <_sercom_get_default_pad+0x124>)
     8ea:	e7db      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8ec:	4830      	ldr	r0, [pc, #192]	; (9b0 <_sercom_get_default_pad+0x128>)
     8ee:	e7d9      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8f0:	4830      	ldr	r0, [pc, #192]	; (9b4 <_sercom_get_default_pad+0x12c>)
     8f2:	e7d7      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     8f4:	2901      	cmp	r1, #1
     8f6:	d007      	beq.n	908 <_sercom_get_default_pad+0x80>
     8f8:	2900      	cmp	r1, #0
     8fa:	d03f      	beq.n	97c <_sercom_get_default_pad+0xf4>
     8fc:	2902      	cmp	r1, #2
     8fe:	d005      	beq.n	90c <_sercom_get_default_pad+0x84>
     900:	2903      	cmp	r1, #3
     902:	d005      	beq.n	910 <_sercom_get_default_pad+0x88>
	return 0;
     904:	2000      	movs	r0, #0
     906:	e7cd      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     908:	482b      	ldr	r0, [pc, #172]	; (9b8 <_sercom_get_default_pad+0x130>)
     90a:	e7cb      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     90c:	482b      	ldr	r0, [pc, #172]	; (9bc <_sercom_get_default_pad+0x134>)
     90e:	e7c9      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     910:	482b      	ldr	r0, [pc, #172]	; (9c0 <_sercom_get_default_pad+0x138>)
     912:	e7c7      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     914:	2901      	cmp	r1, #1
     916:	d007      	beq.n	928 <_sercom_get_default_pad+0xa0>
     918:	2900      	cmp	r1, #0
     91a:	d031      	beq.n	980 <_sercom_get_default_pad+0xf8>
     91c:	2902      	cmp	r1, #2
     91e:	d005      	beq.n	92c <_sercom_get_default_pad+0xa4>
     920:	2903      	cmp	r1, #3
     922:	d005      	beq.n	930 <_sercom_get_default_pad+0xa8>
	return 0;
     924:	2000      	movs	r0, #0
     926:	e7bd      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     928:	4826      	ldr	r0, [pc, #152]	; (9c4 <_sercom_get_default_pad+0x13c>)
     92a:	e7bb      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     92c:	4826      	ldr	r0, [pc, #152]	; (9c8 <_sercom_get_default_pad+0x140>)
     92e:	e7b9      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     930:	4826      	ldr	r0, [pc, #152]	; (9cc <_sercom_get_default_pad+0x144>)
     932:	e7b7      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     934:	2901      	cmp	r1, #1
     936:	d007      	beq.n	948 <_sercom_get_default_pad+0xc0>
     938:	2900      	cmp	r1, #0
     93a:	d023      	beq.n	984 <_sercom_get_default_pad+0xfc>
     93c:	2902      	cmp	r1, #2
     93e:	d005      	beq.n	94c <_sercom_get_default_pad+0xc4>
     940:	2903      	cmp	r1, #3
     942:	d005      	beq.n	950 <_sercom_get_default_pad+0xc8>
	return 0;
     944:	2000      	movs	r0, #0
     946:	e7ad      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     948:	4821      	ldr	r0, [pc, #132]	; (9d0 <_sercom_get_default_pad+0x148>)
     94a:	e7ab      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     94c:	4821      	ldr	r0, [pc, #132]	; (9d4 <_sercom_get_default_pad+0x14c>)
     94e:	e7a9      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     950:	4821      	ldr	r0, [pc, #132]	; (9d8 <_sercom_get_default_pad+0x150>)
     952:	e7a7      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     954:	2901      	cmp	r1, #1
     956:	d007      	beq.n	968 <_sercom_get_default_pad+0xe0>
     958:	2900      	cmp	r1, #0
     95a:	d015      	beq.n	988 <_sercom_get_default_pad+0x100>
     95c:	2902      	cmp	r1, #2
     95e:	d005      	beq.n	96c <_sercom_get_default_pad+0xe4>
     960:	2903      	cmp	r1, #3
     962:	d005      	beq.n	970 <_sercom_get_default_pad+0xe8>
	return 0;
     964:	2000      	movs	r0, #0
     966:	e79d      	b.n	8a4 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     968:	481c      	ldr	r0, [pc, #112]	; (9dc <_sercom_get_default_pad+0x154>)
     96a:	e79b      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     96c:	481c      	ldr	r0, [pc, #112]	; (9e0 <_sercom_get_default_pad+0x158>)
     96e:	e799      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     970:	481c      	ldr	r0, [pc, #112]	; (9e4 <_sercom_get_default_pad+0x15c>)
     972:	e797      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     974:	481c      	ldr	r0, [pc, #112]	; (9e8 <_sercom_get_default_pad+0x160>)
     976:	e795      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     978:	2003      	movs	r0, #3
     97a:	e793      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     97c:	481b      	ldr	r0, [pc, #108]	; (9ec <_sercom_get_default_pad+0x164>)
     97e:	e791      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     980:	481b      	ldr	r0, [pc, #108]	; (9f0 <_sercom_get_default_pad+0x168>)
     982:	e78f      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     984:	481b      	ldr	r0, [pc, #108]	; (9f4 <_sercom_get_default_pad+0x16c>)
     986:	e78d      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     988:	481b      	ldr	r0, [pc, #108]	; (9f8 <_sercom_get_default_pad+0x170>)
     98a:	e78b      	b.n	8a4 <_sercom_get_default_pad+0x1c>
     98c:	42000800 	.word	0x42000800
     990:	42001000 	.word	0x42001000
     994:	43000400 	.word	0x43000400
     998:	42000c00 	.word	0x42000c00
     99c:	42000400 	.word	0x42000400
     9a0:	00050003 	.word	0x00050003
     9a4:	00060003 	.word	0x00060003
     9a8:	00070003 	.word	0x00070003
     9ac:	00010003 	.word	0x00010003
     9b0:	001e0003 	.word	0x001e0003
     9b4:	001f0003 	.word	0x001f0003
     9b8:	00090003 	.word	0x00090003
     9bc:	000a0003 	.word	0x000a0003
     9c0:	000b0003 	.word	0x000b0003
     9c4:	00110003 	.word	0x00110003
     9c8:	00120003 	.word	0x00120003
     9cc:	00130003 	.word	0x00130003
     9d0:	000d0003 	.word	0x000d0003
     9d4:	000e0003 	.word	0x000e0003
     9d8:	000f0003 	.word	0x000f0003
     9dc:	00170003 	.word	0x00170003
     9e0:	00180003 	.word	0x00180003
     9e4:	00190003 	.word	0x00190003
     9e8:	00040003 	.word	0x00040003
     9ec:	00080003 	.word	0x00080003
     9f0:	00100003 	.word	0x00100003
     9f4:	000c0003 	.word	0x000c0003
     9f8:	00160003 	.word	0x00160003

000009fc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9fc:	b530      	push	{r4, r5, lr}
     9fe:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <_sercom_get_sercom_inst_index+0x34>)
     a02:	466a      	mov	r2, sp
     a04:	cb32      	ldmia	r3!, {r1, r4, r5}
     a06:	c232      	stmia	r2!, {r1, r4, r5}
     a08:	cb32      	ldmia	r3!, {r1, r4, r5}
     a0a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     a0c:	9b00      	ldr	r3, [sp, #0]
     a0e:	4283      	cmp	r3, r0
     a10:	d00b      	beq.n	a2a <_sercom_get_sercom_inst_index+0x2e>
     a12:	2301      	movs	r3, #1
     a14:	009a      	lsls	r2, r3, #2
     a16:	4669      	mov	r1, sp
     a18:	5852      	ldr	r2, [r2, r1]
     a1a:	4282      	cmp	r2, r0
     a1c:	d006      	beq.n	a2c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a1e:	3301      	adds	r3, #1
     a20:	2b06      	cmp	r3, #6
     a22:	d1f7      	bne.n	a14 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a24:	2000      	movs	r0, #0
}
     a26:	b007      	add	sp, #28
     a28:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a2a:	2300      	movs	r3, #0
			return i;
     a2c:	b2d8      	uxtb	r0, r3
     a2e:	e7fa      	b.n	a26 <_sercom_get_sercom_inst_index+0x2a>
     a30:	00004358 	.word	0x00004358

00000a34 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     a34:	4770      	bx	lr
	...

00000a38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     a3a:	4b0a      	ldr	r3, [pc, #40]	; (a64 <_sercom_set_handler+0x2c>)
     a3c:	781b      	ldrb	r3, [r3, #0]
     a3e:	2b00      	cmp	r3, #0
     a40:	d10c      	bne.n	a5c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a42:	4f09      	ldr	r7, [pc, #36]	; (a68 <_sercom_set_handler+0x30>)
     a44:	4e09      	ldr	r6, [pc, #36]	; (a6c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     a46:	4d0a      	ldr	r5, [pc, #40]	; (a70 <_sercom_set_handler+0x38>)
     a48:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     a4a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     a4c:	195a      	adds	r2, r3, r5
     a4e:	6014      	str	r4, [r2, #0]
     a50:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a52:	2b18      	cmp	r3, #24
     a54:	d1f9      	bne.n	a4a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     a56:	2201      	movs	r2, #1
     a58:	4b02      	ldr	r3, [pc, #8]	; (a64 <_sercom_set_handler+0x2c>)
     a5a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     a5c:	0080      	lsls	r0, r0, #2
     a5e:	4b02      	ldr	r3, [pc, #8]	; (a68 <_sercom_set_handler+0x30>)
     a60:	50c1      	str	r1, [r0, r3]
}
     a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a64:	20000202 	.word	0x20000202
     a68:	20000204 	.word	0x20000204
     a6c:	00000a35 	.word	0x00000a35
     a70:	200002b8 	.word	0x200002b8

00000a74 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     a74:	b500      	push	{lr}
     a76:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     a78:	2308      	movs	r3, #8
     a7a:	466a      	mov	r2, sp
     a7c:	7013      	strb	r3, [r2, #0]
     a7e:	3301      	adds	r3, #1
     a80:	7053      	strb	r3, [r2, #1]
     a82:	3301      	adds	r3, #1
     a84:	7093      	strb	r3, [r2, #2]
     a86:	3301      	adds	r3, #1
     a88:	70d3      	strb	r3, [r2, #3]
     a8a:	3301      	adds	r3, #1
     a8c:	7113      	strb	r3, [r2, #4]
     a8e:	3301      	adds	r3, #1
     a90:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     a92:	4b03      	ldr	r3, [pc, #12]	; (aa0 <_sercom_get_interrupt_vector+0x2c>)
     a94:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     a96:	466b      	mov	r3, sp
     a98:	5618      	ldrsb	r0, [r3, r0]
}
     a9a:	b003      	add	sp, #12
     a9c:	bd00      	pop	{pc}
     a9e:	46c0      	nop			; (mov r8, r8)
     aa0:	000009fd 	.word	0x000009fd

00000aa4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     aa4:	b510      	push	{r4, lr}
     aa6:	4b02      	ldr	r3, [pc, #8]	; (ab0 <SERCOM0_Handler+0xc>)
     aa8:	681b      	ldr	r3, [r3, #0]
     aaa:	2000      	movs	r0, #0
     aac:	4798      	blx	r3
     aae:	bd10      	pop	{r4, pc}
     ab0:	20000204 	.word	0x20000204

00000ab4 <SERCOM1_Handler>:
     ab4:	b510      	push	{r4, lr}
     ab6:	4b02      	ldr	r3, [pc, #8]	; (ac0 <SERCOM1_Handler+0xc>)
     ab8:	685b      	ldr	r3, [r3, #4]
     aba:	2001      	movs	r0, #1
     abc:	4798      	blx	r3
     abe:	bd10      	pop	{r4, pc}
     ac0:	20000204 	.word	0x20000204

00000ac4 <SERCOM2_Handler>:
     ac4:	b510      	push	{r4, lr}
     ac6:	4b02      	ldr	r3, [pc, #8]	; (ad0 <SERCOM2_Handler+0xc>)
     ac8:	689b      	ldr	r3, [r3, #8]
     aca:	2002      	movs	r0, #2
     acc:	4798      	blx	r3
     ace:	bd10      	pop	{r4, pc}
     ad0:	20000204 	.word	0x20000204

00000ad4 <SERCOM3_Handler>:
     ad4:	b510      	push	{r4, lr}
     ad6:	4b02      	ldr	r3, [pc, #8]	; (ae0 <SERCOM3_Handler+0xc>)
     ad8:	68db      	ldr	r3, [r3, #12]
     ada:	2003      	movs	r0, #3
     adc:	4798      	blx	r3
     ade:	bd10      	pop	{r4, pc}
     ae0:	20000204 	.word	0x20000204

00000ae4 <SERCOM4_Handler>:
     ae4:	b510      	push	{r4, lr}
     ae6:	4b02      	ldr	r3, [pc, #8]	; (af0 <SERCOM4_Handler+0xc>)
     ae8:	691b      	ldr	r3, [r3, #16]
     aea:	2004      	movs	r0, #4
     aec:	4798      	blx	r3
     aee:	bd10      	pop	{r4, pc}
     af0:	20000204 	.word	0x20000204

00000af4 <SERCOM5_Handler>:
     af4:	b510      	push	{r4, lr}
     af6:	4b02      	ldr	r3, [pc, #8]	; (b00 <SERCOM5_Handler+0xc>)
     af8:	695b      	ldr	r3, [r3, #20]
     afa:	2005      	movs	r0, #5
     afc:	4798      	blx	r3
     afe:	bd10      	pop	{r4, pc}
     b00:	20000204 	.word	0x20000204

00000b04 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     b04:	b5f0      	push	{r4, r5, r6, r7, lr}
     b06:	46de      	mov	lr, fp
     b08:	4657      	mov	r7, sl
     b0a:	464e      	mov	r6, r9
     b0c:	4645      	mov	r5, r8
     b0e:	b5e0      	push	{r5, r6, r7, lr}
     b10:	b091      	sub	sp, #68	; 0x44
     b12:	0005      	movs	r5, r0
     b14:	000c      	movs	r4, r1
     b16:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     b18:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     b1a:	0008      	movs	r0, r1
     b1c:	4bc4      	ldr	r3, [pc, #784]	; (e30 <usart_init+0x32c>)
     b1e:	4798      	blx	r3
     b20:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
     b22:	2805      	cmp	r0, #5
     b24:	d00d      	beq.n	b42 <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     b26:	0007      	movs	r7, r0
     b28:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     b2a:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b2c:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     b2e:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     b30:	07c9      	lsls	r1, r1, #31
     b32:	d509      	bpl.n	b48 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     b34:	b011      	add	sp, #68	; 0x44
     b36:	bc3c      	pop	{r2, r3, r4, r5}
     b38:	4690      	mov	r8, r2
     b3a:	4699      	mov	r9, r3
     b3c:	46a2      	mov	sl, r4
     b3e:	46ab      	mov	fp, r5
     b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     b42:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
     b44:	2301      	movs	r3, #1
     b46:	e7f1      	b.n	b2c <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b48:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
     b4a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     b4c:	0789      	lsls	r1, r1, #30
     b4e:	d4f1      	bmi.n	b34 <usart_init+0x30>
	if (sercom_index == 5) {
     b50:	2a05      	cmp	r2, #5
     b52:	d049      	beq.n	be8 <usart_init+0xe4>
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     b54:	49b7      	ldr	r1, [pc, #732]	; (e34 <usart_init+0x330>)
     b56:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
     b58:	2201      	movs	r2, #1
     b5a:	409a      	lsls	r2, r3
     b5c:	0013      	movs	r3, r2
     b5e:	4303      	orrs	r3, r0
     b60:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     b62:	a90f      	add	r1, sp, #60	; 0x3c
     b64:	232d      	movs	r3, #45	; 0x2d
     b66:	4698      	mov	r8, r3
     b68:	5cf3      	ldrb	r3, [r6, r3]
     b6a:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     b6c:	b2ff      	uxtb	r7, r7
     b6e:	0038      	movs	r0, r7
     b70:	4bb1      	ldr	r3, [pc, #708]	; (e38 <usart_init+0x334>)
     b72:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     b74:	0038      	movs	r0, r7
     b76:	4bb1      	ldr	r3, [pc, #708]	; (e3c <usart_init+0x338>)
     b78:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     b7a:	4643      	mov	r3, r8
     b7c:	5cf0      	ldrb	r0, [r6, r3]
     b7e:	2100      	movs	r1, #0
     b80:	4baf      	ldr	r3, [pc, #700]	; (e40 <usart_init+0x33c>)
     b82:	4798      	blx	r3
	module->character_size = config->character_size;
     b84:	7af3      	ldrb	r3, [r6, #11]
     b86:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     b88:	2324      	movs	r3, #36	; 0x24
     b8a:	5cf3      	ldrb	r3, [r6, r3]
     b8c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     b8e:	2325      	movs	r3, #37	; 0x25
     b90:	5cf3      	ldrb	r3, [r6, r3]
     b92:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     b94:	7ef3      	ldrb	r3, [r6, #27]
     b96:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     b98:	7f33      	ldrb	r3, [r6, #28]
     b9a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b9c:	682b      	ldr	r3, [r5, #0]
     b9e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     ba0:	0018      	movs	r0, r3
     ba2:	4ba3      	ldr	r3, [pc, #652]	; (e30 <usart_init+0x32c>)
     ba4:	4798      	blx	r3
	if (sercom_index == 5) {
     ba6:	2805      	cmp	r0, #5
     ba8:	d026      	beq.n	bf8 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     baa:	3012      	adds	r0, #18
	uint16_t baud  = 0;
     bac:	2200      	movs	r2, #0
     bae:	230e      	movs	r3, #14
     bb0:	a906      	add	r1, sp, #24
     bb2:	468c      	mov	ip, r1
     bb4:	4463      	add	r3, ip
     bb6:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     bb8:	8a32      	ldrh	r2, [r6, #16]
     bba:	9202      	str	r2, [sp, #8]
     bbc:	2380      	movs	r3, #128	; 0x80
     bbe:	01db      	lsls	r3, r3, #7
     bc0:	429a      	cmp	r2, r3
     bc2:	d100      	bne.n	bc6 <usart_init+0xc2>
     bc4:	e0a7      	b.n	d16 <usart_init+0x212>
     bc6:	d919      	bls.n	bfc <usart_init+0xf8>
     bc8:	23c0      	movs	r3, #192	; 0xc0
     bca:	01db      	lsls	r3, r3, #7
     bcc:	9a02      	ldr	r2, [sp, #8]
     bce:	429a      	cmp	r2, r3
     bd0:	d100      	bne.n	bd4 <usart_init+0xd0>
     bd2:	e09b      	b.n	d0c <usart_init+0x208>
     bd4:	2380      	movs	r3, #128	; 0x80
     bd6:	021b      	lsls	r3, r3, #8
     bd8:	429a      	cmp	r2, r3
     bda:	d000      	beq.n	bde <usart_init+0xda>
     bdc:	e123      	b.n	e26 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     bde:	2303      	movs	r3, #3
     be0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     be2:	2300      	movs	r3, #0
     be4:	9307      	str	r3, [sp, #28]
     be6:	e012      	b.n	c0e <usart_init+0x10a>
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     be8:	4992      	ldr	r1, [pc, #584]	; (e34 <usart_init+0x330>)
     bea:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
     bec:	3a04      	subs	r2, #4
     bee:	409a      	lsls	r2, r3
     bf0:	0013      	movs	r3, r2
     bf2:	4303      	orrs	r3, r0
     bf4:	620b      	str	r3, [r1, #32]
     bf6:	e7b4      	b.n	b62 <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
     bf8:	2018      	movs	r0, #24
     bfa:	e7d7      	b.n	bac <usart_init+0xa8>
	switch (config->sample_rate) {
     bfc:	2380      	movs	r3, #128	; 0x80
     bfe:	019b      	lsls	r3, r3, #6
     c00:	429a      	cmp	r2, r3
     c02:	d000      	beq.n	c06 <usart_init+0x102>
     c04:	e10f      	b.n	e26 <usart_init+0x322>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     c06:	2310      	movs	r3, #16
     c08:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     c0a:	3b0f      	subs	r3, #15
     c0c:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     c0e:	6833      	ldr	r3, [r6, #0]
     c10:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     c12:	68f3      	ldr	r3, [r6, #12]
     c14:	469b      	mov	fp, r3
		config->sample_adjustment |
     c16:	6973      	ldr	r3, [r6, #20]
     c18:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c1a:	7e33      	ldrb	r3, [r6, #24]
     c1c:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c1e:	2326      	movs	r3, #38	; 0x26
     c20:	5cf3      	ldrb	r3, [r6, r3]
     c22:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     c24:	6873      	ldr	r3, [r6, #4]
     c26:	4699      	mov	r9, r3
	switch (transfer_mode)
     c28:	2b00      	cmp	r3, #0
     c2a:	d100      	bne.n	c2e <usart_init+0x12a>
     c2c:	e09b      	b.n	d66 <usart_init+0x262>
     c2e:	2380      	movs	r3, #128	; 0x80
     c30:	055b      	lsls	r3, r3, #21
     c32:	4599      	cmp	r9, r3
     c34:	d104      	bne.n	c40 <usart_init+0x13c>
			if (!config->use_external_clock) {
     c36:	2327      	movs	r3, #39	; 0x27
     c38:	5cf3      	ldrb	r3, [r6, r3]
     c3a:	2b00      	cmp	r3, #0
     c3c:	d100      	bne.n	c40 <usart_init+0x13c>
     c3e:	e080      	b.n	d42 <usart_init+0x23e>
	if(config->encoding_format_enable) {
     c40:	7e73      	ldrb	r3, [r6, #25]
     c42:	2b00      	cmp	r3, #0
     c44:	d002      	beq.n	c4c <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     c46:	7eb3      	ldrb	r3, [r6, #26]
     c48:	4642      	mov	r2, r8
     c4a:	7393      	strb	r3, [r2, #14]
	usart_hw->BAUD.reg = baud;
     c4c:	230e      	movs	r3, #14
     c4e:	aa06      	add	r2, sp, #24
     c50:	4694      	mov	ip, r2
     c52:	4463      	add	r3, ip
     c54:	881b      	ldrh	r3, [r3, #0]
     c56:	4642      	mov	r2, r8
     c58:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     c5a:	9b05      	ldr	r3, [sp, #20]
     c5c:	465a      	mov	r2, fp
     c5e:	4313      	orrs	r3, r2
     c60:	9a03      	ldr	r2, [sp, #12]
     c62:	4313      	orrs	r3, r2
     c64:	464a      	mov	r2, r9
     c66:	4313      	orrs	r3, r2
     c68:	9f02      	ldr	r7, [sp, #8]
     c6a:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     c6c:	9b04      	ldr	r3, [sp, #16]
     c6e:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     c70:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     c72:	4653      	mov	r3, sl
     c74:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     c76:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     c78:	2327      	movs	r3, #39	; 0x27
     c7a:	5cf3      	ldrb	r3, [r6, r3]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d101      	bne.n	c84 <usart_init+0x180>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     c80:	3304      	adds	r3, #4
     c82:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c84:	7e73      	ldrb	r3, [r6, #25]
     c86:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c88:	7f32      	ldrb	r2, [r6, #28]
     c8a:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     c8c:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c8e:	7f72      	ldrb	r2, [r6, #29]
     c90:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     c92:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     c94:	2224      	movs	r2, #36	; 0x24
     c96:	5cb2      	ldrb	r2, [r6, r2]
     c98:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     c9a:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     c9c:	2225      	movs	r2, #37	; 0x25
     c9e:	5cb2      	ldrb	r2, [r6, r2]
     ca0:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ca2:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     ca4:	7ab1      	ldrb	r1, [r6, #10]
     ca6:	7af2      	ldrb	r2, [r6, #11]
     ca8:	4311      	orrs	r1, r2
     caa:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     cac:	8933      	ldrh	r3, [r6, #8]
     cae:	2bff      	cmp	r3, #255	; 0xff
     cb0:	d07d      	beq.n	dae <usart_init+0x2aa>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     cb2:	2280      	movs	r2, #128	; 0x80
     cb4:	0452      	lsls	r2, r2, #17
     cb6:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     cb8:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     cba:	232c      	movs	r3, #44	; 0x2c
     cbc:	5cf3      	ldrb	r3, [r6, r3]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d103      	bne.n	cca <usart_init+0x1c6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     cc2:	4b60      	ldr	r3, [pc, #384]	; (e44 <usart_init+0x340>)
     cc4:	789b      	ldrb	r3, [r3, #2]
     cc6:	079b      	lsls	r3, r3, #30
     cc8:	d501      	bpl.n	cce <usart_init+0x1ca>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     cca:	2380      	movs	r3, #128	; 0x80
     ccc:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     cce:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     cd0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     cd2:	2b00      	cmp	r3, #0
     cd4:	d1fc      	bne.n	cd0 <usart_init+0x1cc>
	usart_hw->CTRLB.reg = ctrlb;
     cd6:	4643      	mov	r3, r8
     cd8:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     cda:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     cdc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     cde:	2b00      	cmp	r3, #0
     ce0:	d1fc      	bne.n	cdc <usart_init+0x1d8>
	usart_hw->CTRLA.reg = ctrla;
     ce2:	4643      	mov	r3, r8
     ce4:	601f      	str	r7, [r3, #0]
     ce6:	ab0e      	add	r3, sp, #56	; 0x38
     ce8:	2280      	movs	r2, #128	; 0x80
     cea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     cec:	2200      	movs	r2, #0
     cee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     cf0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     cf2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     cf4:	6b33      	ldr	r3, [r6, #48]	; 0x30
     cf6:	930a      	str	r3, [sp, #40]	; 0x28
     cf8:	6b73      	ldr	r3, [r6, #52]	; 0x34
     cfa:	930b      	str	r3, [sp, #44]	; 0x2c
     cfc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     cfe:	930c      	str	r3, [sp, #48]	; 0x30
     d00:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     d02:	9302      	str	r3, [sp, #8]
     d04:	930d      	str	r3, [sp, #52]	; 0x34
     d06:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     d08:	ae0a      	add	r6, sp, #40	; 0x28
     d0a:	e05e      	b.n	dca <usart_init+0x2c6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d0c:	2308      	movs	r3, #8
     d0e:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     d10:	3b07      	subs	r3, #7
     d12:	9307      	str	r3, [sp, #28]
     d14:	e77b      	b.n	c0e <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
     d16:	6833      	ldr	r3, [r6, #0]
     d18:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     d1a:	68f3      	ldr	r3, [r6, #12]
     d1c:	469b      	mov	fp, r3
		config->sample_adjustment |
     d1e:	6973      	ldr	r3, [r6, #20]
     d20:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     d22:	7e33      	ldrb	r3, [r6, #24]
     d24:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d26:	2326      	movs	r3, #38	; 0x26
     d28:	5cf3      	ldrb	r3, [r6, r3]
     d2a:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d2c:	6873      	ldr	r3, [r6, #4]
     d2e:	4699      	mov	r9, r3
	switch (transfer_mode)
     d30:	2b00      	cmp	r3, #0
     d32:	d014      	beq.n	d5e <usart_init+0x25a>
     d34:	2380      	movs	r3, #128	; 0x80
     d36:	055b      	lsls	r3, r3, #21
     d38:	4599      	cmp	r9, r3
     d3a:	d100      	bne.n	d3e <usart_init+0x23a>
     d3c:	e77b      	b.n	c36 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
     d3e:	2000      	movs	r0, #0
     d40:	e020      	b.n	d84 <usart_init+0x280>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d42:	6a33      	ldr	r3, [r6, #32]
     d44:	001f      	movs	r7, r3
     d46:	b2c0      	uxtb	r0, r0
     d48:	4b3f      	ldr	r3, [pc, #252]	; (e48 <usart_init+0x344>)
     d4a:	4798      	blx	r3
     d4c:	0001      	movs	r1, r0
     d4e:	220e      	movs	r2, #14
     d50:	ab06      	add	r3, sp, #24
     d52:	469c      	mov	ip, r3
     d54:	4462      	add	r2, ip
     d56:	0038      	movs	r0, r7
     d58:	4b3c      	ldr	r3, [pc, #240]	; (e4c <usart_init+0x348>)
     d5a:	4798      	blx	r3
     d5c:	e012      	b.n	d84 <usart_init+0x280>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     d5e:	2308      	movs	r3, #8
     d60:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     d62:	2300      	movs	r3, #0
     d64:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     d66:	2327      	movs	r3, #39	; 0x27
     d68:	5cf3      	ldrb	r3, [r6, r3]
     d6a:	2b00      	cmp	r3, #0
     d6c:	d00e      	beq.n	d8c <usart_init+0x288>
				status_code =
     d6e:	9b06      	ldr	r3, [sp, #24]
     d70:	9300      	str	r3, [sp, #0]
     d72:	9b07      	ldr	r3, [sp, #28]
     d74:	220e      	movs	r2, #14
     d76:	a906      	add	r1, sp, #24
     d78:	468c      	mov	ip, r1
     d7a:	4462      	add	r2, ip
     d7c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     d7e:	6a30      	ldr	r0, [r6, #32]
     d80:	4f33      	ldr	r7, [pc, #204]	; (e50 <usart_init+0x34c>)
     d82:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     d84:	2800      	cmp	r0, #0
     d86:	d000      	beq.n	d8a <usart_init+0x286>
     d88:	e6d4      	b.n	b34 <usart_init+0x30>
     d8a:	e759      	b.n	c40 <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
     d8c:	6a33      	ldr	r3, [r6, #32]
     d8e:	001f      	movs	r7, r3
     d90:	b2c0      	uxtb	r0, r0
     d92:	4b2d      	ldr	r3, [pc, #180]	; (e48 <usart_init+0x344>)
     d94:	4798      	blx	r3
     d96:	0001      	movs	r1, r0
				status_code =
     d98:	9b06      	ldr	r3, [sp, #24]
     d9a:	9300      	str	r3, [sp, #0]
     d9c:	9b07      	ldr	r3, [sp, #28]
     d9e:	220e      	movs	r2, #14
     da0:	a806      	add	r0, sp, #24
     da2:	4684      	mov	ip, r0
     da4:	4462      	add	r2, ip
     da6:	0038      	movs	r0, r7
     da8:	4f29      	ldr	r7, [pc, #164]	; (e50 <usart_init+0x34c>)
     daa:	47b8      	blx	r7
     dac:	e7ea      	b.n	d84 <usart_init+0x280>
		if(config->lin_slave_enable) {
     dae:	7ef3      	ldrb	r3, [r6, #27]
     db0:	2b00      	cmp	r3, #0
     db2:	d082      	beq.n	cba <usart_init+0x1b6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     db4:	2380      	movs	r3, #128	; 0x80
     db6:	04db      	lsls	r3, r3, #19
     db8:	431f      	orrs	r7, r3
     dba:	e77e      	b.n	cba <usart_init+0x1b6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     dbc:	0020      	movs	r0, r4
     dbe:	4b25      	ldr	r3, [pc, #148]	; (e54 <usart_init+0x350>)
     dc0:	4798      	blx	r3
     dc2:	e007      	b.n	dd4 <usart_init+0x2d0>
     dc4:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     dc6:	2f04      	cmp	r7, #4
     dc8:	d00d      	beq.n	de6 <usart_init+0x2e2>
     dca:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     dcc:	00bb      	lsls	r3, r7, #2
     dce:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     dd0:	2800      	cmp	r0, #0
     dd2:	d0f3      	beq.n	dbc <usart_init+0x2b8>
		if (current_pinmux != PINMUX_UNUSED) {
     dd4:	1c43      	adds	r3, r0, #1
     dd6:	d0f5      	beq.n	dc4 <usart_init+0x2c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     dd8:	a90e      	add	r1, sp, #56	; 0x38
     dda:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ddc:	0c00      	lsrs	r0, r0, #16
     dde:	b2c0      	uxtb	r0, r0
     de0:	4b1d      	ldr	r3, [pc, #116]	; (e58 <usart_init+0x354>)
     de2:	4798      	blx	r3
     de4:	e7ee      	b.n	dc4 <usart_init+0x2c0>
		module->callback[i]            = NULL;
     de6:	2300      	movs	r3, #0
     de8:	60eb      	str	r3, [r5, #12]
     dea:	612b      	str	r3, [r5, #16]
     dec:	616b      	str	r3, [r5, #20]
     dee:	61ab      	str	r3, [r5, #24]
     df0:	61eb      	str	r3, [r5, #28]
     df2:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     df4:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     df6:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     df8:	2200      	movs	r2, #0
     dfa:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     dfc:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     dfe:	3330      	adds	r3, #48	; 0x30
     e00:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     e02:	3301      	adds	r3, #1
     e04:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     e06:	3301      	adds	r3, #1
     e08:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     e0a:	3301      	adds	r3, #1
     e0c:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     e0e:	6828      	ldr	r0, [r5, #0]
     e10:	4b07      	ldr	r3, [pc, #28]	; (e30 <usart_init+0x32c>)
     e12:	4798      	blx	r3
     e14:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     e16:	4911      	ldr	r1, [pc, #68]	; (e5c <usart_init+0x358>)
     e18:	4b11      	ldr	r3, [pc, #68]	; (e60 <usart_init+0x35c>)
     e1a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     e1c:	00a4      	lsls	r4, r4, #2
     e1e:	4b11      	ldr	r3, [pc, #68]	; (e64 <usart_init+0x360>)
     e20:	50e5      	str	r5, [r4, r3]
	return status_code;
     e22:	2000      	movs	r0, #0
     e24:	e686      	b.n	b34 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     e26:	2310      	movs	r3, #16
     e28:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     e2a:	2300      	movs	r3, #0
     e2c:	9307      	str	r3, [sp, #28]
     e2e:	e6ee      	b.n	c0e <usart_init+0x10a>
     e30:	000009fd 	.word	0x000009fd
     e34:	40000400 	.word	0x40000400
     e38:	00001411 	.word	0x00001411
     e3c:	000013a1 	.word	0x000013a1
     e40:	0000083d 	.word	0x0000083d
     e44:	41002000 	.word	0x41002000
     e48:	00001435 	.word	0x00001435
     e4c:	0000077f 	.word	0x0000077f
     e50:	000007a9 	.word	0x000007a9
     e54:	00000889 	.word	0x00000889
     e58:	0000150d 	.word	0x0000150d
     e5c:	00000ef9 	.word	0x00000ef9
     e60:	00000a39 	.word	0x00000a39
     e64:	200002b8 	.word	0x200002b8

00000e68 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     e68:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     e6a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     e6c:	2a00      	cmp	r2, #0
     e6e:	d101      	bne.n	e74 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     e70:	0018      	movs	r0, r3
     e72:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     e74:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     e76:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e78:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     e7a:	2a00      	cmp	r2, #0
     e7c:	d1f8      	bne.n	e70 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     e7e:	6802      	ldr	r2, [r0, #0]
	usart_hw->DATA.reg = tx_data;
     e80:	8511      	strh	r1, [r2, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     e82:	2102      	movs	r1, #2
     e84:	7e13      	ldrb	r3, [r2, #24]
     e86:	420b      	tst	r3, r1
     e88:	d0fc      	beq.n	e84 <usart_write_wait+0x1c>
	return STATUS_OK;
     e8a:	2300      	movs	r3, #0
     e8c:	e7f0      	b.n	e70 <usart_write_wait+0x8>

00000e8e <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     e8e:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     e90:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     e92:	2a00      	cmp	r2, #0
     e94:	d101      	bne.n	e9a <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     e96:	0018      	movs	r0, r3
     e98:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     e9a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     e9c:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     e9e:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     ea0:	2a00      	cmp	r2, #0
     ea2:	d1f8      	bne.n	e96 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     ea4:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     ea6:	7e10      	ldrb	r0, [r2, #24]
     ea8:	0740      	lsls	r0, r0, #29
     eaa:	d5f4      	bpl.n	e96 <usart_read_wait+0x8>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     eac:	8b53      	ldrh	r3, [r2, #26]
     eae:	b2db      	uxtb	r3, r3
	if (error_code) {
     eb0:	0698      	lsls	r0, r3, #26
     eb2:	d01d      	beq.n	ef0 <usart_read_wait+0x62>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     eb4:	0798      	lsls	r0, r3, #30
     eb6:	d503      	bpl.n	ec0 <usart_read_wait+0x32>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     eb8:	2302      	movs	r3, #2
     eba:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     ebc:	3318      	adds	r3, #24
     ebe:	e7ea      	b.n	e96 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ec0:	0758      	lsls	r0, r3, #29
     ec2:	d503      	bpl.n	ecc <usart_read_wait+0x3e>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     ec4:	2304      	movs	r3, #4
     ec6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     ec8:	331a      	adds	r3, #26
     eca:	e7e4      	b.n	e96 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     ecc:	07d8      	lsls	r0, r3, #31
     ece:	d503      	bpl.n	ed8 <usart_read_wait+0x4a>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     ed0:	2301      	movs	r3, #1
     ed2:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     ed4:	3312      	adds	r3, #18
     ed6:	e7de      	b.n	e96 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     ed8:	06d8      	lsls	r0, r3, #27
     eda:	d503      	bpl.n	ee4 <usart_read_wait+0x56>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     edc:	2310      	movs	r3, #16
     ede:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     ee0:	3332      	adds	r3, #50	; 0x32
     ee2:	e7d8      	b.n	e96 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     ee4:	069b      	lsls	r3, r3, #26
     ee6:	d503      	bpl.n	ef0 <usart_read_wait+0x62>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ee8:	2320      	movs	r3, #32
     eea:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     eec:	3321      	adds	r3, #33	; 0x21
     eee:	e7d2      	b.n	e96 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     ef0:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     ef2:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     ef4:	2300      	movs	r3, #0
     ef6:	e7ce      	b.n	e96 <usart_read_wait+0x8>

00000ef8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     efa:	0080      	lsls	r0, r0, #2
     efc:	4b62      	ldr	r3, [pc, #392]	; (1088 <_usart_interrupt_handler+0x190>)
     efe:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     f00:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     f02:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     f04:	2b00      	cmp	r3, #0
     f06:	d1fc      	bne.n	f02 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     f08:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     f0a:	7da6      	ldrb	r6, [r4, #22]
     f0c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     f0e:	2330      	movs	r3, #48	; 0x30
     f10:	5ceb      	ldrb	r3, [r5, r3]
     f12:	2231      	movs	r2, #49	; 0x31
     f14:	5caf      	ldrb	r7, [r5, r2]
     f16:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     f18:	07f3      	lsls	r3, r6, #31
     f1a:	d522      	bpl.n	f62 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     f1c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f1e:	b29b      	uxth	r3, r3
     f20:	2b00      	cmp	r3, #0
     f22:	d01c      	beq.n	f5e <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f24:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     f26:	7813      	ldrb	r3, [r2, #0]
     f28:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     f2a:	1c51      	adds	r1, r2, #1
     f2c:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f2e:	7969      	ldrb	r1, [r5, #5]
     f30:	2901      	cmp	r1, #1
     f32:	d00e      	beq.n	f52 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     f34:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     f36:	05db      	lsls	r3, r3, #23
     f38:	0ddb      	lsrs	r3, r3, #23
     f3a:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     f3c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     f3e:	3b01      	subs	r3, #1
     f40:	b29b      	uxth	r3, r3
     f42:	85eb      	strh	r3, [r5, #46]	; 0x2e
     f44:	2b00      	cmp	r3, #0
     f46:	d10c      	bne.n	f62 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f48:	3301      	adds	r3, #1
     f4a:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     f4c:	3301      	adds	r3, #1
     f4e:	75a3      	strb	r3, [r4, #22]
     f50:	e007      	b.n	f62 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     f52:	7851      	ldrb	r1, [r2, #1]
     f54:	0209      	lsls	r1, r1, #8
     f56:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     f58:	3202      	adds	r2, #2
     f5a:	62aa      	str	r2, [r5, #40]	; 0x28
     f5c:	e7eb      	b.n	f36 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     f5e:	2301      	movs	r3, #1
     f60:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     f62:	07b3      	lsls	r3, r6, #30
     f64:	d506      	bpl.n	f74 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     f66:	2302      	movs	r3, #2
     f68:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     f6a:	2200      	movs	r2, #0
     f6c:	3331      	adds	r3, #49	; 0x31
     f6e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     f70:	07fb      	lsls	r3, r7, #31
     f72:	d41a      	bmi.n	faa <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     f74:	0773      	lsls	r3, r6, #29
     f76:	d565      	bpl.n	1044 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     f78:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f7a:	b29b      	uxth	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d05f      	beq.n	1040 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f80:	8b63      	ldrh	r3, [r4, #26]
     f82:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     f84:	071a      	lsls	r2, r3, #28
     f86:	d414      	bmi.n	fb2 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     f88:	223f      	movs	r2, #63	; 0x3f
     f8a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     f8c:	2b00      	cmp	r3, #0
     f8e:	d034      	beq.n	ffa <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     f90:	079a      	lsls	r2, r3, #30
     f92:	d511      	bpl.n	fb8 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     f94:	221a      	movs	r2, #26
     f96:	2332      	movs	r3, #50	; 0x32
     f98:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     f9a:	3b30      	subs	r3, #48	; 0x30
     f9c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     f9e:	077b      	lsls	r3, r7, #29
     fa0:	d550      	bpl.n	1044 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     fa2:	0028      	movs	r0, r5
     fa4:	696b      	ldr	r3, [r5, #20]
     fa6:	4798      	blx	r3
     fa8:	e04c      	b.n	1044 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     faa:	0028      	movs	r0, r5
     fac:	68eb      	ldr	r3, [r5, #12]
     fae:	4798      	blx	r3
     fb0:	e7e0      	b.n	f74 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     fb2:	2237      	movs	r2, #55	; 0x37
     fb4:	4013      	ands	r3, r2
     fb6:	e7e9      	b.n	f8c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     fb8:	075a      	lsls	r2, r3, #29
     fba:	d505      	bpl.n	fc8 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     fbc:	221e      	movs	r2, #30
     fbe:	2332      	movs	r3, #50	; 0x32
     fc0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     fc2:	3b2e      	subs	r3, #46	; 0x2e
     fc4:	8363      	strh	r3, [r4, #26]
     fc6:	e7ea      	b.n	f9e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     fc8:	07da      	lsls	r2, r3, #31
     fca:	d505      	bpl.n	fd8 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     fcc:	2213      	movs	r2, #19
     fce:	2332      	movs	r3, #50	; 0x32
     fd0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     fd2:	3b31      	subs	r3, #49	; 0x31
     fd4:	8363      	strh	r3, [r4, #26]
     fd6:	e7e2      	b.n	f9e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     fd8:	06da      	lsls	r2, r3, #27
     fda:	d505      	bpl.n	fe8 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     fdc:	2242      	movs	r2, #66	; 0x42
     fde:	2332      	movs	r3, #50	; 0x32
     fe0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     fe2:	3b22      	subs	r3, #34	; 0x22
     fe4:	8363      	strh	r3, [r4, #26]
     fe6:	e7da      	b.n	f9e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     fe8:	2220      	movs	r2, #32
     fea:	421a      	tst	r2, r3
     fec:	d0d7      	beq.n	f9e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     fee:	3221      	adds	r2, #33	; 0x21
     ff0:	2332      	movs	r3, #50	; 0x32
     ff2:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     ff4:	3b12      	subs	r3, #18
     ff6:	8363      	strh	r3, [r4, #26]
     ff8:	e7d1      	b.n	f9e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     ffa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     ffc:	05db      	lsls	r3, r3, #23
     ffe:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1000:	b2da      	uxtb	r2, r3
    1002:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1004:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1006:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    1008:	1c51      	adds	r1, r2, #1
    100a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    100c:	7969      	ldrb	r1, [r5, #5]
    100e:	2901      	cmp	r1, #1
    1010:	d010      	beq.n	1034 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1012:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    1014:	3b01      	subs	r3, #1
    1016:	b29b      	uxth	r3, r3
    1018:	85ab      	strh	r3, [r5, #44]	; 0x2c
    101a:	2b00      	cmp	r3, #0
    101c:	d112      	bne.n	1044 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    101e:	3304      	adds	r3, #4
    1020:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    1022:	2200      	movs	r2, #0
    1024:	332e      	adds	r3, #46	; 0x2e
    1026:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    1028:	07bb      	lsls	r3, r7, #30
    102a:	d50b      	bpl.n	1044 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    102c:	0028      	movs	r0, r5
    102e:	692b      	ldr	r3, [r5, #16]
    1030:	4798      	blx	r3
    1032:	e007      	b.n	1044 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1034:	0a1b      	lsrs	r3, r3, #8
    1036:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    1038:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    103a:	3301      	adds	r3, #1
    103c:	626b      	str	r3, [r5, #36]	; 0x24
    103e:	e7e8      	b.n	1012 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    1040:	2304      	movs	r3, #4
    1042:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    1044:	06f3      	lsls	r3, r6, #27
    1046:	d504      	bpl.n	1052 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    1048:	2310      	movs	r3, #16
    104a:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    104c:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    104e:	06fb      	lsls	r3, r7, #27
    1050:	d40e      	bmi.n	1070 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    1052:	06b3      	lsls	r3, r6, #26
    1054:	d504      	bpl.n	1060 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    1056:	2320      	movs	r3, #32
    1058:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    105a:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    105c:	073b      	lsls	r3, r7, #28
    105e:	d40b      	bmi.n	1078 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    1060:	0733      	lsls	r3, r6, #28
    1062:	d504      	bpl.n	106e <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    1064:	2308      	movs	r3, #8
    1066:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    1068:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    106a:	06bb      	lsls	r3, r7, #26
    106c:	d408      	bmi.n	1080 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    1070:	0028      	movs	r0, r5
    1072:	69eb      	ldr	r3, [r5, #28]
    1074:	4798      	blx	r3
    1076:	e7ec      	b.n	1052 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    1078:	0028      	movs	r0, r5
    107a:	69ab      	ldr	r3, [r5, #24]
    107c:	4798      	blx	r3
    107e:	e7ef      	b.n	1060 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    1080:	6a2b      	ldr	r3, [r5, #32]
    1082:	0028      	movs	r0, r5
    1084:	4798      	blx	r3
}
    1086:	e7f2      	b.n	106e <_usart_interrupt_handler+0x176>
    1088:	200002b8 	.word	0x200002b8

0000108c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    108c:	b510      	push	{r4, lr}
	switch (clock_source) {
    108e:	2808      	cmp	r0, #8
    1090:	d803      	bhi.n	109a <system_clock_source_get_hz+0xe>
    1092:	0080      	lsls	r0, r0, #2
    1094:	4b1d      	ldr	r3, [pc, #116]	; (110c <system_clock_source_get_hz+0x80>)
    1096:	581b      	ldr	r3, [r3, r0]
    1098:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    109a:	2000      	movs	r0, #0
    109c:	e034      	b.n	1108 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc.frequency;
    109e:	4b1c      	ldr	r3, [pc, #112]	; (1110 <system_clock_source_get_hz+0x84>)
    10a0:	6918      	ldr	r0, [r3, #16]
    10a2:	e031      	b.n	1108 <system_clock_source_get_hz+0x7c>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    10a4:	4b1b      	ldr	r3, [pc, #108]	; (1114 <system_clock_source_get_hz+0x88>)
    10a6:	7d18      	ldrb	r0, [r3, #20]
    10a8:	0700      	lsls	r0, r0, #28
    10aa:	0f80      	lsrs	r0, r0, #30
    10ac:	1c43      	adds	r3, r0, #1
    10ae:	481a      	ldr	r0, [pc, #104]	; (1118 <system_clock_source_get_hz+0x8c>)
    10b0:	4358      	muls	r0, r3
    10b2:	e029      	b.n	1108 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.xosc32k.frequency;
    10b4:	4b16      	ldr	r3, [pc, #88]	; (1110 <system_clock_source_get_hz+0x84>)
    10b6:	6958      	ldr	r0, [r3, #20]
    10b8:	e026      	b.n	1108 <system_clock_source_get_hz+0x7c>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <system_clock_source_get_hz+0x84>)
    10bc:	681b      	ldr	r3, [r3, #0]
			return 0;
    10be:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    10c0:	079b      	lsls	r3, r3, #30
    10c2:	d521      	bpl.n	1108 <system_clock_source_get_hz+0x7c>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    10c4:	4913      	ldr	r1, [pc, #76]	; (1114 <system_clock_source_get_hz+0x88>)
    10c6:	2280      	movs	r2, #128	; 0x80
    10c8:	0052      	lsls	r2, r2, #1
    10ca:	68cb      	ldr	r3, [r1, #12]
    10cc:	4213      	tst	r3, r2
    10ce:	d0fc      	beq.n	10ca <system_clock_source_get_hz+0x3e>
		switch(_system_clock_inst.dfll.control &
    10d0:	4b0f      	ldr	r3, [pc, #60]	; (1110 <system_clock_source_get_hz+0x84>)
    10d2:	681a      	ldr	r2, [r3, #0]
    10d4:	2324      	movs	r3, #36	; 0x24
    10d6:	4013      	ands	r3, r2
    10d8:	2b04      	cmp	r3, #4
    10da:	d001      	beq.n	10e0 <system_clock_source_get_hz+0x54>
			return 48000000UL;
    10dc:	480f      	ldr	r0, [pc, #60]	; (111c <system_clock_source_get_hz+0x90>)
    10de:	e013      	b.n	1108 <system_clock_source_get_hz+0x7c>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    10e0:	2000      	movs	r0, #0
    10e2:	4b0f      	ldr	r3, [pc, #60]	; (1120 <system_clock_source_get_hz+0x94>)
    10e4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10e6:	4b0a      	ldr	r3, [pc, #40]	; (1110 <system_clock_source_get_hz+0x84>)
    10e8:	689b      	ldr	r3, [r3, #8]
    10ea:	041b      	lsls	r3, r3, #16
    10ec:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    10ee:	4358      	muls	r0, r3
    10f0:	e00a      	b.n	1108 <system_clock_source_get_hz+0x7c>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10f2:	2328      	movs	r3, #40	; 0x28
    10f4:	4a07      	ldr	r2, [pc, #28]	; (1114 <system_clock_source_get_hz+0x88>)
    10f6:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    10f8:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    10fa:	079b      	lsls	r3, r3, #30
    10fc:	d504      	bpl.n	1108 <system_clock_source_get_hz+0x7c>
		return _system_clock_inst.dpll.frequency;
    10fe:	4b04      	ldr	r3, [pc, #16]	; (1110 <system_clock_source_get_hz+0x84>)
    1100:	68d8      	ldr	r0, [r3, #12]
    1102:	e001      	b.n	1108 <system_clock_source_get_hz+0x7c>
		return 32768UL;
    1104:	2080      	movs	r0, #128	; 0x80
    1106:	0200      	lsls	r0, r0, #8
	}
}
    1108:	bd10      	pop	{r4, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	00004370 	.word	0x00004370
    1110:	2000021c 	.word	0x2000021c
    1114:	40000c00 	.word	0x40000c00
    1118:	003d0900 	.word	0x003d0900
    111c:	02dc6c00 	.word	0x02dc6c00
    1120:	00001435 	.word	0x00001435

00001124 <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1124:	b510      	push	{r4, lr}
    1126:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    1128:	2280      	movs	r2, #128	; 0x80
    112a:	0052      	lsls	r2, r2, #1
    112c:	4b32      	ldr	r3, [pc, #200]	; (11f8 <system_clock_init+0xd4>)
    112e:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    1130:	3afd      	subs	r2, #253	; 0xfd
    1132:	4b32      	ldr	r3, [pc, #200]	; (11fc <system_clock_init+0xd8>)
    1134:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1136:	4a32      	ldr	r2, [pc, #200]	; (1200 <system_clock_init+0xdc>)
    1138:	6853      	ldr	r3, [r2, #4]
    113a:	211e      	movs	r1, #30
    113c:	438b      	bics	r3, r1
    113e:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    1140:	2380      	movs	r3, #128	; 0x80
    1142:	05db      	lsls	r3, r3, #23
    1144:	789b      	ldrb	r3, [r3, #2]
    1146:	2b02      	cmp	r3, #2
    1148:	d00f      	beq.n	116a <system_clock_init+0x46>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    114a:	2380      	movs	r3, #128	; 0x80
    114c:	05db      	lsls	r3, r3, #23
    114e:	789b      	ldrb	r3, [r3, #2]
    1150:	b25b      	sxtb	r3, r3
    1152:	2b00      	cmp	r3, #0
    1154:	db09      	blt.n	116a <system_clock_init+0x46>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    1156:	2380      	movs	r3, #128	; 0x80
    1158:	05db      	lsls	r3, r3, #23
    115a:	2201      	movs	r2, #1
    115c:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    115e:	3201      	adds	r2, #1
    1160:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    1162:	001a      	movs	r2, r3
    1164:	7993      	ldrb	r3, [r2, #6]
    1166:	2b00      	cmp	r3, #0
    1168:	d0fc      	beq.n	1164 <system_clock_init+0x40>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC16M */
	if (CONF_CLOCK_OSC16M_FREQ_SEL == SYSTEM_OSC16M_4M){
		OSCCTRL->OSC16MCTRL.bit.ONDEMAND = CONF_CLOCK_OSC16M_ON_DEMAND ;
    116a:	4b23      	ldr	r3, [pc, #140]	; (11f8 <system_clock_init+0xd4>)
    116c:	7d19      	ldrb	r1, [r3, #20]
    116e:	2280      	movs	r2, #128	; 0x80
    1170:	4252      	negs	r2, r2
    1172:	430a      	orrs	r2, r1
    1174:	751a      	strb	r2, [r3, #20]
		OSCCTRL->OSC16MCTRL.bit.RUNSTDBY = CONF_CLOCK_OSC16M_RUN_IN_STANDBY;
    1176:	7d1a      	ldrb	r2, [r3, #20]
    1178:	2140      	movs	r1, #64	; 0x40
    117a:	438a      	bics	r2, r1
    117c:	751a      	strb	r2, [r3, #20]
	system_clock_source_dfll_set_config(&dfll_conf);
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    117e:	4b21      	ldr	r3, [pc, #132]	; (1204 <system_clock_init+0xe0>)
    1180:	4798      	blx	r3
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    1182:	4c21      	ldr	r4, [pc, #132]	; (1208 <system_clock_init+0xe4>)
    1184:	2301      	movs	r3, #1
    1186:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    1188:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    118a:	7123      	strb	r3, [r4, #4]
	config->division_factor    = 1;
    118c:	a901      	add	r1, sp, #4
    118e:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    1190:	2300      	movs	r3, #0
    1192:	704b      	strb	r3, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    1194:	2206      	movs	r2, #6
    1196:	700a      	strb	r2, [r1, #0]
	config->run_in_standby     = false;
    1198:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    119a:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    119c:	2000      	movs	r0, #0
    119e:	4b1b      	ldr	r3, [pc, #108]	; (120c <system_clock_init+0xe8>)
    11a0:	4798      	blx	r3
    11a2:	2000      	movs	r0, #0
    11a4:	4b1a      	ldr	r3, [pc, #104]	; (1210 <system_clock_init+0xec>)
    11a6:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    11a8:	2000      	movs	r0, #0
    11aa:	4b1a      	ldr	r3, [pc, #104]	; (1214 <system_clock_init+0xf0>)
    11ac:	4798      	blx	r3
    11ae:	7921      	ldrb	r1, [r4, #4]
    11b0:	b2c9      	uxtb	r1, r1
    11b2:	4b19      	ldr	r3, [pc, #100]	; (1218 <system_clock_init+0xf4>)
    11b4:	4798      	blx	r3
	uint32_t cpu_freq = system_cpu_clock_get_hz();

	/* Set the BUPDIV & LPDIV value such that backup & low power domain clock 
	 * does not exceed their max clock freq even if CPU is configured to it's 
	 * maximum frequency */
	if ((cpu_freq > 6000000) && ((CONF_CLOCK_BACKUP_DIVIDER == SYSTEM_MAIN_CLOCK_DIV_1) \
    11b6:	4b19      	ldr	r3, [pc, #100]	; (121c <system_clock_init+0xf8>)
    11b8:	4298      	cmp	r0, r3
    11ba:	d902      	bls.n	11c2 <system_clock_init+0x9e>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    11bc:	2208      	movs	r2, #8
    11be:	71a2      	strb	r2, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    11c0:	7162      	strb	r2, [r4, #5]
		system_backup_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
		system_low_power_clock_set_divider(SYSTEM_MAIN_CLOCK_DIV_8);
	}

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */	
	if (cpu_freq <= 12000000) {
    11c2:	4b17      	ldr	r3, [pc, #92]	; (1220 <system_clock_init+0xfc>)
    11c4:	4298      	cmp	r0, r3
    11c6:	d814      	bhi.n	11f2 <system_clock_init+0xce>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    11c8:	2380      	movs	r3, #128	; 0x80
    11ca:	05db      	lsls	r3, r3, #23
    11cc:	789b      	ldrb	r3, [r3, #2]
    11ce:	2b00      	cmp	r3, #0
    11d0:	d00f      	beq.n	11f2 <system_clock_init+0xce>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    11d2:	2380      	movs	r3, #128	; 0x80
    11d4:	05db      	lsls	r3, r3, #23
    11d6:	789b      	ldrb	r3, [r3, #2]
    11d8:	b25b      	sxtb	r3, r3
    11da:	2b00      	cmp	r3, #0
    11dc:	db09      	blt.n	11f2 <system_clock_init+0xce>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    11de:	2380      	movs	r3, #128	; 0x80
    11e0:	05db      	lsls	r3, r3, #23
    11e2:	2201      	movs	r2, #1
    11e4:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    11e6:	2200      	movs	r2, #0
    11e8:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    11ea:	001a      	movs	r2, r3
    11ec:	7993      	ldrb	r3, [r2, #6]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d0fc      	beq.n	11ec <system_clock_init+0xc8>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    11f2:	b004      	add	sp, #16
    11f4:	bd10      	pop	{r4, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	40000c00 	.word	0x40000c00
    11fc:	40001400 	.word	0x40001400
    1200:	41004000 	.word	0x41004000
    1204:	00001225 	.word	0x00001225
    1208:	40000400 	.word	0x40000400
    120c:	00001249 	.word	0x00001249
    1210:	000012f5 	.word	0x000012f5
    1214:	00001335 	.word	0x00001335
    1218:	00001949 	.word	0x00001949
    121c:	005b8d80 	.word	0x005b8d80
    1220:	00b71b00 	.word	0x00b71b00

00001224 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1224:	4a06      	ldr	r2, [pc, #24]	; (1240 <system_gclk_init+0x1c>)
    1226:	6953      	ldr	r3, [r2, #20]
    1228:	2140      	movs	r1, #64	; 0x40
    122a:	430b      	orrs	r3, r1
    122c:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    122e:	2201      	movs	r2, #1
    1230:	4b04      	ldr	r3, [pc, #16]	; (1244 <system_gclk_init+0x20>)
    1232:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1234:	0019      	movs	r1, r3
    1236:	780b      	ldrb	r3, [r1, #0]
    1238:	4213      	tst	r3, r2
    123a:	d1fc      	bne.n	1236 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    123c:	4770      	bx	lr
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	40000400 	.word	0x40000400
    1244:	40001800 	.word	0x40001800

00001248 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1248:	b570      	push	{r4, r5, r6, lr}
    124a:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    124c:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    124e:	784b      	ldrb	r3, [r1, #1]
    1250:	2b00      	cmp	r3, #0
    1252:	d002      	beq.n	125a <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1254:	2380      	movs	r3, #128	; 0x80
    1256:	00db      	lsls	r3, r3, #3
    1258:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    125a:	7a4b      	ldrb	r3, [r1, #9]
    125c:	2b00      	cmp	r3, #0
    125e:	d002      	beq.n	1266 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1260:	2380      	movs	r3, #128	; 0x80
    1262:	011b      	lsls	r3, r3, #4
    1264:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1266:	6848      	ldr	r0, [r1, #4]
    1268:	2801      	cmp	r0, #1
    126a:	d90f      	bls.n	128c <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    126c:	1e43      	subs	r3, r0, #1
    126e:	4218      	tst	r0, r3
    1270:	d131      	bne.n	12d6 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1272:	2802      	cmp	r0, #2
    1274:	d92d      	bls.n	12d2 <system_gclk_gen_set_config+0x8a>
    1276:	2302      	movs	r3, #2
    1278:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    127a:	3201      	adds	r2, #1
						mask <<= 1) {
    127c:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    127e:	4298      	cmp	r0, r3
    1280:	d8fb      	bhi.n	127a <system_gclk_gen_set_config+0x32>
    1282:	2380      	movs	r3, #128	; 0x80
    1284:	015b      	lsls	r3, r3, #5
    1286:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    1288:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    128a:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    128c:	7a0b      	ldrb	r3, [r1, #8]
    128e:	2b00      	cmp	r3, #0
    1290:	d002      	beq.n	1298 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1292:	2380      	movs	r3, #128	; 0x80
    1294:	019b      	lsls	r3, r3, #6
    1296:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1298:	2604      	movs	r6, #4
    129a:	40a6      	lsls	r6, r4
    129c:	4911      	ldr	r1, [pc, #68]	; (12e4 <system_gclk_gen_set_config+0x9c>)
    129e:	4a12      	ldr	r2, [pc, #72]	; (12e8 <system_gclk_gen_set_config+0xa0>)
    12a0:	684b      	ldr	r3, [r1, #4]
    12a2:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    12a4:	421e      	tst	r6, r3
    12a6:	d1fb      	bne.n	12a0 <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    12a8:	4b10      	ldr	r3, [pc, #64]	; (12ec <system_gclk_gen_set_config+0xa4>)
    12aa:	4798      	blx	r3
    12ac:	00a4      	lsls	r4, r4, #2
    12ae:	4b0d      	ldr	r3, [pc, #52]	; (12e4 <system_gclk_gen_set_config+0x9c>)
    12b0:	469c      	mov	ip, r3
    12b2:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    12b4:	6a22      	ldr	r2, [r4, #32]
    12b6:	2380      	movs	r3, #128	; 0x80
    12b8:	005b      	lsls	r3, r3, #1
    12ba:	401a      	ands	r2, r3
    12bc:	432a      	orrs	r2, r5
    12be:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    12c0:	4661      	mov	r1, ip
    12c2:	4a09      	ldr	r2, [pc, #36]	; (12e8 <system_gclk_gen_set_config+0xa0>)
    12c4:	684b      	ldr	r3, [r1, #4]
    12c6:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    12c8:	421e      	tst	r6, r3
    12ca:	d1fb      	bne.n	12c4 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    12cc:	4b08      	ldr	r3, [pc, #32]	; (12f0 <system_gclk_gen_set_config+0xa8>)
    12ce:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    12d0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    12d2:	2200      	movs	r2, #0
    12d4:	e7d5      	b.n	1282 <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    12d6:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    12d8:	2380      	movs	r3, #128	; 0x80
    12da:	009b      	lsls	r3, r3, #2
    12dc:	4318      	orrs	r0, r3
    12de:	4305      	orrs	r5, r0
    12e0:	e7d4      	b.n	128c <system_gclk_gen_set_config+0x44>
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	40001800 	.word	0x40001800
    12e8:	000007fc 	.word	0x000007fc
    12ec:	00000505 	.word	0x00000505
    12f0:	00000545 	.word	0x00000545

000012f4 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    12f4:	b510      	push	{r4, lr}
    12f6:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    12f8:	2204      	movs	r2, #4
    12fa:	4082      	lsls	r2, r0
    12fc:	4809      	ldr	r0, [pc, #36]	; (1324 <system_gclk_gen_enable+0x30>)
    12fe:	490a      	ldr	r1, [pc, #40]	; (1328 <system_gclk_gen_enable+0x34>)
    1300:	6843      	ldr	r3, [r0, #4]
    1302:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1304:	421a      	tst	r2, r3
    1306:	d1fb      	bne.n	1300 <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    1308:	4b08      	ldr	r3, [pc, #32]	; (132c <system_gclk_gen_enable+0x38>)
    130a:	4798      	blx	r3
    130c:	00a4      	lsls	r4, r4, #2
    130e:	4b05      	ldr	r3, [pc, #20]	; (1324 <system_gclk_gen_enable+0x30>)
    1310:	469c      	mov	ip, r3
    1312:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1314:	6a22      	ldr	r2, [r4, #32]
    1316:	2380      	movs	r3, #128	; 0x80
    1318:	005b      	lsls	r3, r3, #1
    131a:	4313      	orrs	r3, r2
    131c:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <system_gclk_gen_enable+0x3c>)
    1320:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1322:	bd10      	pop	{r4, pc}
    1324:	40001800 	.word	0x40001800
    1328:	000007fc 	.word	0x000007fc
    132c:	00000505 	.word	0x00000505
    1330:	00000545 	.word	0x00000545

00001334 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1336:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1338:	2204      	movs	r2, #4
    133a:	4082      	lsls	r2, r0
    133c:	4812      	ldr	r0, [pc, #72]	; (1388 <system_gclk_gen_get_hz+0x54>)
    133e:	4913      	ldr	r1, [pc, #76]	; (138c <system_gclk_gen_get_hz+0x58>)
    1340:	6843      	ldr	r3, [r0, #4]
    1342:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1344:	421a      	tst	r2, r3
    1346:	d1fb      	bne.n	1340 <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    1348:	4b11      	ldr	r3, [pc, #68]	; (1390 <system_gclk_gen_get_hz+0x5c>)
    134a:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    134c:	4f0e      	ldr	r7, [pc, #56]	; (1388 <system_gclk_gen_get_hz+0x54>)
    134e:	3408      	adds	r4, #8
    1350:	00a4      	lsls	r4, r4, #2
    1352:	59e0      	ldr	r0, [r4, r7]
    1354:	0700      	lsls	r0, r0, #28
    1356:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1358:	4b0e      	ldr	r3, [pc, #56]	; (1394 <system_gclk_gen_get_hz+0x60>)
    135a:	4798      	blx	r3
    135c:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    135e:	59e5      	ldr	r5, [r4, r7]
    1360:	04ed      	lsls	r5, r5, #19
    1362:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    1364:	59e4      	ldr	r4, [r4, r7]
    1366:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1368:	4b0b      	ldr	r3, [pc, #44]	; (1398 <system_gclk_gen_get_hz+0x64>)
    136a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    136c:	2d00      	cmp	r5, #0
    136e:	d107      	bne.n	1380 <system_gclk_gen_get_hz+0x4c>
    1370:	2c01      	cmp	r4, #1
    1372:	d907      	bls.n	1384 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    1374:	0021      	movs	r1, r4
    1376:	0030      	movs	r0, r6
    1378:	4b08      	ldr	r3, [pc, #32]	; (139c <system_gclk_gen_get_hz+0x68>)
    137a:	4798      	blx	r3
    137c:	0006      	movs	r6, r0
    137e:	e001      	b.n	1384 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1380:	3401      	adds	r4, #1
    1382:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    1384:	0030      	movs	r0, r6
    1386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1388:	40001800 	.word	0x40001800
    138c:	000007fc 	.word	0x000007fc
    1390:	00000505 	.word	0x00000505
    1394:	0000108d 	.word	0x0000108d
    1398:	00000545 	.word	0x00000545
    139c:	00001949 	.word	0x00001949

000013a0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13a0:	b510      	push	{r4, lr}
    13a2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13a4:	4b09      	ldr	r3, [pc, #36]	; (13cc <system_gclk_chan_enable+0x2c>)
    13a6:	4798      	blx	r3
    13a8:	00a0      	lsls	r0, r4, #2
    13aa:	4b09      	ldr	r3, [pc, #36]	; (13d0 <system_gclk_chan_enable+0x30>)
    13ac:	469c      	mov	ip, r3
    13ae:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	5883      	ldr	r3, [r0, r2]
    13b4:	2140      	movs	r1, #64	; 0x40
    13b6:	430b      	orrs	r3, r1
    13b8:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    13ba:	3140      	adds	r1, #64	; 0x40
    13bc:	3a40      	subs	r2, #64	; 0x40
    13be:	5843      	ldr	r3, [r0, r1]
    13c0:	421a      	tst	r2, r3
    13c2:	d0fc      	beq.n	13be <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    13c4:	4b03      	ldr	r3, [pc, #12]	; (13d4 <system_gclk_chan_enable+0x34>)
    13c6:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    13c8:	bd10      	pop	{r4, pc}
    13ca:	46c0      	nop			; (mov r8, r8)
    13cc:	00000505 	.word	0x00000505
    13d0:	40001800 	.word	0x40001800
    13d4:	00000545 	.word	0x00000545

000013d8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    13d8:	b510      	push	{r4, lr}
    13da:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13dc:	4b09      	ldr	r3, [pc, #36]	; (1404 <system_gclk_chan_disable+0x2c>)
    13de:	4798      	blx	r3
    13e0:	00a0      	lsls	r0, r4, #2
    13e2:	4b09      	ldr	r3, [pc, #36]	; (1408 <system_gclk_chan_disable+0x30>)
    13e4:	469c      	mov	ip, r3
    13e6:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    13e8:	2280      	movs	r2, #128	; 0x80
    13ea:	5883      	ldr	r3, [r0, r2]
    13ec:	2140      	movs	r1, #64	; 0x40
    13ee:	438b      	bics	r3, r1
    13f0:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    13f2:	3140      	adds	r1, #64	; 0x40
    13f4:	3a40      	subs	r2, #64	; 0x40
    13f6:	5843      	ldr	r3, [r0, r1]
    13f8:	421a      	tst	r2, r3
    13fa:	d1fc      	bne.n	13f6 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    13fc:	4b03      	ldr	r3, [pc, #12]	; (140c <system_gclk_chan_disable+0x34>)
    13fe:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1400:	bd10      	pop	{r4, pc}
    1402:	46c0      	nop			; (mov r8, r8)
    1404:	00000505 	.word	0x00000505
    1408:	40001800 	.word	0x40001800
    140c:	00000545 	.word	0x00000545

00001410 <system_gclk_chan_set_config>:
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	0004      	movs	r4, r0
    1414:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    1416:	4b05      	ldr	r3, [pc, #20]	; (142c <system_gclk_chan_set_config+0x1c>)
    1418:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    141a:	782a      	ldrb	r2, [r5, #0]
    141c:	230f      	movs	r3, #15
    141e:	4013      	ands	r3, r2
    1420:	3420      	adds	r4, #32
    1422:	00a4      	lsls	r4, r4, #2
    1424:	4a02      	ldr	r2, [pc, #8]	; (1430 <system_gclk_chan_set_config+0x20>)
    1426:	50a3      	str	r3, [r4, r2]
}
    1428:	bd70      	pop	{r4, r5, r6, pc}
    142a:	46c0      	nop			; (mov r8, r8)
    142c:	000013d9 	.word	0x000013d9
    1430:	40001800 	.word	0x40001800

00001434 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1434:	b510      	push	{r4, lr}
    1436:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <system_gclk_chan_get_hz+0x20>)
    143a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    143c:	3420      	adds	r4, #32
    143e:	00a4      	lsls	r4, r4, #2
    1440:	4b05      	ldr	r3, [pc, #20]	; (1458 <system_gclk_chan_get_hz+0x24>)
    1442:	58e4      	ldr	r4, [r4, r3]
    1444:	0724      	lsls	r4, r4, #28
    1446:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1448:	4b04      	ldr	r3, [pc, #16]	; (145c <system_gclk_chan_get_hz+0x28>)
    144a:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    144c:	0020      	movs	r0, r4
    144e:	4b04      	ldr	r3, [pc, #16]	; (1460 <system_gclk_chan_get_hz+0x2c>)
    1450:	4798      	blx	r3
}
    1452:	bd10      	pop	{r4, pc}
    1454:	00000505 	.word	0x00000505
    1458:	40001800 	.word	0x40001800
    145c:	00000545 	.word	0x00000545
    1460:	00001335 	.word	0x00001335

00001464 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1464:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1466:	78d3      	ldrb	r3, [r2, #3]
    1468:	2b00      	cmp	r3, #0
    146a:	d135      	bne.n	14d8 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    146c:	7813      	ldrb	r3, [r2, #0]
    146e:	2b80      	cmp	r3, #128	; 0x80
    1470:	d029      	beq.n	14c6 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1472:	061b      	lsls	r3, r3, #24
    1474:	2480      	movs	r4, #128	; 0x80
    1476:	0264      	lsls	r4, r4, #9
    1478:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    147a:	7854      	ldrb	r4, [r2, #1]
    147c:	2502      	movs	r5, #2
    147e:	43ac      	bics	r4, r5
    1480:	d106      	bne.n	1490 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1482:	7894      	ldrb	r4, [r2, #2]
    1484:	2c00      	cmp	r4, #0
    1486:	d120      	bne.n	14ca <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1488:	2480      	movs	r4, #128	; 0x80
    148a:	02a4      	lsls	r4, r4, #10
    148c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    148e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1490:	7854      	ldrb	r4, [r2, #1]
    1492:	3c01      	subs	r4, #1
    1494:	2c01      	cmp	r4, #1
    1496:	d91c      	bls.n	14d2 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1498:	040d      	lsls	r5, r1, #16
    149a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    149c:	24a0      	movs	r4, #160	; 0xa0
    149e:	05e4      	lsls	r4, r4, #23
    14a0:	432c      	orrs	r4, r5
    14a2:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14a4:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14a6:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14a8:	24d0      	movs	r4, #208	; 0xd0
    14aa:	0624      	lsls	r4, r4, #24
    14ac:	432c      	orrs	r4, r5
    14ae:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14b0:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    14b2:	78d4      	ldrb	r4, [r2, #3]
    14b4:	2c00      	cmp	r4, #0
    14b6:	d122      	bne.n	14fe <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    14b8:	035b      	lsls	r3, r3, #13
    14ba:	d51c      	bpl.n	14f6 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    14bc:	7893      	ldrb	r3, [r2, #2]
    14be:	2b01      	cmp	r3, #1
    14c0:	d01e      	beq.n	1500 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    14c2:	6141      	str	r1, [r0, #20]
    14c4:	e017      	b.n	14f6 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    14c6:	2300      	movs	r3, #0
    14c8:	e7d7      	b.n	147a <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    14ca:	24c0      	movs	r4, #192	; 0xc0
    14cc:	02e4      	lsls	r4, r4, #11
    14ce:	4323      	orrs	r3, r4
    14d0:	e7dd      	b.n	148e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    14d2:	4c0d      	ldr	r4, [pc, #52]	; (1508 <_system_pinmux_config+0xa4>)
    14d4:	4023      	ands	r3, r4
    14d6:	e7df      	b.n	1498 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    14d8:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    14da:	040c      	lsls	r4, r1, #16
    14dc:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    14de:	23a0      	movs	r3, #160	; 0xa0
    14e0:	05db      	lsls	r3, r3, #23
    14e2:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14e4:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    14e6:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    14e8:	23d0      	movs	r3, #208	; 0xd0
    14ea:	061b      	lsls	r3, r3, #24
    14ec:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    14ee:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    14f0:	78d3      	ldrb	r3, [r2, #3]
    14f2:	2b00      	cmp	r3, #0
    14f4:	d103      	bne.n	14fe <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    14f6:	7853      	ldrb	r3, [r2, #1]
    14f8:	3b01      	subs	r3, #1
    14fa:	2b01      	cmp	r3, #1
    14fc:	d902      	bls.n	1504 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    14fe:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1500:	6181      	str	r1, [r0, #24]
    1502:	e7f8      	b.n	14f6 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1504:	6081      	str	r1, [r0, #8]
}
    1506:	e7fa      	b.n	14fe <_system_pinmux_config+0x9a>
    1508:	fffbffff 	.word	0xfffbffff

0000150c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    150c:	b510      	push	{r4, lr}
    150e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1510:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1512:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1514:	2900      	cmp	r1, #0
    1516:	d104      	bne.n	1522 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1518:	0943      	lsrs	r3, r0, #5
    151a:	01db      	lsls	r3, r3, #7
    151c:	4905      	ldr	r1, [pc, #20]	; (1534 <system_pinmux_pin_set_config+0x28>)
    151e:	468c      	mov	ip, r1
    1520:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1522:	241f      	movs	r4, #31
    1524:	4020      	ands	r0, r4
    1526:	2101      	movs	r1, #1
    1528:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    152a:	0018      	movs	r0, r3
    152c:	4b02      	ldr	r3, [pc, #8]	; (1538 <system_pinmux_pin_set_config+0x2c>)
    152e:	4798      	blx	r3
}
    1530:	bd10      	pop	{r4, pc}
    1532:	46c0      	nop			; (mov r8, r8)
    1534:	40002800 	.word	0x40002800
    1538:	00001465 	.word	0x00001465

0000153c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    153c:	4770      	bx	lr
	...

00001540 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1540:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1542:	4b05      	ldr	r3, [pc, #20]	; (1558 <system_init+0x18>)
    1544:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <system_init+0x1c>)
    1548:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    154a:	4b05      	ldr	r3, [pc, #20]	; (1560 <system_init+0x20>)
    154c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    154e:	4b05      	ldr	r3, [pc, #20]	; (1564 <system_init+0x24>)
    1550:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <system_init+0x28>)
    1554:	4798      	blx	r3
}
    1556:	bd10      	pop	{r4, pc}
    1558:	00001125 	.word	0x00001125
    155c:	00000575 	.word	0x00000575
    1560:	0000153d 	.word	0x0000153d
    1564:	00000621 	.word	0x00000621
    1568:	0000153d 	.word	0x0000153d

0000156c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    156c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    156e:	0080      	lsls	r0, r0, #2
    1570:	4b16      	ldr	r3, [pc, #88]	; (15cc <_tc_interrupt_handler+0x60>)
    1572:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1574:	6823      	ldr	r3, [r4, #0]
    1576:	7a9d      	ldrb	r5, [r3, #10]
    1578:	7e22      	ldrb	r2, [r4, #24]
    157a:	7e63      	ldrb	r3, [r4, #25]
    157c:	4013      	ands	r3, r2
    157e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1580:	07eb      	lsls	r3, r5, #31
    1582:	d406      	bmi.n	1592 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1584:	07ab      	lsls	r3, r5, #30
    1586:	d40b      	bmi.n	15a0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1588:	06eb      	lsls	r3, r5, #27
    158a:	d410      	bmi.n	15ae <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    158c:	06ab      	lsls	r3, r5, #26
    158e:	d415      	bmi.n	15bc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    1590:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1592:	0020      	movs	r0, r4
    1594:	68a3      	ldr	r3, [r4, #8]
    1596:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1598:	2301      	movs	r3, #1
    159a:	6822      	ldr	r2, [r4, #0]
    159c:	7293      	strb	r3, [r2, #10]
    159e:	e7f1      	b.n	1584 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    15a0:	0020      	movs	r0, r4
    15a2:	68e3      	ldr	r3, [r4, #12]
    15a4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    15a6:	2302      	movs	r3, #2
    15a8:	6822      	ldr	r2, [r4, #0]
    15aa:	7293      	strb	r3, [r2, #10]
    15ac:	e7ec      	b.n	1588 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    15ae:	0020      	movs	r0, r4
    15b0:	6923      	ldr	r3, [r4, #16]
    15b2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    15b4:	2310      	movs	r3, #16
    15b6:	6822      	ldr	r2, [r4, #0]
    15b8:	7293      	strb	r3, [r2, #10]
    15ba:	e7e7      	b.n	158c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    15bc:	0020      	movs	r0, r4
    15be:	6963      	ldr	r3, [r4, #20]
    15c0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    15c2:	6823      	ldr	r3, [r4, #0]
    15c4:	2220      	movs	r2, #32
    15c6:	729a      	strb	r2, [r3, #10]
}
    15c8:	e7e2      	b.n	1590 <_tc_interrupt_handler+0x24>
    15ca:	46c0      	nop			; (mov r8, r8)
    15cc:	200002d0 	.word	0x200002d0

000015d0 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    15d0:	b510      	push	{r4, lr}
    15d2:	2000      	movs	r0, #0
    15d4:	4b01      	ldr	r3, [pc, #4]	; (15dc <TC0_Handler+0xc>)
    15d6:	4798      	blx	r3
    15d8:	bd10      	pop	{r4, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	0000156d 	.word	0x0000156d

000015e0 <TC1_Handler>:
    15e0:	b510      	push	{r4, lr}
    15e2:	2001      	movs	r0, #1
    15e4:	4b01      	ldr	r3, [pc, #4]	; (15ec <TC1_Handler+0xc>)
    15e6:	4798      	blx	r3
    15e8:	bd10      	pop	{r4, pc}
    15ea:	46c0      	nop			; (mov r8, r8)
    15ec:	0000156d 	.word	0x0000156d

000015f0 <TC2_Handler>:
    15f0:	b510      	push	{r4, lr}
    15f2:	2002      	movs	r0, #2
    15f4:	4b01      	ldr	r3, [pc, #4]	; (15fc <TC2_Handler+0xc>)
    15f6:	4798      	blx	r3
    15f8:	bd10      	pop	{r4, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	0000156d 	.word	0x0000156d

00001600 <TC3_Handler>:
    1600:	b510      	push	{r4, lr}
    1602:	2003      	movs	r0, #3
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <TC3_Handler+0xc>)
    1606:	4798      	blx	r3
    1608:	bd10      	pop	{r4, pc}
    160a:	46c0      	nop			; (mov r8, r8)
    160c:	0000156d 	.word	0x0000156d

00001610 <TC4_Handler>:
    1610:	b510      	push	{r4, lr}
    1612:	2004      	movs	r0, #4
    1614:	4b01      	ldr	r3, [pc, #4]	; (161c <TC4_Handler+0xc>)
    1616:	4798      	blx	r3
    1618:	bd10      	pop	{r4, pc}
    161a:	46c0      	nop			; (mov r8, r8)
    161c:	0000156d 	.word	0x0000156d

00001620 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1620:	e7fe      	b.n	1620 <Dummy_Handler>
	...

00001624 <Reset_Handler>:
{
    1624:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    1626:	4a1a      	ldr	r2, [pc, #104]	; (1690 <Reset_Handler+0x6c>)
    1628:	4b1a      	ldr	r3, [pc, #104]	; (1694 <Reset_Handler+0x70>)
    162a:	429a      	cmp	r2, r3
    162c:	d011      	beq.n	1652 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    162e:	001a      	movs	r2, r3
    1630:	4b19      	ldr	r3, [pc, #100]	; (1698 <Reset_Handler+0x74>)
    1632:	429a      	cmp	r2, r3
    1634:	d20d      	bcs.n	1652 <Reset_Handler+0x2e>
    1636:	4a19      	ldr	r2, [pc, #100]	; (169c <Reset_Handler+0x78>)
    1638:	3303      	adds	r3, #3
    163a:	1a9b      	subs	r3, r3, r2
    163c:	089b      	lsrs	r3, r3, #2
    163e:	3301      	adds	r3, #1
    1640:	009b      	lsls	r3, r3, #2
    1642:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1644:	4813      	ldr	r0, [pc, #76]	; (1694 <Reset_Handler+0x70>)
    1646:	4912      	ldr	r1, [pc, #72]	; (1690 <Reset_Handler+0x6c>)
    1648:	588c      	ldr	r4, [r1, r2]
    164a:	5084      	str	r4, [r0, r2]
    164c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    164e:	429a      	cmp	r2, r3
    1650:	d1fa      	bne.n	1648 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1652:	4a13      	ldr	r2, [pc, #76]	; (16a0 <Reset_Handler+0x7c>)
    1654:	4b13      	ldr	r3, [pc, #76]	; (16a4 <Reset_Handler+0x80>)
    1656:	429a      	cmp	r2, r3
    1658:	d20a      	bcs.n	1670 <Reset_Handler+0x4c>
    165a:	43d3      	mvns	r3, r2
    165c:	4911      	ldr	r1, [pc, #68]	; (16a4 <Reset_Handler+0x80>)
    165e:	185b      	adds	r3, r3, r1
    1660:	2103      	movs	r1, #3
    1662:	438b      	bics	r3, r1
    1664:	3304      	adds	r3, #4
    1666:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1668:	2100      	movs	r1, #0
    166a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    166c:	4293      	cmp	r3, r2
    166e:	d1fc      	bne.n	166a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1670:	4a0d      	ldr	r2, [pc, #52]	; (16a8 <Reset_Handler+0x84>)
    1672:	21ff      	movs	r1, #255	; 0xff
    1674:	4b0d      	ldr	r3, [pc, #52]	; (16ac <Reset_Handler+0x88>)
    1676:	438b      	bics	r3, r1
    1678:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    167a:	4a0d      	ldr	r2, [pc, #52]	; (16b0 <Reset_Handler+0x8c>)
    167c:	6853      	ldr	r3, [r2, #4]
    167e:	397f      	subs	r1, #127	; 0x7f
    1680:	430b      	orrs	r3, r1
    1682:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1684:	4b0b      	ldr	r3, [pc, #44]	; (16b4 <Reset_Handler+0x90>)
    1686:	4798      	blx	r3
        main();
    1688:	4b0b      	ldr	r3, [pc, #44]	; (16b8 <Reset_Handler+0x94>)
    168a:	4798      	blx	r3
    168c:	e7fe      	b.n	168c <Reset_Handler+0x68>
    168e:	46c0      	nop			; (mov r8, r8)
    1690:	00004580 	.word	0x00004580
    1694:	20000000 	.word	0x20000000
    1698:	200001dc 	.word	0x200001dc
    169c:	20000004 	.word	0x20000004
    16a0:	200001dc 	.word	0x200001dc
    16a4:	200002f4 	.word	0x200002f4
    16a8:	e000ed00 	.word	0xe000ed00
    16ac:	00000000 	.word	0x00000000
    16b0:	41004000 	.word	0x41004000
    16b4:	00001ab5 	.word	0x00001ab5
    16b8:	000017d1 	.word	0x000017d1

000016bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    16bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16be:	46c6      	mov	lr, r8
    16c0:	b500      	push	{lr}
    16c2:	000c      	movs	r4, r1
    16c4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    16c6:	2800      	cmp	r0, #0
    16c8:	d10f      	bne.n	16ea <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    16ca:	2a00      	cmp	r2, #0
    16cc:	dd11      	ble.n	16f2 <_read+0x36>
    16ce:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    16d0:	4e09      	ldr	r6, [pc, #36]	; (16f8 <_read+0x3c>)
    16d2:	4d0a      	ldr	r5, [pc, #40]	; (16fc <_read+0x40>)
    16d4:	6830      	ldr	r0, [r6, #0]
    16d6:	0021      	movs	r1, r4
    16d8:	682b      	ldr	r3, [r5, #0]
    16da:	4798      	blx	r3
		ptr++;
    16dc:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    16de:	42bc      	cmp	r4, r7
    16e0:	d1f8      	bne.n	16d4 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    16e2:	4640      	mov	r0, r8
    16e4:	bc04      	pop	{r2}
    16e6:	4690      	mov	r8, r2
    16e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    16ea:	2301      	movs	r3, #1
    16ec:	425b      	negs	r3, r3
    16ee:	4698      	mov	r8, r3
    16f0:	e7f7      	b.n	16e2 <_read+0x26>
	for (; len > 0; --len) {
    16f2:	4680      	mov	r8, r0
    16f4:	e7f5      	b.n	16e2 <_read+0x26>
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	200002ec 	.word	0x200002ec
    16fc:	200002e4 	.word	0x200002e4

00001700 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1700:	b5f0      	push	{r4, r5, r6, r7, lr}
    1702:	46c6      	mov	lr, r8
    1704:	b500      	push	{lr}
    1706:	000e      	movs	r6, r1
    1708:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    170a:	3801      	subs	r0, #1
    170c:	2802      	cmp	r0, #2
    170e:	d810      	bhi.n	1732 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1710:	2a00      	cmp	r2, #0
    1712:	d011      	beq.n	1738 <_write+0x38>
    1714:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1716:	4b0c      	ldr	r3, [pc, #48]	; (1748 <_write+0x48>)
    1718:	4698      	mov	r8, r3
    171a:	4f0c      	ldr	r7, [pc, #48]	; (174c <_write+0x4c>)
    171c:	4643      	mov	r3, r8
    171e:	6818      	ldr	r0, [r3, #0]
    1720:	5d31      	ldrb	r1, [r6, r4]
    1722:	683b      	ldr	r3, [r7, #0]
    1724:	4798      	blx	r3
    1726:	2800      	cmp	r0, #0
    1728:	db08      	blt.n	173c <_write+0x3c>
			return -1;
		}
		++nChars;
    172a:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    172c:	42a5      	cmp	r5, r4
    172e:	d1f5      	bne.n	171c <_write+0x1c>
    1730:	e006      	b.n	1740 <_write+0x40>
		return -1;
    1732:	2401      	movs	r4, #1
    1734:	4264      	negs	r4, r4
    1736:	e003      	b.n	1740 <_write+0x40>
	for (; len != 0; --len) {
    1738:	0014      	movs	r4, r2
    173a:	e001      	b.n	1740 <_write+0x40>
			return -1;
    173c:	2401      	movs	r4, #1
    173e:	4264      	negs	r4, r4
	}
	return nChars;
}
    1740:	0020      	movs	r0, r4
    1742:	bc04      	pop	{r2}
    1744:	4690      	mov	r8, r2
    1746:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1748:	200002ec 	.word	0x200002ec
    174c:	200002e8 	.word	0x200002e8

00001750 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1750:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1752:	4a06      	ldr	r2, [pc, #24]	; (176c <_sbrk+0x1c>)
    1754:	6812      	ldr	r2, [r2, #0]
    1756:	2a00      	cmp	r2, #0
    1758:	d004      	beq.n	1764 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    175a:	4a04      	ldr	r2, [pc, #16]	; (176c <_sbrk+0x1c>)
    175c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    175e:	18c3      	adds	r3, r0, r3
    1760:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    1762:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1764:	4902      	ldr	r1, [pc, #8]	; (1770 <_sbrk+0x20>)
    1766:	4a01      	ldr	r2, [pc, #4]	; (176c <_sbrk+0x1c>)
    1768:	6011      	str	r1, [r2, #0]
    176a:	e7f6      	b.n	175a <_sbrk+0xa>
    176c:	20000234 	.word	0x20000234
    1770:	200022f8 	.word	0x200022f8

00001774 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1774:	2001      	movs	r0, #1
    1776:	4240      	negs	r0, r0
    1778:	4770      	bx	lr

0000177a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    177a:	2380      	movs	r3, #128	; 0x80
    177c:	019b      	lsls	r3, r3, #6
    177e:	604b      	str	r3, [r1, #4]

	return 0;
}
    1780:	2000      	movs	r0, #0
    1782:	4770      	bx	lr

00001784 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1784:	2001      	movs	r0, #1
    1786:	4770      	bx	lr

00001788 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1788:	2000      	movs	r0, #0
    178a:	4770      	bx	lr

0000178c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    178c:	b570      	push	{r4, r5, r6, lr}
    178e:	b082      	sub	sp, #8
    1790:	0005      	movs	r5, r0
    1792:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1794:	2200      	movs	r2, #0
    1796:	466b      	mov	r3, sp
    1798:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    179a:	4c06      	ldr	r4, [pc, #24]	; (17b4 <usart_serial_getchar+0x28>)
    179c:	466b      	mov	r3, sp
    179e:	1d99      	adds	r1, r3, #6
    17a0:	0028      	movs	r0, r5
    17a2:	47a0      	blx	r4
    17a4:	2800      	cmp	r0, #0
    17a6:	d1f9      	bne.n	179c <usart_serial_getchar+0x10>

	*c = temp;
    17a8:	466b      	mov	r3, sp
    17aa:	3306      	adds	r3, #6
    17ac:	881b      	ldrh	r3, [r3, #0]
    17ae:	7033      	strb	r3, [r6, #0]
}
    17b0:	b002      	add	sp, #8
    17b2:	bd70      	pop	{r4, r5, r6, pc}
    17b4:	00000e8f 	.word	0x00000e8f

000017b8 <usart_serial_putchar>:
{
    17b8:	b570      	push	{r4, r5, r6, lr}
    17ba:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    17bc:	b28c      	uxth	r4, r1
    17be:	4e03      	ldr	r6, [pc, #12]	; (17cc <usart_serial_putchar+0x14>)
    17c0:	0021      	movs	r1, r4
    17c2:	0028      	movs	r0, r5
    17c4:	47b0      	blx	r6
    17c6:	2800      	cmp	r0, #0
    17c8:	d1fa      	bne.n	17c0 <usart_serial_putchar+0x8>
}
    17ca:	bd70      	pop	{r4, r5, r6, pc}
    17cc:	00000e69 	.word	0x00000e69

000017d0 <main>:
 *  \brief getting-started Application entry point.
 *
 *  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
    17d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17d2:	b093      	sub	sp, #76	; 0x4c
	struct port_config pin;

	system_init();
    17d4:	4b45      	ldr	r3, [pc, #276]	; (18ec <main+0x11c>)
    17d6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    17d8:	aa01      	add	r2, sp, #4
    17da:	2380      	movs	r3, #128	; 0x80
    17dc:	05db      	lsls	r3, r3, #23
    17de:	9301      	str	r3, [sp, #4]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    17e0:	2300      	movs	r3, #0
    17e2:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    17e4:	21ff      	movs	r1, #255	; 0xff
    17e6:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    17e8:	2100      	movs	r1, #0
    17ea:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    17ec:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    17ee:	2401      	movs	r4, #1
    17f0:	2024      	movs	r0, #36	; 0x24
    17f2:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    17f4:	3001      	adds	r0, #1
    17f6:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    17f8:	3001      	adds	r0, #1
    17fa:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    17fc:	3001      	adds	r0, #1
    17fe:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    1800:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1802:	3005      	adds	r0, #5
    1804:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    1806:	3001      	adds	r0, #1
    1808:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    180a:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    180c:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    180e:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    1810:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    1812:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    1814:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    1816:	2313      	movs	r3, #19
    1818:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    181a:	7751      	strb	r1, [r2, #29]
	usart_conf.mux_setting = CONF_STDIO_MUX_SETTING;
    181c:	2380      	movs	r3, #128	; 0x80
    181e:	035b      	lsls	r3, r3, #13
    1820:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = CONF_STDIO_PINMUX_PAD0;
    1822:	4b33      	ldr	r3, [pc, #204]	; (18f0 <main+0x120>)
    1824:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = CONF_STDIO_PINMUX_PAD1;
    1826:	4b33      	ldr	r3, [pc, #204]	; (18f4 <main+0x124>)
    1828:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = CONF_STDIO_PINMUX_PAD2;
    182a:	2301      	movs	r3, #1
    182c:	425b      	negs	r3, r3
    182e:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = CONF_STDIO_PINMUX_PAD3;
    1830:	63d3      	str	r3, [r2, #60]	; 0x3c
	usart_conf.baudrate    = CONF_STDIO_BAUDRATE;
    1832:	23e1      	movs	r3, #225	; 0xe1
    1834:	025b      	lsls	r3, r3, #9
    1836:	6213      	str	r3, [r2, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1838:	4d2f      	ldr	r5, [pc, #188]	; (18f8 <main+0x128>)
    183a:	4b30      	ldr	r3, [pc, #192]	; (18fc <main+0x12c>)
    183c:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    183e:	4930      	ldr	r1, [pc, #192]	; (1900 <main+0x130>)
    1840:	4b30      	ldr	r3, [pc, #192]	; (1904 <main+0x134>)
    1842:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1844:	4930      	ldr	r1, [pc, #192]	; (1908 <main+0x138>)
    1846:	4b31      	ldr	r3, [pc, #196]	; (190c <main+0x13c>)
    1848:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    184a:	4931      	ldr	r1, [pc, #196]	; (1910 <main+0x140>)
    184c:	0028      	movs	r0, r5
    184e:	4b31      	ldr	r3, [pc, #196]	; (1914 <main+0x144>)
    1850:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1852:	4f31      	ldr	r7, [pc, #196]	; (1918 <main+0x148>)
    1854:	683b      	ldr	r3, [r7, #0]
    1856:	6898      	ldr	r0, [r3, #8]
    1858:	2100      	movs	r1, #0
    185a:	4e30      	ldr	r6, [pc, #192]	; (191c <main+0x14c>)
    185c:	47b0      	blx	r6
	setbuf(stdin, NULL);
    185e:	683b      	ldr	r3, [r7, #0]
    1860:	6858      	ldr	r0, [r3, #4]
    1862:	2100      	movs	r1, #0
    1864:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1866:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1868:	0030      	movs	r0, r6
    186a:	4b2d      	ldr	r3, [pc, #180]	; (1920 <main+0x150>)
    186c:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    186e:	231f      	movs	r3, #31
    1870:	4018      	ands	r0, r3
    1872:	4084      	lsls	r4, r0
    1874:	4b2b      	ldr	r3, [pc, #172]	; (1924 <main+0x154>)
    1876:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1878:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    187a:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    187c:	2a00      	cmp	r2, #0
    187e:	d1fc      	bne.n	187a <main+0xaa>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1880:	6833      	ldr	r3, [r6, #0]
    1882:	3202      	adds	r2, #2
    1884:	4313      	orrs	r3, r2
    1886:	6033      	str	r3, [r6, #0]

	/*Configures TC callback*/
//	configure_tc_callbacks();

	/*Initialize the delay driver*/
	delay_init();
    1888:	4b27      	ldr	r3, [pc, #156]	; (1928 <main+0x158>)
    188a:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    188c:	a911      	add	r1, sp, #68	; 0x44
    188e:	2301      	movs	r3, #1
    1890:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1892:	2200      	movs	r2, #0
    1894:	708a      	strb	r2, [r1, #2]
//	system_interrupt_enable_global();


    /*Configures PORT for LED0*/
	port_get_config_defaults(&pin);
	pin.direction = PORT_PIN_DIR_OUTPUT;
    1896:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED0_PIN, &pin);
    1898:	202a      	movs	r0, #42	; 0x2a
    189a:	4b24      	ldr	r3, [pc, #144]	; (192c <main+0x15c>)
    189c:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    189e:	4c24      	ldr	r4, [pc, #144]	; (1930 <main+0x160>)
    18a0:	2580      	movs	r5, #128	; 0x80
    18a2:	00ed      	lsls	r5, r5, #3
    18a4:	61a5      	str	r5, [r4, #24]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    18a6:	61e5      	str	r5, [r4, #28]

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	for (int i = 0; i < 3; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_s(1);
    18a8:	27fa      	movs	r7, #250	; 0xfa
    18aa:	00bf      	lsls	r7, r7, #2
    18ac:	0038      	movs	r0, r7
    18ae:	4e21      	ldr	r6, [pc, #132]	; (1934 <main+0x164>)
    18b0:	47b0      	blx	r6
    18b2:	61e5      	str	r5, [r4, #28]
    18b4:	0038      	movs	r0, r7
    18b6:	47b0      	blx	r6
    18b8:	61e5      	str	r5, [r4, #28]
    18ba:	0038      	movs	r0, r7
    18bc:	47b0      	blx	r6
    18be:	2414      	movs	r4, #20
    18c0:	4f1b      	ldr	r7, [pc, #108]	; (1930 <main+0x160>)
    18c2:	002e      	movs	r6, r5
	}

	for (int i = 0; i < 20; i++) {
		port_pin_toggle_output_level(LED0_PIN);
		delay_ms(100);
    18c4:	4d1b      	ldr	r5, [pc, #108]	; (1934 <main+0x164>)
    18c6:	61fe      	str	r6, [r7, #28]
    18c8:	2064      	movs	r0, #100	; 0x64
    18ca:	47a8      	blx	r5
    18cc:	3c01      	subs	r4, #1
	for (int i = 0; i < 20; i++) {
    18ce:	2c00      	cmp	r4, #0
    18d0:	d1f9      	bne.n	18c6 <main+0xf6>
		port_base->OUTSET.reg = pin_mask;
    18d2:	2280      	movs	r2, #128	; 0x80
    18d4:	00d2      	lsls	r2, r2, #3
    18d6:	4b16      	ldr	r3, [pc, #88]	; (1930 <main+0x160>)
    18d8:	619a      	str	r2, [r3, #24]
	}

	port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);

	/*main loop*/
	printf("\r\n");
    18da:	4817      	ldr	r0, [pc, #92]	; (1938 <main+0x168>)
    18dc:	4b17      	ldr	r3, [pc, #92]	; (193c <main+0x16c>)
    18de:	4798      	blx	r3
	print_home();
    18e0:	4b17      	ldr	r3, [pc, #92]	; (1940 <main+0x170>)
    18e2:	4798      	blx	r3
	while(1)
	{
		//debug_loop();
		prompt_menu();
    18e4:	4c17      	ldr	r4, [pc, #92]	; (1944 <main+0x174>)
    18e6:	47a0      	blx	r4
    18e8:	e7fd      	b.n	18e6 <main+0x116>
    18ea:	46c0      	nop			; (mov r8, r8)
    18ec:	00001541 	.word	0x00001541
    18f0:	00160002 	.word	0x00160002
    18f4:	00170002 	.word	0x00170002
    18f8:	20000238 	.word	0x20000238
    18fc:	200002ec 	.word	0x200002ec
    1900:	000017b9 	.word	0x000017b9
    1904:	200002e8 	.word	0x200002e8
    1908:	0000178d 	.word	0x0000178d
    190c:	200002e4 	.word	0x200002e4
    1910:	42000c00 	.word	0x42000c00
    1914:	00000b05 	.word	0x00000b05
    1918:	2000000c 	.word	0x2000000c
    191c:	00001c49 	.word	0x00001c49
    1920:	00000a75 	.word	0x00000a75
    1924:	e000e100 	.word	0xe000e100
    1928:	00000499 	.word	0x00000499
    192c:	000006a1 	.word	0x000006a1
    1930:	40002880 	.word	0x40002880
    1934:	000004d9 	.word	0x000004d9
    1938:	000040bc 	.word	0x000040bc
    193c:	00001c01 	.word	0x00001c01
    1940:	00000115 	.word	0x00000115
    1944:	00000219 	.word	0x00000219

00001948 <__udivsi3>:
    1948:	2200      	movs	r2, #0
    194a:	0843      	lsrs	r3, r0, #1
    194c:	428b      	cmp	r3, r1
    194e:	d374      	bcc.n	1a3a <__udivsi3+0xf2>
    1950:	0903      	lsrs	r3, r0, #4
    1952:	428b      	cmp	r3, r1
    1954:	d35f      	bcc.n	1a16 <__udivsi3+0xce>
    1956:	0a03      	lsrs	r3, r0, #8
    1958:	428b      	cmp	r3, r1
    195a:	d344      	bcc.n	19e6 <__udivsi3+0x9e>
    195c:	0b03      	lsrs	r3, r0, #12
    195e:	428b      	cmp	r3, r1
    1960:	d328      	bcc.n	19b4 <__udivsi3+0x6c>
    1962:	0c03      	lsrs	r3, r0, #16
    1964:	428b      	cmp	r3, r1
    1966:	d30d      	bcc.n	1984 <__udivsi3+0x3c>
    1968:	22ff      	movs	r2, #255	; 0xff
    196a:	0209      	lsls	r1, r1, #8
    196c:	ba12      	rev	r2, r2
    196e:	0c03      	lsrs	r3, r0, #16
    1970:	428b      	cmp	r3, r1
    1972:	d302      	bcc.n	197a <__udivsi3+0x32>
    1974:	1212      	asrs	r2, r2, #8
    1976:	0209      	lsls	r1, r1, #8
    1978:	d065      	beq.n	1a46 <__udivsi3+0xfe>
    197a:	0b03      	lsrs	r3, r0, #12
    197c:	428b      	cmp	r3, r1
    197e:	d319      	bcc.n	19b4 <__udivsi3+0x6c>
    1980:	e000      	b.n	1984 <__udivsi3+0x3c>
    1982:	0a09      	lsrs	r1, r1, #8
    1984:	0bc3      	lsrs	r3, r0, #15
    1986:	428b      	cmp	r3, r1
    1988:	d301      	bcc.n	198e <__udivsi3+0x46>
    198a:	03cb      	lsls	r3, r1, #15
    198c:	1ac0      	subs	r0, r0, r3
    198e:	4152      	adcs	r2, r2
    1990:	0b83      	lsrs	r3, r0, #14
    1992:	428b      	cmp	r3, r1
    1994:	d301      	bcc.n	199a <__udivsi3+0x52>
    1996:	038b      	lsls	r3, r1, #14
    1998:	1ac0      	subs	r0, r0, r3
    199a:	4152      	adcs	r2, r2
    199c:	0b43      	lsrs	r3, r0, #13
    199e:	428b      	cmp	r3, r1
    19a0:	d301      	bcc.n	19a6 <__udivsi3+0x5e>
    19a2:	034b      	lsls	r3, r1, #13
    19a4:	1ac0      	subs	r0, r0, r3
    19a6:	4152      	adcs	r2, r2
    19a8:	0b03      	lsrs	r3, r0, #12
    19aa:	428b      	cmp	r3, r1
    19ac:	d301      	bcc.n	19b2 <__udivsi3+0x6a>
    19ae:	030b      	lsls	r3, r1, #12
    19b0:	1ac0      	subs	r0, r0, r3
    19b2:	4152      	adcs	r2, r2
    19b4:	0ac3      	lsrs	r3, r0, #11
    19b6:	428b      	cmp	r3, r1
    19b8:	d301      	bcc.n	19be <__udivsi3+0x76>
    19ba:	02cb      	lsls	r3, r1, #11
    19bc:	1ac0      	subs	r0, r0, r3
    19be:	4152      	adcs	r2, r2
    19c0:	0a83      	lsrs	r3, r0, #10
    19c2:	428b      	cmp	r3, r1
    19c4:	d301      	bcc.n	19ca <__udivsi3+0x82>
    19c6:	028b      	lsls	r3, r1, #10
    19c8:	1ac0      	subs	r0, r0, r3
    19ca:	4152      	adcs	r2, r2
    19cc:	0a43      	lsrs	r3, r0, #9
    19ce:	428b      	cmp	r3, r1
    19d0:	d301      	bcc.n	19d6 <__udivsi3+0x8e>
    19d2:	024b      	lsls	r3, r1, #9
    19d4:	1ac0      	subs	r0, r0, r3
    19d6:	4152      	adcs	r2, r2
    19d8:	0a03      	lsrs	r3, r0, #8
    19da:	428b      	cmp	r3, r1
    19dc:	d301      	bcc.n	19e2 <__udivsi3+0x9a>
    19de:	020b      	lsls	r3, r1, #8
    19e0:	1ac0      	subs	r0, r0, r3
    19e2:	4152      	adcs	r2, r2
    19e4:	d2cd      	bcs.n	1982 <__udivsi3+0x3a>
    19e6:	09c3      	lsrs	r3, r0, #7
    19e8:	428b      	cmp	r3, r1
    19ea:	d301      	bcc.n	19f0 <__udivsi3+0xa8>
    19ec:	01cb      	lsls	r3, r1, #7
    19ee:	1ac0      	subs	r0, r0, r3
    19f0:	4152      	adcs	r2, r2
    19f2:	0983      	lsrs	r3, r0, #6
    19f4:	428b      	cmp	r3, r1
    19f6:	d301      	bcc.n	19fc <__udivsi3+0xb4>
    19f8:	018b      	lsls	r3, r1, #6
    19fa:	1ac0      	subs	r0, r0, r3
    19fc:	4152      	adcs	r2, r2
    19fe:	0943      	lsrs	r3, r0, #5
    1a00:	428b      	cmp	r3, r1
    1a02:	d301      	bcc.n	1a08 <__udivsi3+0xc0>
    1a04:	014b      	lsls	r3, r1, #5
    1a06:	1ac0      	subs	r0, r0, r3
    1a08:	4152      	adcs	r2, r2
    1a0a:	0903      	lsrs	r3, r0, #4
    1a0c:	428b      	cmp	r3, r1
    1a0e:	d301      	bcc.n	1a14 <__udivsi3+0xcc>
    1a10:	010b      	lsls	r3, r1, #4
    1a12:	1ac0      	subs	r0, r0, r3
    1a14:	4152      	adcs	r2, r2
    1a16:	08c3      	lsrs	r3, r0, #3
    1a18:	428b      	cmp	r3, r1
    1a1a:	d301      	bcc.n	1a20 <__udivsi3+0xd8>
    1a1c:	00cb      	lsls	r3, r1, #3
    1a1e:	1ac0      	subs	r0, r0, r3
    1a20:	4152      	adcs	r2, r2
    1a22:	0883      	lsrs	r3, r0, #2
    1a24:	428b      	cmp	r3, r1
    1a26:	d301      	bcc.n	1a2c <__udivsi3+0xe4>
    1a28:	008b      	lsls	r3, r1, #2
    1a2a:	1ac0      	subs	r0, r0, r3
    1a2c:	4152      	adcs	r2, r2
    1a2e:	0843      	lsrs	r3, r0, #1
    1a30:	428b      	cmp	r3, r1
    1a32:	d301      	bcc.n	1a38 <__udivsi3+0xf0>
    1a34:	004b      	lsls	r3, r1, #1
    1a36:	1ac0      	subs	r0, r0, r3
    1a38:	4152      	adcs	r2, r2
    1a3a:	1a41      	subs	r1, r0, r1
    1a3c:	d200      	bcs.n	1a40 <__udivsi3+0xf8>
    1a3e:	4601      	mov	r1, r0
    1a40:	4152      	adcs	r2, r2
    1a42:	4610      	mov	r0, r2
    1a44:	4770      	bx	lr
    1a46:	e7ff      	b.n	1a48 <__udivsi3+0x100>
    1a48:	b501      	push	{r0, lr}
    1a4a:	2000      	movs	r0, #0
    1a4c:	f000 f806 	bl	1a5c <__aeabi_idiv0>
    1a50:	bd02      	pop	{r1, pc}
    1a52:	46c0      	nop			; (mov r8, r8)

00001a54 <__aeabi_uidivmod>:
    1a54:	2900      	cmp	r1, #0
    1a56:	d0f7      	beq.n	1a48 <__udivsi3+0x100>
    1a58:	e776      	b.n	1948 <__udivsi3>
    1a5a:	4770      	bx	lr

00001a5c <__aeabi_idiv0>:
    1a5c:	4770      	bx	lr
    1a5e:	46c0      	nop			; (mov r8, r8)

00001a60 <__aeabi_lmul>:
    1a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a62:	46ce      	mov	lr, r9
    1a64:	4647      	mov	r7, r8
    1a66:	0415      	lsls	r5, r2, #16
    1a68:	0c2d      	lsrs	r5, r5, #16
    1a6a:	002e      	movs	r6, r5
    1a6c:	b580      	push	{r7, lr}
    1a6e:	0407      	lsls	r7, r0, #16
    1a70:	0c14      	lsrs	r4, r2, #16
    1a72:	0c3f      	lsrs	r7, r7, #16
    1a74:	4699      	mov	r9, r3
    1a76:	0c03      	lsrs	r3, r0, #16
    1a78:	437e      	muls	r6, r7
    1a7a:	435d      	muls	r5, r3
    1a7c:	4367      	muls	r7, r4
    1a7e:	4363      	muls	r3, r4
    1a80:	197f      	adds	r7, r7, r5
    1a82:	0c34      	lsrs	r4, r6, #16
    1a84:	19e4      	adds	r4, r4, r7
    1a86:	469c      	mov	ip, r3
    1a88:	42a5      	cmp	r5, r4
    1a8a:	d903      	bls.n	1a94 <__aeabi_lmul+0x34>
    1a8c:	2380      	movs	r3, #128	; 0x80
    1a8e:	025b      	lsls	r3, r3, #9
    1a90:	4698      	mov	r8, r3
    1a92:	44c4      	add	ip, r8
    1a94:	464b      	mov	r3, r9
    1a96:	4351      	muls	r1, r2
    1a98:	4343      	muls	r3, r0
    1a9a:	0436      	lsls	r6, r6, #16
    1a9c:	0c36      	lsrs	r6, r6, #16
    1a9e:	0c25      	lsrs	r5, r4, #16
    1aa0:	0424      	lsls	r4, r4, #16
    1aa2:	4465      	add	r5, ip
    1aa4:	19a4      	adds	r4, r4, r6
    1aa6:	1859      	adds	r1, r3, r1
    1aa8:	1949      	adds	r1, r1, r5
    1aaa:	0020      	movs	r0, r4
    1aac:	bc0c      	pop	{r2, r3}
    1aae:	4690      	mov	r8, r2
    1ab0:	4699      	mov	r9, r3
    1ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ab4 <__libc_init_array>:
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	2600      	movs	r6, #0
    1ab8:	4d0c      	ldr	r5, [pc, #48]	; (1aec <__libc_init_array+0x38>)
    1aba:	4c0d      	ldr	r4, [pc, #52]	; (1af0 <__libc_init_array+0x3c>)
    1abc:	1b64      	subs	r4, r4, r5
    1abe:	10a4      	asrs	r4, r4, #2
    1ac0:	42a6      	cmp	r6, r4
    1ac2:	d109      	bne.n	1ad8 <__libc_init_array+0x24>
    1ac4:	2600      	movs	r6, #0
    1ac6:	f002 fd4b 	bl	4560 <_init>
    1aca:	4d0a      	ldr	r5, [pc, #40]	; (1af4 <__libc_init_array+0x40>)
    1acc:	4c0a      	ldr	r4, [pc, #40]	; (1af8 <__libc_init_array+0x44>)
    1ace:	1b64      	subs	r4, r4, r5
    1ad0:	10a4      	asrs	r4, r4, #2
    1ad2:	42a6      	cmp	r6, r4
    1ad4:	d105      	bne.n	1ae2 <__libc_init_array+0x2e>
    1ad6:	bd70      	pop	{r4, r5, r6, pc}
    1ad8:	00b3      	lsls	r3, r6, #2
    1ada:	58eb      	ldr	r3, [r5, r3]
    1adc:	4798      	blx	r3
    1ade:	3601      	adds	r6, #1
    1ae0:	e7ee      	b.n	1ac0 <__libc_init_array+0xc>
    1ae2:	00b3      	lsls	r3, r6, #2
    1ae4:	58eb      	ldr	r3, [r5, r3]
    1ae6:	4798      	blx	r3
    1ae8:	3601      	adds	r6, #1
    1aea:	e7f2      	b.n	1ad2 <__libc_init_array+0x1e>
    1aec:	0000456c 	.word	0x0000456c
    1af0:	0000456c 	.word	0x0000456c
    1af4:	0000456c 	.word	0x0000456c
    1af8:	00004570 	.word	0x00004570

00001afc <memset>:
    1afc:	0003      	movs	r3, r0
    1afe:	1882      	adds	r2, r0, r2
    1b00:	4293      	cmp	r3, r2
    1b02:	d100      	bne.n	1b06 <memset+0xa>
    1b04:	4770      	bx	lr
    1b06:	7019      	strb	r1, [r3, #0]
    1b08:	3301      	adds	r3, #1
    1b0a:	e7f9      	b.n	1b00 <memset+0x4>

00001b0c <iprintf>:
    1b0c:	b40f      	push	{r0, r1, r2, r3}
    1b0e:	4b0b      	ldr	r3, [pc, #44]	; (1b3c <iprintf+0x30>)
    1b10:	b513      	push	{r0, r1, r4, lr}
    1b12:	681c      	ldr	r4, [r3, #0]
    1b14:	2c00      	cmp	r4, #0
    1b16:	d005      	beq.n	1b24 <iprintf+0x18>
    1b18:	69a3      	ldr	r3, [r4, #24]
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d102      	bne.n	1b24 <iprintf+0x18>
    1b1e:	0020      	movs	r0, r4
    1b20:	f000 fc2c 	bl	237c <__sinit>
    1b24:	ab05      	add	r3, sp, #20
    1b26:	9a04      	ldr	r2, [sp, #16]
    1b28:	68a1      	ldr	r1, [r4, #8]
    1b2a:	0020      	movs	r0, r4
    1b2c:	9301      	str	r3, [sp, #4]
    1b2e:	f001 f979 	bl	2e24 <_vfiprintf_r>
    1b32:	bc16      	pop	{r1, r2, r4}
    1b34:	bc08      	pop	{r3}
    1b36:	b004      	add	sp, #16
    1b38:	4718      	bx	r3
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	2000000c 	.word	0x2000000c

00001b40 <_puts_r>:
    1b40:	b570      	push	{r4, r5, r6, lr}
    1b42:	0005      	movs	r5, r0
    1b44:	000e      	movs	r6, r1
    1b46:	2800      	cmp	r0, #0
    1b48:	d004      	beq.n	1b54 <_puts_r+0x14>
    1b4a:	6983      	ldr	r3, [r0, #24]
    1b4c:	2b00      	cmp	r3, #0
    1b4e:	d101      	bne.n	1b54 <_puts_r+0x14>
    1b50:	f000 fc14 	bl	237c <__sinit>
    1b54:	69ab      	ldr	r3, [r5, #24]
    1b56:	68ac      	ldr	r4, [r5, #8]
    1b58:	2b00      	cmp	r3, #0
    1b5a:	d102      	bne.n	1b62 <_puts_r+0x22>
    1b5c:	0028      	movs	r0, r5
    1b5e:	f000 fc0d 	bl	237c <__sinit>
    1b62:	4b24      	ldr	r3, [pc, #144]	; (1bf4 <_puts_r+0xb4>)
    1b64:	429c      	cmp	r4, r3
    1b66:	d10f      	bne.n	1b88 <_puts_r+0x48>
    1b68:	686c      	ldr	r4, [r5, #4]
    1b6a:	89a3      	ldrh	r3, [r4, #12]
    1b6c:	071b      	lsls	r3, r3, #28
    1b6e:	d502      	bpl.n	1b76 <_puts_r+0x36>
    1b70:	6923      	ldr	r3, [r4, #16]
    1b72:	2b00      	cmp	r3, #0
    1b74:	d120      	bne.n	1bb8 <_puts_r+0x78>
    1b76:	0021      	movs	r1, r4
    1b78:	0028      	movs	r0, r5
    1b7a:	f000 fa6b 	bl	2054 <__swsetup_r>
    1b7e:	2800      	cmp	r0, #0
    1b80:	d01a      	beq.n	1bb8 <_puts_r+0x78>
    1b82:	2001      	movs	r0, #1
    1b84:	4240      	negs	r0, r0
    1b86:	bd70      	pop	{r4, r5, r6, pc}
    1b88:	4b1b      	ldr	r3, [pc, #108]	; (1bf8 <_puts_r+0xb8>)
    1b8a:	429c      	cmp	r4, r3
    1b8c:	d101      	bne.n	1b92 <_puts_r+0x52>
    1b8e:	68ac      	ldr	r4, [r5, #8]
    1b90:	e7eb      	b.n	1b6a <_puts_r+0x2a>
    1b92:	4b1a      	ldr	r3, [pc, #104]	; (1bfc <_puts_r+0xbc>)
    1b94:	429c      	cmp	r4, r3
    1b96:	d1e8      	bne.n	1b6a <_puts_r+0x2a>
    1b98:	68ec      	ldr	r4, [r5, #12]
    1b9a:	e7e6      	b.n	1b6a <_puts_r+0x2a>
    1b9c:	3b01      	subs	r3, #1
    1b9e:	3601      	adds	r6, #1
    1ba0:	60a3      	str	r3, [r4, #8]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	da04      	bge.n	1bb0 <_puts_r+0x70>
    1ba6:	69a2      	ldr	r2, [r4, #24]
    1ba8:	4293      	cmp	r3, r2
    1baa:	db16      	blt.n	1bda <_puts_r+0x9a>
    1bac:	290a      	cmp	r1, #10
    1bae:	d014      	beq.n	1bda <_puts_r+0x9a>
    1bb0:	6823      	ldr	r3, [r4, #0]
    1bb2:	1c5a      	adds	r2, r3, #1
    1bb4:	6022      	str	r2, [r4, #0]
    1bb6:	7019      	strb	r1, [r3, #0]
    1bb8:	7831      	ldrb	r1, [r6, #0]
    1bba:	68a3      	ldr	r3, [r4, #8]
    1bbc:	2900      	cmp	r1, #0
    1bbe:	d1ed      	bne.n	1b9c <_puts_r+0x5c>
    1bc0:	3b01      	subs	r3, #1
    1bc2:	60a3      	str	r3, [r4, #8]
    1bc4:	2b00      	cmp	r3, #0
    1bc6:	da0f      	bge.n	1be8 <_puts_r+0xa8>
    1bc8:	0022      	movs	r2, r4
    1bca:	310a      	adds	r1, #10
    1bcc:	0028      	movs	r0, r5
    1bce:	f000 f9d7 	bl	1f80 <__swbuf_r>
    1bd2:	1c43      	adds	r3, r0, #1
    1bd4:	d0d5      	beq.n	1b82 <_puts_r+0x42>
    1bd6:	200a      	movs	r0, #10
    1bd8:	e7d5      	b.n	1b86 <_puts_r+0x46>
    1bda:	0022      	movs	r2, r4
    1bdc:	0028      	movs	r0, r5
    1bde:	f000 f9cf 	bl	1f80 <__swbuf_r>
    1be2:	1c43      	adds	r3, r0, #1
    1be4:	d1e8      	bne.n	1bb8 <_puts_r+0x78>
    1be6:	e7cc      	b.n	1b82 <_puts_r+0x42>
    1be8:	200a      	movs	r0, #10
    1bea:	6823      	ldr	r3, [r4, #0]
    1bec:	1c5a      	adds	r2, r3, #1
    1bee:	6022      	str	r2, [r4, #0]
    1bf0:	7018      	strb	r0, [r3, #0]
    1bf2:	e7c8      	b.n	1b86 <_puts_r+0x46>
    1bf4:	000043b8 	.word	0x000043b8
    1bf8:	000043d8 	.word	0x000043d8
    1bfc:	00004398 	.word	0x00004398

00001c00 <puts>:
    1c00:	b510      	push	{r4, lr}
    1c02:	4b03      	ldr	r3, [pc, #12]	; (1c10 <puts+0x10>)
    1c04:	0001      	movs	r1, r0
    1c06:	6818      	ldr	r0, [r3, #0]
    1c08:	f7ff ff9a 	bl	1b40 <_puts_r>
    1c0c:	bd10      	pop	{r4, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	2000000c 	.word	0x2000000c

00001c14 <iscanf>:
    1c14:	b40f      	push	{r0, r1, r2, r3}
    1c16:	4b0b      	ldr	r3, [pc, #44]	; (1c44 <iscanf+0x30>)
    1c18:	b513      	push	{r0, r1, r4, lr}
    1c1a:	681c      	ldr	r4, [r3, #0]
    1c1c:	2c00      	cmp	r4, #0
    1c1e:	d005      	beq.n	1c2c <iscanf+0x18>
    1c20:	69a3      	ldr	r3, [r4, #24]
    1c22:	2b00      	cmp	r3, #0
    1c24:	d102      	bne.n	1c2c <iscanf+0x18>
    1c26:	0020      	movs	r0, r4
    1c28:	f000 fba8 	bl	237c <__sinit>
    1c2c:	ab05      	add	r3, sp, #20
    1c2e:	9a04      	ldr	r2, [sp, #16]
    1c30:	6861      	ldr	r1, [r4, #4]
    1c32:	0020      	movs	r0, r4
    1c34:	9301      	str	r3, [sp, #4]
    1c36:	f001 fd1f 	bl	3678 <_vfiscanf_r>
    1c3a:	bc16      	pop	{r1, r2, r4}
    1c3c:	bc08      	pop	{r3}
    1c3e:	b004      	add	sp, #16
    1c40:	4718      	bx	r3
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	2000000c 	.word	0x2000000c

00001c48 <setbuf>:
    1c48:	424a      	negs	r2, r1
    1c4a:	414a      	adcs	r2, r1
    1c4c:	2380      	movs	r3, #128	; 0x80
    1c4e:	b510      	push	{r4, lr}
    1c50:	0052      	lsls	r2, r2, #1
    1c52:	00db      	lsls	r3, r3, #3
    1c54:	f000 f802 	bl	1c5c <setvbuf>
    1c58:	bd10      	pop	{r4, pc}
	...

00001c5c <setvbuf>:
    1c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c5e:	001d      	movs	r5, r3
    1c60:	4b4f      	ldr	r3, [pc, #316]	; (1da0 <setvbuf+0x144>)
    1c62:	b085      	sub	sp, #20
    1c64:	681e      	ldr	r6, [r3, #0]
    1c66:	0004      	movs	r4, r0
    1c68:	000f      	movs	r7, r1
    1c6a:	9200      	str	r2, [sp, #0]
    1c6c:	2e00      	cmp	r6, #0
    1c6e:	d005      	beq.n	1c7c <setvbuf+0x20>
    1c70:	69b3      	ldr	r3, [r6, #24]
    1c72:	2b00      	cmp	r3, #0
    1c74:	d102      	bne.n	1c7c <setvbuf+0x20>
    1c76:	0030      	movs	r0, r6
    1c78:	f000 fb80 	bl	237c <__sinit>
    1c7c:	4b49      	ldr	r3, [pc, #292]	; (1da4 <setvbuf+0x148>)
    1c7e:	429c      	cmp	r4, r3
    1c80:	d150      	bne.n	1d24 <setvbuf+0xc8>
    1c82:	6874      	ldr	r4, [r6, #4]
    1c84:	9b00      	ldr	r3, [sp, #0]
    1c86:	2b02      	cmp	r3, #2
    1c88:	d005      	beq.n	1c96 <setvbuf+0x3a>
    1c8a:	2b01      	cmp	r3, #1
    1c8c:	d900      	bls.n	1c90 <setvbuf+0x34>
    1c8e:	e084      	b.n	1d9a <setvbuf+0x13e>
    1c90:	2d00      	cmp	r5, #0
    1c92:	da00      	bge.n	1c96 <setvbuf+0x3a>
    1c94:	e081      	b.n	1d9a <setvbuf+0x13e>
    1c96:	0021      	movs	r1, r4
    1c98:	0030      	movs	r0, r6
    1c9a:	f000 faed 	bl	2278 <_fflush_r>
    1c9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ca0:	2900      	cmp	r1, #0
    1ca2:	d008      	beq.n	1cb6 <setvbuf+0x5a>
    1ca4:	0023      	movs	r3, r4
    1ca6:	3344      	adds	r3, #68	; 0x44
    1ca8:	4299      	cmp	r1, r3
    1caa:	d002      	beq.n	1cb2 <setvbuf+0x56>
    1cac:	0030      	movs	r0, r6
    1cae:	f000 fca1 	bl	25f4 <_free_r>
    1cb2:	2300      	movs	r3, #0
    1cb4:	6363      	str	r3, [r4, #52]	; 0x34
    1cb6:	2300      	movs	r3, #0
    1cb8:	61a3      	str	r3, [r4, #24]
    1cba:	6063      	str	r3, [r4, #4]
    1cbc:	89a3      	ldrh	r3, [r4, #12]
    1cbe:	061b      	lsls	r3, r3, #24
    1cc0:	d503      	bpl.n	1cca <setvbuf+0x6e>
    1cc2:	6921      	ldr	r1, [r4, #16]
    1cc4:	0030      	movs	r0, r6
    1cc6:	f000 fc95 	bl	25f4 <_free_r>
    1cca:	89a3      	ldrh	r3, [r4, #12]
    1ccc:	4a36      	ldr	r2, [pc, #216]	; (1da8 <setvbuf+0x14c>)
    1cce:	4013      	ands	r3, r2
    1cd0:	81a3      	strh	r3, [r4, #12]
    1cd2:	9b00      	ldr	r3, [sp, #0]
    1cd4:	2b02      	cmp	r3, #2
    1cd6:	d05a      	beq.n	1d8e <setvbuf+0x132>
    1cd8:	ab03      	add	r3, sp, #12
    1cda:	aa02      	add	r2, sp, #8
    1cdc:	0021      	movs	r1, r4
    1cde:	0030      	movs	r0, r6
    1ce0:	f000 fc12 	bl	2508 <__swhatbuf_r>
    1ce4:	89a3      	ldrh	r3, [r4, #12]
    1ce6:	4318      	orrs	r0, r3
    1ce8:	81a0      	strh	r0, [r4, #12]
    1cea:	2d00      	cmp	r5, #0
    1cec:	d124      	bne.n	1d38 <setvbuf+0xdc>
    1cee:	9d02      	ldr	r5, [sp, #8]
    1cf0:	0028      	movs	r0, r5
    1cf2:	f000 fc75 	bl	25e0 <malloc>
    1cf6:	9501      	str	r5, [sp, #4]
    1cf8:	1e07      	subs	r7, r0, #0
    1cfa:	d142      	bne.n	1d82 <setvbuf+0x126>
    1cfc:	9b02      	ldr	r3, [sp, #8]
    1cfe:	9301      	str	r3, [sp, #4]
    1d00:	42ab      	cmp	r3, r5
    1d02:	d139      	bne.n	1d78 <setvbuf+0x11c>
    1d04:	2001      	movs	r0, #1
    1d06:	4240      	negs	r0, r0
    1d08:	2302      	movs	r3, #2
    1d0a:	89a2      	ldrh	r2, [r4, #12]
    1d0c:	4313      	orrs	r3, r2
    1d0e:	81a3      	strh	r3, [r4, #12]
    1d10:	2300      	movs	r3, #0
    1d12:	60a3      	str	r3, [r4, #8]
    1d14:	0023      	movs	r3, r4
    1d16:	3347      	adds	r3, #71	; 0x47
    1d18:	6023      	str	r3, [r4, #0]
    1d1a:	6123      	str	r3, [r4, #16]
    1d1c:	2301      	movs	r3, #1
    1d1e:	6163      	str	r3, [r4, #20]
    1d20:	b005      	add	sp, #20
    1d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d24:	4b21      	ldr	r3, [pc, #132]	; (1dac <setvbuf+0x150>)
    1d26:	429c      	cmp	r4, r3
    1d28:	d101      	bne.n	1d2e <setvbuf+0xd2>
    1d2a:	68b4      	ldr	r4, [r6, #8]
    1d2c:	e7aa      	b.n	1c84 <setvbuf+0x28>
    1d2e:	4b20      	ldr	r3, [pc, #128]	; (1db0 <setvbuf+0x154>)
    1d30:	429c      	cmp	r4, r3
    1d32:	d1a7      	bne.n	1c84 <setvbuf+0x28>
    1d34:	68f4      	ldr	r4, [r6, #12]
    1d36:	e7a5      	b.n	1c84 <setvbuf+0x28>
    1d38:	2f00      	cmp	r7, #0
    1d3a:	d0d9      	beq.n	1cf0 <setvbuf+0x94>
    1d3c:	69b3      	ldr	r3, [r6, #24]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d102      	bne.n	1d48 <setvbuf+0xec>
    1d42:	0030      	movs	r0, r6
    1d44:	f000 fb1a 	bl	237c <__sinit>
    1d48:	9b00      	ldr	r3, [sp, #0]
    1d4a:	2b01      	cmp	r3, #1
    1d4c:	d103      	bne.n	1d56 <setvbuf+0xfa>
    1d4e:	89a3      	ldrh	r3, [r4, #12]
    1d50:	9a00      	ldr	r2, [sp, #0]
    1d52:	431a      	orrs	r2, r3
    1d54:	81a2      	strh	r2, [r4, #12]
    1d56:	2008      	movs	r0, #8
    1d58:	89a3      	ldrh	r3, [r4, #12]
    1d5a:	6027      	str	r7, [r4, #0]
    1d5c:	6127      	str	r7, [r4, #16]
    1d5e:	6165      	str	r5, [r4, #20]
    1d60:	4018      	ands	r0, r3
    1d62:	d018      	beq.n	1d96 <setvbuf+0x13a>
    1d64:	2001      	movs	r0, #1
    1d66:	4018      	ands	r0, r3
    1d68:	2300      	movs	r3, #0
    1d6a:	4298      	cmp	r0, r3
    1d6c:	d011      	beq.n	1d92 <setvbuf+0x136>
    1d6e:	426d      	negs	r5, r5
    1d70:	60a3      	str	r3, [r4, #8]
    1d72:	61a5      	str	r5, [r4, #24]
    1d74:	0018      	movs	r0, r3
    1d76:	e7d3      	b.n	1d20 <setvbuf+0xc4>
    1d78:	9801      	ldr	r0, [sp, #4]
    1d7a:	f000 fc31 	bl	25e0 <malloc>
    1d7e:	1e07      	subs	r7, r0, #0
    1d80:	d0c0      	beq.n	1d04 <setvbuf+0xa8>
    1d82:	2380      	movs	r3, #128	; 0x80
    1d84:	89a2      	ldrh	r2, [r4, #12]
    1d86:	9d01      	ldr	r5, [sp, #4]
    1d88:	4313      	orrs	r3, r2
    1d8a:	81a3      	strh	r3, [r4, #12]
    1d8c:	e7d6      	b.n	1d3c <setvbuf+0xe0>
    1d8e:	2000      	movs	r0, #0
    1d90:	e7ba      	b.n	1d08 <setvbuf+0xac>
    1d92:	60a5      	str	r5, [r4, #8]
    1d94:	e7c4      	b.n	1d20 <setvbuf+0xc4>
    1d96:	60a0      	str	r0, [r4, #8]
    1d98:	e7c2      	b.n	1d20 <setvbuf+0xc4>
    1d9a:	2001      	movs	r0, #1
    1d9c:	4240      	negs	r0, r0
    1d9e:	e7bf      	b.n	1d20 <setvbuf+0xc4>
    1da0:	2000000c 	.word	0x2000000c
    1da4:	000043b8 	.word	0x000043b8
    1da8:	fffff35c 	.word	0xfffff35c
    1dac:	000043d8 	.word	0x000043d8
    1db0:	00004398 	.word	0x00004398

00001db4 <sniprintf>:
    1db4:	b40c      	push	{r2, r3}
    1db6:	b530      	push	{r4, r5, lr}
    1db8:	4b16      	ldr	r3, [pc, #88]	; (1e14 <sniprintf+0x60>)
    1dba:	b09d      	sub	sp, #116	; 0x74
    1dbc:	1e0c      	subs	r4, r1, #0
    1dbe:	681d      	ldr	r5, [r3, #0]
    1dc0:	da08      	bge.n	1dd4 <sniprintf+0x20>
    1dc2:	238b      	movs	r3, #139	; 0x8b
    1dc4:	2001      	movs	r0, #1
    1dc6:	602b      	str	r3, [r5, #0]
    1dc8:	4240      	negs	r0, r0
    1dca:	b01d      	add	sp, #116	; 0x74
    1dcc:	bc30      	pop	{r4, r5}
    1dce:	bc08      	pop	{r3}
    1dd0:	b002      	add	sp, #8
    1dd2:	4718      	bx	r3
    1dd4:	2382      	movs	r3, #130	; 0x82
    1dd6:	a902      	add	r1, sp, #8
    1dd8:	009b      	lsls	r3, r3, #2
    1dda:	818b      	strh	r3, [r1, #12]
    1ddc:	2300      	movs	r3, #0
    1dde:	9002      	str	r0, [sp, #8]
    1de0:	6108      	str	r0, [r1, #16]
    1de2:	429c      	cmp	r4, r3
    1de4:	d000      	beq.n	1de8 <sniprintf+0x34>
    1de6:	1e63      	subs	r3, r4, #1
    1de8:	608b      	str	r3, [r1, #8]
    1dea:	614b      	str	r3, [r1, #20]
    1dec:	2301      	movs	r3, #1
    1dee:	425b      	negs	r3, r3
    1df0:	81cb      	strh	r3, [r1, #14]
    1df2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1df4:	ab21      	add	r3, sp, #132	; 0x84
    1df6:	0028      	movs	r0, r5
    1df8:	9301      	str	r3, [sp, #4]
    1dfa:	f000 fd05 	bl	2808 <_svfiprintf_r>
    1dfe:	1c43      	adds	r3, r0, #1
    1e00:	da01      	bge.n	1e06 <sniprintf+0x52>
    1e02:	238b      	movs	r3, #139	; 0x8b
    1e04:	602b      	str	r3, [r5, #0]
    1e06:	2c00      	cmp	r4, #0
    1e08:	d0df      	beq.n	1dca <sniprintf+0x16>
    1e0a:	2300      	movs	r3, #0
    1e0c:	9a02      	ldr	r2, [sp, #8]
    1e0e:	7013      	strb	r3, [r2, #0]
    1e10:	e7db      	b.n	1dca <sniprintf+0x16>
    1e12:	46c0      	nop			; (mov r8, r8)
    1e14:	2000000c 	.word	0x2000000c

00001e18 <siprintf>:
    1e18:	b40e      	push	{r1, r2, r3}
    1e1a:	b510      	push	{r4, lr}
    1e1c:	b09d      	sub	sp, #116	; 0x74
    1e1e:	a902      	add	r1, sp, #8
    1e20:	9002      	str	r0, [sp, #8]
    1e22:	6108      	str	r0, [r1, #16]
    1e24:	480b      	ldr	r0, [pc, #44]	; (1e54 <siprintf+0x3c>)
    1e26:	2482      	movs	r4, #130	; 0x82
    1e28:	6088      	str	r0, [r1, #8]
    1e2a:	6148      	str	r0, [r1, #20]
    1e2c:	2001      	movs	r0, #1
    1e2e:	4240      	negs	r0, r0
    1e30:	ab1f      	add	r3, sp, #124	; 0x7c
    1e32:	81c8      	strh	r0, [r1, #14]
    1e34:	4808      	ldr	r0, [pc, #32]	; (1e58 <siprintf+0x40>)
    1e36:	cb04      	ldmia	r3!, {r2}
    1e38:	00a4      	lsls	r4, r4, #2
    1e3a:	6800      	ldr	r0, [r0, #0]
    1e3c:	9301      	str	r3, [sp, #4]
    1e3e:	818c      	strh	r4, [r1, #12]
    1e40:	f000 fce2 	bl	2808 <_svfiprintf_r>
    1e44:	2300      	movs	r3, #0
    1e46:	9a02      	ldr	r2, [sp, #8]
    1e48:	7013      	strb	r3, [r2, #0]
    1e4a:	b01d      	add	sp, #116	; 0x74
    1e4c:	bc10      	pop	{r4}
    1e4e:	bc08      	pop	{r3}
    1e50:	b003      	add	sp, #12
    1e52:	4718      	bx	r3
    1e54:	7fffffff 	.word	0x7fffffff
    1e58:	2000000c 	.word	0x2000000c

00001e5c <siscanf>:
    1e5c:	b40e      	push	{r1, r2, r3}
    1e5e:	2381      	movs	r3, #129	; 0x81
    1e60:	b570      	push	{r4, r5, r6, lr}
    1e62:	b09d      	sub	sp, #116	; 0x74
    1e64:	ac02      	add	r4, sp, #8
    1e66:	ad21      	add	r5, sp, #132	; 0x84
    1e68:	009b      	lsls	r3, r3, #2
    1e6a:	cd40      	ldmia	r5!, {r6}
    1e6c:	81a3      	strh	r3, [r4, #12]
    1e6e:	9002      	str	r0, [sp, #8]
    1e70:	9006      	str	r0, [sp, #24]
    1e72:	f000 f869 	bl	1f48 <strlen>
    1e76:	4b0b      	ldr	r3, [pc, #44]	; (1ea4 <siscanf+0x48>)
    1e78:	6060      	str	r0, [r4, #4]
    1e7a:	6263      	str	r3, [r4, #36]	; 0x24
    1e7c:	2300      	movs	r3, #0
    1e7e:	6160      	str	r0, [r4, #20]
    1e80:	4809      	ldr	r0, [pc, #36]	; (1ea8 <siscanf+0x4c>)
    1e82:	6363      	str	r3, [r4, #52]	; 0x34
    1e84:	64a3      	str	r3, [r4, #72]	; 0x48
    1e86:	3b01      	subs	r3, #1
    1e88:	81e3      	strh	r3, [r4, #14]
    1e8a:	0032      	movs	r2, r6
    1e8c:	002b      	movs	r3, r5
    1e8e:	0021      	movs	r1, r4
    1e90:	6800      	ldr	r0, [r0, #0]
    1e92:	9501      	str	r5, [sp, #4]
    1e94:	f000 fe18 	bl	2ac8 <__ssvfiscanf_r>
    1e98:	b01d      	add	sp, #116	; 0x74
    1e9a:	bc70      	pop	{r4, r5, r6}
    1e9c:	bc08      	pop	{r3}
    1e9e:	b003      	add	sp, #12
    1ea0:	4718      	bx	r3
    1ea2:	46c0      	nop			; (mov r8, r8)
    1ea4:	00001ed5 	.word	0x00001ed5
    1ea8:	2000000c 	.word	0x2000000c

00001eac <__sread>:
    1eac:	b570      	push	{r4, r5, r6, lr}
    1eae:	000c      	movs	r4, r1
    1eb0:	250e      	movs	r5, #14
    1eb2:	5f49      	ldrsh	r1, [r1, r5]
    1eb4:	f001 fd6c 	bl	3990 <_read_r>
    1eb8:	2800      	cmp	r0, #0
    1eba:	db03      	blt.n	1ec4 <__sread+0x18>
    1ebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1ebe:	181b      	adds	r3, r3, r0
    1ec0:	6563      	str	r3, [r4, #84]	; 0x54
    1ec2:	bd70      	pop	{r4, r5, r6, pc}
    1ec4:	89a3      	ldrh	r3, [r4, #12]
    1ec6:	4a02      	ldr	r2, [pc, #8]	; (1ed0 <__sread+0x24>)
    1ec8:	4013      	ands	r3, r2
    1eca:	81a3      	strh	r3, [r4, #12]
    1ecc:	e7f9      	b.n	1ec2 <__sread+0x16>
    1ece:	46c0      	nop			; (mov r8, r8)
    1ed0:	ffffefff 	.word	0xffffefff

00001ed4 <__seofread>:
    1ed4:	2000      	movs	r0, #0
    1ed6:	4770      	bx	lr

00001ed8 <__swrite>:
    1ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eda:	001f      	movs	r7, r3
    1edc:	898b      	ldrh	r3, [r1, #12]
    1ede:	0005      	movs	r5, r0
    1ee0:	000c      	movs	r4, r1
    1ee2:	0016      	movs	r6, r2
    1ee4:	05db      	lsls	r3, r3, #23
    1ee6:	d505      	bpl.n	1ef4 <__swrite+0x1c>
    1ee8:	230e      	movs	r3, #14
    1eea:	5ec9      	ldrsh	r1, [r1, r3]
    1eec:	2200      	movs	r2, #0
    1eee:	2302      	movs	r3, #2
    1ef0:	f000 faf6 	bl	24e0 <_lseek_r>
    1ef4:	89a3      	ldrh	r3, [r4, #12]
    1ef6:	4a05      	ldr	r2, [pc, #20]	; (1f0c <__swrite+0x34>)
    1ef8:	0028      	movs	r0, r5
    1efa:	4013      	ands	r3, r2
    1efc:	81a3      	strh	r3, [r4, #12]
    1efe:	0032      	movs	r2, r6
    1f00:	230e      	movs	r3, #14
    1f02:	5ee1      	ldrsh	r1, [r4, r3]
    1f04:	003b      	movs	r3, r7
    1f06:	f000 f891 	bl	202c <_write_r>
    1f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f0c:	ffffefff 	.word	0xffffefff

00001f10 <__sseek>:
    1f10:	b570      	push	{r4, r5, r6, lr}
    1f12:	000c      	movs	r4, r1
    1f14:	250e      	movs	r5, #14
    1f16:	5f49      	ldrsh	r1, [r1, r5]
    1f18:	f000 fae2 	bl	24e0 <_lseek_r>
    1f1c:	89a3      	ldrh	r3, [r4, #12]
    1f1e:	1c42      	adds	r2, r0, #1
    1f20:	d103      	bne.n	1f2a <__sseek+0x1a>
    1f22:	4a05      	ldr	r2, [pc, #20]	; (1f38 <__sseek+0x28>)
    1f24:	4013      	ands	r3, r2
    1f26:	81a3      	strh	r3, [r4, #12]
    1f28:	bd70      	pop	{r4, r5, r6, pc}
    1f2a:	2280      	movs	r2, #128	; 0x80
    1f2c:	0152      	lsls	r2, r2, #5
    1f2e:	4313      	orrs	r3, r2
    1f30:	81a3      	strh	r3, [r4, #12]
    1f32:	6560      	str	r0, [r4, #84]	; 0x54
    1f34:	e7f8      	b.n	1f28 <__sseek+0x18>
    1f36:	46c0      	nop			; (mov r8, r8)
    1f38:	ffffefff 	.word	0xffffefff

00001f3c <__sclose>:
    1f3c:	b510      	push	{r4, lr}
    1f3e:	230e      	movs	r3, #14
    1f40:	5ec9      	ldrsh	r1, [r1, r3]
    1f42:	f000 f8fd 	bl	2140 <_close_r>
    1f46:	bd10      	pop	{r4, pc}

00001f48 <strlen>:
    1f48:	2300      	movs	r3, #0
    1f4a:	5cc2      	ldrb	r2, [r0, r3]
    1f4c:	3301      	adds	r3, #1
    1f4e:	2a00      	cmp	r2, #0
    1f50:	d1fb      	bne.n	1f4a <strlen+0x2>
    1f52:	1e58      	subs	r0, r3, #1
    1f54:	4770      	bx	lr

00001f56 <strncpy>:
    1f56:	b570      	push	{r4, r5, r6, lr}
    1f58:	0004      	movs	r4, r0
    1f5a:	2a00      	cmp	r2, #0
    1f5c:	d100      	bne.n	1f60 <strncpy+0xa>
    1f5e:	bd70      	pop	{r4, r5, r6, pc}
    1f60:	780d      	ldrb	r5, [r1, #0]
    1f62:	1e56      	subs	r6, r2, #1
    1f64:	1c63      	adds	r3, r4, #1
    1f66:	7025      	strb	r5, [r4, #0]
    1f68:	3101      	adds	r1, #1
    1f6a:	2d00      	cmp	r5, #0
    1f6c:	d105      	bne.n	1f7a <strncpy+0x24>
    1f6e:	18a4      	adds	r4, r4, r2
    1f70:	429c      	cmp	r4, r3
    1f72:	d0f4      	beq.n	1f5e <strncpy+0x8>
    1f74:	701d      	strb	r5, [r3, #0]
    1f76:	3301      	adds	r3, #1
    1f78:	e7fa      	b.n	1f70 <strncpy+0x1a>
    1f7a:	001c      	movs	r4, r3
    1f7c:	0032      	movs	r2, r6
    1f7e:	e7ec      	b.n	1f5a <strncpy+0x4>

00001f80 <__swbuf_r>:
    1f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f82:	0005      	movs	r5, r0
    1f84:	000e      	movs	r6, r1
    1f86:	0014      	movs	r4, r2
    1f88:	2800      	cmp	r0, #0
    1f8a:	d004      	beq.n	1f96 <__swbuf_r+0x16>
    1f8c:	6983      	ldr	r3, [r0, #24]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d101      	bne.n	1f96 <__swbuf_r+0x16>
    1f92:	f000 f9f3 	bl	237c <__sinit>
    1f96:	4b22      	ldr	r3, [pc, #136]	; (2020 <STACK_SIZE+0x20>)
    1f98:	429c      	cmp	r4, r3
    1f9a:	d12d      	bne.n	1ff8 <__swbuf_r+0x78>
    1f9c:	686c      	ldr	r4, [r5, #4]
    1f9e:	69a3      	ldr	r3, [r4, #24]
    1fa0:	60a3      	str	r3, [r4, #8]
    1fa2:	89a3      	ldrh	r3, [r4, #12]
    1fa4:	071b      	lsls	r3, r3, #28
    1fa6:	d531      	bpl.n	200c <STACK_SIZE+0xc>
    1fa8:	6923      	ldr	r3, [r4, #16]
    1faa:	2b00      	cmp	r3, #0
    1fac:	d02e      	beq.n	200c <STACK_SIZE+0xc>
    1fae:	6823      	ldr	r3, [r4, #0]
    1fb0:	6922      	ldr	r2, [r4, #16]
    1fb2:	b2f7      	uxtb	r7, r6
    1fb4:	1a98      	subs	r0, r3, r2
    1fb6:	6963      	ldr	r3, [r4, #20]
    1fb8:	b2f6      	uxtb	r6, r6
    1fba:	4298      	cmp	r0, r3
    1fbc:	db05      	blt.n	1fca <__swbuf_r+0x4a>
    1fbe:	0021      	movs	r1, r4
    1fc0:	0028      	movs	r0, r5
    1fc2:	f000 f959 	bl	2278 <_fflush_r>
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d126      	bne.n	2018 <STACK_SIZE+0x18>
    1fca:	68a3      	ldr	r3, [r4, #8]
    1fcc:	3001      	adds	r0, #1
    1fce:	3b01      	subs	r3, #1
    1fd0:	60a3      	str	r3, [r4, #8]
    1fd2:	6823      	ldr	r3, [r4, #0]
    1fd4:	1c5a      	adds	r2, r3, #1
    1fd6:	6022      	str	r2, [r4, #0]
    1fd8:	701f      	strb	r7, [r3, #0]
    1fda:	6963      	ldr	r3, [r4, #20]
    1fdc:	4298      	cmp	r0, r3
    1fde:	d004      	beq.n	1fea <__swbuf_r+0x6a>
    1fe0:	89a3      	ldrh	r3, [r4, #12]
    1fe2:	07db      	lsls	r3, r3, #31
    1fe4:	d51a      	bpl.n	201c <STACK_SIZE+0x1c>
    1fe6:	2e0a      	cmp	r6, #10
    1fe8:	d118      	bne.n	201c <STACK_SIZE+0x1c>
    1fea:	0021      	movs	r1, r4
    1fec:	0028      	movs	r0, r5
    1fee:	f000 f943 	bl	2278 <_fflush_r>
    1ff2:	2800      	cmp	r0, #0
    1ff4:	d012      	beq.n	201c <STACK_SIZE+0x1c>
    1ff6:	e00f      	b.n	2018 <STACK_SIZE+0x18>
    1ff8:	4b0a      	ldr	r3, [pc, #40]	; (2024 <STACK_SIZE+0x24>)
    1ffa:	429c      	cmp	r4, r3
    1ffc:	d101      	bne.n	2002 <STACK_SIZE+0x2>
    1ffe:	68ac      	ldr	r4, [r5, #8]
    2000:	e7cd      	b.n	1f9e <__swbuf_r+0x1e>
    2002:	4b09      	ldr	r3, [pc, #36]	; (2028 <STACK_SIZE+0x28>)
    2004:	429c      	cmp	r4, r3
    2006:	d1ca      	bne.n	1f9e <__swbuf_r+0x1e>
    2008:	68ec      	ldr	r4, [r5, #12]
    200a:	e7c8      	b.n	1f9e <__swbuf_r+0x1e>
    200c:	0021      	movs	r1, r4
    200e:	0028      	movs	r0, r5
    2010:	f000 f820 	bl	2054 <__swsetup_r>
    2014:	2800      	cmp	r0, #0
    2016:	d0ca      	beq.n	1fae <__swbuf_r+0x2e>
    2018:	2601      	movs	r6, #1
    201a:	4276      	negs	r6, r6
    201c:	0030      	movs	r0, r6
    201e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2020:	000043b8 	.word	0x000043b8
    2024:	000043d8 	.word	0x000043d8
    2028:	00004398 	.word	0x00004398

0000202c <_write_r>:
    202c:	b570      	push	{r4, r5, r6, lr}
    202e:	0005      	movs	r5, r0
    2030:	0008      	movs	r0, r1
    2032:	0011      	movs	r1, r2
    2034:	2200      	movs	r2, #0
    2036:	4c06      	ldr	r4, [pc, #24]	; (2050 <_write_r+0x24>)
    2038:	6022      	str	r2, [r4, #0]
    203a:	001a      	movs	r2, r3
    203c:	f7ff fb60 	bl	1700 <_write>
    2040:	1c43      	adds	r3, r0, #1
    2042:	d103      	bne.n	204c <_write_r+0x20>
    2044:	6823      	ldr	r3, [r4, #0]
    2046:	2b00      	cmp	r3, #0
    2048:	d000      	beq.n	204c <_write_r+0x20>
    204a:	602b      	str	r3, [r5, #0]
    204c:	bd70      	pop	{r4, r5, r6, pc}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	200002f0 	.word	0x200002f0

00002054 <__swsetup_r>:
    2054:	4b36      	ldr	r3, [pc, #216]	; (2130 <__swsetup_r+0xdc>)
    2056:	b570      	push	{r4, r5, r6, lr}
    2058:	681d      	ldr	r5, [r3, #0]
    205a:	0006      	movs	r6, r0
    205c:	000c      	movs	r4, r1
    205e:	2d00      	cmp	r5, #0
    2060:	d005      	beq.n	206e <__swsetup_r+0x1a>
    2062:	69ab      	ldr	r3, [r5, #24]
    2064:	2b00      	cmp	r3, #0
    2066:	d102      	bne.n	206e <__swsetup_r+0x1a>
    2068:	0028      	movs	r0, r5
    206a:	f000 f987 	bl	237c <__sinit>
    206e:	4b31      	ldr	r3, [pc, #196]	; (2134 <__swsetup_r+0xe0>)
    2070:	429c      	cmp	r4, r3
    2072:	d10f      	bne.n	2094 <__swsetup_r+0x40>
    2074:	686c      	ldr	r4, [r5, #4]
    2076:	230c      	movs	r3, #12
    2078:	5ee2      	ldrsh	r2, [r4, r3]
    207a:	b293      	uxth	r3, r2
    207c:	0719      	lsls	r1, r3, #28
    207e:	d42d      	bmi.n	20dc <__swsetup_r+0x88>
    2080:	06d9      	lsls	r1, r3, #27
    2082:	d411      	bmi.n	20a8 <__swsetup_r+0x54>
    2084:	2309      	movs	r3, #9
    2086:	2001      	movs	r0, #1
    2088:	6033      	str	r3, [r6, #0]
    208a:	3337      	adds	r3, #55	; 0x37
    208c:	4313      	orrs	r3, r2
    208e:	81a3      	strh	r3, [r4, #12]
    2090:	4240      	negs	r0, r0
    2092:	bd70      	pop	{r4, r5, r6, pc}
    2094:	4b28      	ldr	r3, [pc, #160]	; (2138 <__swsetup_r+0xe4>)
    2096:	429c      	cmp	r4, r3
    2098:	d101      	bne.n	209e <__swsetup_r+0x4a>
    209a:	68ac      	ldr	r4, [r5, #8]
    209c:	e7eb      	b.n	2076 <__swsetup_r+0x22>
    209e:	4b27      	ldr	r3, [pc, #156]	; (213c <__swsetup_r+0xe8>)
    20a0:	429c      	cmp	r4, r3
    20a2:	d1e8      	bne.n	2076 <__swsetup_r+0x22>
    20a4:	68ec      	ldr	r4, [r5, #12]
    20a6:	e7e6      	b.n	2076 <__swsetup_r+0x22>
    20a8:	075b      	lsls	r3, r3, #29
    20aa:	d513      	bpl.n	20d4 <__swsetup_r+0x80>
    20ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
    20ae:	2900      	cmp	r1, #0
    20b0:	d008      	beq.n	20c4 <__swsetup_r+0x70>
    20b2:	0023      	movs	r3, r4
    20b4:	3344      	adds	r3, #68	; 0x44
    20b6:	4299      	cmp	r1, r3
    20b8:	d002      	beq.n	20c0 <__swsetup_r+0x6c>
    20ba:	0030      	movs	r0, r6
    20bc:	f000 fa9a 	bl	25f4 <_free_r>
    20c0:	2300      	movs	r3, #0
    20c2:	6363      	str	r3, [r4, #52]	; 0x34
    20c4:	2224      	movs	r2, #36	; 0x24
    20c6:	89a3      	ldrh	r3, [r4, #12]
    20c8:	4393      	bics	r3, r2
    20ca:	81a3      	strh	r3, [r4, #12]
    20cc:	2300      	movs	r3, #0
    20ce:	6063      	str	r3, [r4, #4]
    20d0:	6923      	ldr	r3, [r4, #16]
    20d2:	6023      	str	r3, [r4, #0]
    20d4:	2308      	movs	r3, #8
    20d6:	89a2      	ldrh	r2, [r4, #12]
    20d8:	4313      	orrs	r3, r2
    20da:	81a3      	strh	r3, [r4, #12]
    20dc:	6923      	ldr	r3, [r4, #16]
    20de:	2b00      	cmp	r3, #0
    20e0:	d10b      	bne.n	20fa <__swsetup_r+0xa6>
    20e2:	21a0      	movs	r1, #160	; 0xa0
    20e4:	2280      	movs	r2, #128	; 0x80
    20e6:	89a3      	ldrh	r3, [r4, #12]
    20e8:	0089      	lsls	r1, r1, #2
    20ea:	0092      	lsls	r2, r2, #2
    20ec:	400b      	ands	r3, r1
    20ee:	4293      	cmp	r3, r2
    20f0:	d003      	beq.n	20fa <__swsetup_r+0xa6>
    20f2:	0021      	movs	r1, r4
    20f4:	0030      	movs	r0, r6
    20f6:	f000 fa2f 	bl	2558 <__smakebuf_r>
    20fa:	2301      	movs	r3, #1
    20fc:	89a2      	ldrh	r2, [r4, #12]
    20fe:	4013      	ands	r3, r2
    2100:	d011      	beq.n	2126 <__swsetup_r+0xd2>
    2102:	2300      	movs	r3, #0
    2104:	60a3      	str	r3, [r4, #8]
    2106:	6963      	ldr	r3, [r4, #20]
    2108:	425b      	negs	r3, r3
    210a:	61a3      	str	r3, [r4, #24]
    210c:	2000      	movs	r0, #0
    210e:	6923      	ldr	r3, [r4, #16]
    2110:	4283      	cmp	r3, r0
    2112:	d1be      	bne.n	2092 <__swsetup_r+0x3e>
    2114:	230c      	movs	r3, #12
    2116:	5ee2      	ldrsh	r2, [r4, r3]
    2118:	0613      	lsls	r3, r2, #24
    211a:	d5ba      	bpl.n	2092 <__swsetup_r+0x3e>
    211c:	2340      	movs	r3, #64	; 0x40
    211e:	4313      	orrs	r3, r2
    2120:	81a3      	strh	r3, [r4, #12]
    2122:	3801      	subs	r0, #1
    2124:	e7b5      	b.n	2092 <__swsetup_r+0x3e>
    2126:	0792      	lsls	r2, r2, #30
    2128:	d400      	bmi.n	212c <__swsetup_r+0xd8>
    212a:	6963      	ldr	r3, [r4, #20]
    212c:	60a3      	str	r3, [r4, #8]
    212e:	e7ed      	b.n	210c <__swsetup_r+0xb8>
    2130:	2000000c 	.word	0x2000000c
    2134:	000043b8 	.word	0x000043b8
    2138:	000043d8 	.word	0x000043d8
    213c:	00004398 	.word	0x00004398

00002140 <_close_r>:
    2140:	2300      	movs	r3, #0
    2142:	b570      	push	{r4, r5, r6, lr}
    2144:	4c06      	ldr	r4, [pc, #24]	; (2160 <_close_r+0x20>)
    2146:	0005      	movs	r5, r0
    2148:	0008      	movs	r0, r1
    214a:	6023      	str	r3, [r4, #0]
    214c:	f7ff fb12 	bl	1774 <_close>
    2150:	1c43      	adds	r3, r0, #1
    2152:	d103      	bne.n	215c <_close_r+0x1c>
    2154:	6823      	ldr	r3, [r4, #0]
    2156:	2b00      	cmp	r3, #0
    2158:	d000      	beq.n	215c <_close_r+0x1c>
    215a:	602b      	str	r3, [r5, #0]
    215c:	bd70      	pop	{r4, r5, r6, pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	200002f0 	.word	0x200002f0

00002164 <__sflush_r>:
    2164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2166:	898a      	ldrh	r2, [r1, #12]
    2168:	0005      	movs	r5, r0
    216a:	000c      	movs	r4, r1
    216c:	0713      	lsls	r3, r2, #28
    216e:	d460      	bmi.n	2232 <__sflush_r+0xce>
    2170:	684b      	ldr	r3, [r1, #4]
    2172:	2b00      	cmp	r3, #0
    2174:	dc04      	bgt.n	2180 <__sflush_r+0x1c>
    2176:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2178:	2b00      	cmp	r3, #0
    217a:	dc01      	bgt.n	2180 <__sflush_r+0x1c>
    217c:	2000      	movs	r0, #0
    217e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2180:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    2182:	2f00      	cmp	r7, #0
    2184:	d0fa      	beq.n	217c <__sflush_r+0x18>
    2186:	2300      	movs	r3, #0
    2188:	682e      	ldr	r6, [r5, #0]
    218a:	602b      	str	r3, [r5, #0]
    218c:	2380      	movs	r3, #128	; 0x80
    218e:	015b      	lsls	r3, r3, #5
    2190:	401a      	ands	r2, r3
    2192:	d034      	beq.n	21fe <__sflush_r+0x9a>
    2194:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2196:	89a3      	ldrh	r3, [r4, #12]
    2198:	075b      	lsls	r3, r3, #29
    219a:	d506      	bpl.n	21aa <__sflush_r+0x46>
    219c:	6863      	ldr	r3, [r4, #4]
    219e:	1ac0      	subs	r0, r0, r3
    21a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    21a2:	2b00      	cmp	r3, #0
    21a4:	d001      	beq.n	21aa <__sflush_r+0x46>
    21a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21a8:	1ac0      	subs	r0, r0, r3
    21aa:	0002      	movs	r2, r0
    21ac:	6a21      	ldr	r1, [r4, #32]
    21ae:	2300      	movs	r3, #0
    21b0:	0028      	movs	r0, r5
    21b2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    21b4:	47b8      	blx	r7
    21b6:	89a1      	ldrh	r1, [r4, #12]
    21b8:	1c43      	adds	r3, r0, #1
    21ba:	d106      	bne.n	21ca <__sflush_r+0x66>
    21bc:	682b      	ldr	r3, [r5, #0]
    21be:	2b1d      	cmp	r3, #29
    21c0:	d831      	bhi.n	2226 <__sflush_r+0xc2>
    21c2:	4a2c      	ldr	r2, [pc, #176]	; (2274 <__sflush_r+0x110>)
    21c4:	40da      	lsrs	r2, r3
    21c6:	07d3      	lsls	r3, r2, #31
    21c8:	d52d      	bpl.n	2226 <__sflush_r+0xc2>
    21ca:	2300      	movs	r3, #0
    21cc:	6063      	str	r3, [r4, #4]
    21ce:	6923      	ldr	r3, [r4, #16]
    21d0:	6023      	str	r3, [r4, #0]
    21d2:	04cb      	lsls	r3, r1, #19
    21d4:	d505      	bpl.n	21e2 <__sflush_r+0x7e>
    21d6:	1c43      	adds	r3, r0, #1
    21d8:	d102      	bne.n	21e0 <__sflush_r+0x7c>
    21da:	682b      	ldr	r3, [r5, #0]
    21dc:	2b00      	cmp	r3, #0
    21de:	d100      	bne.n	21e2 <__sflush_r+0x7e>
    21e0:	6560      	str	r0, [r4, #84]	; 0x54
    21e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    21e4:	602e      	str	r6, [r5, #0]
    21e6:	2900      	cmp	r1, #0
    21e8:	d0c8      	beq.n	217c <__sflush_r+0x18>
    21ea:	0023      	movs	r3, r4
    21ec:	3344      	adds	r3, #68	; 0x44
    21ee:	4299      	cmp	r1, r3
    21f0:	d002      	beq.n	21f8 <__sflush_r+0x94>
    21f2:	0028      	movs	r0, r5
    21f4:	f000 f9fe 	bl	25f4 <_free_r>
    21f8:	2000      	movs	r0, #0
    21fa:	6360      	str	r0, [r4, #52]	; 0x34
    21fc:	e7bf      	b.n	217e <__sflush_r+0x1a>
    21fe:	2301      	movs	r3, #1
    2200:	6a21      	ldr	r1, [r4, #32]
    2202:	0028      	movs	r0, r5
    2204:	47b8      	blx	r7
    2206:	1c43      	adds	r3, r0, #1
    2208:	d1c5      	bne.n	2196 <__sflush_r+0x32>
    220a:	682b      	ldr	r3, [r5, #0]
    220c:	2b00      	cmp	r3, #0
    220e:	d0c2      	beq.n	2196 <__sflush_r+0x32>
    2210:	2b1d      	cmp	r3, #29
    2212:	d001      	beq.n	2218 <__sflush_r+0xb4>
    2214:	2b16      	cmp	r3, #22
    2216:	d101      	bne.n	221c <__sflush_r+0xb8>
    2218:	602e      	str	r6, [r5, #0]
    221a:	e7af      	b.n	217c <__sflush_r+0x18>
    221c:	2340      	movs	r3, #64	; 0x40
    221e:	89a2      	ldrh	r2, [r4, #12]
    2220:	4313      	orrs	r3, r2
    2222:	81a3      	strh	r3, [r4, #12]
    2224:	e7ab      	b.n	217e <__sflush_r+0x1a>
    2226:	2340      	movs	r3, #64	; 0x40
    2228:	430b      	orrs	r3, r1
    222a:	2001      	movs	r0, #1
    222c:	81a3      	strh	r3, [r4, #12]
    222e:	4240      	negs	r0, r0
    2230:	e7a5      	b.n	217e <__sflush_r+0x1a>
    2232:	690f      	ldr	r7, [r1, #16]
    2234:	2f00      	cmp	r7, #0
    2236:	d0a1      	beq.n	217c <__sflush_r+0x18>
    2238:	680b      	ldr	r3, [r1, #0]
    223a:	600f      	str	r7, [r1, #0]
    223c:	1bdb      	subs	r3, r3, r7
    223e:	9301      	str	r3, [sp, #4]
    2240:	2300      	movs	r3, #0
    2242:	0792      	lsls	r2, r2, #30
    2244:	d100      	bne.n	2248 <__sflush_r+0xe4>
    2246:	694b      	ldr	r3, [r1, #20]
    2248:	60a3      	str	r3, [r4, #8]
    224a:	9b01      	ldr	r3, [sp, #4]
    224c:	2b00      	cmp	r3, #0
    224e:	dc00      	bgt.n	2252 <__sflush_r+0xee>
    2250:	e794      	b.n	217c <__sflush_r+0x18>
    2252:	9b01      	ldr	r3, [sp, #4]
    2254:	003a      	movs	r2, r7
    2256:	6a21      	ldr	r1, [r4, #32]
    2258:	0028      	movs	r0, r5
    225a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    225c:	47b0      	blx	r6
    225e:	2800      	cmp	r0, #0
    2260:	dc03      	bgt.n	226a <__sflush_r+0x106>
    2262:	2340      	movs	r3, #64	; 0x40
    2264:	89a2      	ldrh	r2, [r4, #12]
    2266:	4313      	orrs	r3, r2
    2268:	e7df      	b.n	222a <__sflush_r+0xc6>
    226a:	9b01      	ldr	r3, [sp, #4]
    226c:	183f      	adds	r7, r7, r0
    226e:	1a1b      	subs	r3, r3, r0
    2270:	9301      	str	r3, [sp, #4]
    2272:	e7ea      	b.n	224a <__sflush_r+0xe6>
    2274:	20400001 	.word	0x20400001

00002278 <_fflush_r>:
    2278:	690b      	ldr	r3, [r1, #16]
    227a:	b570      	push	{r4, r5, r6, lr}
    227c:	0005      	movs	r5, r0
    227e:	000c      	movs	r4, r1
    2280:	2b00      	cmp	r3, #0
    2282:	d101      	bne.n	2288 <_fflush_r+0x10>
    2284:	2000      	movs	r0, #0
    2286:	bd70      	pop	{r4, r5, r6, pc}
    2288:	2800      	cmp	r0, #0
    228a:	d004      	beq.n	2296 <_fflush_r+0x1e>
    228c:	6983      	ldr	r3, [r0, #24]
    228e:	2b00      	cmp	r3, #0
    2290:	d101      	bne.n	2296 <_fflush_r+0x1e>
    2292:	f000 f873 	bl	237c <__sinit>
    2296:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <_fflush_r+0x4c>)
    2298:	429c      	cmp	r4, r3
    229a:	d109      	bne.n	22b0 <_fflush_r+0x38>
    229c:	686c      	ldr	r4, [r5, #4]
    229e:	220c      	movs	r2, #12
    22a0:	5ea3      	ldrsh	r3, [r4, r2]
    22a2:	2b00      	cmp	r3, #0
    22a4:	d0ee      	beq.n	2284 <_fflush_r+0xc>
    22a6:	0021      	movs	r1, r4
    22a8:	0028      	movs	r0, r5
    22aa:	f7ff ff5b 	bl	2164 <__sflush_r>
    22ae:	e7ea      	b.n	2286 <_fflush_r+0xe>
    22b0:	4b05      	ldr	r3, [pc, #20]	; (22c8 <_fflush_r+0x50>)
    22b2:	429c      	cmp	r4, r3
    22b4:	d101      	bne.n	22ba <_fflush_r+0x42>
    22b6:	68ac      	ldr	r4, [r5, #8]
    22b8:	e7f1      	b.n	229e <_fflush_r+0x26>
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <_fflush_r+0x54>)
    22bc:	429c      	cmp	r4, r3
    22be:	d1ee      	bne.n	229e <_fflush_r+0x26>
    22c0:	68ec      	ldr	r4, [r5, #12]
    22c2:	e7ec      	b.n	229e <_fflush_r+0x26>
    22c4:	000043b8 	.word	0x000043b8
    22c8:	000043d8 	.word	0x000043d8
    22cc:	00004398 	.word	0x00004398

000022d0 <fflush>:
    22d0:	b510      	push	{r4, lr}
    22d2:	1e01      	subs	r1, r0, #0
    22d4:	d105      	bne.n	22e2 <fflush+0x12>
    22d6:	4b05      	ldr	r3, [pc, #20]	; (22ec <fflush+0x1c>)
    22d8:	4905      	ldr	r1, [pc, #20]	; (22f0 <fflush+0x20>)
    22da:	6818      	ldr	r0, [r3, #0]
    22dc:	f000 f8de 	bl	249c <_fwalk_reent>
    22e0:	bd10      	pop	{r4, pc}
    22e2:	4b04      	ldr	r3, [pc, #16]	; (22f4 <fflush+0x24>)
    22e4:	6818      	ldr	r0, [r3, #0]
    22e6:	f7ff ffc7 	bl	2278 <_fflush_r>
    22ea:	e7f9      	b.n	22e0 <fflush+0x10>
    22ec:	00004394 	.word	0x00004394
    22f0:	00002279 	.word	0x00002279
    22f4:	2000000c 	.word	0x2000000c

000022f8 <_cleanup_r>:
    22f8:	b510      	push	{r4, lr}
    22fa:	4902      	ldr	r1, [pc, #8]	; (2304 <_cleanup_r+0xc>)
    22fc:	f000 f8ce 	bl	249c <_fwalk_reent>
    2300:	bd10      	pop	{r4, pc}
    2302:	46c0      	nop			; (mov r8, r8)
    2304:	00002279 	.word	0x00002279

00002308 <std.isra.0>:
    2308:	2300      	movs	r3, #0
    230a:	b510      	push	{r4, lr}
    230c:	0004      	movs	r4, r0
    230e:	6003      	str	r3, [r0, #0]
    2310:	6043      	str	r3, [r0, #4]
    2312:	6083      	str	r3, [r0, #8]
    2314:	8181      	strh	r1, [r0, #12]
    2316:	6643      	str	r3, [r0, #100]	; 0x64
    2318:	81c2      	strh	r2, [r0, #14]
    231a:	6103      	str	r3, [r0, #16]
    231c:	6143      	str	r3, [r0, #20]
    231e:	6183      	str	r3, [r0, #24]
    2320:	0019      	movs	r1, r3
    2322:	2208      	movs	r2, #8
    2324:	305c      	adds	r0, #92	; 0x5c
    2326:	f7ff fbe9 	bl	1afc <memset>
    232a:	4b05      	ldr	r3, [pc, #20]	; (2340 <std.isra.0+0x38>)
    232c:	6224      	str	r4, [r4, #32]
    232e:	6263      	str	r3, [r4, #36]	; 0x24
    2330:	4b04      	ldr	r3, [pc, #16]	; (2344 <std.isra.0+0x3c>)
    2332:	62a3      	str	r3, [r4, #40]	; 0x28
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <std.isra.0+0x40>)
    2336:	62e3      	str	r3, [r4, #44]	; 0x2c
    2338:	4b04      	ldr	r3, [pc, #16]	; (234c <std.isra.0+0x44>)
    233a:	6323      	str	r3, [r4, #48]	; 0x30
    233c:	bd10      	pop	{r4, pc}
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	00001ead 	.word	0x00001ead
    2344:	00001ed9 	.word	0x00001ed9
    2348:	00001f11 	.word	0x00001f11
    234c:	00001f3d 	.word	0x00001f3d

00002350 <__sfmoreglue>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	2568      	movs	r5, #104	; 0x68
    2354:	1e4a      	subs	r2, r1, #1
    2356:	4355      	muls	r5, r2
    2358:	000e      	movs	r6, r1
    235a:	0029      	movs	r1, r5
    235c:	3174      	adds	r1, #116	; 0x74
    235e:	f000 f993 	bl	2688 <_malloc_r>
    2362:	1e04      	subs	r4, r0, #0
    2364:	d008      	beq.n	2378 <__sfmoreglue+0x28>
    2366:	2100      	movs	r1, #0
    2368:	002a      	movs	r2, r5
    236a:	6001      	str	r1, [r0, #0]
    236c:	6046      	str	r6, [r0, #4]
    236e:	300c      	adds	r0, #12
    2370:	60a0      	str	r0, [r4, #8]
    2372:	3268      	adds	r2, #104	; 0x68
    2374:	f7ff fbc2 	bl	1afc <memset>
    2378:	0020      	movs	r0, r4
    237a:	bd70      	pop	{r4, r5, r6, pc}

0000237c <__sinit>:
    237c:	6983      	ldr	r3, [r0, #24]
    237e:	b513      	push	{r0, r1, r4, lr}
    2380:	0004      	movs	r4, r0
    2382:	2b00      	cmp	r3, #0
    2384:	d128      	bne.n	23d8 <__sinit+0x5c>
    2386:	6483      	str	r3, [r0, #72]	; 0x48
    2388:	64c3      	str	r3, [r0, #76]	; 0x4c
    238a:	6503      	str	r3, [r0, #80]	; 0x50
    238c:	4b13      	ldr	r3, [pc, #76]	; (23dc <__sinit+0x60>)
    238e:	4a14      	ldr	r2, [pc, #80]	; (23e0 <__sinit+0x64>)
    2390:	681b      	ldr	r3, [r3, #0]
    2392:	6282      	str	r2, [r0, #40]	; 0x28
    2394:	9301      	str	r3, [sp, #4]
    2396:	4298      	cmp	r0, r3
    2398:	d101      	bne.n	239e <__sinit+0x22>
    239a:	2301      	movs	r3, #1
    239c:	6183      	str	r3, [r0, #24]
    239e:	0020      	movs	r0, r4
    23a0:	f000 f820 	bl	23e4 <__sfp>
    23a4:	6060      	str	r0, [r4, #4]
    23a6:	0020      	movs	r0, r4
    23a8:	f000 f81c 	bl	23e4 <__sfp>
    23ac:	60a0      	str	r0, [r4, #8]
    23ae:	0020      	movs	r0, r4
    23b0:	f000 f818 	bl	23e4 <__sfp>
    23b4:	2200      	movs	r2, #0
    23b6:	60e0      	str	r0, [r4, #12]
    23b8:	2104      	movs	r1, #4
    23ba:	6860      	ldr	r0, [r4, #4]
    23bc:	f7ff ffa4 	bl	2308 <std.isra.0>
    23c0:	2201      	movs	r2, #1
    23c2:	2109      	movs	r1, #9
    23c4:	68a0      	ldr	r0, [r4, #8]
    23c6:	f7ff ff9f 	bl	2308 <std.isra.0>
    23ca:	2202      	movs	r2, #2
    23cc:	2112      	movs	r1, #18
    23ce:	68e0      	ldr	r0, [r4, #12]
    23d0:	f7ff ff9a 	bl	2308 <std.isra.0>
    23d4:	2301      	movs	r3, #1
    23d6:	61a3      	str	r3, [r4, #24]
    23d8:	bd13      	pop	{r0, r1, r4, pc}
    23da:	46c0      	nop			; (mov r8, r8)
    23dc:	00004394 	.word	0x00004394
    23e0:	000022f9 	.word	0x000022f9

000023e4 <__sfp>:
    23e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23e6:	4b1e      	ldr	r3, [pc, #120]	; (2460 <__sfp+0x7c>)
    23e8:	0007      	movs	r7, r0
    23ea:	681e      	ldr	r6, [r3, #0]
    23ec:	69b3      	ldr	r3, [r6, #24]
    23ee:	2b00      	cmp	r3, #0
    23f0:	d102      	bne.n	23f8 <__sfp+0x14>
    23f2:	0030      	movs	r0, r6
    23f4:	f7ff ffc2 	bl	237c <__sinit>
    23f8:	3648      	adds	r6, #72	; 0x48
    23fa:	68b4      	ldr	r4, [r6, #8]
    23fc:	6873      	ldr	r3, [r6, #4]
    23fe:	3b01      	subs	r3, #1
    2400:	d504      	bpl.n	240c <__sfp+0x28>
    2402:	6833      	ldr	r3, [r6, #0]
    2404:	2b00      	cmp	r3, #0
    2406:	d007      	beq.n	2418 <__sfp+0x34>
    2408:	6836      	ldr	r6, [r6, #0]
    240a:	e7f6      	b.n	23fa <__sfp+0x16>
    240c:	220c      	movs	r2, #12
    240e:	5ea5      	ldrsh	r5, [r4, r2]
    2410:	2d00      	cmp	r5, #0
    2412:	d00d      	beq.n	2430 <__sfp+0x4c>
    2414:	3468      	adds	r4, #104	; 0x68
    2416:	e7f2      	b.n	23fe <__sfp+0x1a>
    2418:	2104      	movs	r1, #4
    241a:	0038      	movs	r0, r7
    241c:	f7ff ff98 	bl	2350 <__sfmoreglue>
    2420:	6030      	str	r0, [r6, #0]
    2422:	2800      	cmp	r0, #0
    2424:	d1f0      	bne.n	2408 <__sfp+0x24>
    2426:	230c      	movs	r3, #12
    2428:	0004      	movs	r4, r0
    242a:	603b      	str	r3, [r7, #0]
    242c:	0020      	movs	r0, r4
    242e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2430:	2301      	movs	r3, #1
    2432:	0020      	movs	r0, r4
    2434:	425b      	negs	r3, r3
    2436:	81e3      	strh	r3, [r4, #14]
    2438:	3302      	adds	r3, #2
    243a:	81a3      	strh	r3, [r4, #12]
    243c:	6665      	str	r5, [r4, #100]	; 0x64
    243e:	6025      	str	r5, [r4, #0]
    2440:	60a5      	str	r5, [r4, #8]
    2442:	6065      	str	r5, [r4, #4]
    2444:	6125      	str	r5, [r4, #16]
    2446:	6165      	str	r5, [r4, #20]
    2448:	61a5      	str	r5, [r4, #24]
    244a:	2208      	movs	r2, #8
    244c:	0029      	movs	r1, r5
    244e:	305c      	adds	r0, #92	; 0x5c
    2450:	f7ff fb54 	bl	1afc <memset>
    2454:	6365      	str	r5, [r4, #52]	; 0x34
    2456:	63a5      	str	r5, [r4, #56]	; 0x38
    2458:	64a5      	str	r5, [r4, #72]	; 0x48
    245a:	64e5      	str	r5, [r4, #76]	; 0x4c
    245c:	e7e6      	b.n	242c <__sfp+0x48>
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00004394 	.word	0x00004394

00002464 <_fwalk>:
    2464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2466:	3048      	adds	r0, #72	; 0x48
    2468:	0004      	movs	r4, r0
    246a:	2600      	movs	r6, #0
    246c:	9101      	str	r1, [sp, #4]
    246e:	2c00      	cmp	r4, #0
    2470:	d101      	bne.n	2476 <_fwalk+0x12>
    2472:	0030      	movs	r0, r6
    2474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2476:	68a5      	ldr	r5, [r4, #8]
    2478:	6867      	ldr	r7, [r4, #4]
    247a:	3f01      	subs	r7, #1
    247c:	d501      	bpl.n	2482 <_fwalk+0x1e>
    247e:	6824      	ldr	r4, [r4, #0]
    2480:	e7f5      	b.n	246e <_fwalk+0xa>
    2482:	89ab      	ldrh	r3, [r5, #12]
    2484:	2b01      	cmp	r3, #1
    2486:	d907      	bls.n	2498 <_fwalk+0x34>
    2488:	220e      	movs	r2, #14
    248a:	5eab      	ldrsh	r3, [r5, r2]
    248c:	3301      	adds	r3, #1
    248e:	d003      	beq.n	2498 <_fwalk+0x34>
    2490:	0028      	movs	r0, r5
    2492:	9b01      	ldr	r3, [sp, #4]
    2494:	4798      	blx	r3
    2496:	4306      	orrs	r6, r0
    2498:	3568      	adds	r5, #104	; 0x68
    249a:	e7ee      	b.n	247a <_fwalk+0x16>

0000249c <_fwalk_reent>:
    249c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    249e:	0004      	movs	r4, r0
    24a0:	0007      	movs	r7, r0
    24a2:	2600      	movs	r6, #0
    24a4:	9101      	str	r1, [sp, #4]
    24a6:	3448      	adds	r4, #72	; 0x48
    24a8:	2c00      	cmp	r4, #0
    24aa:	d101      	bne.n	24b0 <_fwalk_reent+0x14>
    24ac:	0030      	movs	r0, r6
    24ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    24b0:	6863      	ldr	r3, [r4, #4]
    24b2:	68a5      	ldr	r5, [r4, #8]
    24b4:	9300      	str	r3, [sp, #0]
    24b6:	9b00      	ldr	r3, [sp, #0]
    24b8:	3b01      	subs	r3, #1
    24ba:	9300      	str	r3, [sp, #0]
    24bc:	d501      	bpl.n	24c2 <_fwalk_reent+0x26>
    24be:	6824      	ldr	r4, [r4, #0]
    24c0:	e7f2      	b.n	24a8 <_fwalk_reent+0xc>
    24c2:	89ab      	ldrh	r3, [r5, #12]
    24c4:	2b01      	cmp	r3, #1
    24c6:	d908      	bls.n	24da <_fwalk_reent+0x3e>
    24c8:	220e      	movs	r2, #14
    24ca:	5eab      	ldrsh	r3, [r5, r2]
    24cc:	3301      	adds	r3, #1
    24ce:	d004      	beq.n	24da <_fwalk_reent+0x3e>
    24d0:	0029      	movs	r1, r5
    24d2:	0038      	movs	r0, r7
    24d4:	9b01      	ldr	r3, [sp, #4]
    24d6:	4798      	blx	r3
    24d8:	4306      	orrs	r6, r0
    24da:	3568      	adds	r5, #104	; 0x68
    24dc:	e7eb      	b.n	24b6 <_fwalk_reent+0x1a>
	...

000024e0 <_lseek_r>:
    24e0:	b570      	push	{r4, r5, r6, lr}
    24e2:	0005      	movs	r5, r0
    24e4:	0008      	movs	r0, r1
    24e6:	0011      	movs	r1, r2
    24e8:	2200      	movs	r2, #0
    24ea:	4c06      	ldr	r4, [pc, #24]	; (2504 <_lseek_r+0x24>)
    24ec:	6022      	str	r2, [r4, #0]
    24ee:	001a      	movs	r2, r3
    24f0:	f7ff f94a 	bl	1788 <_lseek>
    24f4:	1c43      	adds	r3, r0, #1
    24f6:	d103      	bne.n	2500 <_lseek_r+0x20>
    24f8:	6823      	ldr	r3, [r4, #0]
    24fa:	2b00      	cmp	r3, #0
    24fc:	d000      	beq.n	2500 <_lseek_r+0x20>
    24fe:	602b      	str	r3, [r5, #0]
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	200002f0 	.word	0x200002f0

00002508 <__swhatbuf_r>:
    2508:	b570      	push	{r4, r5, r6, lr}
    250a:	000e      	movs	r6, r1
    250c:	001d      	movs	r5, r3
    250e:	230e      	movs	r3, #14
    2510:	5ec9      	ldrsh	r1, [r1, r3]
    2512:	b090      	sub	sp, #64	; 0x40
    2514:	0014      	movs	r4, r2
    2516:	2900      	cmp	r1, #0
    2518:	da07      	bge.n	252a <__swhatbuf_r+0x22>
    251a:	2300      	movs	r3, #0
    251c:	602b      	str	r3, [r5, #0]
    251e:	89b3      	ldrh	r3, [r6, #12]
    2520:	061b      	lsls	r3, r3, #24
    2522:	d411      	bmi.n	2548 <__swhatbuf_r+0x40>
    2524:	2380      	movs	r3, #128	; 0x80
    2526:	00db      	lsls	r3, r3, #3
    2528:	e00f      	b.n	254a <__swhatbuf_r+0x42>
    252a:	aa01      	add	r2, sp, #4
    252c:	f001 fd02 	bl	3f34 <_fstat_r>
    2530:	2800      	cmp	r0, #0
    2532:	dbf2      	blt.n	251a <__swhatbuf_r+0x12>
    2534:	22f0      	movs	r2, #240	; 0xf0
    2536:	9b02      	ldr	r3, [sp, #8]
    2538:	0212      	lsls	r2, r2, #8
    253a:	4013      	ands	r3, r2
    253c:	4a05      	ldr	r2, [pc, #20]	; (2554 <__swhatbuf_r+0x4c>)
    253e:	189b      	adds	r3, r3, r2
    2540:	425a      	negs	r2, r3
    2542:	4153      	adcs	r3, r2
    2544:	602b      	str	r3, [r5, #0]
    2546:	e7ed      	b.n	2524 <__swhatbuf_r+0x1c>
    2548:	2340      	movs	r3, #64	; 0x40
    254a:	2000      	movs	r0, #0
    254c:	6023      	str	r3, [r4, #0]
    254e:	b010      	add	sp, #64	; 0x40
    2550:	bd70      	pop	{r4, r5, r6, pc}
    2552:	46c0      	nop			; (mov r8, r8)
    2554:	ffffe000 	.word	0xffffe000

00002558 <__smakebuf_r>:
    2558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    255a:	2602      	movs	r6, #2
    255c:	898b      	ldrh	r3, [r1, #12]
    255e:	0005      	movs	r5, r0
    2560:	000c      	movs	r4, r1
    2562:	4233      	tst	r3, r6
    2564:	d006      	beq.n	2574 <__smakebuf_r+0x1c>
    2566:	0023      	movs	r3, r4
    2568:	3347      	adds	r3, #71	; 0x47
    256a:	6023      	str	r3, [r4, #0]
    256c:	6123      	str	r3, [r4, #16]
    256e:	2301      	movs	r3, #1
    2570:	6163      	str	r3, [r4, #20]
    2572:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2574:	ab01      	add	r3, sp, #4
    2576:	466a      	mov	r2, sp
    2578:	f7ff ffc6 	bl	2508 <__swhatbuf_r>
    257c:	9900      	ldr	r1, [sp, #0]
    257e:	0007      	movs	r7, r0
    2580:	0028      	movs	r0, r5
    2582:	f000 f881 	bl	2688 <_malloc_r>
    2586:	2800      	cmp	r0, #0
    2588:	d108      	bne.n	259c <__smakebuf_r+0x44>
    258a:	220c      	movs	r2, #12
    258c:	5ea3      	ldrsh	r3, [r4, r2]
    258e:	059a      	lsls	r2, r3, #22
    2590:	d4ef      	bmi.n	2572 <__smakebuf_r+0x1a>
    2592:	2203      	movs	r2, #3
    2594:	4393      	bics	r3, r2
    2596:	431e      	orrs	r6, r3
    2598:	81a6      	strh	r6, [r4, #12]
    259a:	e7e4      	b.n	2566 <__smakebuf_r+0xe>
    259c:	4b0f      	ldr	r3, [pc, #60]	; (25dc <__smakebuf_r+0x84>)
    259e:	62ab      	str	r3, [r5, #40]	; 0x28
    25a0:	2380      	movs	r3, #128	; 0x80
    25a2:	89a2      	ldrh	r2, [r4, #12]
    25a4:	6020      	str	r0, [r4, #0]
    25a6:	4313      	orrs	r3, r2
    25a8:	81a3      	strh	r3, [r4, #12]
    25aa:	9b00      	ldr	r3, [sp, #0]
    25ac:	6120      	str	r0, [r4, #16]
    25ae:	6163      	str	r3, [r4, #20]
    25b0:	9b01      	ldr	r3, [sp, #4]
    25b2:	2b00      	cmp	r3, #0
    25b4:	d00d      	beq.n	25d2 <__smakebuf_r+0x7a>
    25b6:	230e      	movs	r3, #14
    25b8:	5ee1      	ldrsh	r1, [r4, r3]
    25ba:	0028      	movs	r0, r5
    25bc:	f001 fccc 	bl	3f58 <_isatty_r>
    25c0:	2800      	cmp	r0, #0
    25c2:	d006      	beq.n	25d2 <__smakebuf_r+0x7a>
    25c4:	2203      	movs	r2, #3
    25c6:	89a3      	ldrh	r3, [r4, #12]
    25c8:	4393      	bics	r3, r2
    25ca:	001a      	movs	r2, r3
    25cc:	2301      	movs	r3, #1
    25ce:	4313      	orrs	r3, r2
    25d0:	81a3      	strh	r3, [r4, #12]
    25d2:	89a0      	ldrh	r0, [r4, #12]
    25d4:	4338      	orrs	r0, r7
    25d6:	81a0      	strh	r0, [r4, #12]
    25d8:	e7cb      	b.n	2572 <__smakebuf_r+0x1a>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	000022f9 	.word	0x000022f9

000025e0 <malloc>:
    25e0:	b510      	push	{r4, lr}
    25e2:	4b03      	ldr	r3, [pc, #12]	; (25f0 <malloc+0x10>)
    25e4:	0001      	movs	r1, r0
    25e6:	6818      	ldr	r0, [r3, #0]
    25e8:	f000 f84e 	bl	2688 <_malloc_r>
    25ec:	bd10      	pop	{r4, pc}
    25ee:	46c0      	nop			; (mov r8, r8)
    25f0:	2000000c 	.word	0x2000000c

000025f4 <_free_r>:
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	0005      	movs	r5, r0
    25f8:	2900      	cmp	r1, #0
    25fa:	d010      	beq.n	261e <_free_r+0x2a>
    25fc:	1f0c      	subs	r4, r1, #4
    25fe:	6823      	ldr	r3, [r4, #0]
    2600:	2b00      	cmp	r3, #0
    2602:	da00      	bge.n	2606 <_free_r+0x12>
    2604:	18e4      	adds	r4, r4, r3
    2606:	0028      	movs	r0, r5
    2608:	f001 fd02 	bl	4010 <__malloc_lock>
    260c:	4a1d      	ldr	r2, [pc, #116]	; (2684 <_free_r+0x90>)
    260e:	6813      	ldr	r3, [r2, #0]
    2610:	2b00      	cmp	r3, #0
    2612:	d105      	bne.n	2620 <_free_r+0x2c>
    2614:	6063      	str	r3, [r4, #4]
    2616:	6014      	str	r4, [r2, #0]
    2618:	0028      	movs	r0, r5
    261a:	f001 fcfa 	bl	4012 <__malloc_unlock>
    261e:	bd70      	pop	{r4, r5, r6, pc}
    2620:	42a3      	cmp	r3, r4
    2622:	d909      	bls.n	2638 <_free_r+0x44>
    2624:	6821      	ldr	r1, [r4, #0]
    2626:	1860      	adds	r0, r4, r1
    2628:	4283      	cmp	r3, r0
    262a:	d1f3      	bne.n	2614 <_free_r+0x20>
    262c:	6818      	ldr	r0, [r3, #0]
    262e:	685b      	ldr	r3, [r3, #4]
    2630:	1841      	adds	r1, r0, r1
    2632:	6021      	str	r1, [r4, #0]
    2634:	e7ee      	b.n	2614 <_free_r+0x20>
    2636:	0013      	movs	r3, r2
    2638:	685a      	ldr	r2, [r3, #4]
    263a:	2a00      	cmp	r2, #0
    263c:	d001      	beq.n	2642 <_free_r+0x4e>
    263e:	42a2      	cmp	r2, r4
    2640:	d9f9      	bls.n	2636 <_free_r+0x42>
    2642:	6819      	ldr	r1, [r3, #0]
    2644:	1858      	adds	r0, r3, r1
    2646:	42a0      	cmp	r0, r4
    2648:	d10b      	bne.n	2662 <_free_r+0x6e>
    264a:	6820      	ldr	r0, [r4, #0]
    264c:	1809      	adds	r1, r1, r0
    264e:	1858      	adds	r0, r3, r1
    2650:	6019      	str	r1, [r3, #0]
    2652:	4282      	cmp	r2, r0
    2654:	d1e0      	bne.n	2618 <_free_r+0x24>
    2656:	6810      	ldr	r0, [r2, #0]
    2658:	6852      	ldr	r2, [r2, #4]
    265a:	1841      	adds	r1, r0, r1
    265c:	6019      	str	r1, [r3, #0]
    265e:	605a      	str	r2, [r3, #4]
    2660:	e7da      	b.n	2618 <_free_r+0x24>
    2662:	42a0      	cmp	r0, r4
    2664:	d902      	bls.n	266c <_free_r+0x78>
    2666:	230c      	movs	r3, #12
    2668:	602b      	str	r3, [r5, #0]
    266a:	e7d5      	b.n	2618 <_free_r+0x24>
    266c:	6821      	ldr	r1, [r4, #0]
    266e:	1860      	adds	r0, r4, r1
    2670:	4282      	cmp	r2, r0
    2672:	d103      	bne.n	267c <_free_r+0x88>
    2674:	6810      	ldr	r0, [r2, #0]
    2676:	6852      	ldr	r2, [r2, #4]
    2678:	1841      	adds	r1, r0, r1
    267a:	6021      	str	r1, [r4, #0]
    267c:	6062      	str	r2, [r4, #4]
    267e:	605c      	str	r4, [r3, #4]
    2680:	e7ca      	b.n	2618 <_free_r+0x24>
    2682:	46c0      	nop			; (mov r8, r8)
    2684:	2000026c 	.word	0x2000026c

00002688 <_malloc_r>:
    2688:	2303      	movs	r3, #3
    268a:	b570      	push	{r4, r5, r6, lr}
    268c:	1ccd      	adds	r5, r1, #3
    268e:	439d      	bics	r5, r3
    2690:	3508      	adds	r5, #8
    2692:	0006      	movs	r6, r0
    2694:	2d0c      	cmp	r5, #12
    2696:	d21e      	bcs.n	26d6 <_malloc_r+0x4e>
    2698:	250c      	movs	r5, #12
    269a:	42a9      	cmp	r1, r5
    269c:	d81d      	bhi.n	26da <_malloc_r+0x52>
    269e:	0030      	movs	r0, r6
    26a0:	f001 fcb6 	bl	4010 <__malloc_lock>
    26a4:	4a25      	ldr	r2, [pc, #148]	; (273c <_malloc_r+0xb4>)
    26a6:	6814      	ldr	r4, [r2, #0]
    26a8:	0021      	movs	r1, r4
    26aa:	2900      	cmp	r1, #0
    26ac:	d119      	bne.n	26e2 <_malloc_r+0x5a>
    26ae:	4c24      	ldr	r4, [pc, #144]	; (2740 <_malloc_r+0xb8>)
    26b0:	6823      	ldr	r3, [r4, #0]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d103      	bne.n	26be <_malloc_r+0x36>
    26b6:	0030      	movs	r0, r6
    26b8:	f001 fa1a 	bl	3af0 <_sbrk_r>
    26bc:	6020      	str	r0, [r4, #0]
    26be:	0029      	movs	r1, r5
    26c0:	0030      	movs	r0, r6
    26c2:	f001 fa15 	bl	3af0 <_sbrk_r>
    26c6:	1c43      	adds	r3, r0, #1
    26c8:	d12c      	bne.n	2724 <_malloc_r+0x9c>
    26ca:	230c      	movs	r3, #12
    26cc:	0030      	movs	r0, r6
    26ce:	6033      	str	r3, [r6, #0]
    26d0:	f001 fc9f 	bl	4012 <__malloc_unlock>
    26d4:	e003      	b.n	26de <_malloc_r+0x56>
    26d6:	2d00      	cmp	r5, #0
    26d8:	dadf      	bge.n	269a <_malloc_r+0x12>
    26da:	230c      	movs	r3, #12
    26dc:	6033      	str	r3, [r6, #0]
    26de:	2000      	movs	r0, #0
    26e0:	bd70      	pop	{r4, r5, r6, pc}
    26e2:	680b      	ldr	r3, [r1, #0]
    26e4:	1b5b      	subs	r3, r3, r5
    26e6:	d41a      	bmi.n	271e <_malloc_r+0x96>
    26e8:	2b0b      	cmp	r3, #11
    26ea:	d903      	bls.n	26f4 <_malloc_r+0x6c>
    26ec:	600b      	str	r3, [r1, #0]
    26ee:	18cc      	adds	r4, r1, r3
    26f0:	6025      	str	r5, [r4, #0]
    26f2:	e003      	b.n	26fc <_malloc_r+0x74>
    26f4:	428c      	cmp	r4, r1
    26f6:	d10e      	bne.n	2716 <_malloc_r+0x8e>
    26f8:	6863      	ldr	r3, [r4, #4]
    26fa:	6013      	str	r3, [r2, #0]
    26fc:	0030      	movs	r0, r6
    26fe:	f001 fc88 	bl	4012 <__malloc_unlock>
    2702:	0020      	movs	r0, r4
    2704:	2207      	movs	r2, #7
    2706:	300b      	adds	r0, #11
    2708:	1d23      	adds	r3, r4, #4
    270a:	4390      	bics	r0, r2
    270c:	1ac3      	subs	r3, r0, r3
    270e:	d0e7      	beq.n	26e0 <_malloc_r+0x58>
    2710:	425a      	negs	r2, r3
    2712:	50e2      	str	r2, [r4, r3]
    2714:	e7e4      	b.n	26e0 <_malloc_r+0x58>
    2716:	684b      	ldr	r3, [r1, #4]
    2718:	6063      	str	r3, [r4, #4]
    271a:	000c      	movs	r4, r1
    271c:	e7ee      	b.n	26fc <_malloc_r+0x74>
    271e:	000c      	movs	r4, r1
    2720:	6849      	ldr	r1, [r1, #4]
    2722:	e7c2      	b.n	26aa <_malloc_r+0x22>
    2724:	2303      	movs	r3, #3
    2726:	1cc4      	adds	r4, r0, #3
    2728:	439c      	bics	r4, r3
    272a:	42a0      	cmp	r0, r4
    272c:	d0e0      	beq.n	26f0 <_malloc_r+0x68>
    272e:	1a21      	subs	r1, r4, r0
    2730:	0030      	movs	r0, r6
    2732:	f001 f9dd 	bl	3af0 <_sbrk_r>
    2736:	1c43      	adds	r3, r0, #1
    2738:	d1da      	bne.n	26f0 <_malloc_r+0x68>
    273a:	e7c6      	b.n	26ca <_malloc_r+0x42>
    273c:	2000026c 	.word	0x2000026c
    2740:	20000270 	.word	0x20000270

00002744 <__ssputs_r>:
    2744:	b5f0      	push	{r4, r5, r6, r7, lr}
    2746:	688e      	ldr	r6, [r1, #8]
    2748:	b085      	sub	sp, #20
    274a:	0007      	movs	r7, r0
    274c:	000c      	movs	r4, r1
    274e:	9203      	str	r2, [sp, #12]
    2750:	9301      	str	r3, [sp, #4]
    2752:	429e      	cmp	r6, r3
    2754:	d839      	bhi.n	27ca <__ssputs_r+0x86>
    2756:	2390      	movs	r3, #144	; 0x90
    2758:	898a      	ldrh	r2, [r1, #12]
    275a:	00db      	lsls	r3, r3, #3
    275c:	421a      	tst	r2, r3
    275e:	d034      	beq.n	27ca <__ssputs_r+0x86>
    2760:	2503      	movs	r5, #3
    2762:	6909      	ldr	r1, [r1, #16]
    2764:	6823      	ldr	r3, [r4, #0]
    2766:	1a5b      	subs	r3, r3, r1
    2768:	9302      	str	r3, [sp, #8]
    276a:	6963      	ldr	r3, [r4, #20]
    276c:	9802      	ldr	r0, [sp, #8]
    276e:	435d      	muls	r5, r3
    2770:	0feb      	lsrs	r3, r5, #31
    2772:	195d      	adds	r5, r3, r5
    2774:	9b01      	ldr	r3, [sp, #4]
    2776:	106d      	asrs	r5, r5, #1
    2778:	3301      	adds	r3, #1
    277a:	181b      	adds	r3, r3, r0
    277c:	42ab      	cmp	r3, r5
    277e:	d900      	bls.n	2782 <__ssputs_r+0x3e>
    2780:	001d      	movs	r5, r3
    2782:	0553      	lsls	r3, r2, #21
    2784:	d532      	bpl.n	27ec <__ssputs_r+0xa8>
    2786:	0029      	movs	r1, r5
    2788:	0038      	movs	r0, r7
    278a:	f7ff ff7d 	bl	2688 <_malloc_r>
    278e:	1e06      	subs	r6, r0, #0
    2790:	d109      	bne.n	27a6 <__ssputs_r+0x62>
    2792:	230c      	movs	r3, #12
    2794:	603b      	str	r3, [r7, #0]
    2796:	2340      	movs	r3, #64	; 0x40
    2798:	2001      	movs	r0, #1
    279a:	89a2      	ldrh	r2, [r4, #12]
    279c:	4240      	negs	r0, r0
    279e:	4313      	orrs	r3, r2
    27a0:	81a3      	strh	r3, [r4, #12]
    27a2:	b005      	add	sp, #20
    27a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27a6:	9a02      	ldr	r2, [sp, #8]
    27a8:	6921      	ldr	r1, [r4, #16]
    27aa:	f001 fc16 	bl	3fda <memcpy>
    27ae:	89a3      	ldrh	r3, [r4, #12]
    27b0:	4a14      	ldr	r2, [pc, #80]	; (2804 <__ssputs_r+0xc0>)
    27b2:	401a      	ands	r2, r3
    27b4:	2380      	movs	r3, #128	; 0x80
    27b6:	4313      	orrs	r3, r2
    27b8:	81a3      	strh	r3, [r4, #12]
    27ba:	9b02      	ldr	r3, [sp, #8]
    27bc:	6126      	str	r6, [r4, #16]
    27be:	18f6      	adds	r6, r6, r3
    27c0:	6026      	str	r6, [r4, #0]
    27c2:	6165      	str	r5, [r4, #20]
    27c4:	9e01      	ldr	r6, [sp, #4]
    27c6:	1aed      	subs	r5, r5, r3
    27c8:	60a5      	str	r5, [r4, #8]
    27ca:	9b01      	ldr	r3, [sp, #4]
    27cc:	42b3      	cmp	r3, r6
    27ce:	d200      	bcs.n	27d2 <__ssputs_r+0x8e>
    27d0:	001e      	movs	r6, r3
    27d2:	0032      	movs	r2, r6
    27d4:	9903      	ldr	r1, [sp, #12]
    27d6:	6820      	ldr	r0, [r4, #0]
    27d8:	f001 fc08 	bl	3fec <memmove>
    27dc:	68a3      	ldr	r3, [r4, #8]
    27de:	2000      	movs	r0, #0
    27e0:	1b9b      	subs	r3, r3, r6
    27e2:	60a3      	str	r3, [r4, #8]
    27e4:	6823      	ldr	r3, [r4, #0]
    27e6:	199e      	adds	r6, r3, r6
    27e8:	6026      	str	r6, [r4, #0]
    27ea:	e7da      	b.n	27a2 <__ssputs_r+0x5e>
    27ec:	002a      	movs	r2, r5
    27ee:	0038      	movs	r0, r7
    27f0:	f001 fc10 	bl	4014 <_realloc_r>
    27f4:	1e06      	subs	r6, r0, #0
    27f6:	d1e0      	bne.n	27ba <__ssputs_r+0x76>
    27f8:	6921      	ldr	r1, [r4, #16]
    27fa:	0038      	movs	r0, r7
    27fc:	f7ff fefa 	bl	25f4 <_free_r>
    2800:	e7c7      	b.n	2792 <__ssputs_r+0x4e>
    2802:	46c0      	nop			; (mov r8, r8)
    2804:	fffffb7f 	.word	0xfffffb7f

00002808 <_svfiprintf_r>:
    2808:	b5f0      	push	{r4, r5, r6, r7, lr}
    280a:	b09f      	sub	sp, #124	; 0x7c
    280c:	9002      	str	r0, [sp, #8]
    280e:	9305      	str	r3, [sp, #20]
    2810:	898b      	ldrh	r3, [r1, #12]
    2812:	000f      	movs	r7, r1
    2814:	0016      	movs	r6, r2
    2816:	061b      	lsls	r3, r3, #24
    2818:	d511      	bpl.n	283e <_svfiprintf_r+0x36>
    281a:	690b      	ldr	r3, [r1, #16]
    281c:	2b00      	cmp	r3, #0
    281e:	d10e      	bne.n	283e <_svfiprintf_r+0x36>
    2820:	2140      	movs	r1, #64	; 0x40
    2822:	f7ff ff31 	bl	2688 <_malloc_r>
    2826:	6038      	str	r0, [r7, #0]
    2828:	6138      	str	r0, [r7, #16]
    282a:	2800      	cmp	r0, #0
    282c:	d105      	bne.n	283a <_svfiprintf_r+0x32>
    282e:	230c      	movs	r3, #12
    2830:	9a02      	ldr	r2, [sp, #8]
    2832:	3801      	subs	r0, #1
    2834:	6013      	str	r3, [r2, #0]
    2836:	b01f      	add	sp, #124	; 0x7c
    2838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283a:	2340      	movs	r3, #64	; 0x40
    283c:	617b      	str	r3, [r7, #20]
    283e:	2300      	movs	r3, #0
    2840:	ad06      	add	r5, sp, #24
    2842:	616b      	str	r3, [r5, #20]
    2844:	3320      	adds	r3, #32
    2846:	766b      	strb	r3, [r5, #25]
    2848:	3310      	adds	r3, #16
    284a:	76ab      	strb	r3, [r5, #26]
    284c:	0034      	movs	r4, r6
    284e:	7823      	ldrb	r3, [r4, #0]
    2850:	2b00      	cmp	r3, #0
    2852:	d147      	bne.n	28e4 <_svfiprintf_r+0xdc>
    2854:	1ba3      	subs	r3, r4, r6
    2856:	9304      	str	r3, [sp, #16]
    2858:	d00d      	beq.n	2876 <_svfiprintf_r+0x6e>
    285a:	1ba3      	subs	r3, r4, r6
    285c:	0032      	movs	r2, r6
    285e:	0039      	movs	r1, r7
    2860:	9802      	ldr	r0, [sp, #8]
    2862:	f7ff ff6f 	bl	2744 <__ssputs_r>
    2866:	1c43      	adds	r3, r0, #1
    2868:	d100      	bne.n	286c <_svfiprintf_r+0x64>
    286a:	e0b5      	b.n	29d8 <_svfiprintf_r+0x1d0>
    286c:	696a      	ldr	r2, [r5, #20]
    286e:	9b04      	ldr	r3, [sp, #16]
    2870:	4694      	mov	ip, r2
    2872:	4463      	add	r3, ip
    2874:	616b      	str	r3, [r5, #20]
    2876:	7823      	ldrb	r3, [r4, #0]
    2878:	2b00      	cmp	r3, #0
    287a:	d100      	bne.n	287e <_svfiprintf_r+0x76>
    287c:	e0ac      	b.n	29d8 <_svfiprintf_r+0x1d0>
    287e:	2201      	movs	r2, #1
    2880:	2300      	movs	r3, #0
    2882:	4252      	negs	r2, r2
    2884:	606a      	str	r2, [r5, #4]
    2886:	a902      	add	r1, sp, #8
    2888:	3254      	adds	r2, #84	; 0x54
    288a:	1852      	adds	r2, r2, r1
    288c:	3401      	adds	r4, #1
    288e:	602b      	str	r3, [r5, #0]
    2890:	60eb      	str	r3, [r5, #12]
    2892:	60ab      	str	r3, [r5, #8]
    2894:	7013      	strb	r3, [r2, #0]
    2896:	65ab      	str	r3, [r5, #88]	; 0x58
    2898:	4e58      	ldr	r6, [pc, #352]	; (29fc <_svfiprintf_r+0x1f4>)
    289a:	2205      	movs	r2, #5
    289c:	7821      	ldrb	r1, [r4, #0]
    289e:	0030      	movs	r0, r6
    28a0:	f001 fb90 	bl	3fc4 <memchr>
    28a4:	1c62      	adds	r2, r4, #1
    28a6:	2800      	cmp	r0, #0
    28a8:	d120      	bne.n	28ec <_svfiprintf_r+0xe4>
    28aa:	6829      	ldr	r1, [r5, #0]
    28ac:	06cb      	lsls	r3, r1, #27
    28ae:	d504      	bpl.n	28ba <_svfiprintf_r+0xb2>
    28b0:	2353      	movs	r3, #83	; 0x53
    28b2:	ae02      	add	r6, sp, #8
    28b4:	3020      	adds	r0, #32
    28b6:	199b      	adds	r3, r3, r6
    28b8:	7018      	strb	r0, [r3, #0]
    28ba:	070b      	lsls	r3, r1, #28
    28bc:	d504      	bpl.n	28c8 <_svfiprintf_r+0xc0>
    28be:	2353      	movs	r3, #83	; 0x53
    28c0:	202b      	movs	r0, #43	; 0x2b
    28c2:	ae02      	add	r6, sp, #8
    28c4:	199b      	adds	r3, r3, r6
    28c6:	7018      	strb	r0, [r3, #0]
    28c8:	7823      	ldrb	r3, [r4, #0]
    28ca:	2b2a      	cmp	r3, #42	; 0x2a
    28cc:	d016      	beq.n	28fc <_svfiprintf_r+0xf4>
    28ce:	2000      	movs	r0, #0
    28d0:	210a      	movs	r1, #10
    28d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    28d4:	7822      	ldrb	r2, [r4, #0]
    28d6:	3a30      	subs	r2, #48	; 0x30
    28d8:	2a09      	cmp	r2, #9
    28da:	d955      	bls.n	2988 <_svfiprintf_r+0x180>
    28dc:	2800      	cmp	r0, #0
    28de:	d015      	beq.n	290c <_svfiprintf_r+0x104>
    28e0:	9309      	str	r3, [sp, #36]	; 0x24
    28e2:	e013      	b.n	290c <_svfiprintf_r+0x104>
    28e4:	2b25      	cmp	r3, #37	; 0x25
    28e6:	d0b5      	beq.n	2854 <_svfiprintf_r+0x4c>
    28e8:	3401      	adds	r4, #1
    28ea:	e7b0      	b.n	284e <_svfiprintf_r+0x46>
    28ec:	2301      	movs	r3, #1
    28ee:	1b80      	subs	r0, r0, r6
    28f0:	4083      	lsls	r3, r0
    28f2:	6829      	ldr	r1, [r5, #0]
    28f4:	0014      	movs	r4, r2
    28f6:	430b      	orrs	r3, r1
    28f8:	602b      	str	r3, [r5, #0]
    28fa:	e7cd      	b.n	2898 <_svfiprintf_r+0x90>
    28fc:	9b05      	ldr	r3, [sp, #20]
    28fe:	1d18      	adds	r0, r3, #4
    2900:	681b      	ldr	r3, [r3, #0]
    2902:	9005      	str	r0, [sp, #20]
    2904:	2b00      	cmp	r3, #0
    2906:	db39      	blt.n	297c <_svfiprintf_r+0x174>
    2908:	9309      	str	r3, [sp, #36]	; 0x24
    290a:	0014      	movs	r4, r2
    290c:	7823      	ldrb	r3, [r4, #0]
    290e:	2b2e      	cmp	r3, #46	; 0x2e
    2910:	d10b      	bne.n	292a <_svfiprintf_r+0x122>
    2912:	7863      	ldrb	r3, [r4, #1]
    2914:	1c62      	adds	r2, r4, #1
    2916:	2b2a      	cmp	r3, #42	; 0x2a
    2918:	d13e      	bne.n	2998 <_svfiprintf_r+0x190>
    291a:	9b05      	ldr	r3, [sp, #20]
    291c:	3402      	adds	r4, #2
    291e:	1d1a      	adds	r2, r3, #4
    2920:	681b      	ldr	r3, [r3, #0]
    2922:	9205      	str	r2, [sp, #20]
    2924:	2b00      	cmp	r3, #0
    2926:	db34      	blt.n	2992 <_svfiprintf_r+0x18a>
    2928:	9307      	str	r3, [sp, #28]
    292a:	4e35      	ldr	r6, [pc, #212]	; (2a00 <_svfiprintf_r+0x1f8>)
    292c:	7821      	ldrb	r1, [r4, #0]
    292e:	2203      	movs	r2, #3
    2930:	0030      	movs	r0, r6
    2932:	f001 fb47 	bl	3fc4 <memchr>
    2936:	2800      	cmp	r0, #0
    2938:	d006      	beq.n	2948 <_svfiprintf_r+0x140>
    293a:	2340      	movs	r3, #64	; 0x40
    293c:	1b80      	subs	r0, r0, r6
    293e:	4083      	lsls	r3, r0
    2940:	682a      	ldr	r2, [r5, #0]
    2942:	3401      	adds	r4, #1
    2944:	4313      	orrs	r3, r2
    2946:	602b      	str	r3, [r5, #0]
    2948:	7821      	ldrb	r1, [r4, #0]
    294a:	2206      	movs	r2, #6
    294c:	482d      	ldr	r0, [pc, #180]	; (2a04 <_svfiprintf_r+0x1fc>)
    294e:	1c66      	adds	r6, r4, #1
    2950:	7629      	strb	r1, [r5, #24]
    2952:	f001 fb37 	bl	3fc4 <memchr>
    2956:	2800      	cmp	r0, #0
    2958:	d046      	beq.n	29e8 <_svfiprintf_r+0x1e0>
    295a:	4b2b      	ldr	r3, [pc, #172]	; (2a08 <_svfiprintf_r+0x200>)
    295c:	2b00      	cmp	r3, #0
    295e:	d12f      	bne.n	29c0 <_svfiprintf_r+0x1b8>
    2960:	6829      	ldr	r1, [r5, #0]
    2962:	9b05      	ldr	r3, [sp, #20]
    2964:	2207      	movs	r2, #7
    2966:	05c9      	lsls	r1, r1, #23
    2968:	d528      	bpl.n	29bc <_svfiprintf_r+0x1b4>
    296a:	189b      	adds	r3, r3, r2
    296c:	4393      	bics	r3, r2
    296e:	3308      	adds	r3, #8
    2970:	9305      	str	r3, [sp, #20]
    2972:	696b      	ldr	r3, [r5, #20]
    2974:	9a03      	ldr	r2, [sp, #12]
    2976:	189b      	adds	r3, r3, r2
    2978:	616b      	str	r3, [r5, #20]
    297a:	e767      	b.n	284c <_svfiprintf_r+0x44>
    297c:	425b      	negs	r3, r3
    297e:	60eb      	str	r3, [r5, #12]
    2980:	2302      	movs	r3, #2
    2982:	430b      	orrs	r3, r1
    2984:	602b      	str	r3, [r5, #0]
    2986:	e7c0      	b.n	290a <_svfiprintf_r+0x102>
    2988:	434b      	muls	r3, r1
    298a:	3401      	adds	r4, #1
    298c:	189b      	adds	r3, r3, r2
    298e:	2001      	movs	r0, #1
    2990:	e7a0      	b.n	28d4 <_svfiprintf_r+0xcc>
    2992:	2301      	movs	r3, #1
    2994:	425b      	negs	r3, r3
    2996:	e7c7      	b.n	2928 <_svfiprintf_r+0x120>
    2998:	2300      	movs	r3, #0
    299a:	0014      	movs	r4, r2
    299c:	200a      	movs	r0, #10
    299e:	001a      	movs	r2, r3
    29a0:	606b      	str	r3, [r5, #4]
    29a2:	7821      	ldrb	r1, [r4, #0]
    29a4:	3930      	subs	r1, #48	; 0x30
    29a6:	2909      	cmp	r1, #9
    29a8:	d903      	bls.n	29b2 <_svfiprintf_r+0x1aa>
    29aa:	2b00      	cmp	r3, #0
    29ac:	d0bd      	beq.n	292a <_svfiprintf_r+0x122>
    29ae:	9207      	str	r2, [sp, #28]
    29b0:	e7bb      	b.n	292a <_svfiprintf_r+0x122>
    29b2:	4342      	muls	r2, r0
    29b4:	3401      	adds	r4, #1
    29b6:	1852      	adds	r2, r2, r1
    29b8:	2301      	movs	r3, #1
    29ba:	e7f2      	b.n	29a2 <_svfiprintf_r+0x19a>
    29bc:	3307      	adds	r3, #7
    29be:	e7d5      	b.n	296c <_svfiprintf_r+0x164>
    29c0:	ab05      	add	r3, sp, #20
    29c2:	9300      	str	r3, [sp, #0]
    29c4:	003a      	movs	r2, r7
    29c6:	4b11      	ldr	r3, [pc, #68]	; (2a0c <_svfiprintf_r+0x204>)
    29c8:	0029      	movs	r1, r5
    29ca:	9802      	ldr	r0, [sp, #8]
    29cc:	e000      	b.n	29d0 <_svfiprintf_r+0x1c8>
    29ce:	bf00      	nop
    29d0:	9003      	str	r0, [sp, #12]
    29d2:	9b03      	ldr	r3, [sp, #12]
    29d4:	3301      	adds	r3, #1
    29d6:	d1cc      	bne.n	2972 <_svfiprintf_r+0x16a>
    29d8:	89bb      	ldrh	r3, [r7, #12]
    29da:	980b      	ldr	r0, [sp, #44]	; 0x2c
    29dc:	065b      	lsls	r3, r3, #25
    29de:	d400      	bmi.n	29e2 <_svfiprintf_r+0x1da>
    29e0:	e729      	b.n	2836 <_svfiprintf_r+0x2e>
    29e2:	2001      	movs	r0, #1
    29e4:	4240      	negs	r0, r0
    29e6:	e726      	b.n	2836 <_svfiprintf_r+0x2e>
    29e8:	ab05      	add	r3, sp, #20
    29ea:	9300      	str	r3, [sp, #0]
    29ec:	003a      	movs	r2, r7
    29ee:	4b07      	ldr	r3, [pc, #28]	; (2a0c <_svfiprintf_r+0x204>)
    29f0:	0029      	movs	r1, r5
    29f2:	9802      	ldr	r0, [sp, #8]
    29f4:	f000 fba0 	bl	3138 <_printf_i>
    29f8:	e7ea      	b.n	29d0 <_svfiprintf_r+0x1c8>
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	000043f8 	.word	0x000043f8
    2a00:	000043fe 	.word	0x000043fe
    2a04:	00004402 	.word	0x00004402
    2a08:	00000000 	.word	0x00000000
    2a0c:	00002745 	.word	0x00002745

00002a10 <_sungetc_r>:
    2a10:	b570      	push	{r4, r5, r6, lr}
    2a12:	0014      	movs	r4, r2
    2a14:	1c4b      	adds	r3, r1, #1
    2a16:	d103      	bne.n	2a20 <_sungetc_r+0x10>
    2a18:	2501      	movs	r5, #1
    2a1a:	426d      	negs	r5, r5
    2a1c:	0028      	movs	r0, r5
    2a1e:	bd70      	pop	{r4, r5, r6, pc}
    2a20:	8993      	ldrh	r3, [r2, #12]
    2a22:	2220      	movs	r2, #32
    2a24:	4393      	bics	r3, r2
    2a26:	6b62      	ldr	r2, [r4, #52]	; 0x34
    2a28:	81a3      	strh	r3, [r4, #12]
    2a2a:	b2ce      	uxtb	r6, r1
    2a2c:	b2cd      	uxtb	r5, r1
    2a2e:	6863      	ldr	r3, [r4, #4]
    2a30:	2a00      	cmp	r2, #0
    2a32:	d010      	beq.n	2a56 <_sungetc_r+0x46>
    2a34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2a36:	4293      	cmp	r3, r2
    2a38:	da07      	bge.n	2a4a <_sungetc_r+0x3a>
    2a3a:	6823      	ldr	r3, [r4, #0]
    2a3c:	3b01      	subs	r3, #1
    2a3e:	6023      	str	r3, [r4, #0]
    2a40:	701e      	strb	r6, [r3, #0]
    2a42:	6863      	ldr	r3, [r4, #4]
    2a44:	3301      	adds	r3, #1
    2a46:	6063      	str	r3, [r4, #4]
    2a48:	e7e8      	b.n	2a1c <_sungetc_r+0xc>
    2a4a:	0021      	movs	r1, r4
    2a4c:	f001 f9c2 	bl	3dd4 <__submore>
    2a50:	2800      	cmp	r0, #0
    2a52:	d0f2      	beq.n	2a3a <_sungetc_r+0x2a>
    2a54:	e7e0      	b.n	2a18 <_sungetc_r+0x8>
    2a56:	6921      	ldr	r1, [r4, #16]
    2a58:	6822      	ldr	r2, [r4, #0]
    2a5a:	2900      	cmp	r1, #0
    2a5c:	d007      	beq.n	2a6e <_sungetc_r+0x5e>
    2a5e:	4291      	cmp	r1, r2
    2a60:	d205      	bcs.n	2a6e <_sungetc_r+0x5e>
    2a62:	1e51      	subs	r1, r2, #1
    2a64:	7808      	ldrb	r0, [r1, #0]
    2a66:	4285      	cmp	r5, r0
    2a68:	d101      	bne.n	2a6e <_sungetc_r+0x5e>
    2a6a:	6021      	str	r1, [r4, #0]
    2a6c:	e7ea      	b.n	2a44 <_sungetc_r+0x34>
    2a6e:	6423      	str	r3, [r4, #64]	; 0x40
    2a70:	0023      	movs	r3, r4
    2a72:	3344      	adds	r3, #68	; 0x44
    2a74:	6363      	str	r3, [r4, #52]	; 0x34
    2a76:	2303      	movs	r3, #3
    2a78:	63a3      	str	r3, [r4, #56]	; 0x38
    2a7a:	0023      	movs	r3, r4
    2a7c:	3346      	adds	r3, #70	; 0x46
    2a7e:	63e2      	str	r2, [r4, #60]	; 0x3c
    2a80:	701e      	strb	r6, [r3, #0]
    2a82:	6023      	str	r3, [r4, #0]
    2a84:	2301      	movs	r3, #1
    2a86:	e7de      	b.n	2a46 <_sungetc_r+0x36>

00002a88 <__ssrefill_r>:
    2a88:	b510      	push	{r4, lr}
    2a8a:	000c      	movs	r4, r1
    2a8c:	6b49      	ldr	r1, [r1, #52]	; 0x34
    2a8e:	2900      	cmp	r1, #0
    2a90:	d00e      	beq.n	2ab0 <__ssrefill_r+0x28>
    2a92:	0023      	movs	r3, r4
    2a94:	3344      	adds	r3, #68	; 0x44
    2a96:	4299      	cmp	r1, r3
    2a98:	d001      	beq.n	2a9e <__ssrefill_r+0x16>
    2a9a:	f7ff fdab 	bl	25f4 <_free_r>
    2a9e:	2000      	movs	r0, #0
    2aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2aa2:	6360      	str	r0, [r4, #52]	; 0x34
    2aa4:	6063      	str	r3, [r4, #4]
    2aa6:	4283      	cmp	r3, r0
    2aa8:	d002      	beq.n	2ab0 <__ssrefill_r+0x28>
    2aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2aac:	6023      	str	r3, [r4, #0]
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	6923      	ldr	r3, [r4, #16]
    2ab2:	2001      	movs	r0, #1
    2ab4:	6023      	str	r3, [r4, #0]
    2ab6:	2300      	movs	r3, #0
    2ab8:	89a2      	ldrh	r2, [r4, #12]
    2aba:	6063      	str	r3, [r4, #4]
    2abc:	3320      	adds	r3, #32
    2abe:	4313      	orrs	r3, r2
    2ac0:	81a3      	strh	r3, [r4, #12]
    2ac2:	4240      	negs	r0, r0
    2ac4:	e7f3      	b.n	2aae <__ssrefill_r+0x26>
	...

00002ac8 <__ssvfiscanf_r>:
    2ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2aca:	4cbd      	ldr	r4, [pc, #756]	; (2dc0 <__ssvfiscanf_r+0x2f8>)
    2acc:	2586      	movs	r5, #134	; 0x86
    2ace:	44a5      	add	sp, r4
    2ad0:	9303      	str	r3, [sp, #12]
    2ad2:	2300      	movs	r3, #0
    2ad4:	9348      	str	r3, [sp, #288]	; 0x120
    2ad6:	9349      	str	r3, [sp, #292]	; 0x124
    2ad8:	ab05      	add	r3, sp, #20
    2ada:	934a      	str	r3, [sp, #296]	; 0x128
    2adc:	23be      	movs	r3, #190	; 0xbe
    2ade:	006d      	lsls	r5, r5, #1
    2ae0:	9000      	str	r0, [sp, #0]
    2ae2:	000c      	movs	r4, r1
    2ae4:	a802      	add	r0, sp, #8
    2ae6:	49b7      	ldr	r1, [pc, #732]	; (2dc4 <__ssvfiscanf_r+0x2fc>)
    2ae8:	005b      	lsls	r3, r3, #1
    2aea:	1940      	adds	r0, r0, r5
    2aec:	27c0      	movs	r7, #192	; 0xc0
    2aee:	50c1      	str	r1, [r0, r3]
    2af0:	ab02      	add	r3, sp, #8
    2af2:	195b      	adds	r3, r3, r5
    2af4:	0015      	movs	r5, r2
    2af6:	49b4      	ldr	r1, [pc, #720]	; (2dc8 <__ssvfiscanf_r+0x300>)
    2af8:	007f      	lsls	r7, r7, #1
    2afa:	51d9      	str	r1, [r3, r7]
    2afc:	782b      	ldrb	r3, [r5, #0]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d100      	bne.n	2b04 <__ssvfiscanf_r+0x3c>
    2b02:	e15b      	b.n	2dbc <__ssvfiscanf_r+0x2f4>
    2b04:	f001 fa3e 	bl	3f84 <__locale_ctype_ptr>
    2b08:	2208      	movs	r2, #8
    2b0a:	782b      	ldrb	r3, [r5, #0]
    2b0c:	18c0      	adds	r0, r0, r3
    2b0e:	9301      	str	r3, [sp, #4]
    2b10:	7843      	ldrb	r3, [r0, #1]
    2b12:	4013      	ands	r3, r2
    2b14:	d141      	bne.n	2b9a <__ssvfiscanf_r+0xd2>
    2b16:	9a01      	ldr	r2, [sp, #4]
    2b18:	1c6e      	adds	r6, r5, #1
    2b1a:	2a25      	cmp	r2, #37	; 0x25
    2b1c:	d000      	beq.n	2b20 <__ssvfiscanf_r+0x58>
    2b1e:	e0a8      	b.n	2c72 <__ssvfiscanf_r+0x1aa>
    2b20:	9347      	str	r3, [sp, #284]	; 0x11c
    2b22:	9345      	str	r3, [sp, #276]	; 0x114
    2b24:	786b      	ldrb	r3, [r5, #1]
    2b26:	2b2a      	cmp	r3, #42	; 0x2a
    2b28:	d102      	bne.n	2b30 <__ssvfiscanf_r+0x68>
    2b2a:	3b1a      	subs	r3, #26
    2b2c:	9345      	str	r3, [sp, #276]	; 0x114
    2b2e:	1cae      	adds	r6, r5, #2
    2b30:	0035      	movs	r5, r6
    2b32:	220a      	movs	r2, #10
    2b34:	7829      	ldrb	r1, [r5, #0]
    2b36:	000b      	movs	r3, r1
    2b38:	3b30      	subs	r3, #48	; 0x30
    2b3a:	2b09      	cmp	r3, #9
    2b3c:	d948      	bls.n	2bd0 <__ssvfiscanf_r+0x108>
    2b3e:	4ea3      	ldr	r6, [pc, #652]	; (2dcc <__ssvfiscanf_r+0x304>)
    2b40:	2203      	movs	r2, #3
    2b42:	0030      	movs	r0, r6
    2b44:	f001 fa3e 	bl	3fc4 <memchr>
    2b48:	2800      	cmp	r0, #0
    2b4a:	d007      	beq.n	2b5c <__ssvfiscanf_r+0x94>
    2b4c:	2301      	movs	r3, #1
    2b4e:	1b80      	subs	r0, r0, r6
    2b50:	4083      	lsls	r3, r0
    2b52:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2b54:	3501      	adds	r5, #1
    2b56:	4313      	orrs	r3, r2
    2b58:	9202      	str	r2, [sp, #8]
    2b5a:	9345      	str	r3, [sp, #276]	; 0x114
    2b5c:	782b      	ldrb	r3, [r5, #0]
    2b5e:	1c6e      	adds	r6, r5, #1
    2b60:	2b67      	cmp	r3, #103	; 0x67
    2b62:	d858      	bhi.n	2c16 <__ssvfiscanf_r+0x14e>
    2b64:	2b65      	cmp	r3, #101	; 0x65
    2b66:	d300      	bcc.n	2b6a <__ssvfiscanf_r+0xa2>
    2b68:	e0dd      	b.n	2d26 <__ssvfiscanf_r+0x25e>
    2b6a:	2b47      	cmp	r3, #71	; 0x47
    2b6c:	d838      	bhi.n	2be0 <__ssvfiscanf_r+0x118>
    2b6e:	2b45      	cmp	r3, #69	; 0x45
    2b70:	d300      	bcc.n	2b74 <__ssvfiscanf_r+0xac>
    2b72:	e0d8      	b.n	2d26 <__ssvfiscanf_r+0x25e>
    2b74:	2b00      	cmp	r3, #0
    2b76:	d100      	bne.n	2b7a <__ssvfiscanf_r+0xb2>
    2b78:	e11d      	b.n	2db6 <__ssvfiscanf_r+0x2ee>
    2b7a:	2b25      	cmp	r3, #37	; 0x25
    2b7c:	d079      	beq.n	2c72 <__ssvfiscanf_r+0x1aa>
    2b7e:	2303      	movs	r3, #3
    2b80:	934b      	str	r3, [sp, #300]	; 0x12c
    2b82:	3307      	adds	r3, #7
    2b84:	9346      	str	r3, [sp, #280]	; 0x118
    2b86:	e053      	b.n	2c30 <__ssvfiscanf_r+0x168>
    2b88:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2b8a:	3301      	adds	r3, #1
    2b8c:	9201      	str	r2, [sp, #4]
    2b8e:	3201      	adds	r2, #1
    2b90:	9249      	str	r2, [sp, #292]	; 0x124
    2b92:	6862      	ldr	r2, [r4, #4]
    2b94:	6023      	str	r3, [r4, #0]
    2b96:	3a01      	subs	r2, #1
    2b98:	6062      	str	r2, [r4, #4]
    2b9a:	6863      	ldr	r3, [r4, #4]
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	dd0b      	ble.n	2bb8 <__ssvfiscanf_r+0xf0>
    2ba0:	f001 f9f0 	bl	3f84 <__locale_ctype_ptr>
    2ba4:	2108      	movs	r1, #8
    2ba6:	6823      	ldr	r3, [r4, #0]
    2ba8:	781a      	ldrb	r2, [r3, #0]
    2baa:	1880      	adds	r0, r0, r2
    2bac:	7842      	ldrb	r2, [r0, #1]
    2bae:	420a      	tst	r2, r1
    2bb0:	d1ea      	bne.n	2b88 <__ssvfiscanf_r+0xc0>
    2bb2:	1c6e      	adds	r6, r5, #1
    2bb4:	0035      	movs	r5, r6
    2bb6:	e7a1      	b.n	2afc <__ssvfiscanf_r+0x34>
    2bb8:	2286      	movs	r2, #134	; 0x86
    2bba:	ab02      	add	r3, sp, #8
    2bbc:	0052      	lsls	r2, r2, #1
    2bbe:	189b      	adds	r3, r3, r2
    2bc0:	59db      	ldr	r3, [r3, r7]
    2bc2:	0021      	movs	r1, r4
    2bc4:	9800      	ldr	r0, [sp, #0]
    2bc6:	9301      	str	r3, [sp, #4]
    2bc8:	4798      	blx	r3
    2bca:	2800      	cmp	r0, #0
    2bcc:	d0e8      	beq.n	2ba0 <__ssvfiscanf_r+0xd8>
    2bce:	e7f0      	b.n	2bb2 <__ssvfiscanf_r+0xea>
    2bd0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    2bd2:	3501      	adds	r5, #1
    2bd4:	9302      	str	r3, [sp, #8]
    2bd6:	4353      	muls	r3, r2
    2bd8:	3b30      	subs	r3, #48	; 0x30
    2bda:	1859      	adds	r1, r3, r1
    2bdc:	9147      	str	r1, [sp, #284]	; 0x11c
    2bde:	e7a9      	b.n	2b34 <__ssvfiscanf_r+0x6c>
    2be0:	2b5b      	cmp	r3, #91	; 0x5b
    2be2:	d100      	bne.n	2be6 <__ssvfiscanf_r+0x11e>
    2be4:	e077      	b.n	2cd6 <__ssvfiscanf_r+0x20e>
    2be6:	d80f      	bhi.n	2c08 <__ssvfiscanf_r+0x140>
    2be8:	2b58      	cmp	r3, #88	; 0x58
    2bea:	d1c8      	bne.n	2b7e <__ssvfiscanf_r+0xb6>
    2bec:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2bee:	9201      	str	r2, [sp, #4]
    2bf0:	2280      	movs	r2, #128	; 0x80
    2bf2:	9901      	ldr	r1, [sp, #4]
    2bf4:	0092      	lsls	r2, r2, #2
    2bf6:	430a      	orrs	r2, r1
    2bf8:	9245      	str	r2, [sp, #276]	; 0x114
    2bfa:	2210      	movs	r2, #16
    2bfc:	9246      	str	r2, [sp, #280]	; 0x118
    2bfe:	2203      	movs	r2, #3
    2c00:	2b6e      	cmp	r3, #110	; 0x6e
    2c02:	dd14      	ble.n	2c2e <__ssvfiscanf_r+0x166>
    2c04:	3201      	adds	r2, #1
    2c06:	e012      	b.n	2c2e <__ssvfiscanf_r+0x166>
    2c08:	2b63      	cmp	r3, #99	; 0x63
    2c0a:	d100      	bne.n	2c0e <__ssvfiscanf_r+0x146>
    2c0c:	e071      	b.n	2cf2 <__ssvfiscanf_r+0x22a>
    2c0e:	2b64      	cmp	r3, #100	; 0x64
    2c10:	d1b5      	bne.n	2b7e <__ssvfiscanf_r+0xb6>
    2c12:	220a      	movs	r2, #10
    2c14:	e7f2      	b.n	2bfc <__ssvfiscanf_r+0x134>
    2c16:	2b70      	cmp	r3, #112	; 0x70
    2c18:	d052      	beq.n	2cc0 <__ssvfiscanf_r+0x1f8>
    2c1a:	d822      	bhi.n	2c62 <__ssvfiscanf_r+0x19a>
    2c1c:	2b6e      	cmp	r3, #110	; 0x6e
    2c1e:	d100      	bne.n	2c22 <__ssvfiscanf_r+0x15a>
    2c20:	e06f      	b.n	2d02 <__ssvfiscanf_r+0x23a>
    2c22:	d854      	bhi.n	2cce <__ssvfiscanf_r+0x206>
    2c24:	2b69      	cmp	r3, #105	; 0x69
    2c26:	d1aa      	bne.n	2b7e <__ssvfiscanf_r+0xb6>
    2c28:	2300      	movs	r3, #0
    2c2a:	2203      	movs	r2, #3
    2c2c:	9346      	str	r3, [sp, #280]	; 0x118
    2c2e:	924b      	str	r2, [sp, #300]	; 0x12c
    2c30:	6863      	ldr	r3, [r4, #4]
    2c32:	2b00      	cmp	r3, #0
    2c34:	dc00      	bgt.n	2c38 <__ssvfiscanf_r+0x170>
    2c36:	e078      	b.n	2d2a <__ssvfiscanf_r+0x262>
    2c38:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2c3a:	9301      	str	r3, [sp, #4]
    2c3c:	065b      	lsls	r3, r3, #25
    2c3e:	d400      	bmi.n	2c42 <__ssvfiscanf_r+0x17a>
    2c40:	e08b      	b.n	2d5a <__ssvfiscanf_r+0x292>
    2c42:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    2c44:	2b02      	cmp	r3, #2
    2c46:	dd00      	ble.n	2c4a <__ssvfiscanf_r+0x182>
    2c48:	e09d      	b.n	2d86 <__ssvfiscanf_r+0x2be>
    2c4a:	ab03      	add	r3, sp, #12
    2c4c:	0022      	movs	r2, r4
    2c4e:	a945      	add	r1, sp, #276	; 0x114
    2c50:	9800      	ldr	r0, [sp, #0]
    2c52:	f000 fd39 	bl	36c8 <_scanf_chars>
    2c56:	2801      	cmp	r0, #1
    2c58:	d100      	bne.n	2c5c <__ssvfiscanf_r+0x194>
    2c5a:	e0af      	b.n	2dbc <__ssvfiscanf_r+0x2f4>
    2c5c:	2802      	cmp	r0, #2
    2c5e:	d1a9      	bne.n	2bb4 <__ssvfiscanf_r+0xec>
    2c60:	e025      	b.n	2cae <__ssvfiscanf_r+0x1e6>
    2c62:	2b75      	cmp	r3, #117	; 0x75
    2c64:	d0d5      	beq.n	2c12 <__ssvfiscanf_r+0x14a>
    2c66:	2b78      	cmp	r3, #120	; 0x78
    2c68:	d0c0      	beq.n	2bec <__ssvfiscanf_r+0x124>
    2c6a:	2b73      	cmp	r3, #115	; 0x73
    2c6c:	d187      	bne.n	2b7e <__ssvfiscanf_r+0xb6>
    2c6e:	2302      	movs	r3, #2
    2c70:	e03d      	b.n	2cee <__ssvfiscanf_r+0x226>
    2c72:	6863      	ldr	r3, [r4, #4]
    2c74:	2b00      	cmp	r3, #0
    2c76:	dd0f      	ble.n	2c98 <__ssvfiscanf_r+0x1d0>
    2c78:	6823      	ldr	r3, [r4, #0]
    2c7a:	9901      	ldr	r1, [sp, #4]
    2c7c:	781a      	ldrb	r2, [r3, #0]
    2c7e:	4291      	cmp	r1, r2
    2c80:	d000      	beq.n	2c84 <__ssvfiscanf_r+0x1bc>
    2c82:	e09b      	b.n	2dbc <__ssvfiscanf_r+0x2f4>
    2c84:	3301      	adds	r3, #1
    2c86:	6862      	ldr	r2, [r4, #4]
    2c88:	6023      	str	r3, [r4, #0]
    2c8a:	9b49      	ldr	r3, [sp, #292]	; 0x124
    2c8c:	3a01      	subs	r2, #1
    2c8e:	9301      	str	r3, [sp, #4]
    2c90:	3301      	adds	r3, #1
    2c92:	6062      	str	r2, [r4, #4]
    2c94:	9349      	str	r3, [sp, #292]	; 0x124
    2c96:	e78d      	b.n	2bb4 <__ssvfiscanf_r+0xec>
    2c98:	2286      	movs	r2, #134	; 0x86
    2c9a:	ab02      	add	r3, sp, #8
    2c9c:	0052      	lsls	r2, r2, #1
    2c9e:	189b      	adds	r3, r3, r2
    2ca0:	59db      	ldr	r3, [r3, r7]
    2ca2:	0021      	movs	r1, r4
    2ca4:	9800      	ldr	r0, [sp, #0]
    2ca6:	9302      	str	r3, [sp, #8]
    2ca8:	4798      	blx	r3
    2caa:	2800      	cmp	r0, #0
    2cac:	d0e4      	beq.n	2c78 <__ssvfiscanf_r+0x1b0>
    2cae:	9848      	ldr	r0, [sp, #288]	; 0x120
    2cb0:	2800      	cmp	r0, #0
    2cb2:	d000      	beq.n	2cb6 <__ssvfiscanf_r+0x1ee>
    2cb4:	e07b      	b.n	2dae <__ssvfiscanf_r+0x2e6>
    2cb6:	3801      	subs	r0, #1
    2cb8:	23a7      	movs	r3, #167	; 0xa7
    2cba:	009b      	lsls	r3, r3, #2
    2cbc:	449d      	add	sp, r3
    2cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cc0:	9a45      	ldr	r2, [sp, #276]	; 0x114
    2cc2:	9201      	str	r2, [sp, #4]
    2cc4:	2220      	movs	r2, #32
    2cc6:	9901      	ldr	r1, [sp, #4]
    2cc8:	430a      	orrs	r2, r1
    2cca:	9245      	str	r2, [sp, #276]	; 0x114
    2ccc:	e78e      	b.n	2bec <__ssvfiscanf_r+0x124>
    2cce:	2308      	movs	r3, #8
    2cd0:	2204      	movs	r2, #4
    2cd2:	9346      	str	r3, [sp, #280]	; 0x118
    2cd4:	e7ab      	b.n	2c2e <__ssvfiscanf_r+0x166>
    2cd6:	0031      	movs	r1, r6
    2cd8:	a805      	add	r0, sp, #20
    2cda:	f000 ff1b 	bl	3b14 <__sccl>
    2cde:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2ce0:	0006      	movs	r6, r0
    2ce2:	9301      	str	r3, [sp, #4]
    2ce4:	2340      	movs	r3, #64	; 0x40
    2ce6:	9a01      	ldr	r2, [sp, #4]
    2ce8:	4313      	orrs	r3, r2
    2cea:	9345      	str	r3, [sp, #276]	; 0x114
    2cec:	2301      	movs	r3, #1
    2cee:	934b      	str	r3, [sp, #300]	; 0x12c
    2cf0:	e79e      	b.n	2c30 <__ssvfiscanf_r+0x168>
    2cf2:	9b45      	ldr	r3, [sp, #276]	; 0x114
    2cf4:	9301      	str	r3, [sp, #4]
    2cf6:	2340      	movs	r3, #64	; 0x40
    2cf8:	9a01      	ldr	r2, [sp, #4]
    2cfa:	4313      	orrs	r3, r2
    2cfc:	9345      	str	r3, [sp, #276]	; 0x114
    2cfe:	2300      	movs	r3, #0
    2d00:	e7f5      	b.n	2cee <__ssvfiscanf_r+0x226>
    2d02:	9945      	ldr	r1, [sp, #276]	; 0x114
    2d04:	06cb      	lsls	r3, r1, #27
    2d06:	d500      	bpl.n	2d0a <__ssvfiscanf_r+0x242>
    2d08:	e754      	b.n	2bb4 <__ssvfiscanf_r+0xec>
    2d0a:	9b03      	ldr	r3, [sp, #12]
    2d0c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2d0e:	07c8      	lsls	r0, r1, #31
    2d10:	d504      	bpl.n	2d1c <__ssvfiscanf_r+0x254>
    2d12:	1d19      	adds	r1, r3, #4
    2d14:	9103      	str	r1, [sp, #12]
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	801a      	strh	r2, [r3, #0]
    2d1a:	e74b      	b.n	2bb4 <__ssvfiscanf_r+0xec>
    2d1c:	1d19      	adds	r1, r3, #4
    2d1e:	9103      	str	r1, [sp, #12]
    2d20:	681b      	ldr	r3, [r3, #0]
    2d22:	601a      	str	r2, [r3, #0]
    2d24:	e746      	b.n	2bb4 <__ssvfiscanf_r+0xec>
    2d26:	2305      	movs	r3, #5
    2d28:	e7e1      	b.n	2cee <__ssvfiscanf_r+0x226>
    2d2a:	2286      	movs	r2, #134	; 0x86
    2d2c:	ab02      	add	r3, sp, #8
    2d2e:	0052      	lsls	r2, r2, #1
    2d30:	189b      	adds	r3, r3, r2
    2d32:	59db      	ldr	r3, [r3, r7]
    2d34:	0021      	movs	r1, r4
    2d36:	9800      	ldr	r0, [sp, #0]
    2d38:	9301      	str	r3, [sp, #4]
    2d3a:	4798      	blx	r3
    2d3c:	2800      	cmp	r0, #0
    2d3e:	d100      	bne.n	2d42 <__ssvfiscanf_r+0x27a>
    2d40:	e77a      	b.n	2c38 <__ssvfiscanf_r+0x170>
    2d42:	e7b4      	b.n	2cae <__ssvfiscanf_r+0x1e6>
    2d44:	9a49      	ldr	r2, [sp, #292]	; 0x124
    2d46:	9201      	str	r2, [sp, #4]
    2d48:	3201      	adds	r2, #1
    2d4a:	9249      	str	r2, [sp, #292]	; 0x124
    2d4c:	6862      	ldr	r2, [r4, #4]
    2d4e:	3a01      	subs	r2, #1
    2d50:	6062      	str	r2, [r4, #4]
    2d52:	2a00      	cmp	r2, #0
    2d54:	dd0b      	ble.n	2d6e <__ssvfiscanf_r+0x2a6>
    2d56:	3301      	adds	r3, #1
    2d58:	6023      	str	r3, [r4, #0]
    2d5a:	f001 f913 	bl	3f84 <__locale_ctype_ptr>
    2d5e:	2108      	movs	r1, #8
    2d60:	6823      	ldr	r3, [r4, #0]
    2d62:	781a      	ldrb	r2, [r3, #0]
    2d64:	1880      	adds	r0, r0, r2
    2d66:	7842      	ldrb	r2, [r0, #1]
    2d68:	420a      	tst	r2, r1
    2d6a:	d1eb      	bne.n	2d44 <__ssvfiscanf_r+0x27c>
    2d6c:	e769      	b.n	2c42 <__ssvfiscanf_r+0x17a>
    2d6e:	2286      	movs	r2, #134	; 0x86
    2d70:	ab02      	add	r3, sp, #8
    2d72:	0052      	lsls	r2, r2, #1
    2d74:	189b      	adds	r3, r3, r2
    2d76:	59db      	ldr	r3, [r3, r7]
    2d78:	0021      	movs	r1, r4
    2d7a:	9800      	ldr	r0, [sp, #0]
    2d7c:	9301      	str	r3, [sp, #4]
    2d7e:	4798      	blx	r3
    2d80:	2800      	cmp	r0, #0
    2d82:	d0ea      	beq.n	2d5a <__ssvfiscanf_r+0x292>
    2d84:	e793      	b.n	2cae <__ssvfiscanf_r+0x1e6>
    2d86:	2b04      	cmp	r3, #4
    2d88:	dc06      	bgt.n	2d98 <__ssvfiscanf_r+0x2d0>
    2d8a:	ab03      	add	r3, sp, #12
    2d8c:	0022      	movs	r2, r4
    2d8e:	a945      	add	r1, sp, #276	; 0x114
    2d90:	9800      	ldr	r0, [sp, #0]
    2d92:	f000 fcfd 	bl	3790 <_scanf_i>
    2d96:	e75e      	b.n	2c56 <__ssvfiscanf_r+0x18e>
    2d98:	4b0d      	ldr	r3, [pc, #52]	; (2dd0 <__ssvfiscanf_r+0x308>)
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d100      	bne.n	2da0 <__ssvfiscanf_r+0x2d8>
    2d9e:	e709      	b.n	2bb4 <__ssvfiscanf_r+0xec>
    2da0:	ab03      	add	r3, sp, #12
    2da2:	0022      	movs	r2, r4
    2da4:	a945      	add	r1, sp, #276	; 0x114
    2da6:	9800      	ldr	r0, [sp, #0]
    2da8:	e000      	b.n	2dac <__ssvfiscanf_r+0x2e4>
    2daa:	bf00      	nop
    2dac:	e753      	b.n	2c56 <__ssvfiscanf_r+0x18e>
    2dae:	89a3      	ldrh	r3, [r4, #12]
    2db0:	065b      	lsls	r3, r3, #25
    2db2:	d400      	bmi.n	2db6 <__ssvfiscanf_r+0x2ee>
    2db4:	e780      	b.n	2cb8 <__ssvfiscanf_r+0x1f0>
    2db6:	2001      	movs	r0, #1
    2db8:	4240      	negs	r0, r0
    2dba:	e77d      	b.n	2cb8 <__ssvfiscanf_r+0x1f0>
    2dbc:	9848      	ldr	r0, [sp, #288]	; 0x120
    2dbe:	e77b      	b.n	2cb8 <__ssvfiscanf_r+0x1f0>
    2dc0:	fffffd64 	.word	0xfffffd64
    2dc4:	00002a11 	.word	0x00002a11
    2dc8:	00002a89 	.word	0x00002a89
    2dcc:	000043fe 	.word	0x000043fe
    2dd0:	00000000 	.word	0x00000000

00002dd4 <__sfputc_r>:
    2dd4:	6893      	ldr	r3, [r2, #8]
    2dd6:	b510      	push	{r4, lr}
    2dd8:	3b01      	subs	r3, #1
    2dda:	6093      	str	r3, [r2, #8]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	da05      	bge.n	2dec <__sfputc_r+0x18>
    2de0:	6994      	ldr	r4, [r2, #24]
    2de2:	42a3      	cmp	r3, r4
    2de4:	db08      	blt.n	2df8 <__sfputc_r+0x24>
    2de6:	b2cb      	uxtb	r3, r1
    2de8:	2b0a      	cmp	r3, #10
    2dea:	d005      	beq.n	2df8 <__sfputc_r+0x24>
    2dec:	6813      	ldr	r3, [r2, #0]
    2dee:	1c58      	adds	r0, r3, #1
    2df0:	6010      	str	r0, [r2, #0]
    2df2:	7019      	strb	r1, [r3, #0]
    2df4:	b2c8      	uxtb	r0, r1
    2df6:	bd10      	pop	{r4, pc}
    2df8:	f7ff f8c2 	bl	1f80 <__swbuf_r>
    2dfc:	e7fb      	b.n	2df6 <__sfputc_r+0x22>

00002dfe <__sfputs_r>:
    2dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e00:	0006      	movs	r6, r0
    2e02:	000f      	movs	r7, r1
    2e04:	0014      	movs	r4, r2
    2e06:	18d5      	adds	r5, r2, r3
    2e08:	42ac      	cmp	r4, r5
    2e0a:	d101      	bne.n	2e10 <__sfputs_r+0x12>
    2e0c:	2000      	movs	r0, #0
    2e0e:	e007      	b.n	2e20 <__sfputs_r+0x22>
    2e10:	7821      	ldrb	r1, [r4, #0]
    2e12:	003a      	movs	r2, r7
    2e14:	0030      	movs	r0, r6
    2e16:	f7ff ffdd 	bl	2dd4 <__sfputc_r>
    2e1a:	3401      	adds	r4, #1
    2e1c:	1c43      	adds	r3, r0, #1
    2e1e:	d1f3      	bne.n	2e08 <__sfputs_r+0xa>
    2e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002e24 <_vfiprintf_r>:
    2e24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e26:	b09f      	sub	sp, #124	; 0x7c
    2e28:	0006      	movs	r6, r0
    2e2a:	000f      	movs	r7, r1
    2e2c:	0014      	movs	r4, r2
    2e2e:	9305      	str	r3, [sp, #20]
    2e30:	2800      	cmp	r0, #0
    2e32:	d004      	beq.n	2e3e <_vfiprintf_r+0x1a>
    2e34:	6983      	ldr	r3, [r0, #24]
    2e36:	2b00      	cmp	r3, #0
    2e38:	d101      	bne.n	2e3e <_vfiprintf_r+0x1a>
    2e3a:	f7ff fa9f 	bl	237c <__sinit>
    2e3e:	4b7f      	ldr	r3, [pc, #508]	; (303c <_vfiprintf_r+0x218>)
    2e40:	429f      	cmp	r7, r3
    2e42:	d15c      	bne.n	2efe <_vfiprintf_r+0xda>
    2e44:	6877      	ldr	r7, [r6, #4]
    2e46:	89bb      	ldrh	r3, [r7, #12]
    2e48:	071b      	lsls	r3, r3, #28
    2e4a:	d562      	bpl.n	2f12 <_vfiprintf_r+0xee>
    2e4c:	693b      	ldr	r3, [r7, #16]
    2e4e:	2b00      	cmp	r3, #0
    2e50:	d05f      	beq.n	2f12 <_vfiprintf_r+0xee>
    2e52:	2300      	movs	r3, #0
    2e54:	ad06      	add	r5, sp, #24
    2e56:	616b      	str	r3, [r5, #20]
    2e58:	3320      	adds	r3, #32
    2e5a:	766b      	strb	r3, [r5, #25]
    2e5c:	3310      	adds	r3, #16
    2e5e:	76ab      	strb	r3, [r5, #26]
    2e60:	9402      	str	r4, [sp, #8]
    2e62:	9c02      	ldr	r4, [sp, #8]
    2e64:	7823      	ldrb	r3, [r4, #0]
    2e66:	2b00      	cmp	r3, #0
    2e68:	d15d      	bne.n	2f26 <_vfiprintf_r+0x102>
    2e6a:	9b02      	ldr	r3, [sp, #8]
    2e6c:	1ae3      	subs	r3, r4, r3
    2e6e:	9304      	str	r3, [sp, #16]
    2e70:	d00d      	beq.n	2e8e <_vfiprintf_r+0x6a>
    2e72:	9b04      	ldr	r3, [sp, #16]
    2e74:	9a02      	ldr	r2, [sp, #8]
    2e76:	0039      	movs	r1, r7
    2e78:	0030      	movs	r0, r6
    2e7a:	f7ff ffc0 	bl	2dfe <__sfputs_r>
    2e7e:	1c43      	adds	r3, r0, #1
    2e80:	d100      	bne.n	2e84 <_vfiprintf_r+0x60>
    2e82:	e0cc      	b.n	301e <_vfiprintf_r+0x1fa>
    2e84:	696a      	ldr	r2, [r5, #20]
    2e86:	9b04      	ldr	r3, [sp, #16]
    2e88:	4694      	mov	ip, r2
    2e8a:	4463      	add	r3, ip
    2e8c:	616b      	str	r3, [r5, #20]
    2e8e:	7823      	ldrb	r3, [r4, #0]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d100      	bne.n	2e96 <_vfiprintf_r+0x72>
    2e94:	e0c3      	b.n	301e <_vfiprintf_r+0x1fa>
    2e96:	2201      	movs	r2, #1
    2e98:	2300      	movs	r3, #0
    2e9a:	4252      	negs	r2, r2
    2e9c:	606a      	str	r2, [r5, #4]
    2e9e:	a902      	add	r1, sp, #8
    2ea0:	3254      	adds	r2, #84	; 0x54
    2ea2:	1852      	adds	r2, r2, r1
    2ea4:	3401      	adds	r4, #1
    2ea6:	602b      	str	r3, [r5, #0]
    2ea8:	60eb      	str	r3, [r5, #12]
    2eaa:	60ab      	str	r3, [r5, #8]
    2eac:	7013      	strb	r3, [r2, #0]
    2eae:	65ab      	str	r3, [r5, #88]	; 0x58
    2eb0:	7821      	ldrb	r1, [r4, #0]
    2eb2:	2205      	movs	r2, #5
    2eb4:	4862      	ldr	r0, [pc, #392]	; (3040 <_vfiprintf_r+0x21c>)
    2eb6:	f001 f885 	bl	3fc4 <memchr>
    2eba:	1c63      	adds	r3, r4, #1
    2ebc:	469c      	mov	ip, r3
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d135      	bne.n	2f2e <_vfiprintf_r+0x10a>
    2ec2:	6829      	ldr	r1, [r5, #0]
    2ec4:	06cb      	lsls	r3, r1, #27
    2ec6:	d504      	bpl.n	2ed2 <_vfiprintf_r+0xae>
    2ec8:	2353      	movs	r3, #83	; 0x53
    2eca:	aa02      	add	r2, sp, #8
    2ecc:	3020      	adds	r0, #32
    2ece:	189b      	adds	r3, r3, r2
    2ed0:	7018      	strb	r0, [r3, #0]
    2ed2:	070b      	lsls	r3, r1, #28
    2ed4:	d504      	bpl.n	2ee0 <_vfiprintf_r+0xbc>
    2ed6:	2353      	movs	r3, #83	; 0x53
    2ed8:	202b      	movs	r0, #43	; 0x2b
    2eda:	aa02      	add	r2, sp, #8
    2edc:	189b      	adds	r3, r3, r2
    2ede:	7018      	strb	r0, [r3, #0]
    2ee0:	7823      	ldrb	r3, [r4, #0]
    2ee2:	2b2a      	cmp	r3, #42	; 0x2a
    2ee4:	d02c      	beq.n	2f40 <_vfiprintf_r+0x11c>
    2ee6:	2000      	movs	r0, #0
    2ee8:	210a      	movs	r1, #10
    2eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2eec:	7822      	ldrb	r2, [r4, #0]
    2eee:	3a30      	subs	r2, #48	; 0x30
    2ef0:	2a09      	cmp	r2, #9
    2ef2:	d800      	bhi.n	2ef6 <_vfiprintf_r+0xd2>
    2ef4:	e06b      	b.n	2fce <_vfiprintf_r+0x1aa>
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d02a      	beq.n	2f50 <_vfiprintf_r+0x12c>
    2efa:	9309      	str	r3, [sp, #36]	; 0x24
    2efc:	e028      	b.n	2f50 <_vfiprintf_r+0x12c>
    2efe:	4b51      	ldr	r3, [pc, #324]	; (3044 <_vfiprintf_r+0x220>)
    2f00:	429f      	cmp	r7, r3
    2f02:	d101      	bne.n	2f08 <_vfiprintf_r+0xe4>
    2f04:	68b7      	ldr	r7, [r6, #8]
    2f06:	e79e      	b.n	2e46 <_vfiprintf_r+0x22>
    2f08:	4b4f      	ldr	r3, [pc, #316]	; (3048 <_vfiprintf_r+0x224>)
    2f0a:	429f      	cmp	r7, r3
    2f0c:	d19b      	bne.n	2e46 <_vfiprintf_r+0x22>
    2f0e:	68f7      	ldr	r7, [r6, #12]
    2f10:	e799      	b.n	2e46 <_vfiprintf_r+0x22>
    2f12:	0039      	movs	r1, r7
    2f14:	0030      	movs	r0, r6
    2f16:	f7ff f89d 	bl	2054 <__swsetup_r>
    2f1a:	2800      	cmp	r0, #0
    2f1c:	d099      	beq.n	2e52 <_vfiprintf_r+0x2e>
    2f1e:	2001      	movs	r0, #1
    2f20:	4240      	negs	r0, r0
    2f22:	b01f      	add	sp, #124	; 0x7c
    2f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f26:	2b25      	cmp	r3, #37	; 0x25
    2f28:	d09f      	beq.n	2e6a <_vfiprintf_r+0x46>
    2f2a:	3401      	adds	r4, #1
    2f2c:	e79a      	b.n	2e64 <_vfiprintf_r+0x40>
    2f2e:	4b44      	ldr	r3, [pc, #272]	; (3040 <_vfiprintf_r+0x21c>)
    2f30:	6829      	ldr	r1, [r5, #0]
    2f32:	1ac0      	subs	r0, r0, r3
    2f34:	2301      	movs	r3, #1
    2f36:	4083      	lsls	r3, r0
    2f38:	430b      	orrs	r3, r1
    2f3a:	602b      	str	r3, [r5, #0]
    2f3c:	4664      	mov	r4, ip
    2f3e:	e7b7      	b.n	2eb0 <_vfiprintf_r+0x8c>
    2f40:	9b05      	ldr	r3, [sp, #20]
    2f42:	1d18      	adds	r0, r3, #4
    2f44:	681b      	ldr	r3, [r3, #0]
    2f46:	9005      	str	r0, [sp, #20]
    2f48:	2b00      	cmp	r3, #0
    2f4a:	db3a      	blt.n	2fc2 <_vfiprintf_r+0x19e>
    2f4c:	9309      	str	r3, [sp, #36]	; 0x24
    2f4e:	4664      	mov	r4, ip
    2f50:	7823      	ldrb	r3, [r4, #0]
    2f52:	2b2e      	cmp	r3, #46	; 0x2e
    2f54:	d10b      	bne.n	2f6e <_vfiprintf_r+0x14a>
    2f56:	7863      	ldrb	r3, [r4, #1]
    2f58:	1c62      	adds	r2, r4, #1
    2f5a:	2b2a      	cmp	r3, #42	; 0x2a
    2f5c:	d13f      	bne.n	2fde <_vfiprintf_r+0x1ba>
    2f5e:	9b05      	ldr	r3, [sp, #20]
    2f60:	3402      	adds	r4, #2
    2f62:	1d1a      	adds	r2, r3, #4
    2f64:	681b      	ldr	r3, [r3, #0]
    2f66:	9205      	str	r2, [sp, #20]
    2f68:	2b00      	cmp	r3, #0
    2f6a:	db35      	blt.n	2fd8 <_vfiprintf_r+0x1b4>
    2f6c:	9307      	str	r3, [sp, #28]
    2f6e:	7821      	ldrb	r1, [r4, #0]
    2f70:	2203      	movs	r2, #3
    2f72:	4836      	ldr	r0, [pc, #216]	; (304c <_vfiprintf_r+0x228>)
    2f74:	f001 f826 	bl	3fc4 <memchr>
    2f78:	2800      	cmp	r0, #0
    2f7a:	d007      	beq.n	2f8c <_vfiprintf_r+0x168>
    2f7c:	4b33      	ldr	r3, [pc, #204]	; (304c <_vfiprintf_r+0x228>)
    2f7e:	682a      	ldr	r2, [r5, #0]
    2f80:	1ac0      	subs	r0, r0, r3
    2f82:	2340      	movs	r3, #64	; 0x40
    2f84:	4083      	lsls	r3, r0
    2f86:	4313      	orrs	r3, r2
    2f88:	602b      	str	r3, [r5, #0]
    2f8a:	3401      	adds	r4, #1
    2f8c:	7821      	ldrb	r1, [r4, #0]
    2f8e:	1c63      	adds	r3, r4, #1
    2f90:	2206      	movs	r2, #6
    2f92:	482f      	ldr	r0, [pc, #188]	; (3050 <_vfiprintf_r+0x22c>)
    2f94:	9302      	str	r3, [sp, #8]
    2f96:	7629      	strb	r1, [r5, #24]
    2f98:	f001 f814 	bl	3fc4 <memchr>
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d044      	beq.n	302a <_vfiprintf_r+0x206>
    2fa0:	4b2c      	ldr	r3, [pc, #176]	; (3054 <_vfiprintf_r+0x230>)
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d12f      	bne.n	3006 <_vfiprintf_r+0x1e2>
    2fa6:	6829      	ldr	r1, [r5, #0]
    2fa8:	9b05      	ldr	r3, [sp, #20]
    2faa:	2207      	movs	r2, #7
    2fac:	05c9      	lsls	r1, r1, #23
    2fae:	d528      	bpl.n	3002 <_vfiprintf_r+0x1de>
    2fb0:	189b      	adds	r3, r3, r2
    2fb2:	4393      	bics	r3, r2
    2fb4:	3308      	adds	r3, #8
    2fb6:	9305      	str	r3, [sp, #20]
    2fb8:	696b      	ldr	r3, [r5, #20]
    2fba:	9a03      	ldr	r2, [sp, #12]
    2fbc:	189b      	adds	r3, r3, r2
    2fbe:	616b      	str	r3, [r5, #20]
    2fc0:	e74f      	b.n	2e62 <_vfiprintf_r+0x3e>
    2fc2:	425b      	negs	r3, r3
    2fc4:	60eb      	str	r3, [r5, #12]
    2fc6:	2302      	movs	r3, #2
    2fc8:	430b      	orrs	r3, r1
    2fca:	602b      	str	r3, [r5, #0]
    2fcc:	e7bf      	b.n	2f4e <_vfiprintf_r+0x12a>
    2fce:	434b      	muls	r3, r1
    2fd0:	3401      	adds	r4, #1
    2fd2:	189b      	adds	r3, r3, r2
    2fd4:	2001      	movs	r0, #1
    2fd6:	e789      	b.n	2eec <_vfiprintf_r+0xc8>
    2fd8:	2301      	movs	r3, #1
    2fda:	425b      	negs	r3, r3
    2fdc:	e7c6      	b.n	2f6c <_vfiprintf_r+0x148>
    2fde:	2300      	movs	r3, #0
    2fe0:	0014      	movs	r4, r2
    2fe2:	200a      	movs	r0, #10
    2fe4:	001a      	movs	r2, r3
    2fe6:	606b      	str	r3, [r5, #4]
    2fe8:	7821      	ldrb	r1, [r4, #0]
    2fea:	3930      	subs	r1, #48	; 0x30
    2fec:	2909      	cmp	r1, #9
    2fee:	d903      	bls.n	2ff8 <_vfiprintf_r+0x1d4>
    2ff0:	2b00      	cmp	r3, #0
    2ff2:	d0bc      	beq.n	2f6e <_vfiprintf_r+0x14a>
    2ff4:	9207      	str	r2, [sp, #28]
    2ff6:	e7ba      	b.n	2f6e <_vfiprintf_r+0x14a>
    2ff8:	4342      	muls	r2, r0
    2ffa:	3401      	adds	r4, #1
    2ffc:	1852      	adds	r2, r2, r1
    2ffe:	2301      	movs	r3, #1
    3000:	e7f2      	b.n	2fe8 <_vfiprintf_r+0x1c4>
    3002:	3307      	adds	r3, #7
    3004:	e7d5      	b.n	2fb2 <_vfiprintf_r+0x18e>
    3006:	ab05      	add	r3, sp, #20
    3008:	9300      	str	r3, [sp, #0]
    300a:	003a      	movs	r2, r7
    300c:	4b12      	ldr	r3, [pc, #72]	; (3058 <_vfiprintf_r+0x234>)
    300e:	0029      	movs	r1, r5
    3010:	0030      	movs	r0, r6
    3012:	e000      	b.n	3016 <_vfiprintf_r+0x1f2>
    3014:	bf00      	nop
    3016:	9003      	str	r0, [sp, #12]
    3018:	9b03      	ldr	r3, [sp, #12]
    301a:	3301      	adds	r3, #1
    301c:	d1cc      	bne.n	2fb8 <_vfiprintf_r+0x194>
    301e:	89bb      	ldrh	r3, [r7, #12]
    3020:	065b      	lsls	r3, r3, #25
    3022:	d500      	bpl.n	3026 <_vfiprintf_r+0x202>
    3024:	e77b      	b.n	2f1e <_vfiprintf_r+0xfa>
    3026:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3028:	e77b      	b.n	2f22 <_vfiprintf_r+0xfe>
    302a:	ab05      	add	r3, sp, #20
    302c:	9300      	str	r3, [sp, #0]
    302e:	003a      	movs	r2, r7
    3030:	4b09      	ldr	r3, [pc, #36]	; (3058 <_vfiprintf_r+0x234>)
    3032:	0029      	movs	r1, r5
    3034:	0030      	movs	r0, r6
    3036:	f000 f87f 	bl	3138 <_printf_i>
    303a:	e7ec      	b.n	3016 <_vfiprintf_r+0x1f2>
    303c:	000043b8 	.word	0x000043b8
    3040:	000043f8 	.word	0x000043f8
    3044:	000043d8 	.word	0x000043d8
    3048:	00004398 	.word	0x00004398
    304c:	000043fe 	.word	0x000043fe
    3050:	00004402 	.word	0x00004402
    3054:	00000000 	.word	0x00000000
    3058:	00002dff 	.word	0x00002dff

0000305c <_printf_common>:
    305c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    305e:	0015      	movs	r5, r2
    3060:	9301      	str	r3, [sp, #4]
    3062:	688a      	ldr	r2, [r1, #8]
    3064:	690b      	ldr	r3, [r1, #16]
    3066:	9000      	str	r0, [sp, #0]
    3068:	000c      	movs	r4, r1
    306a:	4293      	cmp	r3, r2
    306c:	da00      	bge.n	3070 <_printf_common+0x14>
    306e:	0013      	movs	r3, r2
    3070:	0022      	movs	r2, r4
    3072:	602b      	str	r3, [r5, #0]
    3074:	3243      	adds	r2, #67	; 0x43
    3076:	7812      	ldrb	r2, [r2, #0]
    3078:	2a00      	cmp	r2, #0
    307a:	d001      	beq.n	3080 <_printf_common+0x24>
    307c:	3301      	adds	r3, #1
    307e:	602b      	str	r3, [r5, #0]
    3080:	6823      	ldr	r3, [r4, #0]
    3082:	069b      	lsls	r3, r3, #26
    3084:	d502      	bpl.n	308c <_printf_common+0x30>
    3086:	682b      	ldr	r3, [r5, #0]
    3088:	3302      	adds	r3, #2
    308a:	602b      	str	r3, [r5, #0]
    308c:	2706      	movs	r7, #6
    308e:	6823      	ldr	r3, [r4, #0]
    3090:	401f      	ands	r7, r3
    3092:	d027      	beq.n	30e4 <_printf_common+0x88>
    3094:	0023      	movs	r3, r4
    3096:	3343      	adds	r3, #67	; 0x43
    3098:	781b      	ldrb	r3, [r3, #0]
    309a:	1e5a      	subs	r2, r3, #1
    309c:	4193      	sbcs	r3, r2
    309e:	6822      	ldr	r2, [r4, #0]
    30a0:	0692      	lsls	r2, r2, #26
    30a2:	d430      	bmi.n	3106 <_printf_common+0xaa>
    30a4:	0022      	movs	r2, r4
    30a6:	9901      	ldr	r1, [sp, #4]
    30a8:	3243      	adds	r2, #67	; 0x43
    30aa:	9800      	ldr	r0, [sp, #0]
    30ac:	9e08      	ldr	r6, [sp, #32]
    30ae:	47b0      	blx	r6
    30b0:	1c43      	adds	r3, r0, #1
    30b2:	d025      	beq.n	3100 <_printf_common+0xa4>
    30b4:	2306      	movs	r3, #6
    30b6:	6820      	ldr	r0, [r4, #0]
    30b8:	682a      	ldr	r2, [r5, #0]
    30ba:	68e1      	ldr	r1, [r4, #12]
    30bc:	4003      	ands	r3, r0
    30be:	2500      	movs	r5, #0
    30c0:	2b04      	cmp	r3, #4
    30c2:	d103      	bne.n	30cc <_printf_common+0x70>
    30c4:	1a8d      	subs	r5, r1, r2
    30c6:	43eb      	mvns	r3, r5
    30c8:	17db      	asrs	r3, r3, #31
    30ca:	401d      	ands	r5, r3
    30cc:	68a3      	ldr	r3, [r4, #8]
    30ce:	6922      	ldr	r2, [r4, #16]
    30d0:	4293      	cmp	r3, r2
    30d2:	dd01      	ble.n	30d8 <_printf_common+0x7c>
    30d4:	1a9b      	subs	r3, r3, r2
    30d6:	18ed      	adds	r5, r5, r3
    30d8:	2700      	movs	r7, #0
    30da:	42bd      	cmp	r5, r7
    30dc:	d120      	bne.n	3120 <_printf_common+0xc4>
    30de:	2000      	movs	r0, #0
    30e0:	e010      	b.n	3104 <_printf_common+0xa8>
    30e2:	3701      	adds	r7, #1
    30e4:	68e3      	ldr	r3, [r4, #12]
    30e6:	682a      	ldr	r2, [r5, #0]
    30e8:	1a9b      	subs	r3, r3, r2
    30ea:	429f      	cmp	r7, r3
    30ec:	dad2      	bge.n	3094 <_printf_common+0x38>
    30ee:	0022      	movs	r2, r4
    30f0:	2301      	movs	r3, #1
    30f2:	3219      	adds	r2, #25
    30f4:	9901      	ldr	r1, [sp, #4]
    30f6:	9800      	ldr	r0, [sp, #0]
    30f8:	9e08      	ldr	r6, [sp, #32]
    30fa:	47b0      	blx	r6
    30fc:	1c43      	adds	r3, r0, #1
    30fe:	d1f0      	bne.n	30e2 <_printf_common+0x86>
    3100:	2001      	movs	r0, #1
    3102:	4240      	negs	r0, r0
    3104:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3106:	2030      	movs	r0, #48	; 0x30
    3108:	18e1      	adds	r1, r4, r3
    310a:	3143      	adds	r1, #67	; 0x43
    310c:	7008      	strb	r0, [r1, #0]
    310e:	0021      	movs	r1, r4
    3110:	1c5a      	adds	r2, r3, #1
    3112:	3145      	adds	r1, #69	; 0x45
    3114:	7809      	ldrb	r1, [r1, #0]
    3116:	18a2      	adds	r2, r4, r2
    3118:	3243      	adds	r2, #67	; 0x43
    311a:	3302      	adds	r3, #2
    311c:	7011      	strb	r1, [r2, #0]
    311e:	e7c1      	b.n	30a4 <_printf_common+0x48>
    3120:	0022      	movs	r2, r4
    3122:	2301      	movs	r3, #1
    3124:	321a      	adds	r2, #26
    3126:	9901      	ldr	r1, [sp, #4]
    3128:	9800      	ldr	r0, [sp, #0]
    312a:	9e08      	ldr	r6, [sp, #32]
    312c:	47b0      	blx	r6
    312e:	1c43      	adds	r3, r0, #1
    3130:	d0e6      	beq.n	3100 <_printf_common+0xa4>
    3132:	3701      	adds	r7, #1
    3134:	e7d1      	b.n	30da <_printf_common+0x7e>
	...

00003138 <_printf_i>:
    3138:	b5f0      	push	{r4, r5, r6, r7, lr}
    313a:	b08b      	sub	sp, #44	; 0x2c
    313c:	9206      	str	r2, [sp, #24]
    313e:	000a      	movs	r2, r1
    3140:	3243      	adds	r2, #67	; 0x43
    3142:	9307      	str	r3, [sp, #28]
    3144:	9005      	str	r0, [sp, #20]
    3146:	9204      	str	r2, [sp, #16]
    3148:	7e0a      	ldrb	r2, [r1, #24]
    314a:	000c      	movs	r4, r1
    314c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    314e:	2a6e      	cmp	r2, #110	; 0x6e
    3150:	d100      	bne.n	3154 <_printf_i+0x1c>
    3152:	e08f      	b.n	3274 <_printf_i+0x13c>
    3154:	d817      	bhi.n	3186 <_printf_i+0x4e>
    3156:	2a63      	cmp	r2, #99	; 0x63
    3158:	d02c      	beq.n	31b4 <_printf_i+0x7c>
    315a:	d808      	bhi.n	316e <_printf_i+0x36>
    315c:	2a00      	cmp	r2, #0
    315e:	d100      	bne.n	3162 <_printf_i+0x2a>
    3160:	e099      	b.n	3296 <_printf_i+0x15e>
    3162:	2a58      	cmp	r2, #88	; 0x58
    3164:	d054      	beq.n	3210 <_printf_i+0xd8>
    3166:	0026      	movs	r6, r4
    3168:	3642      	adds	r6, #66	; 0x42
    316a:	7032      	strb	r2, [r6, #0]
    316c:	e029      	b.n	31c2 <_printf_i+0x8a>
    316e:	2a64      	cmp	r2, #100	; 0x64
    3170:	d001      	beq.n	3176 <_printf_i+0x3e>
    3172:	2a69      	cmp	r2, #105	; 0x69
    3174:	d1f7      	bne.n	3166 <_printf_i+0x2e>
    3176:	6821      	ldr	r1, [r4, #0]
    3178:	681a      	ldr	r2, [r3, #0]
    317a:	0608      	lsls	r0, r1, #24
    317c:	d523      	bpl.n	31c6 <_printf_i+0x8e>
    317e:	1d11      	adds	r1, r2, #4
    3180:	6019      	str	r1, [r3, #0]
    3182:	6815      	ldr	r5, [r2, #0]
    3184:	e025      	b.n	31d2 <_printf_i+0x9a>
    3186:	2a73      	cmp	r2, #115	; 0x73
    3188:	d100      	bne.n	318c <_printf_i+0x54>
    318a:	e088      	b.n	329e <_printf_i+0x166>
    318c:	d808      	bhi.n	31a0 <_printf_i+0x68>
    318e:	2a6f      	cmp	r2, #111	; 0x6f
    3190:	d029      	beq.n	31e6 <_printf_i+0xae>
    3192:	2a70      	cmp	r2, #112	; 0x70
    3194:	d1e7      	bne.n	3166 <_printf_i+0x2e>
    3196:	2220      	movs	r2, #32
    3198:	6809      	ldr	r1, [r1, #0]
    319a:	430a      	orrs	r2, r1
    319c:	6022      	str	r2, [r4, #0]
    319e:	e003      	b.n	31a8 <_printf_i+0x70>
    31a0:	2a75      	cmp	r2, #117	; 0x75
    31a2:	d020      	beq.n	31e6 <_printf_i+0xae>
    31a4:	2a78      	cmp	r2, #120	; 0x78
    31a6:	d1de      	bne.n	3166 <_printf_i+0x2e>
    31a8:	0022      	movs	r2, r4
    31aa:	2178      	movs	r1, #120	; 0x78
    31ac:	3245      	adds	r2, #69	; 0x45
    31ae:	7011      	strb	r1, [r2, #0]
    31b0:	4a6c      	ldr	r2, [pc, #432]	; (3364 <_printf_i+0x22c>)
    31b2:	e030      	b.n	3216 <_printf_i+0xde>
    31b4:	000e      	movs	r6, r1
    31b6:	681a      	ldr	r2, [r3, #0]
    31b8:	3642      	adds	r6, #66	; 0x42
    31ba:	1d11      	adds	r1, r2, #4
    31bc:	6019      	str	r1, [r3, #0]
    31be:	6813      	ldr	r3, [r2, #0]
    31c0:	7033      	strb	r3, [r6, #0]
    31c2:	2301      	movs	r3, #1
    31c4:	e079      	b.n	32ba <_printf_i+0x182>
    31c6:	0649      	lsls	r1, r1, #25
    31c8:	d5d9      	bpl.n	317e <_printf_i+0x46>
    31ca:	1d11      	adds	r1, r2, #4
    31cc:	6019      	str	r1, [r3, #0]
    31ce:	2300      	movs	r3, #0
    31d0:	5ed5      	ldrsh	r5, [r2, r3]
    31d2:	2d00      	cmp	r5, #0
    31d4:	da03      	bge.n	31de <_printf_i+0xa6>
    31d6:	232d      	movs	r3, #45	; 0x2d
    31d8:	9a04      	ldr	r2, [sp, #16]
    31da:	426d      	negs	r5, r5
    31dc:	7013      	strb	r3, [r2, #0]
    31de:	4b62      	ldr	r3, [pc, #392]	; (3368 <_printf_i+0x230>)
    31e0:	270a      	movs	r7, #10
    31e2:	9303      	str	r3, [sp, #12]
    31e4:	e02f      	b.n	3246 <_printf_i+0x10e>
    31e6:	6820      	ldr	r0, [r4, #0]
    31e8:	6819      	ldr	r1, [r3, #0]
    31ea:	0605      	lsls	r5, r0, #24
    31ec:	d503      	bpl.n	31f6 <_printf_i+0xbe>
    31ee:	1d08      	adds	r0, r1, #4
    31f0:	6018      	str	r0, [r3, #0]
    31f2:	680d      	ldr	r5, [r1, #0]
    31f4:	e005      	b.n	3202 <_printf_i+0xca>
    31f6:	0640      	lsls	r0, r0, #25
    31f8:	d5f9      	bpl.n	31ee <_printf_i+0xb6>
    31fa:	680d      	ldr	r5, [r1, #0]
    31fc:	1d08      	adds	r0, r1, #4
    31fe:	6018      	str	r0, [r3, #0]
    3200:	b2ad      	uxth	r5, r5
    3202:	4b59      	ldr	r3, [pc, #356]	; (3368 <_printf_i+0x230>)
    3204:	2708      	movs	r7, #8
    3206:	9303      	str	r3, [sp, #12]
    3208:	2a6f      	cmp	r2, #111	; 0x6f
    320a:	d018      	beq.n	323e <_printf_i+0x106>
    320c:	270a      	movs	r7, #10
    320e:	e016      	b.n	323e <_printf_i+0x106>
    3210:	3145      	adds	r1, #69	; 0x45
    3212:	700a      	strb	r2, [r1, #0]
    3214:	4a54      	ldr	r2, [pc, #336]	; (3368 <_printf_i+0x230>)
    3216:	9203      	str	r2, [sp, #12]
    3218:	681a      	ldr	r2, [r3, #0]
    321a:	6821      	ldr	r1, [r4, #0]
    321c:	1d10      	adds	r0, r2, #4
    321e:	6018      	str	r0, [r3, #0]
    3220:	6815      	ldr	r5, [r2, #0]
    3222:	0608      	lsls	r0, r1, #24
    3224:	d522      	bpl.n	326c <_printf_i+0x134>
    3226:	07cb      	lsls	r3, r1, #31
    3228:	d502      	bpl.n	3230 <_printf_i+0xf8>
    322a:	2320      	movs	r3, #32
    322c:	4319      	orrs	r1, r3
    322e:	6021      	str	r1, [r4, #0]
    3230:	2710      	movs	r7, #16
    3232:	2d00      	cmp	r5, #0
    3234:	d103      	bne.n	323e <_printf_i+0x106>
    3236:	2320      	movs	r3, #32
    3238:	6822      	ldr	r2, [r4, #0]
    323a:	439a      	bics	r2, r3
    323c:	6022      	str	r2, [r4, #0]
    323e:	0023      	movs	r3, r4
    3240:	2200      	movs	r2, #0
    3242:	3343      	adds	r3, #67	; 0x43
    3244:	701a      	strb	r2, [r3, #0]
    3246:	6863      	ldr	r3, [r4, #4]
    3248:	60a3      	str	r3, [r4, #8]
    324a:	2b00      	cmp	r3, #0
    324c:	db5c      	blt.n	3308 <_printf_i+0x1d0>
    324e:	2204      	movs	r2, #4
    3250:	6821      	ldr	r1, [r4, #0]
    3252:	4391      	bics	r1, r2
    3254:	6021      	str	r1, [r4, #0]
    3256:	2d00      	cmp	r5, #0
    3258:	d158      	bne.n	330c <_printf_i+0x1d4>
    325a:	9e04      	ldr	r6, [sp, #16]
    325c:	2b00      	cmp	r3, #0
    325e:	d064      	beq.n	332a <_printf_i+0x1f2>
    3260:	0026      	movs	r6, r4
    3262:	9b03      	ldr	r3, [sp, #12]
    3264:	3642      	adds	r6, #66	; 0x42
    3266:	781b      	ldrb	r3, [r3, #0]
    3268:	7033      	strb	r3, [r6, #0]
    326a:	e05e      	b.n	332a <_printf_i+0x1f2>
    326c:	0648      	lsls	r0, r1, #25
    326e:	d5da      	bpl.n	3226 <_printf_i+0xee>
    3270:	b2ad      	uxth	r5, r5
    3272:	e7d8      	b.n	3226 <_printf_i+0xee>
    3274:	6809      	ldr	r1, [r1, #0]
    3276:	681a      	ldr	r2, [r3, #0]
    3278:	0608      	lsls	r0, r1, #24
    327a:	d505      	bpl.n	3288 <_printf_i+0x150>
    327c:	1d11      	adds	r1, r2, #4
    327e:	6019      	str	r1, [r3, #0]
    3280:	6813      	ldr	r3, [r2, #0]
    3282:	6962      	ldr	r2, [r4, #20]
    3284:	601a      	str	r2, [r3, #0]
    3286:	e006      	b.n	3296 <_printf_i+0x15e>
    3288:	0649      	lsls	r1, r1, #25
    328a:	d5f7      	bpl.n	327c <_printf_i+0x144>
    328c:	1d11      	adds	r1, r2, #4
    328e:	6019      	str	r1, [r3, #0]
    3290:	6813      	ldr	r3, [r2, #0]
    3292:	8aa2      	ldrh	r2, [r4, #20]
    3294:	801a      	strh	r2, [r3, #0]
    3296:	2300      	movs	r3, #0
    3298:	9e04      	ldr	r6, [sp, #16]
    329a:	6123      	str	r3, [r4, #16]
    329c:	e054      	b.n	3348 <_printf_i+0x210>
    329e:	681a      	ldr	r2, [r3, #0]
    32a0:	1d11      	adds	r1, r2, #4
    32a2:	6019      	str	r1, [r3, #0]
    32a4:	6816      	ldr	r6, [r2, #0]
    32a6:	2100      	movs	r1, #0
    32a8:	6862      	ldr	r2, [r4, #4]
    32aa:	0030      	movs	r0, r6
    32ac:	f000 fe8a 	bl	3fc4 <memchr>
    32b0:	2800      	cmp	r0, #0
    32b2:	d001      	beq.n	32b8 <_printf_i+0x180>
    32b4:	1b80      	subs	r0, r0, r6
    32b6:	6060      	str	r0, [r4, #4]
    32b8:	6863      	ldr	r3, [r4, #4]
    32ba:	6123      	str	r3, [r4, #16]
    32bc:	2300      	movs	r3, #0
    32be:	9a04      	ldr	r2, [sp, #16]
    32c0:	7013      	strb	r3, [r2, #0]
    32c2:	e041      	b.n	3348 <_printf_i+0x210>
    32c4:	6923      	ldr	r3, [r4, #16]
    32c6:	0032      	movs	r2, r6
    32c8:	9906      	ldr	r1, [sp, #24]
    32ca:	9805      	ldr	r0, [sp, #20]
    32cc:	9d07      	ldr	r5, [sp, #28]
    32ce:	47a8      	blx	r5
    32d0:	1c43      	adds	r3, r0, #1
    32d2:	d043      	beq.n	335c <_printf_i+0x224>
    32d4:	6823      	ldr	r3, [r4, #0]
    32d6:	2500      	movs	r5, #0
    32d8:	079b      	lsls	r3, r3, #30
    32da:	d40f      	bmi.n	32fc <_printf_i+0x1c4>
    32dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32de:	68e0      	ldr	r0, [r4, #12]
    32e0:	4298      	cmp	r0, r3
    32e2:	da3d      	bge.n	3360 <_printf_i+0x228>
    32e4:	0018      	movs	r0, r3
    32e6:	e03b      	b.n	3360 <_printf_i+0x228>
    32e8:	0022      	movs	r2, r4
    32ea:	2301      	movs	r3, #1
    32ec:	3219      	adds	r2, #25
    32ee:	9906      	ldr	r1, [sp, #24]
    32f0:	9805      	ldr	r0, [sp, #20]
    32f2:	9e07      	ldr	r6, [sp, #28]
    32f4:	47b0      	blx	r6
    32f6:	1c43      	adds	r3, r0, #1
    32f8:	d030      	beq.n	335c <_printf_i+0x224>
    32fa:	3501      	adds	r5, #1
    32fc:	68e3      	ldr	r3, [r4, #12]
    32fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3300:	1a9b      	subs	r3, r3, r2
    3302:	429d      	cmp	r5, r3
    3304:	dbf0      	blt.n	32e8 <_printf_i+0x1b0>
    3306:	e7e9      	b.n	32dc <_printf_i+0x1a4>
    3308:	2d00      	cmp	r5, #0
    330a:	d0a9      	beq.n	3260 <_printf_i+0x128>
    330c:	9e04      	ldr	r6, [sp, #16]
    330e:	0028      	movs	r0, r5
    3310:	0039      	movs	r1, r7
    3312:	f7fe fb9f 	bl	1a54 <__aeabi_uidivmod>
    3316:	9b03      	ldr	r3, [sp, #12]
    3318:	3e01      	subs	r6, #1
    331a:	5c5b      	ldrb	r3, [r3, r1]
    331c:	0028      	movs	r0, r5
    331e:	7033      	strb	r3, [r6, #0]
    3320:	0039      	movs	r1, r7
    3322:	f7fe fb11 	bl	1948 <__udivsi3>
    3326:	1e05      	subs	r5, r0, #0
    3328:	d1f1      	bne.n	330e <_printf_i+0x1d6>
    332a:	2f08      	cmp	r7, #8
    332c:	d109      	bne.n	3342 <_printf_i+0x20a>
    332e:	6823      	ldr	r3, [r4, #0]
    3330:	07db      	lsls	r3, r3, #31
    3332:	d506      	bpl.n	3342 <_printf_i+0x20a>
    3334:	6863      	ldr	r3, [r4, #4]
    3336:	6922      	ldr	r2, [r4, #16]
    3338:	4293      	cmp	r3, r2
    333a:	dc02      	bgt.n	3342 <_printf_i+0x20a>
    333c:	2330      	movs	r3, #48	; 0x30
    333e:	3e01      	subs	r6, #1
    3340:	7033      	strb	r3, [r6, #0]
    3342:	9b04      	ldr	r3, [sp, #16]
    3344:	1b9b      	subs	r3, r3, r6
    3346:	6123      	str	r3, [r4, #16]
    3348:	9b07      	ldr	r3, [sp, #28]
    334a:	aa09      	add	r2, sp, #36	; 0x24
    334c:	9300      	str	r3, [sp, #0]
    334e:	0021      	movs	r1, r4
    3350:	9b06      	ldr	r3, [sp, #24]
    3352:	9805      	ldr	r0, [sp, #20]
    3354:	f7ff fe82 	bl	305c <_printf_common>
    3358:	1c43      	adds	r3, r0, #1
    335a:	d1b3      	bne.n	32c4 <_printf_i+0x18c>
    335c:	2001      	movs	r0, #1
    335e:	4240      	negs	r0, r0
    3360:	b00b      	add	sp, #44	; 0x2c
    3362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3364:	0000441a 	.word	0x0000441a
    3368:	00004409 	.word	0x00004409

0000336c <__svfiscanf_r>:
    336c:	b5f0      	push	{r4, r5, r6, r7, lr}
    336e:	4cbd      	ldr	r4, [pc, #756]	; (3664 <__svfiscanf_r+0x2f8>)
    3370:	2586      	movs	r5, #134	; 0x86
    3372:	44a5      	add	sp, r4
    3374:	9303      	str	r3, [sp, #12]
    3376:	2300      	movs	r3, #0
    3378:	9348      	str	r3, [sp, #288]	; 0x120
    337a:	9349      	str	r3, [sp, #292]	; 0x124
    337c:	ab05      	add	r3, sp, #20
    337e:	934a      	str	r3, [sp, #296]	; 0x128
    3380:	23be      	movs	r3, #190	; 0xbe
    3382:	006d      	lsls	r5, r5, #1
    3384:	9000      	str	r0, [sp, #0]
    3386:	000c      	movs	r4, r1
    3388:	a802      	add	r0, sp, #8
    338a:	49b7      	ldr	r1, [pc, #732]	; (3668 <__svfiscanf_r+0x2fc>)
    338c:	005b      	lsls	r3, r3, #1
    338e:	1940      	adds	r0, r0, r5
    3390:	27c0      	movs	r7, #192	; 0xc0
    3392:	50c1      	str	r1, [r0, r3]
    3394:	ab02      	add	r3, sp, #8
    3396:	195b      	adds	r3, r3, r5
    3398:	0015      	movs	r5, r2
    339a:	49b4      	ldr	r1, [pc, #720]	; (366c <__svfiscanf_r+0x300>)
    339c:	007f      	lsls	r7, r7, #1
    339e:	51d9      	str	r1, [r3, r7]
    33a0:	782b      	ldrb	r3, [r5, #0]
    33a2:	2b00      	cmp	r3, #0
    33a4:	d100      	bne.n	33a8 <__svfiscanf_r+0x3c>
    33a6:	e15b      	b.n	3660 <__svfiscanf_r+0x2f4>
    33a8:	f000 fdec 	bl	3f84 <__locale_ctype_ptr>
    33ac:	2208      	movs	r2, #8
    33ae:	782b      	ldrb	r3, [r5, #0]
    33b0:	18c0      	adds	r0, r0, r3
    33b2:	9301      	str	r3, [sp, #4]
    33b4:	7843      	ldrb	r3, [r0, #1]
    33b6:	4013      	ands	r3, r2
    33b8:	d141      	bne.n	343e <__svfiscanf_r+0xd2>
    33ba:	9a01      	ldr	r2, [sp, #4]
    33bc:	1c6e      	adds	r6, r5, #1
    33be:	2a25      	cmp	r2, #37	; 0x25
    33c0:	d000      	beq.n	33c4 <__svfiscanf_r+0x58>
    33c2:	e0a8      	b.n	3516 <__svfiscanf_r+0x1aa>
    33c4:	9347      	str	r3, [sp, #284]	; 0x11c
    33c6:	9345      	str	r3, [sp, #276]	; 0x114
    33c8:	786b      	ldrb	r3, [r5, #1]
    33ca:	2b2a      	cmp	r3, #42	; 0x2a
    33cc:	d102      	bne.n	33d4 <__svfiscanf_r+0x68>
    33ce:	3b1a      	subs	r3, #26
    33d0:	9345      	str	r3, [sp, #276]	; 0x114
    33d2:	1cae      	adds	r6, r5, #2
    33d4:	0035      	movs	r5, r6
    33d6:	220a      	movs	r2, #10
    33d8:	7829      	ldrb	r1, [r5, #0]
    33da:	000b      	movs	r3, r1
    33dc:	3b30      	subs	r3, #48	; 0x30
    33de:	2b09      	cmp	r3, #9
    33e0:	d948      	bls.n	3474 <__svfiscanf_r+0x108>
    33e2:	4ea3      	ldr	r6, [pc, #652]	; (3670 <__svfiscanf_r+0x304>)
    33e4:	2203      	movs	r2, #3
    33e6:	0030      	movs	r0, r6
    33e8:	f000 fdec 	bl	3fc4 <memchr>
    33ec:	2800      	cmp	r0, #0
    33ee:	d007      	beq.n	3400 <__svfiscanf_r+0x94>
    33f0:	2301      	movs	r3, #1
    33f2:	1b80      	subs	r0, r0, r6
    33f4:	4083      	lsls	r3, r0
    33f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
    33f8:	3501      	adds	r5, #1
    33fa:	4313      	orrs	r3, r2
    33fc:	9202      	str	r2, [sp, #8]
    33fe:	9345      	str	r3, [sp, #276]	; 0x114
    3400:	782b      	ldrb	r3, [r5, #0]
    3402:	1c6e      	adds	r6, r5, #1
    3404:	2b67      	cmp	r3, #103	; 0x67
    3406:	d858      	bhi.n	34ba <__svfiscanf_r+0x14e>
    3408:	2b65      	cmp	r3, #101	; 0x65
    340a:	d300      	bcc.n	340e <__svfiscanf_r+0xa2>
    340c:	e0dd      	b.n	35ca <__svfiscanf_r+0x25e>
    340e:	2b47      	cmp	r3, #71	; 0x47
    3410:	d838      	bhi.n	3484 <__svfiscanf_r+0x118>
    3412:	2b45      	cmp	r3, #69	; 0x45
    3414:	d300      	bcc.n	3418 <__svfiscanf_r+0xac>
    3416:	e0d8      	b.n	35ca <__svfiscanf_r+0x25e>
    3418:	2b00      	cmp	r3, #0
    341a:	d100      	bne.n	341e <__svfiscanf_r+0xb2>
    341c:	e11d      	b.n	365a <__svfiscanf_r+0x2ee>
    341e:	2b25      	cmp	r3, #37	; 0x25
    3420:	d079      	beq.n	3516 <__svfiscanf_r+0x1aa>
    3422:	2303      	movs	r3, #3
    3424:	934b      	str	r3, [sp, #300]	; 0x12c
    3426:	3307      	adds	r3, #7
    3428:	9346      	str	r3, [sp, #280]	; 0x118
    342a:	e053      	b.n	34d4 <__svfiscanf_r+0x168>
    342c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    342e:	3301      	adds	r3, #1
    3430:	9201      	str	r2, [sp, #4]
    3432:	3201      	adds	r2, #1
    3434:	9249      	str	r2, [sp, #292]	; 0x124
    3436:	6862      	ldr	r2, [r4, #4]
    3438:	6023      	str	r3, [r4, #0]
    343a:	3a01      	subs	r2, #1
    343c:	6062      	str	r2, [r4, #4]
    343e:	6863      	ldr	r3, [r4, #4]
    3440:	2b00      	cmp	r3, #0
    3442:	dd0b      	ble.n	345c <__svfiscanf_r+0xf0>
    3444:	f000 fd9e 	bl	3f84 <__locale_ctype_ptr>
    3448:	2108      	movs	r1, #8
    344a:	6823      	ldr	r3, [r4, #0]
    344c:	781a      	ldrb	r2, [r3, #0]
    344e:	1880      	adds	r0, r0, r2
    3450:	7842      	ldrb	r2, [r0, #1]
    3452:	420a      	tst	r2, r1
    3454:	d1ea      	bne.n	342c <__svfiscanf_r+0xc0>
    3456:	1c6e      	adds	r6, r5, #1
    3458:	0035      	movs	r5, r6
    345a:	e7a1      	b.n	33a0 <__svfiscanf_r+0x34>
    345c:	2286      	movs	r2, #134	; 0x86
    345e:	ab02      	add	r3, sp, #8
    3460:	0052      	lsls	r2, r2, #1
    3462:	189b      	adds	r3, r3, r2
    3464:	59db      	ldr	r3, [r3, r7]
    3466:	0021      	movs	r1, r4
    3468:	9800      	ldr	r0, [sp, #0]
    346a:	9301      	str	r3, [sp, #4]
    346c:	4798      	blx	r3
    346e:	2800      	cmp	r0, #0
    3470:	d0e8      	beq.n	3444 <__svfiscanf_r+0xd8>
    3472:	e7f0      	b.n	3456 <__svfiscanf_r+0xea>
    3474:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    3476:	3501      	adds	r5, #1
    3478:	9302      	str	r3, [sp, #8]
    347a:	4353      	muls	r3, r2
    347c:	3b30      	subs	r3, #48	; 0x30
    347e:	1859      	adds	r1, r3, r1
    3480:	9147      	str	r1, [sp, #284]	; 0x11c
    3482:	e7a9      	b.n	33d8 <__svfiscanf_r+0x6c>
    3484:	2b5b      	cmp	r3, #91	; 0x5b
    3486:	d100      	bne.n	348a <__svfiscanf_r+0x11e>
    3488:	e077      	b.n	357a <__svfiscanf_r+0x20e>
    348a:	d80f      	bhi.n	34ac <__svfiscanf_r+0x140>
    348c:	2b58      	cmp	r3, #88	; 0x58
    348e:	d1c8      	bne.n	3422 <__svfiscanf_r+0xb6>
    3490:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3492:	9201      	str	r2, [sp, #4]
    3494:	2280      	movs	r2, #128	; 0x80
    3496:	9901      	ldr	r1, [sp, #4]
    3498:	0092      	lsls	r2, r2, #2
    349a:	430a      	orrs	r2, r1
    349c:	9245      	str	r2, [sp, #276]	; 0x114
    349e:	2210      	movs	r2, #16
    34a0:	9246      	str	r2, [sp, #280]	; 0x118
    34a2:	2203      	movs	r2, #3
    34a4:	2b6e      	cmp	r3, #110	; 0x6e
    34a6:	dd14      	ble.n	34d2 <__svfiscanf_r+0x166>
    34a8:	3201      	adds	r2, #1
    34aa:	e012      	b.n	34d2 <__svfiscanf_r+0x166>
    34ac:	2b63      	cmp	r3, #99	; 0x63
    34ae:	d100      	bne.n	34b2 <__svfiscanf_r+0x146>
    34b0:	e071      	b.n	3596 <__svfiscanf_r+0x22a>
    34b2:	2b64      	cmp	r3, #100	; 0x64
    34b4:	d1b5      	bne.n	3422 <__svfiscanf_r+0xb6>
    34b6:	220a      	movs	r2, #10
    34b8:	e7f2      	b.n	34a0 <__svfiscanf_r+0x134>
    34ba:	2b70      	cmp	r3, #112	; 0x70
    34bc:	d052      	beq.n	3564 <__svfiscanf_r+0x1f8>
    34be:	d822      	bhi.n	3506 <__svfiscanf_r+0x19a>
    34c0:	2b6e      	cmp	r3, #110	; 0x6e
    34c2:	d100      	bne.n	34c6 <__svfiscanf_r+0x15a>
    34c4:	e06f      	b.n	35a6 <__svfiscanf_r+0x23a>
    34c6:	d854      	bhi.n	3572 <__svfiscanf_r+0x206>
    34c8:	2b69      	cmp	r3, #105	; 0x69
    34ca:	d1aa      	bne.n	3422 <__svfiscanf_r+0xb6>
    34cc:	2300      	movs	r3, #0
    34ce:	2203      	movs	r2, #3
    34d0:	9346      	str	r3, [sp, #280]	; 0x118
    34d2:	924b      	str	r2, [sp, #300]	; 0x12c
    34d4:	6863      	ldr	r3, [r4, #4]
    34d6:	2b00      	cmp	r3, #0
    34d8:	dc00      	bgt.n	34dc <__svfiscanf_r+0x170>
    34da:	e078      	b.n	35ce <__svfiscanf_r+0x262>
    34dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
    34de:	9301      	str	r3, [sp, #4]
    34e0:	065b      	lsls	r3, r3, #25
    34e2:	d400      	bmi.n	34e6 <__svfiscanf_r+0x17a>
    34e4:	e08b      	b.n	35fe <__svfiscanf_r+0x292>
    34e6:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    34e8:	2b02      	cmp	r3, #2
    34ea:	dd00      	ble.n	34ee <__svfiscanf_r+0x182>
    34ec:	e09d      	b.n	362a <__svfiscanf_r+0x2be>
    34ee:	ab03      	add	r3, sp, #12
    34f0:	0022      	movs	r2, r4
    34f2:	a945      	add	r1, sp, #276	; 0x114
    34f4:	9800      	ldr	r0, [sp, #0]
    34f6:	f000 f8e7 	bl	36c8 <_scanf_chars>
    34fa:	2801      	cmp	r0, #1
    34fc:	d100      	bne.n	3500 <__svfiscanf_r+0x194>
    34fe:	e0af      	b.n	3660 <__svfiscanf_r+0x2f4>
    3500:	2802      	cmp	r0, #2
    3502:	d1a9      	bne.n	3458 <__svfiscanf_r+0xec>
    3504:	e025      	b.n	3552 <__svfiscanf_r+0x1e6>
    3506:	2b75      	cmp	r3, #117	; 0x75
    3508:	d0d5      	beq.n	34b6 <__svfiscanf_r+0x14a>
    350a:	2b78      	cmp	r3, #120	; 0x78
    350c:	d0c0      	beq.n	3490 <__svfiscanf_r+0x124>
    350e:	2b73      	cmp	r3, #115	; 0x73
    3510:	d187      	bne.n	3422 <__svfiscanf_r+0xb6>
    3512:	2302      	movs	r3, #2
    3514:	e03d      	b.n	3592 <__svfiscanf_r+0x226>
    3516:	6863      	ldr	r3, [r4, #4]
    3518:	2b00      	cmp	r3, #0
    351a:	dd0f      	ble.n	353c <__svfiscanf_r+0x1d0>
    351c:	6823      	ldr	r3, [r4, #0]
    351e:	9901      	ldr	r1, [sp, #4]
    3520:	781a      	ldrb	r2, [r3, #0]
    3522:	4291      	cmp	r1, r2
    3524:	d000      	beq.n	3528 <__svfiscanf_r+0x1bc>
    3526:	e09b      	b.n	3660 <__svfiscanf_r+0x2f4>
    3528:	3301      	adds	r3, #1
    352a:	6862      	ldr	r2, [r4, #4]
    352c:	6023      	str	r3, [r4, #0]
    352e:	9b49      	ldr	r3, [sp, #292]	; 0x124
    3530:	3a01      	subs	r2, #1
    3532:	9301      	str	r3, [sp, #4]
    3534:	3301      	adds	r3, #1
    3536:	6062      	str	r2, [r4, #4]
    3538:	9349      	str	r3, [sp, #292]	; 0x124
    353a:	e78d      	b.n	3458 <__svfiscanf_r+0xec>
    353c:	2286      	movs	r2, #134	; 0x86
    353e:	ab02      	add	r3, sp, #8
    3540:	0052      	lsls	r2, r2, #1
    3542:	189b      	adds	r3, r3, r2
    3544:	59db      	ldr	r3, [r3, r7]
    3546:	0021      	movs	r1, r4
    3548:	9800      	ldr	r0, [sp, #0]
    354a:	9302      	str	r3, [sp, #8]
    354c:	4798      	blx	r3
    354e:	2800      	cmp	r0, #0
    3550:	d0e4      	beq.n	351c <__svfiscanf_r+0x1b0>
    3552:	9848      	ldr	r0, [sp, #288]	; 0x120
    3554:	2800      	cmp	r0, #0
    3556:	d000      	beq.n	355a <__svfiscanf_r+0x1ee>
    3558:	e07b      	b.n	3652 <__svfiscanf_r+0x2e6>
    355a:	3801      	subs	r0, #1
    355c:	23a7      	movs	r3, #167	; 0xa7
    355e:	009b      	lsls	r3, r3, #2
    3560:	449d      	add	sp, r3
    3562:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3564:	9a45      	ldr	r2, [sp, #276]	; 0x114
    3566:	9201      	str	r2, [sp, #4]
    3568:	2220      	movs	r2, #32
    356a:	9901      	ldr	r1, [sp, #4]
    356c:	430a      	orrs	r2, r1
    356e:	9245      	str	r2, [sp, #276]	; 0x114
    3570:	e78e      	b.n	3490 <__svfiscanf_r+0x124>
    3572:	2308      	movs	r3, #8
    3574:	2204      	movs	r2, #4
    3576:	9346      	str	r3, [sp, #280]	; 0x118
    3578:	e7ab      	b.n	34d2 <__svfiscanf_r+0x166>
    357a:	0031      	movs	r1, r6
    357c:	a805      	add	r0, sp, #20
    357e:	f000 fac9 	bl	3b14 <__sccl>
    3582:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3584:	0006      	movs	r6, r0
    3586:	9301      	str	r3, [sp, #4]
    3588:	2340      	movs	r3, #64	; 0x40
    358a:	9a01      	ldr	r2, [sp, #4]
    358c:	4313      	orrs	r3, r2
    358e:	9345      	str	r3, [sp, #276]	; 0x114
    3590:	2301      	movs	r3, #1
    3592:	934b      	str	r3, [sp, #300]	; 0x12c
    3594:	e79e      	b.n	34d4 <__svfiscanf_r+0x168>
    3596:	9b45      	ldr	r3, [sp, #276]	; 0x114
    3598:	9301      	str	r3, [sp, #4]
    359a:	2340      	movs	r3, #64	; 0x40
    359c:	9a01      	ldr	r2, [sp, #4]
    359e:	4313      	orrs	r3, r2
    35a0:	9345      	str	r3, [sp, #276]	; 0x114
    35a2:	2300      	movs	r3, #0
    35a4:	e7f5      	b.n	3592 <__svfiscanf_r+0x226>
    35a6:	9945      	ldr	r1, [sp, #276]	; 0x114
    35a8:	06cb      	lsls	r3, r1, #27
    35aa:	d500      	bpl.n	35ae <__svfiscanf_r+0x242>
    35ac:	e754      	b.n	3458 <__svfiscanf_r+0xec>
    35ae:	9b03      	ldr	r3, [sp, #12]
    35b0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    35b2:	07c8      	lsls	r0, r1, #31
    35b4:	d504      	bpl.n	35c0 <__svfiscanf_r+0x254>
    35b6:	1d19      	adds	r1, r3, #4
    35b8:	9103      	str	r1, [sp, #12]
    35ba:	681b      	ldr	r3, [r3, #0]
    35bc:	801a      	strh	r2, [r3, #0]
    35be:	e74b      	b.n	3458 <__svfiscanf_r+0xec>
    35c0:	1d19      	adds	r1, r3, #4
    35c2:	9103      	str	r1, [sp, #12]
    35c4:	681b      	ldr	r3, [r3, #0]
    35c6:	601a      	str	r2, [r3, #0]
    35c8:	e746      	b.n	3458 <__svfiscanf_r+0xec>
    35ca:	2305      	movs	r3, #5
    35cc:	e7e1      	b.n	3592 <__svfiscanf_r+0x226>
    35ce:	2286      	movs	r2, #134	; 0x86
    35d0:	ab02      	add	r3, sp, #8
    35d2:	0052      	lsls	r2, r2, #1
    35d4:	189b      	adds	r3, r3, r2
    35d6:	59db      	ldr	r3, [r3, r7]
    35d8:	0021      	movs	r1, r4
    35da:	9800      	ldr	r0, [sp, #0]
    35dc:	9301      	str	r3, [sp, #4]
    35de:	4798      	blx	r3
    35e0:	2800      	cmp	r0, #0
    35e2:	d100      	bne.n	35e6 <__svfiscanf_r+0x27a>
    35e4:	e77a      	b.n	34dc <__svfiscanf_r+0x170>
    35e6:	e7b4      	b.n	3552 <__svfiscanf_r+0x1e6>
    35e8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    35ea:	9201      	str	r2, [sp, #4]
    35ec:	3201      	adds	r2, #1
    35ee:	9249      	str	r2, [sp, #292]	; 0x124
    35f0:	6862      	ldr	r2, [r4, #4]
    35f2:	3a01      	subs	r2, #1
    35f4:	6062      	str	r2, [r4, #4]
    35f6:	2a00      	cmp	r2, #0
    35f8:	dd0b      	ble.n	3612 <__svfiscanf_r+0x2a6>
    35fa:	3301      	adds	r3, #1
    35fc:	6023      	str	r3, [r4, #0]
    35fe:	f000 fcc1 	bl	3f84 <__locale_ctype_ptr>
    3602:	2108      	movs	r1, #8
    3604:	6823      	ldr	r3, [r4, #0]
    3606:	781a      	ldrb	r2, [r3, #0]
    3608:	1880      	adds	r0, r0, r2
    360a:	7842      	ldrb	r2, [r0, #1]
    360c:	420a      	tst	r2, r1
    360e:	d1eb      	bne.n	35e8 <__svfiscanf_r+0x27c>
    3610:	e769      	b.n	34e6 <__svfiscanf_r+0x17a>
    3612:	2286      	movs	r2, #134	; 0x86
    3614:	ab02      	add	r3, sp, #8
    3616:	0052      	lsls	r2, r2, #1
    3618:	189b      	adds	r3, r3, r2
    361a:	59db      	ldr	r3, [r3, r7]
    361c:	0021      	movs	r1, r4
    361e:	9800      	ldr	r0, [sp, #0]
    3620:	9301      	str	r3, [sp, #4]
    3622:	4798      	blx	r3
    3624:	2800      	cmp	r0, #0
    3626:	d0ea      	beq.n	35fe <__svfiscanf_r+0x292>
    3628:	e793      	b.n	3552 <__svfiscanf_r+0x1e6>
    362a:	2b04      	cmp	r3, #4
    362c:	dc06      	bgt.n	363c <__svfiscanf_r+0x2d0>
    362e:	ab03      	add	r3, sp, #12
    3630:	0022      	movs	r2, r4
    3632:	a945      	add	r1, sp, #276	; 0x114
    3634:	9800      	ldr	r0, [sp, #0]
    3636:	f000 f8ab 	bl	3790 <_scanf_i>
    363a:	e75e      	b.n	34fa <__svfiscanf_r+0x18e>
    363c:	4b0d      	ldr	r3, [pc, #52]	; (3674 <__svfiscanf_r+0x308>)
    363e:	2b00      	cmp	r3, #0
    3640:	d100      	bne.n	3644 <__svfiscanf_r+0x2d8>
    3642:	e709      	b.n	3458 <__svfiscanf_r+0xec>
    3644:	ab03      	add	r3, sp, #12
    3646:	0022      	movs	r2, r4
    3648:	a945      	add	r1, sp, #276	; 0x114
    364a:	9800      	ldr	r0, [sp, #0]
    364c:	e000      	b.n	3650 <__svfiscanf_r+0x2e4>
    364e:	bf00      	nop
    3650:	e753      	b.n	34fa <__svfiscanf_r+0x18e>
    3652:	89a3      	ldrh	r3, [r4, #12]
    3654:	065b      	lsls	r3, r3, #25
    3656:	d400      	bmi.n	365a <__svfiscanf_r+0x2ee>
    3658:	e780      	b.n	355c <__svfiscanf_r+0x1f0>
    365a:	2001      	movs	r0, #1
    365c:	4240      	negs	r0, r0
    365e:	e77d      	b.n	355c <__svfiscanf_r+0x1f0>
    3660:	9848      	ldr	r0, [sp, #288]	; 0x120
    3662:	e77b      	b.n	355c <__svfiscanf_r+0x1f0>
    3664:	fffffd64 	.word	0xfffffd64
    3668:	00003e51 	.word	0x00003e51
    366c:	000039d1 	.word	0x000039d1
    3670:	000043fe 	.word	0x000043fe
    3674:	00000000 	.word	0x00000000

00003678 <_vfiscanf_r>:
    3678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    367a:	0004      	movs	r4, r0
    367c:	000d      	movs	r5, r1
    367e:	0016      	movs	r6, r2
    3680:	001f      	movs	r7, r3
    3682:	2800      	cmp	r0, #0
    3684:	d004      	beq.n	3690 <_vfiscanf_r+0x18>
    3686:	6983      	ldr	r3, [r0, #24]
    3688:	2b00      	cmp	r3, #0
    368a:	d101      	bne.n	3690 <_vfiscanf_r+0x18>
    368c:	f7fe fe76 	bl	237c <__sinit>
    3690:	4b0a      	ldr	r3, [pc, #40]	; (36bc <_vfiscanf_r+0x44>)
    3692:	429d      	cmp	r5, r3
    3694:	d107      	bne.n	36a6 <_vfiscanf_r+0x2e>
    3696:	6865      	ldr	r5, [r4, #4]
    3698:	003b      	movs	r3, r7
    369a:	0032      	movs	r2, r6
    369c:	0029      	movs	r1, r5
    369e:	0020      	movs	r0, r4
    36a0:	f7ff fe64 	bl	336c <__svfiscanf_r>
    36a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36a6:	4b06      	ldr	r3, [pc, #24]	; (36c0 <_vfiscanf_r+0x48>)
    36a8:	429d      	cmp	r5, r3
    36aa:	d101      	bne.n	36b0 <_vfiscanf_r+0x38>
    36ac:	68a5      	ldr	r5, [r4, #8]
    36ae:	e7f3      	b.n	3698 <_vfiscanf_r+0x20>
    36b0:	4b04      	ldr	r3, [pc, #16]	; (36c4 <_vfiscanf_r+0x4c>)
    36b2:	429d      	cmp	r5, r3
    36b4:	d1f0      	bne.n	3698 <_vfiscanf_r+0x20>
    36b6:	68e5      	ldr	r5, [r4, #12]
    36b8:	e7ee      	b.n	3698 <_vfiscanf_r+0x20>
    36ba:	46c0      	nop			; (mov r8, r8)
    36bc:	000043b8 	.word	0x000043b8
    36c0:	000043d8 	.word	0x000043d8
    36c4:	00004398 	.word	0x00004398

000036c8 <_scanf_chars>:
    36c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    36ca:	0015      	movs	r5, r2
    36cc:	688a      	ldr	r2, [r1, #8]
    36ce:	9001      	str	r0, [sp, #4]
    36d0:	000c      	movs	r4, r1
    36d2:	2a00      	cmp	r2, #0
    36d4:	d106      	bne.n	36e4 <_scanf_chars+0x1c>
    36d6:	698a      	ldr	r2, [r1, #24]
    36d8:	1e51      	subs	r1, r2, #1
    36da:	418a      	sbcs	r2, r1
    36dc:	2101      	movs	r1, #1
    36de:	4252      	negs	r2, r2
    36e0:	430a      	orrs	r2, r1
    36e2:	60a2      	str	r2, [r4, #8]
    36e4:	6822      	ldr	r2, [r4, #0]
    36e6:	06d2      	lsls	r2, r2, #27
    36e8:	d403      	bmi.n	36f2 <_scanf_chars+0x2a>
    36ea:	681a      	ldr	r2, [r3, #0]
    36ec:	1d11      	adds	r1, r2, #4
    36ee:	6019      	str	r1, [r3, #0]
    36f0:	6817      	ldr	r7, [r2, #0]
    36f2:	2600      	movs	r6, #0
    36f4:	69a3      	ldr	r3, [r4, #24]
    36f6:	2b00      	cmp	r3, #0
    36f8:	d01c      	beq.n	3734 <_scanf_chars+0x6c>
    36fa:	2b01      	cmp	r3, #1
    36fc:	d108      	bne.n	3710 <_scanf_chars+0x48>
    36fe:	682b      	ldr	r3, [r5, #0]
    3700:	6962      	ldr	r2, [r4, #20]
    3702:	781b      	ldrb	r3, [r3, #0]
    3704:	5cd3      	ldrb	r3, [r2, r3]
    3706:	2b00      	cmp	r3, #0
    3708:	d114      	bne.n	3734 <_scanf_chars+0x6c>
    370a:	2e00      	cmp	r6, #0
    370c:	d130      	bne.n	3770 <_scanf_chars+0xa8>
    370e:	e006      	b.n	371e <_scanf_chars+0x56>
    3710:	2b02      	cmp	r3, #2
    3712:	d006      	beq.n	3722 <_scanf_chars+0x5a>
    3714:	2e00      	cmp	r6, #0
    3716:	d12b      	bne.n	3770 <_scanf_chars+0xa8>
    3718:	69a3      	ldr	r3, [r4, #24]
    371a:	2b01      	cmp	r3, #1
    371c:	d128      	bne.n	3770 <_scanf_chars+0xa8>
    371e:	2001      	movs	r0, #1
    3720:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3722:	f000 fc2f 	bl	3f84 <__locale_ctype_ptr>
    3726:	2208      	movs	r2, #8
    3728:	682b      	ldr	r3, [r5, #0]
    372a:	781b      	ldrb	r3, [r3, #0]
    372c:	18c0      	adds	r0, r0, r3
    372e:	7843      	ldrb	r3, [r0, #1]
    3730:	4213      	tst	r3, r2
    3732:	d1ef      	bne.n	3714 <_scanf_chars+0x4c>
    3734:	2210      	movs	r2, #16
    3736:	6823      	ldr	r3, [r4, #0]
    3738:	3601      	adds	r6, #1
    373a:	4213      	tst	r3, r2
    373c:	d103      	bne.n	3746 <_scanf_chars+0x7e>
    373e:	682b      	ldr	r3, [r5, #0]
    3740:	781b      	ldrb	r3, [r3, #0]
    3742:	703b      	strb	r3, [r7, #0]
    3744:	3701      	adds	r7, #1
    3746:	682a      	ldr	r2, [r5, #0]
    3748:	686b      	ldr	r3, [r5, #4]
    374a:	3201      	adds	r2, #1
    374c:	602a      	str	r2, [r5, #0]
    374e:	68a2      	ldr	r2, [r4, #8]
    3750:	3b01      	subs	r3, #1
    3752:	3a01      	subs	r2, #1
    3754:	606b      	str	r3, [r5, #4]
    3756:	60a2      	str	r2, [r4, #8]
    3758:	2a00      	cmp	r2, #0
    375a:	d009      	beq.n	3770 <_scanf_chars+0xa8>
    375c:	2b00      	cmp	r3, #0
    375e:	dcc9      	bgt.n	36f4 <_scanf_chars+0x2c>
    3760:	23c0      	movs	r3, #192	; 0xc0
    3762:	005b      	lsls	r3, r3, #1
    3764:	58e3      	ldr	r3, [r4, r3]
    3766:	0029      	movs	r1, r5
    3768:	9801      	ldr	r0, [sp, #4]
    376a:	4798      	blx	r3
    376c:	2800      	cmp	r0, #0
    376e:	d0c1      	beq.n	36f4 <_scanf_chars+0x2c>
    3770:	2310      	movs	r3, #16
    3772:	6822      	ldr	r2, [r4, #0]
    3774:	4013      	ands	r3, r2
    3776:	d106      	bne.n	3786 <_scanf_chars+0xbe>
    3778:	68e2      	ldr	r2, [r4, #12]
    377a:	3201      	adds	r2, #1
    377c:	60e2      	str	r2, [r4, #12]
    377e:	69a2      	ldr	r2, [r4, #24]
    3780:	2a00      	cmp	r2, #0
    3782:	d000      	beq.n	3786 <_scanf_chars+0xbe>
    3784:	703b      	strb	r3, [r7, #0]
    3786:	6923      	ldr	r3, [r4, #16]
    3788:	2000      	movs	r0, #0
    378a:	199e      	adds	r6, r3, r6
    378c:	6126      	str	r6, [r4, #16]
    378e:	e7c7      	b.n	3720 <_scanf_chars+0x58>

00003790 <_scanf_i>:
    3790:	b5f0      	push	{r4, r5, r6, r7, lr}
    3792:	000c      	movs	r4, r1
    3794:	b08d      	sub	sp, #52	; 0x34
    3796:	9302      	str	r3, [sp, #8]
    3798:	4b77      	ldr	r3, [pc, #476]	; (3978 <_scanf_i+0x1e8>)
    379a:	9005      	str	r0, [sp, #20]
    379c:	0016      	movs	r6, r2
    379e:	aa09      	add	r2, sp, #36	; 0x24
    37a0:	cb23      	ldmia	r3!, {r0, r1, r5}
    37a2:	c223      	stmia	r2!, {r0, r1, r5}
    37a4:	4b75      	ldr	r3, [pc, #468]	; (397c <_scanf_i+0x1ec>)
    37a6:	9306      	str	r3, [sp, #24]
    37a8:	69a3      	ldr	r3, [r4, #24]
    37aa:	2b03      	cmp	r3, #3
    37ac:	d001      	beq.n	37b2 <_scanf_i+0x22>
    37ae:	4b74      	ldr	r3, [pc, #464]	; (3980 <_scanf_i+0x1f0>)
    37b0:	9306      	str	r3, [sp, #24]
    37b2:	22ae      	movs	r2, #174	; 0xae
    37b4:	2000      	movs	r0, #0
    37b6:	68a3      	ldr	r3, [r4, #8]
    37b8:	0052      	lsls	r2, r2, #1
    37ba:	1e59      	subs	r1, r3, #1
    37bc:	9004      	str	r0, [sp, #16]
    37be:	4291      	cmp	r1, r2
    37c0:	d905      	bls.n	37ce <_scanf_i+0x3e>
    37c2:	3b5e      	subs	r3, #94	; 0x5e
    37c4:	3bff      	subs	r3, #255	; 0xff
    37c6:	9304      	str	r3, [sp, #16]
    37c8:	235e      	movs	r3, #94	; 0x5e
    37ca:	33ff      	adds	r3, #255	; 0xff
    37cc:	60a3      	str	r3, [r4, #8]
    37ce:	0023      	movs	r3, r4
    37d0:	331c      	adds	r3, #28
    37d2:	9301      	str	r3, [sp, #4]
    37d4:	23d0      	movs	r3, #208	; 0xd0
    37d6:	2700      	movs	r7, #0
    37d8:	6822      	ldr	r2, [r4, #0]
    37da:	011b      	lsls	r3, r3, #4
    37dc:	4313      	orrs	r3, r2
    37de:	6023      	str	r3, [r4, #0]
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	9303      	str	r3, [sp, #12]
    37e4:	6833      	ldr	r3, [r6, #0]
    37e6:	a809      	add	r0, sp, #36	; 0x24
    37e8:	7819      	ldrb	r1, [r3, #0]
    37ea:	00bb      	lsls	r3, r7, #2
    37ec:	2202      	movs	r2, #2
    37ee:	5818      	ldr	r0, [r3, r0]
    37f0:	f000 fbe8 	bl	3fc4 <memchr>
    37f4:	2800      	cmp	r0, #0
    37f6:	d02b      	beq.n	3850 <_scanf_i+0xc0>
    37f8:	2f01      	cmp	r7, #1
    37fa:	d15f      	bne.n	38bc <_scanf_i+0x12c>
    37fc:	6863      	ldr	r3, [r4, #4]
    37fe:	2b00      	cmp	r3, #0
    3800:	d106      	bne.n	3810 <_scanf_i+0x80>
    3802:	3308      	adds	r3, #8
    3804:	6822      	ldr	r2, [r4, #0]
    3806:	6063      	str	r3, [r4, #4]
    3808:	33f9      	adds	r3, #249	; 0xf9
    380a:	33ff      	adds	r3, #255	; 0xff
    380c:	4313      	orrs	r3, r2
    380e:	6023      	str	r3, [r4, #0]
    3810:	4b5c      	ldr	r3, [pc, #368]	; (3984 <_scanf_i+0x1f4>)
    3812:	6822      	ldr	r2, [r4, #0]
    3814:	4013      	ands	r3, r2
    3816:	6023      	str	r3, [r4, #0]
    3818:	68a3      	ldr	r3, [r4, #8]
    381a:	1e5a      	subs	r2, r3, #1
    381c:	60a2      	str	r2, [r4, #8]
    381e:	2b00      	cmp	r3, #0
    3820:	d016      	beq.n	3850 <_scanf_i+0xc0>
    3822:	9b03      	ldr	r3, [sp, #12]
    3824:	1c5d      	adds	r5, r3, #1
    3826:	6833      	ldr	r3, [r6, #0]
    3828:	1c5a      	adds	r2, r3, #1
    382a:	6032      	str	r2, [r6, #0]
    382c:	781b      	ldrb	r3, [r3, #0]
    382e:	9a03      	ldr	r2, [sp, #12]
    3830:	9503      	str	r5, [sp, #12]
    3832:	7013      	strb	r3, [r2, #0]
    3834:	6873      	ldr	r3, [r6, #4]
    3836:	3b01      	subs	r3, #1
    3838:	6073      	str	r3, [r6, #4]
    383a:	2b00      	cmp	r3, #0
    383c:	dc08      	bgt.n	3850 <_scanf_i+0xc0>
    383e:	23c0      	movs	r3, #192	; 0xc0
    3840:	005b      	lsls	r3, r3, #1
    3842:	58e3      	ldr	r3, [r4, r3]
    3844:	0031      	movs	r1, r6
    3846:	9805      	ldr	r0, [sp, #20]
    3848:	9307      	str	r3, [sp, #28]
    384a:	4798      	blx	r3
    384c:	2800      	cmp	r0, #0
    384e:	d17d      	bne.n	394c <_scanf_i+0x1bc>
    3850:	3701      	adds	r7, #1
    3852:	2f03      	cmp	r7, #3
    3854:	d1c6      	bne.n	37e4 <_scanf_i+0x54>
    3856:	6863      	ldr	r3, [r4, #4]
    3858:	2b00      	cmp	r3, #0
    385a:	d101      	bne.n	3860 <_scanf_i+0xd0>
    385c:	330a      	adds	r3, #10
    385e:	6063      	str	r3, [r4, #4]
    3860:	2110      	movs	r1, #16
    3862:	2700      	movs	r7, #0
    3864:	6863      	ldr	r3, [r4, #4]
    3866:	6960      	ldr	r0, [r4, #20]
    3868:	1ac9      	subs	r1, r1, r3
    386a:	4b47      	ldr	r3, [pc, #284]	; (3988 <_scanf_i+0x1f8>)
    386c:	18c9      	adds	r1, r1, r3
    386e:	f000 f951 	bl	3b14 <__sccl>
    3872:	9d03      	ldr	r5, [sp, #12]
    3874:	68a3      	ldr	r3, [r4, #8]
    3876:	2b00      	cmp	r3, #0
    3878:	d041      	beq.n	38fe <_scanf_i+0x16e>
    387a:	6832      	ldr	r2, [r6, #0]
    387c:	6960      	ldr	r0, [r4, #20]
    387e:	7811      	ldrb	r1, [r2, #0]
    3880:	5c40      	ldrb	r0, [r0, r1]
    3882:	2800      	cmp	r0, #0
    3884:	d03b      	beq.n	38fe <_scanf_i+0x16e>
    3886:	2930      	cmp	r1, #48	; 0x30
    3888:	d128      	bne.n	38dc <_scanf_i+0x14c>
    388a:	2080      	movs	r0, #128	; 0x80
    388c:	6821      	ldr	r1, [r4, #0]
    388e:	0100      	lsls	r0, r0, #4
    3890:	4201      	tst	r1, r0
    3892:	d023      	beq.n	38dc <_scanf_i+0x14c>
    3894:	9a04      	ldr	r2, [sp, #16]
    3896:	3701      	adds	r7, #1
    3898:	2a00      	cmp	r2, #0
    389a:	d003      	beq.n	38a4 <_scanf_i+0x114>
    389c:	3a01      	subs	r2, #1
    389e:	3301      	adds	r3, #1
    38a0:	9204      	str	r2, [sp, #16]
    38a2:	60a3      	str	r3, [r4, #8]
    38a4:	6873      	ldr	r3, [r6, #4]
    38a6:	3b01      	subs	r3, #1
    38a8:	6073      	str	r3, [r6, #4]
    38aa:	2b00      	cmp	r3, #0
    38ac:	dd1e      	ble.n	38ec <_scanf_i+0x15c>
    38ae:	6833      	ldr	r3, [r6, #0]
    38b0:	3301      	adds	r3, #1
    38b2:	6033      	str	r3, [r6, #0]
    38b4:	68a3      	ldr	r3, [r4, #8]
    38b6:	3b01      	subs	r3, #1
    38b8:	60a3      	str	r3, [r4, #8]
    38ba:	e7db      	b.n	3874 <_scanf_i+0xe4>
    38bc:	2f02      	cmp	r7, #2
    38be:	d1ab      	bne.n	3818 <_scanf_i+0x88>
    38c0:	21c0      	movs	r1, #192	; 0xc0
    38c2:	2380      	movs	r3, #128	; 0x80
    38c4:	6822      	ldr	r2, [r4, #0]
    38c6:	00c9      	lsls	r1, r1, #3
    38c8:	4011      	ands	r1, r2
    38ca:	009b      	lsls	r3, r3, #2
    38cc:	4299      	cmp	r1, r3
    38ce:	d1c2      	bne.n	3856 <_scanf_i+0xc6>
    38d0:	3bf1      	subs	r3, #241	; 0xf1
    38d2:	3bff      	subs	r3, #255	; 0xff
    38d4:	6063      	str	r3, [r4, #4]
    38d6:	33f0      	adds	r3, #240	; 0xf0
    38d8:	4313      	orrs	r3, r2
    38da:	e79c      	b.n	3816 <_scanf_i+0x86>
    38dc:	6821      	ldr	r1, [r4, #0]
    38de:	4b2b      	ldr	r3, [pc, #172]	; (398c <_scanf_i+0x1fc>)
    38e0:	400b      	ands	r3, r1
    38e2:	6023      	str	r3, [r4, #0]
    38e4:	7813      	ldrb	r3, [r2, #0]
    38e6:	702b      	strb	r3, [r5, #0]
    38e8:	3501      	adds	r5, #1
    38ea:	e7db      	b.n	38a4 <_scanf_i+0x114>
    38ec:	23c0      	movs	r3, #192	; 0xc0
    38ee:	005b      	lsls	r3, r3, #1
    38f0:	58e3      	ldr	r3, [r4, r3]
    38f2:	0031      	movs	r1, r6
    38f4:	9805      	ldr	r0, [sp, #20]
    38f6:	9303      	str	r3, [sp, #12]
    38f8:	4798      	blx	r3
    38fa:	2800      	cmp	r0, #0
    38fc:	d0da      	beq.n	38b4 <_scanf_i+0x124>
    38fe:	6823      	ldr	r3, [r4, #0]
    3900:	05db      	lsls	r3, r3, #23
    3902:	d50e      	bpl.n	3922 <_scanf_i+0x192>
    3904:	9b01      	ldr	r3, [sp, #4]
    3906:	429d      	cmp	r5, r3
    3908:	d907      	bls.n	391a <_scanf_i+0x18a>
    390a:	23be      	movs	r3, #190	; 0xbe
    390c:	3d01      	subs	r5, #1
    390e:	005b      	lsls	r3, r3, #1
    3910:	7829      	ldrb	r1, [r5, #0]
    3912:	58e3      	ldr	r3, [r4, r3]
    3914:	0032      	movs	r2, r6
    3916:	9805      	ldr	r0, [sp, #20]
    3918:	4798      	blx	r3
    391a:	9b01      	ldr	r3, [sp, #4]
    391c:	2001      	movs	r0, #1
    391e:	429d      	cmp	r5, r3
    3920:	d027      	beq.n	3972 <_scanf_i+0x1e2>
    3922:	2210      	movs	r2, #16
    3924:	6823      	ldr	r3, [r4, #0]
    3926:	401a      	ands	r2, r3
    3928:	d11c      	bne.n	3964 <_scanf_i+0x1d4>
    392a:	702a      	strb	r2, [r5, #0]
    392c:	6863      	ldr	r3, [r4, #4]
    392e:	9901      	ldr	r1, [sp, #4]
    3930:	9805      	ldr	r0, [sp, #20]
    3932:	9e06      	ldr	r6, [sp, #24]
    3934:	47b0      	blx	r6
    3936:	9b02      	ldr	r3, [sp, #8]
    3938:	6822      	ldr	r2, [r4, #0]
    393a:	681b      	ldr	r3, [r3, #0]
    393c:	0691      	lsls	r1, r2, #26
    393e:	d507      	bpl.n	3950 <_scanf_i+0x1c0>
    3940:	9902      	ldr	r1, [sp, #8]
    3942:	1d1a      	adds	r2, r3, #4
    3944:	600a      	str	r2, [r1, #0]
    3946:	681b      	ldr	r3, [r3, #0]
    3948:	6018      	str	r0, [r3, #0]
    394a:	e008      	b.n	395e <_scanf_i+0x1ce>
    394c:	2700      	movs	r7, #0
    394e:	e7d6      	b.n	38fe <_scanf_i+0x16e>
    3950:	07d1      	lsls	r1, r2, #31
    3952:	d5f5      	bpl.n	3940 <_scanf_i+0x1b0>
    3954:	9902      	ldr	r1, [sp, #8]
    3956:	1d1a      	adds	r2, r3, #4
    3958:	600a      	str	r2, [r1, #0]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	8018      	strh	r0, [r3, #0]
    395e:	68e3      	ldr	r3, [r4, #12]
    3960:	3301      	adds	r3, #1
    3962:	60e3      	str	r3, [r4, #12]
    3964:	2000      	movs	r0, #0
    3966:	9b01      	ldr	r3, [sp, #4]
    3968:	1aed      	subs	r5, r5, r3
    396a:	6923      	ldr	r3, [r4, #16]
    396c:	19ef      	adds	r7, r5, r7
    396e:	19df      	adds	r7, r3, r7
    3970:	6127      	str	r7, [r4, #16]
    3972:	b00d      	add	sp, #52	; 0x34
    3974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3976:	46c0      	nop			; (mov r8, r8)
    3978:	0000442c 	.word	0x0000442c
    397c:	00003c85 	.word	0x00003c85
    3980:	00003db5 	.word	0x00003db5
    3984:	fffffaff 	.word	0xfffffaff
    3988:	00004438 	.word	0x00004438
    398c:	fffff6ff 	.word	0xfffff6ff

00003990 <_read_r>:
    3990:	b570      	push	{r4, r5, r6, lr}
    3992:	0005      	movs	r5, r0
    3994:	0008      	movs	r0, r1
    3996:	0011      	movs	r1, r2
    3998:	2200      	movs	r2, #0
    399a:	4c06      	ldr	r4, [pc, #24]	; (39b4 <_read_r+0x24>)
    399c:	6022      	str	r2, [r4, #0]
    399e:	001a      	movs	r2, r3
    39a0:	f7fd fe8c 	bl	16bc <_read>
    39a4:	1c43      	adds	r3, r0, #1
    39a6:	d103      	bne.n	39b0 <_read_r+0x20>
    39a8:	6823      	ldr	r3, [r4, #0]
    39aa:	2b00      	cmp	r3, #0
    39ac:	d000      	beq.n	39b0 <_read_r+0x20>
    39ae:	602b      	str	r3, [r5, #0]
    39b0:	bd70      	pop	{r4, r5, r6, pc}
    39b2:	46c0      	nop			; (mov r8, r8)
    39b4:	200002f0 	.word	0x200002f0

000039b8 <lflush>:
    39b8:	2209      	movs	r2, #9
    39ba:	b510      	push	{r4, lr}
    39bc:	8983      	ldrh	r3, [r0, #12]
    39be:	4013      	ands	r3, r2
    39c0:	2200      	movs	r2, #0
    39c2:	2b09      	cmp	r3, #9
    39c4:	d102      	bne.n	39cc <lflush+0x14>
    39c6:	f7fe fc83 	bl	22d0 <fflush>
    39ca:	0002      	movs	r2, r0
    39cc:	0010      	movs	r0, r2
    39ce:	bd10      	pop	{r4, pc}

000039d0 <__srefill_r>:
    39d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39d2:	0005      	movs	r5, r0
    39d4:	000c      	movs	r4, r1
    39d6:	2800      	cmp	r0, #0
    39d8:	d004      	beq.n	39e4 <__srefill_r+0x14>
    39da:	6983      	ldr	r3, [r0, #24]
    39dc:	2b00      	cmp	r3, #0
    39de:	d101      	bne.n	39e4 <__srefill_r+0x14>
    39e0:	f7fe fccc 	bl	237c <__sinit>
    39e4:	4b3d      	ldr	r3, [pc, #244]	; (3adc <__srefill_r+0x10c>)
    39e6:	429c      	cmp	r4, r3
    39e8:	d10a      	bne.n	3a00 <__srefill_r+0x30>
    39ea:	686c      	ldr	r4, [r5, #4]
    39ec:	2300      	movs	r3, #0
    39ee:	6063      	str	r3, [r4, #4]
    39f0:	230c      	movs	r3, #12
    39f2:	5ee2      	ldrsh	r2, [r4, r3]
    39f4:	b293      	uxth	r3, r2
    39f6:	0699      	lsls	r1, r3, #26
    39f8:	d50c      	bpl.n	3a14 <__srefill_r+0x44>
    39fa:	2001      	movs	r0, #1
    39fc:	4240      	negs	r0, r0
    39fe:	e068      	b.n	3ad2 <__srefill_r+0x102>
    3a00:	4b37      	ldr	r3, [pc, #220]	; (3ae0 <__srefill_r+0x110>)
    3a02:	429c      	cmp	r4, r3
    3a04:	d101      	bne.n	3a0a <__srefill_r+0x3a>
    3a06:	68ac      	ldr	r4, [r5, #8]
    3a08:	e7f0      	b.n	39ec <__srefill_r+0x1c>
    3a0a:	4b36      	ldr	r3, [pc, #216]	; (3ae4 <__srefill_r+0x114>)
    3a0c:	429c      	cmp	r4, r3
    3a0e:	d1ed      	bne.n	39ec <__srefill_r+0x1c>
    3a10:	68ec      	ldr	r4, [r5, #12]
    3a12:	e7eb      	b.n	39ec <__srefill_r+0x1c>
    3a14:	0759      	lsls	r1, r3, #29
    3a16:	d44a      	bmi.n	3aae <__srefill_r+0xde>
    3a18:	06d9      	lsls	r1, r3, #27
    3a1a:	d405      	bmi.n	3a28 <__srefill_r+0x58>
    3a1c:	2309      	movs	r3, #9
    3a1e:	602b      	str	r3, [r5, #0]
    3a20:	3337      	adds	r3, #55	; 0x37
    3a22:	4313      	orrs	r3, r2
    3a24:	81a3      	strh	r3, [r4, #12]
    3a26:	e7e8      	b.n	39fa <__srefill_r+0x2a>
    3a28:	2608      	movs	r6, #8
    3a2a:	4233      	tst	r3, r6
    3a2c:	d00a      	beq.n	3a44 <__srefill_r+0x74>
    3a2e:	0021      	movs	r1, r4
    3a30:	0028      	movs	r0, r5
    3a32:	f7fe fc21 	bl	2278 <_fflush_r>
    3a36:	2800      	cmp	r0, #0
    3a38:	d1df      	bne.n	39fa <__srefill_r+0x2a>
    3a3a:	89a3      	ldrh	r3, [r4, #12]
    3a3c:	60a0      	str	r0, [r4, #8]
    3a3e:	43b3      	bics	r3, r6
    3a40:	81a3      	strh	r3, [r4, #12]
    3a42:	61a0      	str	r0, [r4, #24]
    3a44:	2304      	movs	r3, #4
    3a46:	89a2      	ldrh	r2, [r4, #12]
    3a48:	4313      	orrs	r3, r2
    3a4a:	81a3      	strh	r3, [r4, #12]
    3a4c:	6923      	ldr	r3, [r4, #16]
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d103      	bne.n	3a5a <__srefill_r+0x8a>
    3a52:	0021      	movs	r1, r4
    3a54:	0028      	movs	r0, r5
    3a56:	f7fe fd7f 	bl	2558 <__smakebuf_r>
    3a5a:	230c      	movs	r3, #12
    3a5c:	5ee7      	ldrsh	r7, [r4, r3]
    3a5e:	b2be      	uxth	r6, r7
    3a60:	07b3      	lsls	r3, r6, #30
    3a62:	d00f      	beq.n	3a84 <__srefill_r+0xb4>
    3a64:	2301      	movs	r3, #1
    3a66:	81a3      	strh	r3, [r4, #12]
    3a68:	4b1f      	ldr	r3, [pc, #124]	; (3ae8 <__srefill_r+0x118>)
    3a6a:	4920      	ldr	r1, [pc, #128]	; (3aec <__srefill_r+0x11c>)
    3a6c:	6818      	ldr	r0, [r3, #0]
    3a6e:	f7fe fcf9 	bl	2464 <_fwalk>
    3a72:	2309      	movs	r3, #9
    3a74:	81a7      	strh	r7, [r4, #12]
    3a76:	401e      	ands	r6, r3
    3a78:	429e      	cmp	r6, r3
    3a7a:	d103      	bne.n	3a84 <__srefill_r+0xb4>
    3a7c:	0021      	movs	r1, r4
    3a7e:	0028      	movs	r0, r5
    3a80:	f7fe fb70 	bl	2164 <__sflush_r>
    3a84:	6923      	ldr	r3, [r4, #16]
    3a86:	6922      	ldr	r2, [r4, #16]
    3a88:	6023      	str	r3, [r4, #0]
    3a8a:	0028      	movs	r0, r5
    3a8c:	6963      	ldr	r3, [r4, #20]
    3a8e:	6a21      	ldr	r1, [r4, #32]
    3a90:	6a65      	ldr	r5, [r4, #36]	; 0x24
    3a92:	47a8      	blx	r5
    3a94:	0002      	movs	r2, r0
    3a96:	6060      	str	r0, [r4, #4]
    3a98:	2000      	movs	r0, #0
    3a9a:	4282      	cmp	r2, r0
    3a9c:	dc19      	bgt.n	3ad2 <__srefill_r+0x102>
    3a9e:	89a1      	ldrh	r1, [r4, #12]
    3aa0:	4282      	cmp	r2, r0
    3aa2:	d117      	bne.n	3ad4 <__srefill_r+0x104>
    3aa4:	2320      	movs	r3, #32
    3aa6:	430b      	orrs	r3, r1
    3aa8:	81a3      	strh	r3, [r4, #12]
    3aaa:	3801      	subs	r0, #1
    3aac:	e011      	b.n	3ad2 <__srefill_r+0x102>
    3aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ab0:	2900      	cmp	r1, #0
    3ab2:	d0cb      	beq.n	3a4c <__srefill_r+0x7c>
    3ab4:	0023      	movs	r3, r4
    3ab6:	3344      	adds	r3, #68	; 0x44
    3ab8:	4299      	cmp	r1, r3
    3aba:	d002      	beq.n	3ac2 <__srefill_r+0xf2>
    3abc:	0028      	movs	r0, r5
    3abe:	f7fe fd99 	bl	25f4 <_free_r>
    3ac2:	2000      	movs	r0, #0
    3ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3ac6:	6360      	str	r0, [r4, #52]	; 0x34
    3ac8:	6063      	str	r3, [r4, #4]
    3aca:	4283      	cmp	r3, r0
    3acc:	d0be      	beq.n	3a4c <__srefill_r+0x7c>
    3ace:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3ad0:	6023      	str	r3, [r4, #0]
    3ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ad4:	2340      	movs	r3, #64	; 0x40
    3ad6:	6060      	str	r0, [r4, #4]
    3ad8:	430b      	orrs	r3, r1
    3ada:	e7a3      	b.n	3a24 <__srefill_r+0x54>
    3adc:	000043b8 	.word	0x000043b8
    3ae0:	000043d8 	.word	0x000043d8
    3ae4:	00004398 	.word	0x00004398
    3ae8:	00004394 	.word	0x00004394
    3aec:	000039b9 	.word	0x000039b9

00003af0 <_sbrk_r>:
    3af0:	2300      	movs	r3, #0
    3af2:	b570      	push	{r4, r5, r6, lr}
    3af4:	4c06      	ldr	r4, [pc, #24]	; (3b10 <_sbrk_r+0x20>)
    3af6:	0005      	movs	r5, r0
    3af8:	0008      	movs	r0, r1
    3afa:	6023      	str	r3, [r4, #0]
    3afc:	f7fd fe28 	bl	1750 <_sbrk>
    3b00:	1c43      	adds	r3, r0, #1
    3b02:	d103      	bne.n	3b0c <_sbrk_r+0x1c>
    3b04:	6823      	ldr	r3, [r4, #0]
    3b06:	2b00      	cmp	r3, #0
    3b08:	d000      	beq.n	3b0c <_sbrk_r+0x1c>
    3b0a:	602b      	str	r3, [r5, #0]
    3b0c:	bd70      	pop	{r4, r5, r6, pc}
    3b0e:	46c0      	nop			; (mov r8, r8)
    3b10:	200002f0 	.word	0x200002f0

00003b14 <__sccl>:
    3b14:	b570      	push	{r4, r5, r6, lr}
    3b16:	780b      	ldrb	r3, [r1, #0]
    3b18:	2b5e      	cmp	r3, #94	; 0x5e
    3b1a:	d00d      	beq.n	3b38 <__sccl+0x24>
    3b1c:	1c4a      	adds	r2, r1, #1
    3b1e:	2100      	movs	r1, #0
    3b20:	0004      	movs	r4, r0
    3b22:	1c45      	adds	r5, r0, #1
    3b24:	35ff      	adds	r5, #255	; 0xff
    3b26:	7021      	strb	r1, [r4, #0]
    3b28:	3401      	adds	r4, #1
    3b2a:	42a5      	cmp	r5, r4
    3b2c:	d1fb      	bne.n	3b26 <__sccl+0x12>
    3b2e:	2b00      	cmp	r3, #0
    3b30:	d106      	bne.n	3b40 <__sccl+0x2c>
    3b32:	3a01      	subs	r2, #1
    3b34:	0010      	movs	r0, r2
    3b36:	bd70      	pop	{r4, r5, r6, pc}
    3b38:	1c8a      	adds	r2, r1, #2
    3b3a:	784b      	ldrb	r3, [r1, #1]
    3b3c:	2101      	movs	r1, #1
    3b3e:	e7ef      	b.n	3b20 <__sccl+0xc>
    3b40:	2401      	movs	r4, #1
    3b42:	404c      	eors	r4, r1
    3b44:	0011      	movs	r1, r2
    3b46:	54c4      	strb	r4, [r0, r3]
    3b48:	780d      	ldrb	r5, [r1, #0]
    3b4a:	1c4a      	adds	r2, r1, #1
    3b4c:	2d2d      	cmp	r5, #45	; 0x2d
    3b4e:	d007      	beq.n	3b60 <__sccl+0x4c>
    3b50:	2d5d      	cmp	r5, #93	; 0x5d
    3b52:	d0ef      	beq.n	3b34 <__sccl+0x20>
    3b54:	2d00      	cmp	r5, #0
    3b56:	d101      	bne.n	3b5c <__sccl+0x48>
    3b58:	000a      	movs	r2, r1
    3b5a:	e7eb      	b.n	3b34 <__sccl+0x20>
    3b5c:	002b      	movs	r3, r5
    3b5e:	e7f1      	b.n	3b44 <__sccl+0x30>
    3b60:	784e      	ldrb	r6, [r1, #1]
    3b62:	2e5d      	cmp	r6, #93	; 0x5d
    3b64:	d0fa      	beq.n	3b5c <__sccl+0x48>
    3b66:	42b3      	cmp	r3, r6
    3b68:	dcf8      	bgt.n	3b5c <__sccl+0x48>
    3b6a:	3102      	adds	r1, #2
    3b6c:	3301      	adds	r3, #1
    3b6e:	54c4      	strb	r4, [r0, r3]
    3b70:	429e      	cmp	r6, r3
    3b72:	dcfb      	bgt.n	3b6c <__sccl+0x58>
    3b74:	e7e8      	b.n	3b48 <__sccl+0x34>
	...

00003b78 <_strtol_l.isra.0>:
    3b78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b7a:	001f      	movs	r7, r3
    3b7c:	000e      	movs	r6, r1
    3b7e:	b087      	sub	sp, #28
    3b80:	9005      	str	r0, [sp, #20]
    3b82:	9103      	str	r1, [sp, #12]
    3b84:	9202      	str	r2, [sp, #8]
    3b86:	980c      	ldr	r0, [sp, #48]	; 0x30
    3b88:	7834      	ldrb	r4, [r6, #0]
    3b8a:	f000 f9f7 	bl	3f7c <__locale_ctype_ptr_l>
    3b8e:	2208      	movs	r2, #8
    3b90:	1900      	adds	r0, r0, r4
    3b92:	7843      	ldrb	r3, [r0, #1]
    3b94:	1c75      	adds	r5, r6, #1
    3b96:	4013      	ands	r3, r2
    3b98:	d10c      	bne.n	3bb4 <_strtol_l.isra.0+0x3c>
    3b9a:	2c2d      	cmp	r4, #45	; 0x2d
    3b9c:	d10c      	bne.n	3bb8 <_strtol_l.isra.0+0x40>
    3b9e:	3301      	adds	r3, #1
    3ba0:	782c      	ldrb	r4, [r5, #0]
    3ba2:	9301      	str	r3, [sp, #4]
    3ba4:	1cb5      	adds	r5, r6, #2
    3ba6:	2f00      	cmp	r7, #0
    3ba8:	d00c      	beq.n	3bc4 <_strtol_l.isra.0+0x4c>
    3baa:	2f10      	cmp	r7, #16
    3bac:	d114      	bne.n	3bd8 <_strtol_l.isra.0+0x60>
    3bae:	2c30      	cmp	r4, #48	; 0x30
    3bb0:	d00a      	beq.n	3bc8 <_strtol_l.isra.0+0x50>
    3bb2:	e011      	b.n	3bd8 <_strtol_l.isra.0+0x60>
    3bb4:	002e      	movs	r6, r5
    3bb6:	e7e6      	b.n	3b86 <_strtol_l.isra.0+0xe>
    3bb8:	9301      	str	r3, [sp, #4]
    3bba:	2c2b      	cmp	r4, #43	; 0x2b
    3bbc:	d1f3      	bne.n	3ba6 <_strtol_l.isra.0+0x2e>
    3bbe:	782c      	ldrb	r4, [r5, #0]
    3bc0:	1cb5      	adds	r5, r6, #2
    3bc2:	e7f0      	b.n	3ba6 <_strtol_l.isra.0+0x2e>
    3bc4:	2c30      	cmp	r4, #48	; 0x30
    3bc6:	d12f      	bne.n	3c28 <_strtol_l.isra.0+0xb0>
    3bc8:	2220      	movs	r2, #32
    3bca:	782b      	ldrb	r3, [r5, #0]
    3bcc:	4393      	bics	r3, r2
    3bce:	2b58      	cmp	r3, #88	; 0x58
    3bd0:	d151      	bne.n	3c76 <_strtol_l.isra.0+0xfe>
    3bd2:	2710      	movs	r7, #16
    3bd4:	786c      	ldrb	r4, [r5, #1]
    3bd6:	3502      	adds	r5, #2
    3bd8:	9b01      	ldr	r3, [sp, #4]
    3bda:	4a29      	ldr	r2, [pc, #164]	; (3c80 <_strtol_l.isra.0+0x108>)
    3bdc:	0039      	movs	r1, r7
    3bde:	189e      	adds	r6, r3, r2
    3be0:	0030      	movs	r0, r6
    3be2:	f7fd ff37 	bl	1a54 <__aeabi_uidivmod>
    3be6:	0030      	movs	r0, r6
    3be8:	9104      	str	r1, [sp, #16]
    3bea:	0039      	movs	r1, r7
    3bec:	f7fd feac 	bl	1948 <__udivsi3>
    3bf0:	2101      	movs	r1, #1
    3bf2:	2300      	movs	r3, #0
    3bf4:	4249      	negs	r1, r1
    3bf6:	0002      	movs	r2, r0
    3bf8:	468c      	mov	ip, r1
    3bfa:	0018      	movs	r0, r3
    3bfc:	0021      	movs	r1, r4
    3bfe:	3930      	subs	r1, #48	; 0x30
    3c00:	2909      	cmp	r1, #9
    3c02:	d813      	bhi.n	3c2c <_strtol_l.isra.0+0xb4>
    3c04:	000c      	movs	r4, r1
    3c06:	42a7      	cmp	r7, r4
    3c08:	dd1c      	ble.n	3c44 <_strtol_l.isra.0+0xcc>
    3c0a:	1c59      	adds	r1, r3, #1
    3c0c:	d009      	beq.n	3c22 <_strtol_l.isra.0+0xaa>
    3c0e:	4663      	mov	r3, ip
    3c10:	4282      	cmp	r2, r0
    3c12:	d306      	bcc.n	3c22 <_strtol_l.isra.0+0xaa>
    3c14:	d102      	bne.n	3c1c <_strtol_l.isra.0+0xa4>
    3c16:	9904      	ldr	r1, [sp, #16]
    3c18:	42a1      	cmp	r1, r4
    3c1a:	db02      	blt.n	3c22 <_strtol_l.isra.0+0xaa>
    3c1c:	2301      	movs	r3, #1
    3c1e:	4378      	muls	r0, r7
    3c20:	1820      	adds	r0, r4, r0
    3c22:	782c      	ldrb	r4, [r5, #0]
    3c24:	3501      	adds	r5, #1
    3c26:	e7e9      	b.n	3bfc <_strtol_l.isra.0+0x84>
    3c28:	270a      	movs	r7, #10
    3c2a:	e7d5      	b.n	3bd8 <_strtol_l.isra.0+0x60>
    3c2c:	0021      	movs	r1, r4
    3c2e:	3941      	subs	r1, #65	; 0x41
    3c30:	2919      	cmp	r1, #25
    3c32:	d801      	bhi.n	3c38 <_strtol_l.isra.0+0xc0>
    3c34:	3c37      	subs	r4, #55	; 0x37
    3c36:	e7e6      	b.n	3c06 <_strtol_l.isra.0+0x8e>
    3c38:	0021      	movs	r1, r4
    3c3a:	3961      	subs	r1, #97	; 0x61
    3c3c:	2919      	cmp	r1, #25
    3c3e:	d801      	bhi.n	3c44 <_strtol_l.isra.0+0xcc>
    3c40:	3c57      	subs	r4, #87	; 0x57
    3c42:	e7e0      	b.n	3c06 <_strtol_l.isra.0+0x8e>
    3c44:	1c5a      	adds	r2, r3, #1
    3c46:	d108      	bne.n	3c5a <_strtol_l.isra.0+0xe2>
    3c48:	9a05      	ldr	r2, [sp, #20]
    3c4a:	3323      	adds	r3, #35	; 0x23
    3c4c:	6013      	str	r3, [r2, #0]
    3c4e:	9b02      	ldr	r3, [sp, #8]
    3c50:	0030      	movs	r0, r6
    3c52:	2b00      	cmp	r3, #0
    3c54:	d10b      	bne.n	3c6e <_strtol_l.isra.0+0xf6>
    3c56:	b007      	add	sp, #28
    3c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c5a:	9a01      	ldr	r2, [sp, #4]
    3c5c:	2a00      	cmp	r2, #0
    3c5e:	d000      	beq.n	3c62 <_strtol_l.isra.0+0xea>
    3c60:	4240      	negs	r0, r0
    3c62:	9a02      	ldr	r2, [sp, #8]
    3c64:	2a00      	cmp	r2, #0
    3c66:	d0f6      	beq.n	3c56 <_strtol_l.isra.0+0xde>
    3c68:	9a03      	ldr	r2, [sp, #12]
    3c6a:	2b00      	cmp	r3, #0
    3c6c:	d000      	beq.n	3c70 <_strtol_l.isra.0+0xf8>
    3c6e:	1e6a      	subs	r2, r5, #1
    3c70:	9b02      	ldr	r3, [sp, #8]
    3c72:	601a      	str	r2, [r3, #0]
    3c74:	e7ef      	b.n	3c56 <_strtol_l.isra.0+0xde>
    3c76:	2430      	movs	r4, #48	; 0x30
    3c78:	2f00      	cmp	r7, #0
    3c7a:	d1ad      	bne.n	3bd8 <_strtol_l.isra.0+0x60>
    3c7c:	3708      	adds	r7, #8
    3c7e:	e7ab      	b.n	3bd8 <_strtol_l.isra.0+0x60>
    3c80:	7fffffff 	.word	0x7fffffff

00003c84 <_strtol_r>:
    3c84:	b513      	push	{r0, r1, r4, lr}
    3c86:	4c05      	ldr	r4, [pc, #20]	; (3c9c <_strtol_r+0x18>)
    3c88:	6824      	ldr	r4, [r4, #0]
    3c8a:	6a24      	ldr	r4, [r4, #32]
    3c8c:	2c00      	cmp	r4, #0
    3c8e:	d100      	bne.n	3c92 <_strtol_r+0xe>
    3c90:	4c03      	ldr	r4, [pc, #12]	; (3ca0 <_strtol_r+0x1c>)
    3c92:	9400      	str	r4, [sp, #0]
    3c94:	f7ff ff70 	bl	3b78 <_strtol_l.isra.0>
    3c98:	bd16      	pop	{r1, r2, r4, pc}
    3c9a:	46c0      	nop			; (mov r8, r8)
    3c9c:	2000000c 	.word	0x2000000c
    3ca0:	20000070 	.word	0x20000070

00003ca4 <_strtoul_l.isra.0>:
    3ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca6:	001f      	movs	r7, r3
    3ca8:	000e      	movs	r6, r1
    3caa:	b087      	sub	sp, #28
    3cac:	9005      	str	r0, [sp, #20]
    3cae:	9103      	str	r1, [sp, #12]
    3cb0:	9201      	str	r2, [sp, #4]
    3cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
    3cb4:	7834      	ldrb	r4, [r6, #0]
    3cb6:	f000 f961 	bl	3f7c <__locale_ctype_ptr_l>
    3cba:	2208      	movs	r2, #8
    3cbc:	1900      	adds	r0, r0, r4
    3cbe:	7843      	ldrb	r3, [r0, #1]
    3cc0:	1c75      	adds	r5, r6, #1
    3cc2:	4013      	ands	r3, r2
    3cc4:	d10c      	bne.n	3ce0 <_strtoul_l.isra.0+0x3c>
    3cc6:	2c2d      	cmp	r4, #45	; 0x2d
    3cc8:	d10c      	bne.n	3ce4 <_strtoul_l.isra.0+0x40>
    3cca:	3301      	adds	r3, #1
    3ccc:	782c      	ldrb	r4, [r5, #0]
    3cce:	9302      	str	r3, [sp, #8]
    3cd0:	1cb5      	adds	r5, r6, #2
    3cd2:	2f00      	cmp	r7, #0
    3cd4:	d00c      	beq.n	3cf0 <_strtoul_l.isra.0+0x4c>
    3cd6:	2f10      	cmp	r7, #16
    3cd8:	d114      	bne.n	3d04 <_strtoul_l.isra.0+0x60>
    3cda:	2c30      	cmp	r4, #48	; 0x30
    3cdc:	d00a      	beq.n	3cf4 <_strtoul_l.isra.0+0x50>
    3cde:	e011      	b.n	3d04 <_strtoul_l.isra.0+0x60>
    3ce0:	002e      	movs	r6, r5
    3ce2:	e7e6      	b.n	3cb2 <_strtoul_l.isra.0+0xe>
    3ce4:	9302      	str	r3, [sp, #8]
    3ce6:	2c2b      	cmp	r4, #43	; 0x2b
    3ce8:	d1f3      	bne.n	3cd2 <_strtoul_l.isra.0+0x2e>
    3cea:	782c      	ldrb	r4, [r5, #0]
    3cec:	1cb5      	adds	r5, r6, #2
    3cee:	e7f0      	b.n	3cd2 <_strtoul_l.isra.0+0x2e>
    3cf0:	2c30      	cmp	r4, #48	; 0x30
    3cf2:	d12f      	bne.n	3d54 <_strtoul_l.isra.0+0xb0>
    3cf4:	2220      	movs	r2, #32
    3cf6:	782b      	ldrb	r3, [r5, #0]
    3cf8:	4393      	bics	r3, r2
    3cfa:	2b58      	cmp	r3, #88	; 0x58
    3cfc:	d154      	bne.n	3da8 <_strtoul_l.isra.0+0x104>
    3cfe:	2710      	movs	r7, #16
    3d00:	786c      	ldrb	r4, [r5, #1]
    3d02:	3502      	adds	r5, #2
    3d04:	2001      	movs	r0, #1
    3d06:	0039      	movs	r1, r7
    3d08:	4240      	negs	r0, r0
    3d0a:	f7fd fe1d 	bl	1948 <__udivsi3>
    3d0e:	0006      	movs	r6, r0
    3d10:	2001      	movs	r0, #1
    3d12:	0039      	movs	r1, r7
    3d14:	4240      	negs	r0, r0
    3d16:	f7fd fe9d 	bl	1a54 <__aeabi_uidivmod>
    3d1a:	2300      	movs	r3, #0
    3d1c:	9104      	str	r1, [sp, #16]
    3d1e:	2101      	movs	r1, #1
    3d20:	2201      	movs	r2, #1
    3d22:	0018      	movs	r0, r3
    3d24:	468c      	mov	ip, r1
    3d26:	4252      	negs	r2, r2
    3d28:	0021      	movs	r1, r4
    3d2a:	3930      	subs	r1, #48	; 0x30
    3d2c:	2909      	cmp	r1, #9
    3d2e:	d813      	bhi.n	3d58 <_strtoul_l.isra.0+0xb4>
    3d30:	000c      	movs	r4, r1
    3d32:	42a7      	cmp	r7, r4
    3d34:	dd1e      	ble.n	3d74 <_strtoul_l.isra.0+0xd0>
    3d36:	2b00      	cmp	r3, #0
    3d38:	db1a      	blt.n	3d70 <_strtoul_l.isra.0+0xcc>
    3d3a:	0013      	movs	r3, r2
    3d3c:	4286      	cmp	r6, r0
    3d3e:	d306      	bcc.n	3d4e <_strtoul_l.isra.0+0xaa>
    3d40:	d102      	bne.n	3d48 <_strtoul_l.isra.0+0xa4>
    3d42:	9904      	ldr	r1, [sp, #16]
    3d44:	42a1      	cmp	r1, r4
    3d46:	db02      	blt.n	3d4e <_strtoul_l.isra.0+0xaa>
    3d48:	4663      	mov	r3, ip
    3d4a:	4378      	muls	r0, r7
    3d4c:	1820      	adds	r0, r4, r0
    3d4e:	782c      	ldrb	r4, [r5, #0]
    3d50:	3501      	adds	r5, #1
    3d52:	e7e9      	b.n	3d28 <_strtoul_l.isra.0+0x84>
    3d54:	270a      	movs	r7, #10
    3d56:	e7d5      	b.n	3d04 <_strtoul_l.isra.0+0x60>
    3d58:	0021      	movs	r1, r4
    3d5a:	3941      	subs	r1, #65	; 0x41
    3d5c:	2919      	cmp	r1, #25
    3d5e:	d801      	bhi.n	3d64 <_strtoul_l.isra.0+0xc0>
    3d60:	3c37      	subs	r4, #55	; 0x37
    3d62:	e7e6      	b.n	3d32 <_strtoul_l.isra.0+0x8e>
    3d64:	0021      	movs	r1, r4
    3d66:	3961      	subs	r1, #97	; 0x61
    3d68:	2919      	cmp	r1, #25
    3d6a:	d803      	bhi.n	3d74 <_strtoul_l.isra.0+0xd0>
    3d6c:	3c57      	subs	r4, #87	; 0x57
    3d6e:	e7e0      	b.n	3d32 <_strtoul_l.isra.0+0x8e>
    3d70:	0013      	movs	r3, r2
    3d72:	e7ec      	b.n	3d4e <_strtoul_l.isra.0+0xaa>
    3d74:	2b00      	cmp	r3, #0
    3d76:	da09      	bge.n	3d8c <_strtoul_l.isra.0+0xe8>
    3d78:	2322      	movs	r3, #34	; 0x22
    3d7a:	2001      	movs	r0, #1
    3d7c:	9a05      	ldr	r2, [sp, #20]
    3d7e:	4240      	negs	r0, r0
    3d80:	6013      	str	r3, [r2, #0]
    3d82:	9b01      	ldr	r3, [sp, #4]
    3d84:	2b00      	cmp	r3, #0
    3d86:	d10b      	bne.n	3da0 <_strtoul_l.isra.0+0xfc>
    3d88:	b007      	add	sp, #28
    3d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d8c:	9a02      	ldr	r2, [sp, #8]
    3d8e:	2a00      	cmp	r2, #0
    3d90:	d000      	beq.n	3d94 <_strtoul_l.isra.0+0xf0>
    3d92:	4240      	negs	r0, r0
    3d94:	9a01      	ldr	r2, [sp, #4]
    3d96:	2a00      	cmp	r2, #0
    3d98:	d0f6      	beq.n	3d88 <_strtoul_l.isra.0+0xe4>
    3d9a:	9a03      	ldr	r2, [sp, #12]
    3d9c:	2b00      	cmp	r3, #0
    3d9e:	d000      	beq.n	3da2 <_strtoul_l.isra.0+0xfe>
    3da0:	1e6a      	subs	r2, r5, #1
    3da2:	9b01      	ldr	r3, [sp, #4]
    3da4:	601a      	str	r2, [r3, #0]
    3da6:	e7ef      	b.n	3d88 <_strtoul_l.isra.0+0xe4>
    3da8:	2430      	movs	r4, #48	; 0x30
    3daa:	2f00      	cmp	r7, #0
    3dac:	d1aa      	bne.n	3d04 <_strtoul_l.isra.0+0x60>
    3dae:	3708      	adds	r7, #8
    3db0:	e7a8      	b.n	3d04 <_strtoul_l.isra.0+0x60>
	...

00003db4 <_strtoul_r>:
    3db4:	b513      	push	{r0, r1, r4, lr}
    3db6:	4c05      	ldr	r4, [pc, #20]	; (3dcc <_strtoul_r+0x18>)
    3db8:	6824      	ldr	r4, [r4, #0]
    3dba:	6a24      	ldr	r4, [r4, #32]
    3dbc:	2c00      	cmp	r4, #0
    3dbe:	d100      	bne.n	3dc2 <_strtoul_r+0xe>
    3dc0:	4c03      	ldr	r4, [pc, #12]	; (3dd0 <_strtoul_r+0x1c>)
    3dc2:	9400      	str	r4, [sp, #0]
    3dc4:	f7ff ff6e 	bl	3ca4 <_strtoul_l.isra.0>
    3dc8:	bd16      	pop	{r1, r2, r4, pc}
    3dca:	46c0      	nop			; (mov r8, r8)
    3dcc:	2000000c 	.word	0x2000000c
    3dd0:	20000070 	.word	0x20000070

00003dd4 <__submore>:
    3dd4:	000b      	movs	r3, r1
    3dd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3dd8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
    3dda:	3344      	adds	r3, #68	; 0x44
    3ddc:	000c      	movs	r4, r1
    3dde:	429d      	cmp	r5, r3
    3de0:	d11c      	bne.n	3e1c <__submore+0x48>
    3de2:	2680      	movs	r6, #128	; 0x80
    3de4:	00f6      	lsls	r6, r6, #3
    3de6:	0031      	movs	r1, r6
    3de8:	f7fe fc4e 	bl	2688 <_malloc_r>
    3dec:	2800      	cmp	r0, #0
    3dee:	d102      	bne.n	3df6 <__submore+0x22>
    3df0:	2001      	movs	r0, #1
    3df2:	4240      	negs	r0, r0
    3df4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3df6:	0023      	movs	r3, r4
    3df8:	6360      	str	r0, [r4, #52]	; 0x34
    3dfa:	63a6      	str	r6, [r4, #56]	; 0x38
    3dfc:	3346      	adds	r3, #70	; 0x46
    3dfe:	781a      	ldrb	r2, [r3, #0]
    3e00:	4b10      	ldr	r3, [pc, #64]	; (3e44 <__submore+0x70>)
    3e02:	54c2      	strb	r2, [r0, r3]
    3e04:	0023      	movs	r3, r4
    3e06:	3345      	adds	r3, #69	; 0x45
    3e08:	781a      	ldrb	r2, [r3, #0]
    3e0a:	4b0f      	ldr	r3, [pc, #60]	; (3e48 <__submore+0x74>)
    3e0c:	54c2      	strb	r2, [r0, r3]
    3e0e:	782a      	ldrb	r2, [r5, #0]
    3e10:	4b0e      	ldr	r3, [pc, #56]	; (3e4c <__submore+0x78>)
    3e12:	54c2      	strb	r2, [r0, r3]
    3e14:	18c0      	adds	r0, r0, r3
    3e16:	6020      	str	r0, [r4, #0]
    3e18:	2000      	movs	r0, #0
    3e1a:	e7eb      	b.n	3df4 <__submore+0x20>
    3e1c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
    3e1e:	0029      	movs	r1, r5
    3e20:	0073      	lsls	r3, r6, #1
    3e22:	001a      	movs	r2, r3
    3e24:	9301      	str	r3, [sp, #4]
    3e26:	f000 f8f5 	bl	4014 <_realloc_r>
    3e2a:	1e05      	subs	r5, r0, #0
    3e2c:	d0e0      	beq.n	3df0 <__submore+0x1c>
    3e2e:	1987      	adds	r7, r0, r6
    3e30:	0001      	movs	r1, r0
    3e32:	0032      	movs	r2, r6
    3e34:	0038      	movs	r0, r7
    3e36:	f000 f8d0 	bl	3fda <memcpy>
    3e3a:	9b01      	ldr	r3, [sp, #4]
    3e3c:	6027      	str	r7, [r4, #0]
    3e3e:	6365      	str	r5, [r4, #52]	; 0x34
    3e40:	63a3      	str	r3, [r4, #56]	; 0x38
    3e42:	e7e9      	b.n	3e18 <__submore+0x44>
    3e44:	000003ff 	.word	0x000003ff
    3e48:	000003fe 	.word	0x000003fe
    3e4c:	000003fd 	.word	0x000003fd

00003e50 <_ungetc_r>:
    3e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e52:	0005      	movs	r5, r0
    3e54:	000e      	movs	r6, r1
    3e56:	0014      	movs	r4, r2
    3e58:	1c4b      	adds	r3, r1, #1
    3e5a:	d103      	bne.n	3e64 <_ungetc_r+0x14>
    3e5c:	2601      	movs	r6, #1
    3e5e:	4276      	negs	r6, r6
    3e60:	0030      	movs	r0, r6
    3e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e64:	2800      	cmp	r0, #0
    3e66:	d004      	beq.n	3e72 <_ungetc_r+0x22>
    3e68:	6983      	ldr	r3, [r0, #24]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d101      	bne.n	3e72 <_ungetc_r+0x22>
    3e6e:	f7fe fa85 	bl	237c <__sinit>
    3e72:	4b2d      	ldr	r3, [pc, #180]	; (3f28 <_ungetc_r+0xd8>)
    3e74:	429c      	cmp	r4, r3
    3e76:	d12d      	bne.n	3ed4 <_ungetc_r+0x84>
    3e78:	686c      	ldr	r4, [r5, #4]
    3e7a:	2220      	movs	r2, #32
    3e7c:	89a3      	ldrh	r3, [r4, #12]
    3e7e:	4393      	bics	r3, r2
    3e80:	b21b      	sxth	r3, r3
    3e82:	81a3      	strh	r3, [r4, #12]
    3e84:	b29b      	uxth	r3, r3
    3e86:	075a      	lsls	r2, r3, #29
    3e88:	d413      	bmi.n	3eb2 <_ungetc_r+0x62>
    3e8a:	06da      	lsls	r2, r3, #27
    3e8c:	d5e6      	bpl.n	3e5c <_ungetc_r+0xc>
    3e8e:	2708      	movs	r7, #8
    3e90:	423b      	tst	r3, r7
    3e92:	d00a      	beq.n	3eaa <_ungetc_r+0x5a>
    3e94:	0021      	movs	r1, r4
    3e96:	0028      	movs	r0, r5
    3e98:	f7fe f9ee 	bl	2278 <_fflush_r>
    3e9c:	2800      	cmp	r0, #0
    3e9e:	d1dd      	bne.n	3e5c <_ungetc_r+0xc>
    3ea0:	89a3      	ldrh	r3, [r4, #12]
    3ea2:	60a0      	str	r0, [r4, #8]
    3ea4:	43bb      	bics	r3, r7
    3ea6:	81a3      	strh	r3, [r4, #12]
    3ea8:	61a0      	str	r0, [r4, #24]
    3eaa:	2304      	movs	r3, #4
    3eac:	89a2      	ldrh	r2, [r4, #12]
    3eae:	4313      	orrs	r3, r2
    3eb0:	81a3      	strh	r3, [r4, #12]
    3eb2:	6b62      	ldr	r2, [r4, #52]	; 0x34
    3eb4:	b2f7      	uxtb	r7, r6
    3eb6:	6863      	ldr	r3, [r4, #4]
    3eb8:	b2f6      	uxtb	r6, r6
    3eba:	2a00      	cmp	r2, #0
    3ebc:	d01b      	beq.n	3ef6 <_ungetc_r+0xa6>
    3ebe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3ec0:	4293      	cmp	r3, r2
    3ec2:	da11      	bge.n	3ee8 <_ungetc_r+0x98>
    3ec4:	6823      	ldr	r3, [r4, #0]
    3ec6:	3b01      	subs	r3, #1
    3ec8:	6023      	str	r3, [r4, #0]
    3eca:	701f      	strb	r7, [r3, #0]
    3ecc:	6863      	ldr	r3, [r4, #4]
    3ece:	3301      	adds	r3, #1
    3ed0:	6063      	str	r3, [r4, #4]
    3ed2:	e7c5      	b.n	3e60 <_ungetc_r+0x10>
    3ed4:	4b15      	ldr	r3, [pc, #84]	; (3f2c <_ungetc_r+0xdc>)
    3ed6:	429c      	cmp	r4, r3
    3ed8:	d101      	bne.n	3ede <_ungetc_r+0x8e>
    3eda:	68ac      	ldr	r4, [r5, #8]
    3edc:	e7cd      	b.n	3e7a <_ungetc_r+0x2a>
    3ede:	4b14      	ldr	r3, [pc, #80]	; (3f30 <_ungetc_r+0xe0>)
    3ee0:	429c      	cmp	r4, r3
    3ee2:	d1ca      	bne.n	3e7a <_ungetc_r+0x2a>
    3ee4:	68ec      	ldr	r4, [r5, #12]
    3ee6:	e7c8      	b.n	3e7a <_ungetc_r+0x2a>
    3ee8:	0021      	movs	r1, r4
    3eea:	0028      	movs	r0, r5
    3eec:	f7ff ff72 	bl	3dd4 <__submore>
    3ef0:	2800      	cmp	r0, #0
    3ef2:	d0e7      	beq.n	3ec4 <_ungetc_r+0x74>
    3ef4:	e7b2      	b.n	3e5c <_ungetc_r+0xc>
    3ef6:	6921      	ldr	r1, [r4, #16]
    3ef8:	6822      	ldr	r2, [r4, #0]
    3efa:	2900      	cmp	r1, #0
    3efc:	d007      	beq.n	3f0e <_ungetc_r+0xbe>
    3efe:	4291      	cmp	r1, r2
    3f00:	d205      	bcs.n	3f0e <_ungetc_r+0xbe>
    3f02:	1e51      	subs	r1, r2, #1
    3f04:	7808      	ldrb	r0, [r1, #0]
    3f06:	4286      	cmp	r6, r0
    3f08:	d101      	bne.n	3f0e <_ungetc_r+0xbe>
    3f0a:	6021      	str	r1, [r4, #0]
    3f0c:	e7df      	b.n	3ece <_ungetc_r+0x7e>
    3f0e:	6423      	str	r3, [r4, #64]	; 0x40
    3f10:	0023      	movs	r3, r4
    3f12:	3344      	adds	r3, #68	; 0x44
    3f14:	6363      	str	r3, [r4, #52]	; 0x34
    3f16:	2303      	movs	r3, #3
    3f18:	63a3      	str	r3, [r4, #56]	; 0x38
    3f1a:	0023      	movs	r3, r4
    3f1c:	3346      	adds	r3, #70	; 0x46
    3f1e:	63e2      	str	r2, [r4, #60]	; 0x3c
    3f20:	701f      	strb	r7, [r3, #0]
    3f22:	6023      	str	r3, [r4, #0]
    3f24:	2301      	movs	r3, #1
    3f26:	e7d3      	b.n	3ed0 <_ungetc_r+0x80>
    3f28:	000043b8 	.word	0x000043b8
    3f2c:	000043d8 	.word	0x000043d8
    3f30:	00004398 	.word	0x00004398

00003f34 <_fstat_r>:
    3f34:	2300      	movs	r3, #0
    3f36:	b570      	push	{r4, r5, r6, lr}
    3f38:	4c06      	ldr	r4, [pc, #24]	; (3f54 <_fstat_r+0x20>)
    3f3a:	0005      	movs	r5, r0
    3f3c:	0008      	movs	r0, r1
    3f3e:	0011      	movs	r1, r2
    3f40:	6023      	str	r3, [r4, #0]
    3f42:	f7fd fc1a 	bl	177a <_fstat>
    3f46:	1c43      	adds	r3, r0, #1
    3f48:	d103      	bne.n	3f52 <_fstat_r+0x1e>
    3f4a:	6823      	ldr	r3, [r4, #0]
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d000      	beq.n	3f52 <_fstat_r+0x1e>
    3f50:	602b      	str	r3, [r5, #0]
    3f52:	bd70      	pop	{r4, r5, r6, pc}
    3f54:	200002f0 	.word	0x200002f0

00003f58 <_isatty_r>:
    3f58:	2300      	movs	r3, #0
    3f5a:	b570      	push	{r4, r5, r6, lr}
    3f5c:	4c06      	ldr	r4, [pc, #24]	; (3f78 <_isatty_r+0x20>)
    3f5e:	0005      	movs	r5, r0
    3f60:	0008      	movs	r0, r1
    3f62:	6023      	str	r3, [r4, #0]
    3f64:	f7fd fc0e 	bl	1784 <_isatty>
    3f68:	1c43      	adds	r3, r0, #1
    3f6a:	d103      	bne.n	3f74 <_isatty_r+0x1c>
    3f6c:	6823      	ldr	r3, [r4, #0]
    3f6e:	2b00      	cmp	r3, #0
    3f70:	d000      	beq.n	3f74 <_isatty_r+0x1c>
    3f72:	602b      	str	r3, [r5, #0]
    3f74:	bd70      	pop	{r4, r5, r6, pc}
    3f76:	46c0      	nop			; (mov r8, r8)
    3f78:	200002f0 	.word	0x200002f0

00003f7c <__locale_ctype_ptr_l>:
    3f7c:	30ec      	adds	r0, #236	; 0xec
    3f7e:	6800      	ldr	r0, [r0, #0]
    3f80:	4770      	bx	lr
	...

00003f84 <__locale_ctype_ptr>:
    3f84:	4b04      	ldr	r3, [pc, #16]	; (3f98 <__locale_ctype_ptr+0x14>)
    3f86:	681b      	ldr	r3, [r3, #0]
    3f88:	6a1b      	ldr	r3, [r3, #32]
    3f8a:	2b00      	cmp	r3, #0
    3f8c:	d100      	bne.n	3f90 <__locale_ctype_ptr+0xc>
    3f8e:	4b03      	ldr	r3, [pc, #12]	; (3f9c <__locale_ctype_ptr+0x18>)
    3f90:	33ec      	adds	r3, #236	; 0xec
    3f92:	6818      	ldr	r0, [r3, #0]
    3f94:	4770      	bx	lr
    3f96:	46c0      	nop			; (mov r8, r8)
    3f98:	2000000c 	.word	0x2000000c
    3f9c:	20000070 	.word	0x20000070

00003fa0 <__ascii_mbtowc>:
    3fa0:	b082      	sub	sp, #8
    3fa2:	2900      	cmp	r1, #0
    3fa4:	d100      	bne.n	3fa8 <__ascii_mbtowc+0x8>
    3fa6:	a901      	add	r1, sp, #4
    3fa8:	1e10      	subs	r0, r2, #0
    3faa:	d006      	beq.n	3fba <__ascii_mbtowc+0x1a>
    3fac:	2b00      	cmp	r3, #0
    3fae:	d006      	beq.n	3fbe <__ascii_mbtowc+0x1e>
    3fb0:	7813      	ldrb	r3, [r2, #0]
    3fb2:	600b      	str	r3, [r1, #0]
    3fb4:	7810      	ldrb	r0, [r2, #0]
    3fb6:	1e43      	subs	r3, r0, #1
    3fb8:	4198      	sbcs	r0, r3
    3fba:	b002      	add	sp, #8
    3fbc:	4770      	bx	lr
    3fbe:	2002      	movs	r0, #2
    3fc0:	4240      	negs	r0, r0
    3fc2:	e7fa      	b.n	3fba <__ascii_mbtowc+0x1a>

00003fc4 <memchr>:
    3fc4:	b2c9      	uxtb	r1, r1
    3fc6:	1882      	adds	r2, r0, r2
    3fc8:	4290      	cmp	r0, r2
    3fca:	d101      	bne.n	3fd0 <memchr+0xc>
    3fcc:	2000      	movs	r0, #0
    3fce:	4770      	bx	lr
    3fd0:	7803      	ldrb	r3, [r0, #0]
    3fd2:	428b      	cmp	r3, r1
    3fd4:	d0fb      	beq.n	3fce <memchr+0xa>
    3fd6:	3001      	adds	r0, #1
    3fd8:	e7f6      	b.n	3fc8 <memchr+0x4>

00003fda <memcpy>:
    3fda:	2300      	movs	r3, #0
    3fdc:	b510      	push	{r4, lr}
    3fde:	429a      	cmp	r2, r3
    3fe0:	d100      	bne.n	3fe4 <memcpy+0xa>
    3fe2:	bd10      	pop	{r4, pc}
    3fe4:	5ccc      	ldrb	r4, [r1, r3]
    3fe6:	54c4      	strb	r4, [r0, r3]
    3fe8:	3301      	adds	r3, #1
    3fea:	e7f8      	b.n	3fde <memcpy+0x4>

00003fec <memmove>:
    3fec:	b510      	push	{r4, lr}
    3fee:	4288      	cmp	r0, r1
    3ff0:	d902      	bls.n	3ff8 <memmove+0xc>
    3ff2:	188b      	adds	r3, r1, r2
    3ff4:	4298      	cmp	r0, r3
    3ff6:	d308      	bcc.n	400a <memmove+0x1e>
    3ff8:	2300      	movs	r3, #0
    3ffa:	429a      	cmp	r2, r3
    3ffc:	d007      	beq.n	400e <memmove+0x22>
    3ffe:	5ccc      	ldrb	r4, [r1, r3]
    4000:	54c4      	strb	r4, [r0, r3]
    4002:	3301      	adds	r3, #1
    4004:	e7f9      	b.n	3ffa <memmove+0xe>
    4006:	5c8b      	ldrb	r3, [r1, r2]
    4008:	5483      	strb	r3, [r0, r2]
    400a:	3a01      	subs	r2, #1
    400c:	d2fb      	bcs.n	4006 <memmove+0x1a>
    400e:	bd10      	pop	{r4, pc}

00004010 <__malloc_lock>:
    4010:	4770      	bx	lr

00004012 <__malloc_unlock>:
    4012:	4770      	bx	lr

00004014 <_realloc_r>:
    4014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4016:	0007      	movs	r7, r0
    4018:	000d      	movs	r5, r1
    401a:	0016      	movs	r6, r2
    401c:	2900      	cmp	r1, #0
    401e:	d105      	bne.n	402c <_realloc_r+0x18>
    4020:	0011      	movs	r1, r2
    4022:	f7fe fb31 	bl	2688 <_malloc_r>
    4026:	0004      	movs	r4, r0
    4028:	0020      	movs	r0, r4
    402a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    402c:	2a00      	cmp	r2, #0
    402e:	d103      	bne.n	4038 <_realloc_r+0x24>
    4030:	f7fe fae0 	bl	25f4 <_free_r>
    4034:	0034      	movs	r4, r6
    4036:	e7f7      	b.n	4028 <_realloc_r+0x14>
    4038:	f000 f81e 	bl	4078 <_malloc_usable_size_r>
    403c:	002c      	movs	r4, r5
    403e:	4286      	cmp	r6, r0
    4040:	d9f2      	bls.n	4028 <_realloc_r+0x14>
    4042:	0031      	movs	r1, r6
    4044:	0038      	movs	r0, r7
    4046:	f7fe fb1f 	bl	2688 <_malloc_r>
    404a:	1e04      	subs	r4, r0, #0
    404c:	d0ec      	beq.n	4028 <_realloc_r+0x14>
    404e:	0029      	movs	r1, r5
    4050:	0032      	movs	r2, r6
    4052:	f7ff ffc2 	bl	3fda <memcpy>
    4056:	0029      	movs	r1, r5
    4058:	0038      	movs	r0, r7
    405a:	f7fe facb 	bl	25f4 <_free_r>
    405e:	e7e3      	b.n	4028 <_realloc_r+0x14>

00004060 <__ascii_wctomb>:
    4060:	1e0b      	subs	r3, r1, #0
    4062:	d004      	beq.n	406e <__ascii_wctomb+0xe>
    4064:	2aff      	cmp	r2, #255	; 0xff
    4066:	d904      	bls.n	4072 <__ascii_wctomb+0x12>
    4068:	238a      	movs	r3, #138	; 0x8a
    406a:	6003      	str	r3, [r0, #0]
    406c:	3b8b      	subs	r3, #139	; 0x8b
    406e:	0018      	movs	r0, r3
    4070:	4770      	bx	lr
    4072:	700a      	strb	r2, [r1, #0]
    4074:	2301      	movs	r3, #1
    4076:	e7fa      	b.n	406e <__ascii_wctomb+0xe>

00004078 <_malloc_usable_size_r>:
    4078:	1f0b      	subs	r3, r1, #4
    407a:	681b      	ldr	r3, [r3, #0]
    407c:	1f18      	subs	r0, r3, #4
    407e:	2b00      	cmp	r3, #0
    4080:	da01      	bge.n	4086 <_malloc_usable_size_r+0xe>
    4082:	580b      	ldr	r3, [r1, r0]
    4084:	18c0      	adds	r0, r0, r3
    4086:	4770      	bx	lr
    4088:	41202d2d 	.word	0x41202d2d
    408c:	74756f62 	.word	0x74756f62
    4090:	0d2d2d20 	.word	0x0d2d2d20
    4094:	00000000 	.word	0x00000000
    4098:	6a6f7250 	.word	0x6a6f7250
    409c:	3a746365 	.word	0x3a746365
    40a0:	00000d20 	.word	0x00000d20
    40a4:	73726556 	.word	0x73726556
    40a8:	3a6e6f69 	.word	0x3a6e6f69
    40ac:	302e3120 	.word	0x302e3120
    40b0:	000d302e 	.word	0x000d302e
    40b4:	68747541 	.word	0x68747541
    40b8:	203a726f 	.word	0x203a726f
    40bc:	0000000d 	.word	0x0000000d
    40c0:	65746144 	.word	0x65746144
    40c4:	000d203a 	.word	0x000d203a
    40c8:	65726f4d 	.word	0x65726f4d
    40cc:	666e4920 	.word	0x666e4920
    40d0:	0d203a6f 	.word	0x0d203a6f
    40d4:	00000000 	.word	0x00000000
    40d8:	64726148 	.word	0x64726148
    40dc:	65726177 	.word	0x65726177
    40e0:	0000000d 	.word	0x0000000d
    40e4:	694d2020 	.word	0x694d2020
    40e8:	706f7263 	.word	0x706f7263
    40ec:	65636f72 	.word	0x65636f72
    40f0:	726f7373 	.word	0x726f7373
    40f4:	4153203a 	.word	0x4153203a
    40f8:	31324c4d 	.word	0x31324c4d
    40fc:	4238314a 	.word	0x4238314a
    4100:	0000000d 	.word	0x0000000d
    4104:	4d502020 	.word	0x4d502020
    4108:	4c2f4349 	.word	0x4c2f4349
    410c:	203a4f44 	.word	0x203a4f44
    4110:	35325142 	.word	0x35325142
    4114:	0d353531 	.word	0x0d353531
    4118:	00000000 	.word	0x00000000
    411c:	63412020 	.word	0x63412020
    4120:	656c6563 	.word	0x656c6563
    4124:	656d6f72 	.word	0x656d6f72
    4128:	3a726574 	.word	0x3a726574
    412c:	4c334820 	.word	0x4c334820
    4130:	30325349 	.word	0x30325349
    4134:	544c4430 	.word	0x544c4430
    4138:	00000d52 	.word	0x00000d52
    413c:	63532020 	.word	0x63532020
    4140:	6e656572 	.word	0x6e656572
    4144:	4956203a 	.word	0x4956203a
    4148:	3132332d 	.word	0x3132332d
    414c:	2d50442d 	.word	0x2d50442d
    4150:	532d4352 	.word	0x532d4352
    4154:	0000000d 	.word	0x0000000d
    4158:	61422020 	.word	0x61422020
    415c:	72657474 	.word	0x72657474
    4160:	35203a79 	.word	0x35203a79
    4164:	33353230 	.word	0x33353230
    4168:	30342035 	.word	0x30342035
    416c:	68416d30 	.word	0x68416d30
    4170:	70532820 	.word	0x70532820
    4174:	666b7261 	.word	0x666b7261
    4178:	312f6e75 	.word	0x312f6e75
    417c:	31353833 	.word	0x31353833
    4180:	00000d29 	.word	0x00000d29
    4184:	48202d2d 	.word	0x48202d2d
    4188:	20706c65 	.word	0x20706c65
    418c:	756e654d 	.word	0x756e654d
    4190:	0d2d2d20 	.word	0x0d2d2d20
    4194:	00000000 	.word	0x00000000
    4198:	65746f4e 	.word	0x65746f4e
    419c:	6554203a 	.word	0x6554203a
    41a0:	6e696d72 	.word	0x6e696d72
    41a4:	20657461 	.word	0x20657461
    41a8:	72657375 	.word	0x72657375
    41ac:	6d6f6320 	.word	0x6d6f6320
    41b0:	646e616d 	.word	0x646e616d
    41b4:	69772073 	.word	0x69772073
    41b8:	6e206874 	.word	0x6e206874
    41bc:	6c207765 	.word	0x6c207765
    41c0:	20656e69 	.word	0x20656e69
    41c4:	72616863 	.word	0x72616863
    41c8:	65746361 	.word	0x65746361
    41cc:	00000d72 	.word	0x00000d72
    41d0:	202d2068 	.word	0x202d2068
    41d4:	6e697250 	.word	0x6e697250
    41d8:	68742074 	.word	0x68742074
    41dc:	6d207369 	.word	0x6d207369
    41e0:	0d756e65 	.word	0x0d756e65
    41e4:	00000000 	.word	0x00000000
    41e8:	202d2061 	.word	0x202d2061
    41ec:	6f666e49 	.word	0x6f666e49
    41f0:	74616d72 	.word	0x74616d72
    41f4:	206e6f69 	.word	0x206e6f69
    41f8:	756f6261 	.word	0x756f6261
    41fc:	68742074 	.word	0x68742074
    4200:	64207369 	.word	0x64207369
    4204:	63697665 	.word	0x63697665
    4208:	00000d65 	.word	0x00000d65
    420c:	202d2069 	.word	0x202d2069
    4210:	20433249 	.word	0x20433249
    4214:	6d6d6f63 	.word	0x6d6d6f63
    4218:	0d646e61 	.word	0x0d646e61
    421c:	00000000 	.word	0x00000000
    4220:	202d2071 	.word	0x202d2071
    4224:	75746552 	.word	0x75746552
    4228:	74206e72 	.word	0x74206e72
    422c:	616d206f 	.word	0x616d206f
    4230:	6d206e69 	.word	0x6d206e69
    4234:	20756e65 	.word	0x20756e65
    4238:	61207461 	.word	0x61207461
    423c:	7420796e 	.word	0x7420796e
    4240:	0d656d69 	.word	0x0d656d69
    4244:	00000000 	.word	0x00000000
    4248:	6e69614d 	.word	0x6e69614d
    424c:	6e656d20 	.word	0x6e656d20
    4250:	3e3e2075 	.word	0x3e3e2075
    4254:	65737520 	.word	0x65737520
    4258:	6e692072 	.word	0x6e692072
    425c:	20747570 	.word	0x20747570
    4260:	712f685b 	.word	0x712f685b
    4264:	00203a5d 	.word	0x00203a5d
    4268:	20433249 	.word	0x20433249
    426c:	49203e3e 	.word	0x49203e3e
    4270:	65722073 	.word	0x65722073
    4274:	6f206461 	.word	0x6f206461
    4278:	72772072 	.word	0x72772072
    427c:	3f657469 	.word	0x3f657469
    4280:	2f725b20 	.word	0x2f725b20
    4284:	5d712f77 	.word	0x5d712f77
    4288:	0000203a 	.word	0x0000203a
    428c:	64616572 	.word	0x64616572
    4290:	00000000 	.word	0x00000000
    4294:	28433249 	.word	0x28433249
    4298:	00000000 	.word	0x00000000
    429c:	73257325 	.word	0x73257325
    42a0:	00007325 	.word	0x00007325
    42a4:	3e3e2029 	.word	0x3e3e2029
    42a8:	43324920 	.word	0x43324920
    42ac:	76656420 	.word	0x76656420
    42b0:	20656369 	.word	0x20656369
    42b4:	72646461 	.word	0x72646461
    42b8:	3f737365 	.word	0x3f737365
    42bc:	00783020 	.word	0x00783020
    42c0:	00007825 	.word	0x00007825
    42c4:	73257325 	.word	0x73257325
    42c8:	30257325 	.word	0x30257325
    42cc:	73257832 	.word	0x73257832
    42d0:	00000000 	.word	0x00000000
    42d4:	3e3e2029 	.word	0x3e3e2029
    42d8:	43324920 	.word	0x43324920
    42dc:	73656d20 	.word	0x73656d20
    42e0:	65676173 	.word	0x65676173
    42e4:	64646120 	.word	0x64646120
    42e8:	73736572 	.word	0x73736572
    42ec:	7830203f 	.word	0x7830203f
    42f0:	00000000 	.word	0x00000000
    42f4:	7830202c 	.word	0x7830202c
    42f8:	00000000 	.word	0x00000000
    42fc:	73257325 	.word	0x73257325
    4300:	30257325 	.word	0x30257325
    4304:	73257832 	.word	0x73257832
    4308:	78323025 	.word	0x78323025
    430c:	30257325 	.word	0x30257325
    4310:	00007832 	.word	0x00007832
    4314:	3e3e2029 	.word	0x3e3e2029
    4318:	43324920 	.word	0x43324920
    431c:	73657220 	.word	0x73657220
    4320:	736e6f70 	.word	0x736e6f70
    4324:	30203a65 	.word	0x30203a65
    4328:	00000078 	.word	0x00000078
    432c:	61766e49 	.word	0x61766e49
    4330:	2064696c 	.word	0x2064696c
    4334:	72657375 	.word	0x72657375
    4338:	706e6920 	.word	0x706e6920
    433c:	000d7475 	.word	0x000d7475
    4340:	74697277 	.word	0x74697277
    4344:	00000065 	.word	0x00000065
    4348:	69252525 	.word	0x69252525
    434c:	00000073 	.word	0x00000073
    4350:	0a0d7325 	.word	0x0a0d7325
    4354:	00000000 	.word	0x00000000
    4358:	42000000 	.word	0x42000000
    435c:	42000400 	.word	0x42000400
    4360:	42000800 	.word	0x42000800
    4364:	42000c00 	.word	0x42000c00
    4368:	42001000 	.word	0x42001000
    436c:	43000400 	.word	0x43000400
    4370:	0000109e 	.word	0x0000109e
    4374:	0000109a 	.word	0x0000109a
    4378:	0000109a 	.word	0x0000109a
    437c:	00001104 	.word	0x00001104
    4380:	00001104 	.word	0x00001104
    4384:	000010b4 	.word	0x000010b4
    4388:	000010a4 	.word	0x000010a4
    438c:	000010ba 	.word	0x000010ba
    4390:	000010f2 	.word	0x000010f2

00004394 <_global_impure_ptr>:
    4394:	20000010                                ... 

00004398 <__sf_fake_stderr>:
	...

000043b8 <__sf_fake_stdin>:
	...

000043d8 <__sf_fake_stdout>:
	...
    43f8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4408:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4418:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4428:	00006665 0000444a 0000444d 00004450     ef..JD..MD..PD..
    4438:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
    4448:	2d2b005d 00303000 43005878 534f5000     ].+-.00.xX.C.POS
    4458:	2e005849 20200000                                IX...

0000445d <_ctype_>:
    445d:	20202000 20202020 28282020 20282828     .         ((((( 
    446d:	20202020 20202020 20202020 20202020                     
    447d:	10108820 10101010 10101010 10101010      ...............
    448d:	04040410 04040404 10040404 10101010     ................
    449d:	41411010 41414141 01010101 01010101     ..AAAAAA........
    44ad:	01010101 01010101 01010101 10101010     ................
    44bd:	42421010 42424242 02020202 02020202     ..BBBBBB........
    44cd:	02020202 02020202 02020202 10101010     ................
    44dd:	00000020 00000000 00000000 00000000      ...............
	...

00004560 <_init>:
    4560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4562:	46c0      	nop			; (mov r8, r8)
    4564:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4566:	bc08      	pop	{r3}
    4568:	469e      	mov	lr, r3
    456a:	4770      	bx	lr

0000456c <__init_array_start>:
    456c:	000000dd 	.word	0x000000dd

00004570 <_fini>:
    4570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4572:	46c0      	nop			; (mov r8, r8)
    4574:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4576:	bc08      	pop	{r3}
    4578:	469e      	mov	lr, r3
    457a:	4770      	bx	lr

0000457c <__fini_array_start>:
    457c:	000000b5 	.word	0x000000b5
